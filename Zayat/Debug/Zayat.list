
Zayat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800c8b0  0800c8b0  0001c8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cee0  0800cee0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cee0  0800cee0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cee0  0800cee0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cee0  0800cee0  0001cee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cee4  0800cee4  0001cee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f10  200001e8  0800d0d0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040f8  0800d0d0  000240f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0df  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036e3  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001638  00000000  00000000  0003f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  00041010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004203  00000000  00000000  00042528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011440  00000000  00000000  0004672b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007efe6  00000000  00000000  00057b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  000d6bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c898 	.word	0x0800c898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c898 	.word	0x0800c898

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <Compass_Init>:
accel mag;
u8 buf[10];
int16_t temp1,temp2,temp3;

void Compass_Init()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af02      	add	r7, sp, #8

	HAL_Delay(150);
 8001122:	2096      	movs	r0, #150	; 0x96
 8001124:	f002 fbfa 	bl	800391c <HAL_Delay>


	buf[0]=0x37; //Bypassing
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <Compass_Init+0x11c>)
 800112a:	2237      	movs	r2, #55	; 0x37
 800112c:	701a      	strb	r2, [r3, #0]
	buf[1]=0x02;
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <Compass_Init+0x11c>)
 8001130:	2202      	movs	r2, #2
 8001132:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0b11010000, buf, 2, HAL_MAX_DELAY);
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2302      	movs	r3, #2
 800113c:	4a3e      	ldr	r2, [pc, #248]	; (8001238 <Compass_Init+0x11c>)
 800113e:	21d0      	movs	r1, #208	; 0xd0
 8001140:	483e      	ldr	r0, [pc, #248]	; (800123c <Compass_Init+0x120>)
 8001142:	f002 ff87 	bl	8004054 <HAL_I2C_Master_Transmit>



	xMax= yMax= xMin= yMin=zMax= zMin=0.0;
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <Compass_Init+0x124>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <Compass_Init+0x124>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <Compass_Init+0x128>)
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <Compass_Init+0x128>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <Compass_Init+0x12c>)
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <Compass_Init+0x12c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a3a      	ldr	r2, [pc, #232]	; (800124c <Compass_Init+0x130>)
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <Compass_Init+0x130>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a39      	ldr	r2, [pc, #228]	; (8001250 <Compass_Init+0x134>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <Compass_Init+0x134>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a38      	ldr	r2, [pc, #224]	; (8001254 <Compass_Init+0x138>)
 8001174:	6013      	str	r3, [r2, #0]


	buf[0]=0x00; //initialising the compass
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <Compass_Init+0x11c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	buf[1]=0x70;
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <Compass_Init+0x11c>)
 800117e:	2270      	movs	r2, #112	; 0x70
 8001180:	705a      	strb	r2, [r3, #1]
	buf[2]=0xA0;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <Compass_Init+0x11c>)
 8001184:	22a0      	movs	r2, #160	; 0xa0
 8001186:	709a      	strb	r2, [r3, #2]
	buf[3]=0x00;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <Compass_Init+0x11c>)
 800118a:	2200      	movs	r2, #0
 800118c:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, 0x3C, buf, 4, HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2304      	movs	r3, #4
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <Compass_Init+0x11c>)
 8001198:	213c      	movs	r1, #60	; 0x3c
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <Compass_Init+0x120>)
 800119c:	f002 ff5a 	bl	8004054 <HAL_I2C_Master_Transmit>
//					mag->y = temp3/1.0f;
//
//				HAL_Delay(10);
//		}

	xMax=  -171; xMin=340; yMax= -383; yMin=50; zMax= -256;zMin=255;
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <Compass_Init+0x138>)
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <Compass_Init+0x13c>)
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <Compass_Init+0x130>)
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <Compass_Init+0x140>)
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <Compass_Init+0x134>)
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <Compass_Init+0x144>)
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <Compass_Init+0x12c>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <Compass_Init+0x148>)
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <Compass_Init+0x128>)
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <Compass_Init+0x14c>)
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <Compass_Init+0x124>)
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <Compass_Init+0x150>)
 80011c2:	601a      	str	r2, [r3, #0]
	Mag_x_offset= (xMax+xMin)/2.0;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <Compass_Init+0x138>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <Compass_Init+0x130>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f7ff fcb0 	bl	8000b34 <__addsf3>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe66 	bl	8000eac <__aeabi_fdiv>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <Compass_Init+0x154>)
 80011e6:	601a      	str	r2, [r3, #0]
	Mag_y_offset= (yMax+yMin)/2.0;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <Compass_Init+0x134>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <Compass_Init+0x12c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff fc9e 	bl	8000b34 <__addsf3>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe54 	bl	8000eac <__aeabi_fdiv>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <Compass_Init+0x158>)
 800120a:	601a      	str	r2, [r3, #0]
	Mag_z_offset= (zMax+zMin)/2.0;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <Compass_Init+0x128>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <Compass_Init+0x124>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff fc8c 	bl	8000b34 <__addsf3>
 800121c:	4603      	mov	r3, r0
 800121e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe42 	bl	8000eac <__aeabi_fdiv>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <Compass_Init+0x15c>)
 800122e:	601a      	str	r2, [r3, #0]

//send smth like DONE CALIB


}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20003e64 	.word	0x20003e64
 800123c:	20003f40 	.word	0x20003f40
 8001240:	20003e58 	.word	0x20003e58
 8001244:	20003e3c 	.word	0x20003e3c
 8001248:	20003e50 	.word	0x20003e50
 800124c:	20003e44 	.word	0x20003e44
 8001250:	20003e38 	.word	0x20003e38
 8001254:	20003e48 	.word	0x20003e48
 8001258:	c32b0000 	.word	0xc32b0000
 800125c:	43aa0000 	.word	0x43aa0000
 8001260:	c3bf8000 	.word	0xc3bf8000
 8001264:	42480000 	.word	0x42480000
 8001268:	c3800000 	.word	0xc3800000
 800126c:	437f0000 	.word	0x437f0000
 8001270:	20003e60 	.word	0x20003e60
 8001274:	20003e5c 	.word	0x20003e5c
 8001278:	20003e4c 	.word	0x20003e4c

0800127c <MPU_Init>:
	f32 errorzbody =0 ;

	u8 buf[10];

void MPU_Init(parameters *p, f32 RT)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	RT=0.01;
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <MPU_Init+0x140>)
 8001288:	603b      	str	r3, [r7, #0]
	HAL_Delay(150);
 800128a:	2096      	movs	r0, #150	; 0x96
 800128c:	f002 fb46 	bl	800391c <HAL_Delay>
	buf[0]=SMPRLT_DIV;
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <MPU_Init+0x144>)
 8001292:	2219      	movs	r2, #25
 8001294:	701a      	strb	r2, [r3, #0]
	buf[1]=0x00;
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <MPU_Init+0x144>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 2, HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2302      	movs	r3, #2
 80012a4:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <MPU_Init+0x144>)
 80012a6:	21d0      	movs	r1, #208	; 0xd0
 80012a8:	4846      	ldr	r0, [pc, #280]	; (80013c4 <MPU_Init+0x148>)
 80012aa:	f002 fed3 	bl	8004054 <HAL_I2C_Master_Transmit>

	buf[0]=PWR_MGMT_1;
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <MPU_Init+0x144>)
 80012b0:	226b      	movs	r2, #107	; 0x6b
 80012b2:	701a      	strb	r2, [r3, #0]
	buf[1]=0x01;
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <MPU_Init+0x144>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 2, HAL_MAX_DELAY);
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2302      	movs	r3, #2
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <MPU_Init+0x144>)
 80012c4:	21d0      	movs	r1, #208	; 0xd0
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <MPU_Init+0x148>)
 80012c8:	f002 fec4 	bl	8004054 <HAL_I2C_Master_Transmit>


	buf[0]=GYRO_CONFIG;
 80012cc:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MPU_Init+0x144>)
 80012ce:	221b      	movs	r2, #27
 80012d0:	701a      	strb	r2, [r3, #0]
	buf[1]=0x18;
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <MPU_Init+0x144>)
 80012d4:	2218      	movs	r2, #24
 80012d6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 2, HAL_MAX_DELAY);		//Set FSEL to 3 -> range = -2000 to 2000 degrees per sec.
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2302      	movs	r3, #2
 80012e0:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <MPU_Init+0x144>)
 80012e2:	21d0      	movs	r1, #208	; 0xd0
 80012e4:	4837      	ldr	r0, [pc, #220]	; (80013c4 <MPU_Init+0x148>)
 80012e6:	f002 feb5 	bl	8004054 <HAL_I2C_Master_Transmit>



	buf[0]=ACCEL_CONFIG;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MPU_Init+0x144>)
 80012ec:	221c      	movs	r2, #28
 80012ee:	701a      	strb	r2, [r3, #0]
	buf[1]=0x18;//Set AFS_SEL to 3 -> range = -16g to 16g
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <MPU_Init+0x144>)
 80012f2:	2218      	movs	r2, #24
 80012f4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 2, HAL_MAX_DELAY);
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <MPU_Init+0x144>)
 8001300:	21d0      	movs	r1, #208	; 0xd0
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <MPU_Init+0x148>)
 8001304:	f002 fea6 	bl	8004054 <HAL_I2C_Master_Transmit>

	buf[0]=INT_ENABLE;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MPU_Init+0x144>)
 800130a:	2238      	movs	r2, #56	; 0x38
 800130c:	701a      	strb	r2, [r3, #0]
	buf[1]=0x01;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MPU_Init+0x144>)
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 2, HAL_MAX_DELAY);
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2302      	movs	r3, #2
 800131c:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <MPU_Init+0x144>)
 800131e:	21d0      	movs	r1, #208	; 0xd0
 8001320:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MPU_Init+0x148>)
 8001322:	f002 fe97 	bl	8004054 <HAL_I2C_Master_Transmit>

	// Calibrating IMU



	buf[0]=GYRO_XOUT_H;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MPU_Init+0x144>)
 8001328:	2243      	movs	r2, #67	; 0x43
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <MPU_Init+0x144>)
 8001336:	21d0      	movs	r1, #208	; 0xd0
 8001338:	4822      	ldr	r0, [pc, #136]	; (80013c4 <MPU_Init+0x148>)
 800133a:	f002 fe8b 	bl	8004054 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2306      	movs	r3, #6
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <MPU_Init+0x144>)
 8001348:	21d0      	movs	r1, #208	; 0xd0
 800134a:	481e      	ldr	r0, [pc, #120]	; (80013c4 <MPU_Init+0x148>)
 800134c:	f002 ff80 	bl	8004250 <HAL_I2C_Master_Receive>



	int16_t temp1,temp2,temp3;
				temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MPU_Init+0x144>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MPU_Init+0x144>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	82bb      	strh	r3, [r7, #20]
				temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MPU_Init+0x144>)
 8001364:	789b      	ldrb	r3, [r3, #2]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MPU_Init+0x144>)
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	827b      	strh	r3, [r7, #18]
				temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MPU_Init+0x144>)
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MPU_Init+0x144>)
 800137e:	795b      	ldrb	r3, [r3, #5]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	823b      	strh	r3, [r7, #16]

					p->p = temp1/1.0f;
 8001386:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc86 	bl	8000c9c <__aeabi_i2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	64da      	str	r2, [r3, #76]	; 0x4c

					p->q = temp2/1.0f;
 8001396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fc7e 	bl	8000c9c <__aeabi_i2f>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	651a      	str	r2, [r3, #80]	; 0x50

					p->r = temp3/1.0f;
 80013a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fc76 	bl	8000c9c <__aeabi_i2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54


	for (u16 i=0 ; i<300 ; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	82fb      	strh	r3, [r7, #22]
 80013ba:	e0dd      	b.n	8001578 <MPU_Init+0x2fc>
 80013bc:	3c23d70a 	.word	0x3c23d70a
 80013c0:	20003e64 	.word	0x20003e64
 80013c4:	20003f40 	.word	0x20003f40
	{
		errorp= errorp + p->p;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013cc:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <MPU_Init+0x388>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f7ff fbae 	bl	8000b34 <__addsf3>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b89      	ldr	r3, [pc, #548]	; (8001604 <MPU_Init+0x388>)
 80013de:	601a      	str	r2, [r3, #0]
		errorq= errorq + p->q;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <MPU_Init+0x38c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7ff fba2 	bl	8000b34 <__addsf3>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b84      	ldr	r3, [pc, #528]	; (8001608 <MPU_Init+0x38c>)
 80013f6:	601a      	str	r2, [r3, #0]
		errorr= errorr + p->r;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013fc:	4b83      	ldr	r3, [pc, #524]	; (800160c <MPU_Init+0x390>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff fb96 	bl	8000b34 <__addsf3>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b7f      	ldr	r3, [pc, #508]	; (800160c <MPU_Init+0x390>)
 800140e:	601a      	str	r2, [r3, #0]

		buf[0]=GYRO_XOUT_H;
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <MPU_Init+0x394>)
 8001412:	2243      	movs	r2, #67	; 0x43
 8001414:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <MPU_Init+0x394>)
 8001420:	21d0      	movs	r1, #208	; 0xd0
 8001422:	487c      	ldr	r0, [pc, #496]	; (8001614 <MPU_Init+0x398>)
 8001424:	f002 fe16 	bl	8004054 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2306      	movs	r3, #6
 8001430:	4a77      	ldr	r2, [pc, #476]	; (8001610 <MPU_Init+0x394>)
 8001432:	21d0      	movs	r1, #208	; 0xd0
 8001434:	4877      	ldr	r0, [pc, #476]	; (8001614 <MPU_Init+0x398>)
 8001436:	f002 ff0b 	bl	8004250 <HAL_I2C_Master_Receive>
			int16_t temp1,temp2,temp3;
			temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 800143a:	4b75      	ldr	r3, [pc, #468]	; (8001610 <MPU_Init+0x394>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <MPU_Init+0x394>)
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	81fb      	strh	r3, [r7, #14]
			temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 800144c:	4b70      	ldr	r3, [pc, #448]	; (8001610 <MPU_Init+0x394>)
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <MPU_Init+0x394>)
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	81bb      	strh	r3, [r7, #12]
			temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 800145e:	4b6c      	ldr	r3, [pc, #432]	; (8001610 <MPU_Init+0x394>)
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <MPU_Init+0x394>)
 8001468:	795b      	ldrb	r3, [r3, #5]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	817b      	strh	r3, [r7, #10]

				p->p = temp1/1.0f;
 8001470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc11 	bl	8000c9c <__aeabi_i2f>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	64da      	str	r2, [r3, #76]	; 0x4c

				p->q = temp2/1.0f;
 8001480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc09 	bl	8000c9c <__aeabi_i2f>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	651a      	str	r2, [r3, #80]	; 0x50

				p->r = temp3/1.0f;
 8001490:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc01 	bl	8000c9c <__aeabi_i2f>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	655a      	str	r2, [r3, #84]	; 0x54


				buf[0]=ACCEL_XOUT_H;
 80014a0:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <MPU_Init+0x394>)
 80014a2:	223b      	movs	r2, #59	; 0x3b
 80014a4:	701a      	strb	r2, [r3, #0]
					HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	4a58      	ldr	r2, [pc, #352]	; (8001610 <MPU_Init+0x394>)
 80014b0:	21d0      	movs	r1, #208	; 0xd0
 80014b2:	4858      	ldr	r0, [pc, #352]	; (8001614 <MPU_Init+0x398>)
 80014b4:	f002 fdce 	bl	8004054 <HAL_I2C_Master_Transmit>
					HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2306      	movs	r3, #6
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <MPU_Init+0x394>)
 80014c2:	21d0      	movs	r1, #208	; 0xd0
 80014c4:	4853      	ldr	r0, [pc, #332]	; (8001614 <MPU_Init+0x398>)
 80014c6:	f002 fec3 	bl	8004250 <HAL_I2C_Master_Receive>

					temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <MPU_Init+0x394>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <MPU_Init+0x394>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	81fb      	strh	r3, [r7, #14]
					temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MPU_Init+0x394>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <MPU_Init+0x394>)
 80014e6:	78db      	ldrb	r3, [r3, #3]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	81bb      	strh	r3, [r7, #12]
					temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <MPU_Init+0x394>)
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <MPU_Init+0x394>)
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	817b      	strh	r3, [r7, #10]


				errorxbody= errorxbody + temp1/1.0f;
 8001500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fbc9 	bl	8000c9c <__aeabi_i2f>
 800150a:	4602      	mov	r2, r0
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <MPU_Init+0x39c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	4610      	mov	r0, r2
 8001514:	f7ff fb0e 	bl	8000b34 <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <MPU_Init+0x39c>)
 800151e:	601a      	str	r2, [r3, #0]
				errorybody= errorybody + temp2/1.0f;
 8001520:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbb9 	bl	8000c9c <__aeabi_i2f>
 800152a:	4602      	mov	r2, r0
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <MPU_Init+0x3a0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f7ff fafe 	bl	8000b34 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <MPU_Init+0x3a0>)
 800153e:	601a      	str	r2, [r3, #0]
				errorzbody= errorzbody + temp3/1.0f-2048;
 8001540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fba9 	bl	8000c9c <__aeabi_i2f>
 800154a:	4602      	mov	r2, r0
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MPU_Init+0x3a4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f7ff faee 	bl	8000b34 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fae6 	bl	8000b30 <__aeabi_fsub>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MPU_Init+0x3a4>)
 800156a:	601a      	str	r2, [r3, #0]





			HAL_Delay(3);
 800156c:	2003      	movs	r0, #3
 800156e:	f002 f9d5 	bl	800391c <HAL_Delay>
	for (u16 i=0 ; i<300 ; i++)
 8001572:	8afb      	ldrh	r3, [r7, #22]
 8001574:	3301      	adds	r3, #1
 8001576:	82fb      	strh	r3, [r7, #22]
 8001578:	8afb      	ldrh	r3, [r7, #22]
 800157a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800157e:	f4ff af23 	bcc.w	80013c8 <MPU_Init+0x14c>
	}
	errorp=errorp/300.0;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MPU_Init+0x388>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4927      	ldr	r1, [pc, #156]	; (8001624 <MPU_Init+0x3a8>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc8f 	bl	8000eac <__aeabi_fdiv>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MPU_Init+0x388>)
 8001594:	601a      	str	r2, [r3, #0]
	errorq=errorq/300.0;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MPU_Init+0x38c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4922      	ldr	r1, [pc, #136]	; (8001624 <MPU_Init+0x3a8>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc85 	bl	8000eac <__aeabi_fdiv>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MPU_Init+0x38c>)
 80015a8:	601a      	str	r2, [r3, #0]
	errorr=errorr/300.0;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MPU_Init+0x390>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	491d      	ldr	r1, [pc, #116]	; (8001624 <MPU_Init+0x3a8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc7b 	bl	8000eac <__aeabi_fdiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MPU_Init+0x390>)
 80015bc:	601a      	str	r2, [r3, #0]
	errorxbody= errorxbody /300.0;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MPU_Init+0x39c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4918      	ldr	r1, [pc, #96]	; (8001624 <MPU_Init+0x3a8>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fc71 	bl	8000eac <__aeabi_fdiv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MPU_Init+0x39c>)
 80015d0:	601a      	str	r2, [r3, #0]
	errorybody= errorybody /300.0;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <MPU_Init+0x3a0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4913      	ldr	r1, [pc, #76]	; (8001624 <MPU_Init+0x3a8>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc67 	bl	8000eac <__aeabi_fdiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MPU_Init+0x3a0>)
 80015e4:	601a      	str	r2, [r3, #0]
	errorzbody= errorzbody /300.0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MPU_Init+0x3a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <MPU_Init+0x3a8>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fc5d 	bl	8000eac <__aeabi_fdiv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MPU_Init+0x3a4>)
 80015f8:	601a      	str	r2, [r3, #0]


}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000204 	.word	0x20000204
 8001608:	20000208 	.word	0x20000208
 800160c:	2000020c 	.word	0x2000020c
 8001610:	20003e64 	.word	0x20003e64
 8001614:	20003f40 	.word	0x20003f40
 8001618:	2000021c 	.word	0x2000021c
 800161c:	20000220 	.word	0x20000220
 8001620:	20000224 	.word	0x20000224
 8001624:	43960000 	.word	0x43960000

08001628 <Accel_calibration>:
void Accel_calibration(parameters *p, f32 RT)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	RT=0.01;
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <Accel_calibration+0x154>)
 8001634:	603b      	str	r3, [r7, #0]
		f32 q[4], euler[3];
		Read_Gyro_Values(p, RT);
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f92d 	bl	8001898 <Read_Gyro_Values>
		Read_Accel_Values(p);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f8a6 	bl	8001790 <Read_Accel_Values>
		euler[0]= p->phib;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	61bb      	str	r3, [r7, #24]
		euler[1]= p->thetab;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	61fb      	str	r3, [r7, #28]
		euler[2]= p->psib;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	623b      	str	r3, [r7, #32]
		Quaternion(q, euler);
 8001656:	f107 0218 	add.w	r2, r7, #24
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f001 f8bd 	bl	80027e0 <Quaternion>
		f32 acc[3] = {p->x_dot_dot, p->y_dot_dot, p->z_dot_dot};
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	617b      	str	r3, [r7, #20]

		Rotate_BtoW_acc(acc, q);
 8001678:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fcd0 	bl	8003028 <Rotate_BtoW_acc>
		for (u16 i=0 ; i<300 ; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800168c:	e04f      	b.n	800172e <Accel_calibration+0x106>
		{
			errorx= errorx + acc[0];
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <Accel_calibration+0x158>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f7ff fa4c 	bl	8000b34 <__addsf3>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <Accel_calibration+0x158>)
 80016a2:	601a      	str	r2, [r3, #0]
			errory= errory + acc[1];
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <Accel_calibration+0x15c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fa41 	bl	8000b34 <__addsf3>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <Accel_calibration+0x15c>)
 80016b8:	601a      	str	r2, [r3, #0]
			errorz= errorz + acc[2];
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <Accel_calibration+0x160>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f7ff fa36 	bl	8000b34 <__addsf3>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <Accel_calibration+0x160>)
 80016ce:	601a      	str	r2, [r3, #0]




			Read_Gyro_Values(p, RT);
 80016d0:	6839      	ldr	r1, [r7, #0]
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8e0 	bl	8001898 <Read_Gyro_Values>
			Read_Accel_Values(p);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f859 	bl	8001790 <Read_Accel_Values>
			euler[0] = p->phib; euler[1] = p->thetab; euler[2] = p->psib;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	623b      	str	r3, [r7, #32]
			Quaternion(q, euler);
 80016f0:	f107 0218 	add.w	r2, r7, #24
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 f870 	bl	80027e0 <Quaternion>
			acc[0] = p->x_dot_dot; acc[1] = p->y_dot_dot; acc[2] = p->z_dot_dot;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	617b      	str	r3, [r7, #20]
			Rotate_BtoW_acc(acc, q);
 8001712:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fc83 	bl	8003028 <Rotate_BtoW_acc>
				HAL_Delay(3);
 8001722:	2003      	movs	r0, #3
 8001724:	f002 f8fa 	bl	800391c <HAL_Delay>
		for (u16 i=0 ; i<300 ; i++)
 8001728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800172a:	3301      	adds	r3, #1
 800172c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800172e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001730:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001734:	d3ab      	bcc.n	800168e <Accel_calibration+0x66>
		}
		errorx=errorx/300.0;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <Accel_calibration+0x158>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4914      	ldr	r1, [pc, #80]	; (800178c <Accel_calibration+0x164>)
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fbb5 	bl	8000eac <__aeabi_fdiv>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <Accel_calibration+0x158>)
 8001748:	601a      	str	r2, [r3, #0]
		errory=errory/300.0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <Accel_calibration+0x15c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	490f      	ldr	r1, [pc, #60]	; (800178c <Accel_calibration+0x164>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fbab 	bl	8000eac <__aeabi_fdiv>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <Accel_calibration+0x15c>)
 800175c:	601a      	str	r2, [r3, #0]
		errorz=errorz/300.0;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <Accel_calibration+0x160>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	490a      	ldr	r1, [pc, #40]	; (800178c <Accel_calibration+0x164>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fba1 	bl	8000eac <__aeabi_fdiv>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <Accel_calibration+0x160>)
 8001770:	601a      	str	r2, [r3, #0]

}
 8001772:	bf00      	nop
 8001774:	3738      	adds	r7, #56	; 0x38
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	3c23d70a 	.word	0x3c23d70a
 8001780:	20000210 	.word	0x20000210
 8001784:	20000214 	.word	0x20000214
 8001788:	20000218 	.word	0x20000218
 800178c:	43960000 	.word	0x43960000

08001790 <Read_Accel_Values>:
void Read_Accel_Values(parameters *p)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af02      	add	r7, sp, #8
 8001796:	6078      	str	r0, [r7, #4]

	buf[0]=ACCEL_XOUT_H;
 8001798:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <Read_Accel_Values+0xf4>)
 800179a:	223b      	movs	r2, #59	; 0x3b
 800179c:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	4a37      	ldr	r2, [pc, #220]	; (8001884 <Read_Accel_Values+0xf4>)
 80017a8:	21d0      	movs	r1, #208	; 0xd0
 80017aa:	4837      	ldr	r0, [pc, #220]	; (8001888 <Read_Accel_Values+0xf8>)
 80017ac:	f002 fc52 	bl	8004054 <HAL_I2C_Master_Transmit>
		 HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2306      	movs	r3, #6
 80017b8:	4a32      	ldr	r2, [pc, #200]	; (8001884 <Read_Accel_Values+0xf4>)
 80017ba:	21d0      	movs	r1, #208	; 0xd0
 80017bc:	4832      	ldr	r0, [pc, #200]	; (8001888 <Read_Accel_Values+0xf8>)
 80017be:	f002 fd47 	bl	8004250 <HAL_I2C_Master_Receive>
		int16_t temp1,temp2,temp3;
		temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <Read_Accel_Values+0xf4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <Read_Accel_Values+0xf4>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	81fb      	strh	r3, [r7, #14]
		temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <Read_Accel_Values+0xf4>)
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <Read_Accel_Values+0xf4>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	81bb      	strh	r3, [r7, #12]
		temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <Read_Accel_Values+0xf4>)
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <Read_Accel_Values+0xf4>)
 80017f0:	795b      	ldrb	r3, [r3, #5]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	817b      	strh	r3, [r7, #10]
			p->x_dot_dot = (temp1-errorxbody)/2048.0;
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa4d 	bl	8000c9c <__aeabi_i2f>
 8001802:	4602      	mov	r2, r0
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <Read_Accel_Values+0xfc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff f990 	bl	8000b30 <__aeabi_fsub>
 8001810:	4603      	mov	r3, r0
 8001812:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb48 	bl	8000eac <__aeabi_fdiv>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
			p->y_dot_dot = (temp2-errorybody)/2048.0;
 8001824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fa37 	bl	8000c9c <__aeabi_i2f>
 800182e:	4602      	mov	r2, r0
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <Read_Accel_Values+0x100>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f7ff f97a 	bl	8000b30 <__aeabi_fsub>
 800183c:	4603      	mov	r3, r0
 800183e:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb32 	bl	8000eac <__aeabi_fdiv>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	61da      	str	r2, [r3, #28]
			p->z_dot_dot = (temp3-errorzbody)/2048.0;
 8001850:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa21 	bl	8000c9c <__aeabi_i2f>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <Read_Accel_Values+0x104>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f7ff f964 	bl	8000b30 <__aeabi_fsub>
 8001868:	4603      	mov	r3, r0
 800186a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb1c 	bl	8000eac <__aeabi_fdiv>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	621a      	str	r2, [r3, #32]
//			p->x_dot_dot = (temp1)/2048.0f;
//			p->y_dot_dot = (temp2)/2048.0f;
//			p->z_dot_dot = (temp3)/2048.0f;

}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20003e64 	.word	0x20003e64
 8001888:	20003f40 	.word	0x20003f40
 800188c:	2000021c 	.word	0x2000021c
 8001890:	20000220 	.word	0x20000220
 8001894:	20000224 	.word	0x20000224

08001898 <Read_Gyro_Values>:

void Read_Gyro_Values(parameters *p, f32 RT)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]

		RT=0.01;
 80018a2:	4ba9      	ldr	r3, [pc, #676]	; (8001b48 <Read_Gyro_Values+0x2b0>)
 80018a4:	603b      	str	r3, [r7, #0]
		buf[0]=GYRO_XOUT_H;
 80018a6:	4ba9      	ldr	r3, [pc, #676]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018a8:	2243      	movs	r2, #67	; 0x43
 80018aa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	4aa5      	ldr	r2, [pc, #660]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018b6:	21d0      	movs	r1, #208	; 0xd0
 80018b8:	48a5      	ldr	r0, [pc, #660]	; (8001b50 <Read_Gyro_Values+0x2b8>)
 80018ba:	f002 fbcb 	bl	8004054 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2306      	movs	r3, #6
 80018c6:	4aa1      	ldr	r2, [pc, #644]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018c8:	21d0      	movs	r1, #208	; 0xd0
 80018ca:	48a1      	ldr	r0, [pc, #644]	; (8001b50 <Read_Gyro_Values+0x2b8>)
 80018cc:	f002 fcc0 	bl	8004250 <HAL_I2C_Master_Receive>


		int16_t temp1,temp2,temp3;
					temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 80018d0:	4b9e      	ldr	r3, [pc, #632]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b9c      	ldr	r3, [pc, #624]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	83fb      	strh	r3, [r7, #30]
					temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 80018e2:	4b9a      	ldr	r3, [pc, #616]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b98      	ldr	r3, [pc, #608]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	83bb      	strh	r3, [r7, #28]
					temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 80018f4:	4b95      	ldr	r3, [pc, #596]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	4b93      	ldr	r3, [pc, #588]	; (8001b4c <Read_Gyro_Values+0x2b4>)
 80018fe:	795b      	ldrb	r3, [r3, #5]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	837b      	strh	r3, [r7, #26]

						p->p = temp1/1.0f;
 8001906:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9c6 	bl	8000c9c <__aeabi_i2f>
 8001910:	4602      	mov	r2, r0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	64da      	str	r2, [r3, #76]	; 0x4c

						p->q = temp2/1.0f;
 8001916:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9be 	bl	8000c9c <__aeabi_i2f>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	651a      	str	r2, [r3, #80]	; 0x50

						p->r = temp3/1.0f;
 8001926:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f9b6 	bl	8000c9c <__aeabi_i2f>
 8001930:	4602      	mov	r2, r0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
		p->p = ((p->p-errorp)/16.4);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <Read_Gyro_Values+0x2bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff f8f5 	bl	8000b30 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd6d 	bl	8000428 <__aeabi_f2d>
 800194e:	a37a      	add	r3, pc, #488	; (adr r3, 8001b38 <Read_Gyro_Values+0x2a0>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe feea 	bl	800072c <__aeabi_ddiv>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	f7ff f892 	bl	8000a88 <__aeabi_d2f>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	64da      	str	r2, [r3, #76]	; 0x4c
		p->q = ((p->q-errorq)/16.4);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800196e:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <Read_Gyro_Values+0x2c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff f8db 	bl	8000b30 <__aeabi_fsub>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd53 	bl	8000428 <__aeabi_f2d>
 8001982:	a36d      	add	r3, pc, #436	; (adr r3, 8001b38 <Read_Gyro_Values+0x2a0>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fed0 	bl	800072c <__aeabi_ddiv>
 800198c:	4603      	mov	r3, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4618      	mov	r0, r3
 8001992:	4621      	mov	r1, r4
 8001994:	f7ff f878 	bl	8000a88 <__aeabi_d2f>
 8001998:	4602      	mov	r2, r0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	651a      	str	r2, [r3, #80]	; 0x50
		p->r = ((p->r-errorr)/16.4);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019a2:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <Read_Gyro_Values+0x2c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f7ff f8c1 	bl	8000b30 <__aeabi_fsub>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd39 	bl	8000428 <__aeabi_f2d>
 80019b6:	a360      	add	r3, pc, #384	; (adr r3, 8001b38 <Read_Gyro_Values+0x2a0>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe feb6 	bl	800072c <__aeabi_ddiv>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	4618      	mov	r0, r3
 80019c6:	4621      	mov	r1, r4
 80019c8:	f7ff f85e 	bl	8000a88 <__aeabi_d2f>
 80019cc:	4602      	mov	r2, r0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
	//Body frame phi and theta
	p->phib = p->phib+RT*p->p ;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f9b1 	bl	8000d44 <__aeabi_fmul>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff f8a4 	bl	8000b34 <__addsf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
	p->thetab = p->thetab+RT*p->q;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9a0 	bl	8000d44 <__aeabi_fmul>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff f893 	bl	8000b34 <__addsf3>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34
	p->psib = p->psib+RT*p->r;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f98f 	bl	8000d44 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff f882 	bl	8000b34 <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38

	f32 first_term;
	f32 second_term;
	first_term = 0.98;
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <Read_Gyro_Values+0x2c8>)
 8001a3a:	617b      	str	r3, [r7, #20]
	second_term = 0.02;
 8001a3c:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <Read_Gyro_Values+0x2cc>)
 8001a3e:	613b      	str	r3, [r7, #16]
	f32 accelPhi;
	f32 acceltheta;


    accelPhi = atan2(p->y_dot_dot,sqrt(p->x_dot_dot * p->x_dot_dot + p->z_dot_dot* p->z_dot_dot)) * 57.3;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fcef 	bl	8000428 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff f973 	bl	8000d44 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461e      	mov	r6, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f7ff f969 	bl	8000d44 <__aeabi_fmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4619      	mov	r1, r3
 8001a76:	4630      	mov	r0, r6
 8001a78:	f7ff f85c 	bl	8000b34 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f009 fbe4 	bl	800b258 <sqrt>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f009 fbdc 	bl	800b254 <atan2>
 8001a9c:	a328      	add	r3, pc, #160	; (adr r3, 8001b40 <Read_Gyro_Values+0x2a8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fd19 	bl	80004d8 <__aeabi_dmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460c      	mov	r4, r1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4621      	mov	r1, r4
 8001aae:	f7fe ffeb 	bl	8000a88 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]
   acceltheta = atan2(-p->x_dot_dot, sqrt(p->y_dot_dot * p->y_dot_dot + p->z_dot_dot * p->z_dot_dot)) * 57.3;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fcb2 	bl	8000428 <__aeabi_f2d>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff f936 	bl	8000d44 <__aeabi_fmul>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461e      	mov	r6, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7ff f92c 	bl	8000d44 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4630      	mov	r0, r6
 8001af2:	f7ff f81f 	bl	8000b34 <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc95 	bl	8000428 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f009 fba7 	bl	800b258 <sqrt>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f009 fb9f 	bl	800b254 <atan2>
 8001b16:	a30a      	add	r3, pc, #40	; (adr r3, 8001b40 <Read_Gyro_Values+0x2a8>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fcdc 	bl	80004d8 <__aeabi_dmul>
 8001b20:	4603      	mov	r3, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4618      	mov	r0, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	f7fe ffae 	bl	8000a88 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60bb      	str	r3, [r7, #8]


   p->phib = first_term * p->phib + second_term * accelPhi;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	e019      	b.n	8001b68 <Read_Gyro_Values+0x2d0>
 8001b34:	f3af 8000 	nop.w
 8001b38:	66666666 	.word	0x66666666
 8001b3c:	40306666 	.word	0x40306666
 8001b40:	66666666 	.word	0x66666666
 8001b44:	404ca666 	.word	0x404ca666
 8001b48:	3c23d70a 	.word	0x3c23d70a
 8001b4c:	20003e64 	.word	0x20003e64
 8001b50:	20003f40 	.word	0x20003f40
 8001b54:	20000204 	.word	0x20000204
 8001b58:	20000208 	.word	0x20000208
 8001b5c:	2000020c 	.word	0x2000020c
 8001b60:	3f7ae148 	.word	0x3f7ae148
 8001b64:	3ca3d70a 	.word	0x3ca3d70a
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f8e9 	bl	8000d44 <__aeabi_fmul>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461c      	mov	r4, r3
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	6938      	ldr	r0, [r7, #16]
 8001b7a:	f7ff f8e3 	bl	8000d44 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7fe ffd6 	bl	8000b34 <__addsf3>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
    p->thetab = first_term * p->thetab + second_term * acceltheta;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	6979      	ldr	r1, [r7, #20]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8d4 	bl	8000d44 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461c      	mov	r4, r3
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6938      	ldr	r0, [r7, #16]
 8001ba4:	f7ff f8ce 	bl	8000d44 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7fe ffc1 	bl	8000b34 <__addsf3>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
	if(p->psib > 180.0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4914      	ldr	r1, [pc, #80]	; (8001c10 <Read_Gyro_Values+0x378>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fa7b 	bl	80010bc <__aeabi_fcmpgt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <Read_Gyro_Values+0x348>
		p->psib -= 360;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	4910      	ldr	r1, [pc, #64]	; (8001c14 <Read_Gyro_Values+0x37c>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe ffac 	bl	8000b30 <__aeabi_fsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
	if(p->psib < -180.0)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <Read_Gyro_Values+0x380>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa4a 	bl	8001080 <__aeabi_fcmplt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d100      	bne.n	8001bf4 <Read_Gyro_Values+0x35c>
		p->psib += 360;

}
 8001bf2:	e009      	b.n	8001c08 <Read_Gyro_Values+0x370>
		p->psib += 360;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <Read_Gyro_Values+0x37c>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe ff9a 	bl	8000b34 <__addsf3>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c08:	bf00      	nop
 8001c0a:	3724      	adds	r7, #36	; 0x24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c10:	43340000 	.word	0x43340000
 8001c14:	43b40000 	.word	0x43b40000
 8001c18:	c3340000 	.word	0xc3340000
 8001c1c:	00000000 	.word	0x00000000

08001c20 <imu_Comp_Filter>:

void imu_Comp_Filter(parameters *p, f32 RT)
{
 8001c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c24:	b099      	sub	sp, #100	; 0x64
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	RT=0.01;
 8001c2c:	4bae      	ldr	r3, [pc, #696]	; (8001ee8 <imu_Comp_Filter+0x2c8>)
 8001c2e:	603b      	str	r3, [r7, #0]
	f32 first_term;
	f32 second_term;
	f32 accelPhi;
	f32 acceltheta;
	//euler[0] = p->phi; euler[1] = p->theta; euler[2] = p->psi;
	euler[0]= p->phib;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	euler[1]= p->thetab;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
	euler[2]= p->psib;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34

	Quaternion(q, euler);
 8001c42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fdc7 	bl	80027e0 <Quaternion>
	ang_vel[0] = p->p; ang_vel[1] = p->q; ang_vel[2] = p->r;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 acc_vel[3];
	acc_vel[0]= p->x_dot_dot;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	617b      	str	r3, [r7, #20]
	acc_vel[1]= p->y_dot_dot;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	61bb      	str	r3, [r7, #24]
	acc_vel[2]= p->z_dot_dot;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	61fb      	str	r3, [r7, #28]
	Rotate_BtoW(ang_vel,q);
 8001c76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 f825 	bl	8002cd0 <Rotate_BtoW>
//----------------------------------------------------------------------------

	//Quaternion(q, euler);
	//idk khaled told me to add them idk what they do but seems like they use rotated accel
	f32 acc[3] = {p->x_dot_dot, p->y_dot_dot, p->z_dot_dot};
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	613b      	str	r3, [r7, #16]
	Rotate_BtoW(acc, q); // there was a line to get q but i believe it's already there
 8001c98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 f814 	bl	8002cd0 <Rotate_BtoW>

//	acc[0] -= errorx;
//	acc[1]  -= errory;
//	acc[2]  -= errorz;

	p->x += RT * p->x_dot;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681c      	ldr	r4, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f846 	bl	8000d44 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7fe ff39 	bl	8000b34 <__addsf3>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
	p->y += RT * p->y_dot;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685c      	ldr	r4, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f835 	bl	8000d44 <__aeabi_fmul>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7fe ff28 	bl	8000b34 <__addsf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	605a      	str	r2, [r3, #4]
	p->z += RT * p->z_dot;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689c      	ldr	r4, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f824 	bl	8000d44 <__aeabi_fmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7fe ff17 	bl	8000b34 <__addsf3>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

	p->x_dot += RT * (acc[0] ) * 9.812;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb88 	bl	8000428 <__aeabi_f2d>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f80f 	bl	8000d44 <__aeabi_fmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fb7d 	bl	8000428 <__aeabi_f2d>
 8001d2e:	a36a      	add	r3, pc, #424	; (adr r3, 8001ed8 <imu_Comp_Filter+0x2b8>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fbd0 	bl	80004d8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fa14 	bl	800016c <__adddf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f7fe fe9c 	bl	8000a88 <__aeabi_d2f>
 8001d50:	4602      	mov	r2, r0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60da      	str	r2, [r3, #12]
	p->y_dot += RT * (acc[1] ) * 9.812;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb64 	bl	8000428 <__aeabi_f2d>
 8001d60:	4604      	mov	r4, r0
 8001d62:	460d      	mov	r5, r1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ffeb 	bl	8000d44 <__aeabi_fmul>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb59 	bl	8000428 <__aeabi_f2d>
 8001d76:	a358      	add	r3, pc, #352	; (adr r3, 8001ed8 <imu_Comp_Filter+0x2b8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fbac 	bl	80004d8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe f9f0 	bl	800016c <__adddf3>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	4618      	mov	r0, r3
 8001d92:	4621      	mov	r1, r4
 8001d94:	f7fe fe78 	bl	8000a88 <__aeabi_d2f>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
	p->z_dot += RT * (acc[2] ) * 9.812;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb40 	bl	8000428 <__aeabi_f2d>
 8001da8:	4604      	mov	r4, r0
 8001daa:	460d      	mov	r5, r1
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ffc7 	bl	8000d44 <__aeabi_fmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb35 	bl	8000428 <__aeabi_f2d>
 8001dbe:	a346      	add	r3, pc, #280	; (adr r3, 8001ed8 <imu_Comp_Filter+0x2b8>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fb88 	bl	80004d8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe f9cc 	bl	800016c <__adddf3>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f7fe fe54 	bl	8000a88 <__aeabi_d2f>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	615a      	str	r2, [r3, #20]


	// Integrating the p q r to get angles
	p->phi = p->phi +ang_vel[0]*RT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe ffa8 	bl	8000d44 <__aeabi_fmul>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7fe fe9b 	bl	8000b34 <__addsf3>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
	p->theta =p->theta+ ang_vel[1]*RT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff98 	bl	8000d44 <__aeabi_fmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7fe fe8b 	bl	8000b34 <__addsf3>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
	p->psi=p->psib;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
	//p->psi =p->psi+ ang_vel[2]*RT;

	// Accelometer from body to world
	f32 temp1 = cos(-p->psi*0.0174532)*p->x_dot_dot + sin(-p->psi*0.0174532)*p->y_dot_dot;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe faf6 	bl	8000428 <__aeabi_f2d>
 8001e3c:	a328      	add	r3, pc, #160	; (adr r3, 8001ee0 <imu_Comp_Filter+0x2c0>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fb49 	bl	80004d8 <__aeabi_dmul>
 8001e46:	4603      	mov	r3, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	f009 f991 	bl	800b174 <cos>
 8001e52:	4604      	mov	r4, r0
 8001e54:	460d      	mov	r5, r1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fae4 	bl	8000428 <__aeabi_f2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fb36 	bl	80004d8 <__aeabi_dmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	4625      	mov	r5, r4
 8001e72:	461c      	mov	r4, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fad3 	bl	8000428 <__aeabi_f2d>
 8001e82:	a317      	add	r3, pc, #92	; (adr r3, 8001ee0 <imu_Comp_Filter+0x2c0>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb26 	bl	80004d8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f009 f9a4 	bl	800b1e0 <sin>
 8001e98:	4680      	mov	r8, r0
 8001e9a:	4689      	mov	r9, r1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fac1 	bl	8000428 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe fb13 	bl	80004d8 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe f957 	bl	800016c <__adddf3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	f7fe fddf 	bl	8000a88 <__aeabi_d2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
	f32 temp2 = -sin(-p->psi*0.0174532)*p->x_dot_dot + cos(-p->psi*0.0174532)*p->y_dot_dot;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	e00b      	b.n	8001eec <imu_Comp_Filter+0x2cc>
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	76c8b439 	.word	0x76c8b439
 8001edc:	40239fbe 	.word	0x40239fbe
 8001ee0:	6cd799af 	.word	0x6cd799af
 8001ee4:	3f91df40 	.word	0x3f91df40
 8001ee8:	3c23d70a 	.word	0x3c23d70a
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fa9b 	bl	8000428 <__aeabi_f2d>
 8001ef2:	a38b      	add	r3, pc, #556	; (adr r3, 8002120 <imu_Comp_Filter+0x500>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe faee 	bl	80004d8 <__aeabi_dmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f009 f96c 	bl	800b1e0 <sin>
 8001f08:	4604      	mov	r4, r0
 8001f0a:	460d      	mov	r5, r1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fa89 	bl	8000428 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f7fe fadb 	bl	80004d8 <__aeabi_dmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	460c      	mov	r4, r1
 8001f26:	4625      	mov	r5, r4
 8001f28:	461c      	mov	r4, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fa78 	bl	8000428 <__aeabi_f2d>
 8001f38:	a379      	add	r3, pc, #484	; (adr r3, 8002120 <imu_Comp_Filter+0x500>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe facb 	bl	80004d8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f009 f913 	bl	800b174 <cos>
 8001f4e:	4680      	mov	r8, r0
 8001f50:	4689      	mov	r9, r1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa66 	bl	8000428 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4640      	mov	r0, r8
 8001f62:	4649      	mov	r1, r9
 8001f64:	f7fe fab8 	bl	80004d8 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe f8fc 	bl	800016c <__adddf3>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd84 	bl	8000a88 <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	65bb      	str	r3, [r7, #88]	; 0x58
	acc_vel[0]=temp1;
 8001f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f86:	617b      	str	r3, [r7, #20]
	acc_vel[1]=temp2;
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8a:	61bb      	str	r3, [r7, #24]


	// Angles from Acc
    accelPhi = atan2(acc_vel[1],sqrt(acc_vel[0] * acc_vel[0] + acc_vel[2]* acc_vel[2])) * 57.3;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa4a 	bl	8000428 <__aeabi_f2d>
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fed0 	bl	8000d44 <__aeabi_fmul>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461e      	mov	r6, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fec8 	bl	8000d44 <__aeabi_fmul>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4630      	mov	r0, r6
 8001fba:	f7fe fdbb 	bl	8000b34 <__addsf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa31 	bl	8000428 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f009 f943 	bl	800b258 <sqrt>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f009 f93b 	bl	800b254 <atan2>
 8001fde:	a352      	add	r3, pc, #328	; (adr r3, 8002128 <imu_Comp_Filter+0x508>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fa78 	bl	80004d8 <__aeabi_dmul>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	460c      	mov	r4, r1
 8001fec:	4618      	mov	r0, r3
 8001fee:	4621      	mov	r1, r4
 8001ff0:	f7fe fd4a 	bl	8000a88 <__aeabi_d2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	657b      	str	r3, [r7, #84]	; 0x54
   acceltheta = atan2(-acc_vel[0], sqrt(acc_vel[1] * acc_vel[1] + acc_vel[2] * acc_vel[2])) * 57.3;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa12 	bl	8000428 <__aeabi_f2d>
 8002004:	4604      	mov	r4, r0
 8002006:	460d      	mov	r5, r1
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe98 	bl	8000d44 <__aeabi_fmul>
 8002014:	4603      	mov	r3, r0
 8002016:	461e      	mov	r6, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe90 	bl	8000d44 <__aeabi_fmul>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	4630      	mov	r0, r6
 800202a:	f7fe fd83 	bl	8000b34 <__addsf3>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f9f9 	bl	8000428 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f009 f90b 	bl	800b258 <sqrt>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4620      	mov	r0, r4
 8002048:	4629      	mov	r1, r5
 800204a:	f009 f903 	bl	800b254 <atan2>
 800204e:	a336      	add	r3, pc, #216	; (adr r3, 8002128 <imu_Comp_Filter+0x508>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa40 	bl	80004d8 <__aeabi_dmul>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	4618      	mov	r0, r3
 800205e:	4621      	mov	r1, r4
 8002060:	f7fe fd12 	bl	8000a88 <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	653b      	str	r3, [r7, #80]	; 0x50

	 first_term = 0.98; ////////////////////
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <imu_Comp_Filter+0x510>)
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
	 second_term = 0.02; //////////////////
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <imu_Comp_Filter+0x514>)
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48

   // Comp Filter
    p->phi = first_term * p->phi + second_term * accelPhi;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fe64 	bl	8000d44 <__aeabi_fmul>
 800207c:	4603      	mov	r3, r0
 800207e:	461c      	mov	r4, r3
 8002080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002082:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002084:	f7fe fe5e 	bl	8000d44 <__aeabi_fmul>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f7fe fd51 	bl	8000b34 <__addsf3>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
    p->theta = first_term * p->theta + second_term * acceltheta;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fe4f 	bl	8000d44 <__aeabi_fmul>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461c      	mov	r4, r3
 80020aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020ae:	f7fe fe49 	bl	8000d44 <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4619      	mov	r1, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7fe fd3c 	bl	8000b34 <__addsf3>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
	if(p->psi > 180.0)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	491b      	ldr	r1, [pc, #108]	; (8002138 <imu_Comp_Filter+0x518>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fff6 	bl	80010bc <__aeabi_fcmpgt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <imu_Comp_Filter+0x4ca>
		p->psi -= 360;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	4918      	ldr	r1, [pc, #96]	; (800213c <imu_Comp_Filter+0x51c>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fd27 	bl	8000b30 <__aeabi_fsub>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
	if(p->psi < -180.0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	4914      	ldr	r1, [pc, #80]	; (8002140 <imu_Comp_Filter+0x520>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe ffc5 	bl	8001080 <__aeabi_fcmplt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <imu_Comp_Filter+0x4de>
//	p->x_dot_dot = acc[0];
//	p->y_dot_dot = acc[1];
//	p->z_dot_dot = acc[2];


}
 80020fc:	e009      	b.n	8002112 <imu_Comp_Filter+0x4f2>
		p->psi += 360;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <imu_Comp_Filter+0x51c>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fd15 	bl	8000b34 <__addsf3>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002112:	bf00      	nop
 8002114:	3764      	adds	r7, #100	; 0x64
 8002116:	46bd      	mov	sp, r7
 8002118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800211c:	f3af 8000 	nop.w
 8002120:	6cd799af 	.word	0x6cd799af
 8002124:	3f91df40 	.word	0x3f91df40
 8002128:	66666666 	.word	0x66666666
 800212c:	404ca666 	.word	0x404ca666
 8002130:	3f7ae148 	.word	0x3f7ae148
 8002134:	3ca3d70a 	.word	0x3ca3d70a
 8002138:	43340000 	.word	0x43340000
 800213c:	43b40000 	.word	0x43b40000
 8002140:	c3340000 	.word	0xc3340000
 8002144:	00000000 	.word	0x00000000

08002148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214c:	f001 fbb4 	bl	80038b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002150:	f000 f83e 	bl	80021d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002154:	f000 f9aa 	bl	80024ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8002158:	f000 f882 	bl	8002260 <MX_I2C1_Init>
  MX_TIM2_Init();
 800215c:	f000 f8ae 	bl	80022bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002160:	f000 f950 	bl	8002404 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002164:	f000 f978 	bl	8002458 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //vInitPARAMETERS(&parameter);

  MPU_Init(p, INTEGRAL_DT);
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <main+0x70>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4913      	ldr	r1, [pc, #76]	; (80021bc <main+0x74>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f884 	bl	800127c <MPU_Init>
  Accel_calibration(p, INTEGRAL_DT);
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <main+0x70>)
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	a30d      	add	r3, pc, #52	; (adr r3, 80021b0 <main+0x68>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	4608      	mov	r0, r1
 8002180:	f7ff fa52 	bl	8001628 <Accel_calibration>
  Compass_Init();
 8002184:	f7fe ffca 	bl	800111c <Compass_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002188:	2100      	movs	r1, #0
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <main+0x78>)
 800218c:	f003 fa8a 	bl	80056a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002190:	f004 fa68 	bl	8006664 <osKernelInitialize>

  /* creation of DRONE_START */
  //DRONE_STARTHandle = osThreadNew(DroneStart, (void*) p, &DRONE_START_attributes);

  /* creation of IMU */
  IMUHandle = osThreadNew(MPU, (void*) p, &IMU_attributes);
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <main+0x70>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <main+0x7c>)
 800219a:	4619      	mov	r1, r3
 800219c:	480a      	ldr	r0, [pc, #40]	; (80021c8 <main+0x80>)
 800219e:	f004 faef 	bl	8006780 <osThreadNew>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <main+0x84>)
 80021a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021a8:	f004 fa8e 	bl	80066c8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <main+0x64>
 80021ae:	bf00      	nop
 80021b0:	47ae147b 	.word	0x47ae147b
 80021b4:	3f947ae1 	.word	0x3f947ae1
 80021b8:	20000000 	.word	0x20000000
 80021bc:	3ca3d70a 	.word	0x3ca3d70a
 80021c0:	20003ff0 	.word	0x20003ff0
 80021c4:	0800ca28 	.word	0x0800ca28
 80021c8:	08002711 	.word	0x08002711
 80021cc:	20003f98 	.word	0x20003f98

080021d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b090      	sub	sp, #64	; 0x40
 80021d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	2228      	movs	r2, #40	; 0x28
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 ff91 	bl	8009106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002200:	2301      	movs	r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002204:	2302      	movs	r3, #2
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800220e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002214:	f107 0318 	add.w	r3, r7, #24
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fd4f 	bl	8004cbc <HAL_RCC_OscConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002224:	f000 fad6 	bl	80027d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002228:	230f      	movs	r3, #15
 800222a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800222c:	2302      	movs	r3, #2
 800222e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2102      	movs	r1, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f002 ffba 	bl	80051bc <HAL_RCC_ClockConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800224e:	f000 fac1 	bl	80027d4 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002252:	f003 f89d 	bl	8005390 <HAL_RCC_EnableCSS>
}
 8002256:	bf00      	nop
 8002258:	3740      	adds	r7, #64	; 0x40
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002266:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <MX_I2C1_Init+0x54>)
 8002268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_I2C1_Init+0x50>)
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <MX_I2C1_Init+0x58>)
 800226e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_I2C1_Init+0x50>)
 800227e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_I2C1_Init+0x50>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_I2C1_Init+0x50>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_I2C1_Init+0x50>)
 800229e:	f001 fdb1 	bl	8003e04 <HAL_I2C_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022a8:	f000 fa94 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20003f40 	.word	0x20003f40
 80022b4:	40005400 	.word	0x40005400
 80022b8:	000186a0 	.word	0x000186a0

080022bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b08e      	sub	sp, #56	; 0x38
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <MX_TIM2_Init+0x140>)
 80022ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60;
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <MX_TIM2_Init+0x140>)
 80022f6:	223c      	movs	r2, #60	; 0x3c
 80022f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b40      	ldr	r3, [pc, #256]	; (80023fc <MX_TIM2_Init+0x140>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <MX_TIM2_Init+0x140>)
 8002302:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8002306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <MX_TIM2_Init+0x140>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <MX_TIM2_Init+0x140>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002314:	4839      	ldr	r0, [pc, #228]	; (80023fc <MX_TIM2_Init+0x140>)
 8002316:	f003 f943 	bl	80055a0 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002320:	f000 fa58 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	4619      	mov	r1, r3
 8002330:	4832      	ldr	r0, [pc, #200]	; (80023fc <MX_TIM2_Init+0x140>)
 8002332:	f003 fbb7 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800233c:	f000 fa4a 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002340:	482e      	ldr	r0, [pc, #184]	; (80023fc <MX_TIM2_Init+0x140>)
 8002342:	f003 f97b 	bl	800563c <HAL_TIM_PWM_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800234c:	f000 fa42 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002358:	f107 0320 	add.w	r3, r7, #32
 800235c:	4619      	mov	r1, r3
 800235e:	4827      	ldr	r0, [pc, #156]	; (80023fc <MX_TIM2_Init+0x140>)
 8002360:	f003 ff20 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800236a:	f000 fa33 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236e:	2360      	movs	r3, #96	; 0x60
 8002370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	4619      	mov	r1, r3
 8002384:	481d      	ldr	r0, [pc, #116]	; (80023fc <MX_TIM2_Init+0x140>)
 8002386:	f003 fac7 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002390:	f000 fa20 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002394:	2304      	movs	r3, #4
 8002396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2204      	movs	r2, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4817      	ldr	r0, [pc, #92]	; (80023fc <MX_TIM2_Init+0x140>)
 80023a0:	f003 faba 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80023aa:	f000 fa13 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2208      	movs	r2, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	4811      	ldr	r0, [pc, #68]	; (80023fc <MX_TIM2_Init+0x140>)
 80023b6:	f003 faaf 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80023c0:	f000 fa08 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	220c      	movs	r2, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_TIM2_Init+0x140>)
 80023cc:	f003 faa4 	bl	8005918 <HAL_TIM_PWM_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80023d6:	f000 f9fd 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOCZayat = sConfigOC;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_TIM2_Init+0x144>)
 80023dc:	461d      	mov	r5, r3
 80023de:	1d3c      	adds	r4, r7, #4
 80023e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_TIM2_Init+0x140>)
 80023ee:	f001 f87f 	bl	80034f0 <HAL_TIM_MspPostInit>

}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20003ff0 	.word	0x20003ff0
 8002400:	20000228 	.word	0x20000228

08002404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART1_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART1_UART_Init+0x4c>)
 800243c:	f003 ff08 	bl	8006250 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f000 f9c5 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20003f9c 	.word	0x20003f9c
 8002454:	40013800 	.word	0x40013800

08002458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_USART2_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002490:	f003 fede 	bl	8006250 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f000 f99b 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20004030 	.word	0x20004030
 80024a8:	40004400 	.word	0x40004400

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_GPIO_Init+0xa8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_GPIO_Init+0xa8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <MX_GPIO_Init+0xa8>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_GPIO_Init+0xa8>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_GPIO_Init+0xac>)
 8002528:	f001 fc54 	bl	8003dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800252c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2302      	movs	r3, #2
 800253c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_GPIO_Init+0xac>)
 8002546:	f001 faeb 	bl	8003b20 <HAL_GPIO_Init>

}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40011000 	.word	0x40011000

0800255c <fview>:

/* USER CODE BEGIN 4 */
void fview(uint8_t type, float argument, char * line)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b091      	sub	sp, #68	; 0x44
 8002560:	af02      	add	r7, sp, #8
 8002562:	4603      	mov	r3, r0
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[25];
	if(type == PRINT_FLOAT_NO_TAB || type == PRINT_FLOAT_WITH_TAB)						//0 for printing variables, else for simple print
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <fview+0x1a>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d172      	bne.n	800265c <fview+0x100>
	{
		int32_t x = argument *100;
 8002576:	495d      	ldr	r1, [pc, #372]	; (80026ec <fview+0x190>)
 8002578:	68b8      	ldr	r0, [r7, #8]
 800257a:	f7fe fbe3 	bl	8000d44 <__aeabi_fmul>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fda5 	bl	80010d0 <__aeabi_f2iz>
 8002586:	4603      	mov	r3, r0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t y = abs(x%100);
 800258a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <fview+0x194>)
 800258e:	fb83 1302 	smull	r1, r3, r3, r2
 8002592:	1159      	asrs	r1, r3, #5
 8002594:	17d3      	asrs	r3, r2, #31
 8002596:	1acb      	subs	r3, r1, r3
 8002598:	2164      	movs	r1, #100	; 0x64
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bfb8      	it	lt
 80025a4:	425b      	neglt	r3, r3
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
		if(argument < 0 && x/100 >= 0 && x/100 < 1 )
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	68b8      	ldr	r0, [r7, #8]
 80025ae:	f7fe fd67 	bl	8001080 <__aeabi_fcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02b      	beq.n	8002610 <fview+0xb4>
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80025be:	db27      	blt.n	8002610 <fview+0xb4>
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	2b63      	cmp	r3, #99	; 0x63
 80025c4:	dc24      	bgt.n	8002610 <fview+0xb4>
		{
			(type == PRINT_FLOAT_NO_TAB)? sprintf((char*)buffer, "%s-%d.%02u\r\n", line, x/100,y) : sprintf((char*)buffer, "%s-%d.%02u\t", line, x/100,y);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <fview+0x92>
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	4a48      	ldr	r2, [pc, #288]	; (80026f0 <fview+0x194>)
 80025d0:	fb82 1203 	smull	r1, r2, r2, r3
 80025d4:	1152      	asrs	r2, r2, #5
 80025d6:	17db      	asrs	r3, r3, #31
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	f107 0014 	add.w	r0, r7, #20
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4943      	ldr	r1, [pc, #268]	; (80026f4 <fview+0x198>)
 80025e8:	f007 f9e4 	bl	80099b4 <siprintf>
		{
 80025ec:	e035      	b.n	800265a <fview+0xfe>
			(type == PRINT_FLOAT_NO_TAB)? sprintf((char*)buffer, "%s-%d.%02u\r\n", line, x/100,y) : sprintf((char*)buffer, "%s-%d.%02u\t", line, x/100,y);
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <fview+0x194>)
 80025f2:	fb82 1203 	smull	r1, r2, r2, r3
 80025f6:	1152      	asrs	r2, r2, #5
 80025f8:	17db      	asrs	r3, r3, #31
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	f107 0014 	add.w	r0, r7, #20
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	493b      	ldr	r1, [pc, #236]	; (80026f8 <fview+0x19c>)
 800260a:	f007 f9d3 	bl	80099b4 <siprintf>
		{
 800260e:	e024      	b.n	800265a <fview+0xfe>
		}
		else
		{
			(type == PRINT_FLOAT_NO_TAB)? sprintf((char*)buffer, "%s%d.%02u\r\n", line, x/100,y) : sprintf((char*)buffer, "%s%d.%02u\t", line, x/100,y);
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d110      	bne.n	8002638 <fview+0xdc>
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002618:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <fview+0x194>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	1152      	asrs	r2, r2, #5
 8002620:	17db      	asrs	r3, r3, #31
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	f107 0014 	add.w	r0, r7, #20
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4932      	ldr	r1, [pc, #200]	; (80026fc <fview+0x1a0>)
 8002632:	f007 f9bf 	bl	80099b4 <siprintf>
	{
 8002636:	e046      	b.n	80026c6 <fview+0x16a>
			(type == PRINT_FLOAT_NO_TAB)? sprintf((char*)buffer, "%s%d.%02u\r\n", line, x/100,y) : sprintf((char*)buffer, "%s%d.%02u\t", line, x/100,y);
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <fview+0x194>)
 800263c:	fb82 1203 	smull	r1, r2, r2, r3
 8002640:	1152      	asrs	r2, r2, #5
 8002642:	17db      	asrs	r3, r3, #31
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	f107 0014 	add.w	r0, r7, #20
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	492b      	ldr	r1, [pc, #172]	; (8002700 <fview+0x1a4>)
 8002654:	f007 f9ae 	bl	80099b4 <siprintf>
	{
 8002658:	e035      	b.n	80026c6 <fview+0x16a>
 800265a:	e034      	b.n	80026c6 <fview+0x16a>
		}
	}
	else if(type == PRINT_INT_NO_TAB || type == PRINT_INT_WITH_TAB)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d002      	beq.n	8002668 <fview+0x10c>
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d128      	bne.n	80026ba <fview+0x15e>
	{
		(type == PRINT_INT_NO_TAB)? sprintf((char*)buffer, "%s%d\r\n", line,argument) : sprintf((char*)buffer, "%s%d\t", line, argument);
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d10d      	bne.n	800268a <fview+0x12e>
 800266e:	68b8      	ldr	r0, [r7, #8]
 8002670:	f7fd feda 	bl	8000428 <__aeabi_f2d>
 8002674:	4603      	mov	r3, r0
 8002676:	460c      	mov	r4, r1
 8002678:	f107 0014 	add.w	r0, r7, #20
 800267c:	e9cd 3400 	strd	r3, r4, [sp]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4920      	ldr	r1, [pc, #128]	; (8002704 <fview+0x1a8>)
 8002684:	f007 f996 	bl	80099b4 <siprintf>
 8002688:	e00c      	b.n	80026a4 <fview+0x148>
 800268a:	68b8      	ldr	r0, [r7, #8]
 800268c:	f7fd fecc 	bl	8000428 <__aeabi_f2d>
 8002690:	4603      	mov	r3, r0
 8002692:	460c      	mov	r4, r1
 8002694:	f107 0014 	add.w	r0, r7, #20
 8002698:	e9cd 3400 	strd	r3, r4, [sp]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	491a      	ldr	r1, [pc, #104]	; (8002708 <fview+0x1ac>)
 80026a0:	f007 f988 	bl	80099b4 <siprintf>
		sprintf((char*)buffer, line, (int32_t)argument);
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f7fe fd13 	bl	80010d0 <__aeabi_f2iz>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f007 f97e 	bl	80099b4 <siprintf>
	{
 80026b8:	e005      	b.n	80026c6 <fview+0x16a>
	}
	else
	{
		sprintf((char*)buffer,line);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f007 f977 	bl	80099b4 <siprintf>
	}
	HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fd40 	bl	8000150 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	f107 0114 	add.w	r1, r7, #20
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <fview+0x1b0>)
 80026de:	f003 fe04 	bl	80062ea <HAL_UART_Transmit>
}
 80026e2:	bf00      	nop
 80026e4:	373c      	adds	r7, #60	; 0x3c
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	42c80000 	.word	0x42c80000
 80026f0:	51eb851f 	.word	0x51eb851f
 80026f4:	0800c928 	.word	0x0800c928
 80026f8:	0800c938 	.word	0x0800c938
 80026fc:	0800c944 	.word	0x0800c944
 8002700:	0800c950 	.word	0x0800c950
 8002704:	0800c95c 	.word	0x0800c95c
 8002708:	0800c964 	.word	0x0800c964
 800270c:	20003f9c 	.word	0x20003f9c

08002710 <MPU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU */
void MPU(void *argument)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU */
	parameters *ptr = argument;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	613b      	str	r3, [r7, #16]
	u32 tickzayat;
	int adad=0;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
	  /* Infinite loop */
	  for(;;)
	  {
		tickzayat = osKernelGetTickCount();
 8002720:	f004 f806 	bl	8006730 <osKernelGetTickCount>
 8002724:	60f8      	str	r0, [r7, #12]
		/*Read Gyro and Accel values, then comp filter*/
		Read_Accel_Values(ptr);
 8002726:	6938      	ldr	r0, [r7, #16]
 8002728:	f7ff f832 	bl	8001790 <Read_Accel_Values>
		Read_Gyro_Values(ptr,INTEGRAL_DT);
 800272c:	491c      	ldr	r1, [pc, #112]	; (80027a0 <MPU+0x90>)
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f7ff f8b2 	bl	8001898 <Read_Gyro_Values>
		imu_Comp_Filter(ptr,INTEGRAL_DT);
 8002734:	491a      	ldr	r1, [pc, #104]	; (80027a0 <MPU+0x90>)
 8002736:	6938      	ldr	r0, [r7, #16]
 8002738:	f7ff fa72 	bl	8001c20 <imu_Comp_Filter>
	//	Read_Compass_Values(ptr);
		/*Template of function fview()-> fview(PRINT_TYPE, VARIABLE, STATEMENT)*/
		if (adad ==10){
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b0a      	cmp	r3, #10
 8002740:	d116      	bne.n	8002770 <MPU+0x60>
		fview(PRINT_FLOAT_WITH_TAB, ptr->x, "Value of phi = ");
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <MPU+0x94>)
 8002748:	4619      	mov	r1, r3
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff ff06 	bl	800255c <fview>
		fview(PRINT_FLOAT_WITH_TAB, ptr->y, "Value of theta = ");
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <MPU+0x98>)
 8002756:	4619      	mov	r1, r3
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff feff 	bl	800255c <fview>
		fview(PRINT_FLOAT_NO_TAB, ptr->z, "Value of psi = ");
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <MPU+0x9c>)
 8002764:	4619      	mov	r1, r3
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fef8 	bl	800255c <fview>
		adad=0;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
		}
		adad++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
		/*Calculate total ticks needed for 10 ms period*/
		tickzayat = osKernelGetTickCount() - tickzayat;
 8002776:	f003 ffdb 	bl	8006730 <osKernelGetTickCount>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	60fb      	str	r3, [r7, #12]
		tickzayat = 10 - tickzayat;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1c3 030a 	rsb	r3, r3, #10
 8002788:	60fb      	str	r3, [r7, #12]
		if(tickzayat < 0)Error_Handler();
		tickzayat = osKernelGetTickCount() + tickzayat;
 800278a:	f003 ffd1 	bl	8006730 <osKernelGetTickCount>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

		osDelayUntil(tickzayat);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f004 f89c 	bl	80068d4 <osDelayUntil>
		tickzayat = osKernelGetTickCount();
 800279c:	e7c0      	b.n	8002720 <MPU+0x10>
 800279e:	bf00      	nop
 80027a0:	3ca3d70a 	.word	0x3ca3d70a
 80027a4:	0800c984 	.word	0x0800c984
 80027a8:	0800c994 	.word	0x0800c994
 80027ac:	0800c9a8 	.word	0x0800c9a8

080027b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027c2:	f001 f88f 	bl	80038e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000800 	.word	0x40000800

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <Quaternion>:
        sqrt = ( number/temp + temp) / 2;
    }
return sqrt;
}*/
void Quaternion(f32 *q, f32 *euler)
{
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]


	euler[0]/=2;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fb59 	bl	8000eac <__aeabi_fdiv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
	euler[1]/=2;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3304      	adds	r3, #4
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	1d1e      	adds	r6, r3, #4
 800280c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002810:	4610      	mov	r0, r2
 8002812:	f7fe fb4b 	bl	8000eac <__aeabi_fdiv>
 8002816:	4603      	mov	r3, r0
 8002818:	6033      	str	r3, [r6, #0]
	euler[2]/=2;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3308      	adds	r3, #8
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f103 0608 	add.w	r6, r3, #8
 8002826:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800282a:	4610      	mov	r0, r2
 800282c:	f7fe fb3e 	bl	8000eac <__aeabi_fdiv>
 8002830:	4603      	mov	r3, r0
 8002832:	6033      	str	r3, [r6, #0]
	euler[0]*=0.0174532;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fdf5 	bl	8000428 <__aeabi_f2d>
 800283e:	a3d6      	add	r3, pc, #856	; (adr r3, 8002b98 <Quaternion+0x3b8>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fe48 	bl	80004d8 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f91a 	bl	8000a88 <__aeabi_d2f>
 8002854:	4602      	mov	r2, r0
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	601a      	str	r2, [r3, #0]
	euler[1]*=0.0174532;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3304      	adds	r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fde1 	bl	8000428 <__aeabi_f2d>
 8002866:	a3cc      	add	r3, pc, #816	; (adr r3, 8002b98 <Quaternion+0x3b8>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fe34 	bl	80004d8 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4611      	mov	r1, r2
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	1d1e      	adds	r6, r3, #4
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	f7fe f902 	bl	8000a88 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	6033      	str	r3, [r6, #0]
	euler[2]*=0.0174532;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3308      	adds	r3, #8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fdca 	bl	8000428 <__aeabi_f2d>
 8002894:	a3c0      	add	r3, pc, #768	; (adr r3, 8002b98 <Quaternion+0x3b8>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fe1d 	bl	80004d8 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f103 0608 	add.w	r6, r3, #8
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	f7fe f8ea 	bl	8000a88 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	6033      	str	r3, [r6, #0]
	q[0] = cos(euler[0]) * cos(euler[1]) * cos(euler[2])   + sin(euler[0])  * sin(euler[1]) * sin(euler[2]);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fdb3 	bl	8000428 <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f008 fc53 	bl	800b174 <cos>
 80028ce:	4680      	mov	r8, r0
 80028d0:	4689      	mov	r9, r1
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fda5 	bl	8000428 <__aeabi_f2d>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f008 fc45 	bl	800b174 <cos>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f7fd fdf1 	bl	80004d8 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4690      	mov	r8, r2
 80028fc:	4699      	mov	r9, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3308      	adds	r3, #8
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fd8f 	bl	8000428 <__aeabi_f2d>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f008 fc2f 	bl	800b174 <cos>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4640      	mov	r0, r8
 800291c:	4649      	mov	r1, r9
 800291e:	f7fd fddb 	bl	80004d8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4690      	mov	r8, r2
 8002928:	4699      	mov	r9, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fd7a 	bl	8000428 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f008 fc50 	bl	800b1e0 <sin>
 8002940:	4682      	mov	sl, r0
 8002942:	468b      	mov	fp, r1
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	3304      	adds	r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fd6c 	bl	8000428 <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f008 fc42 	bl	800b1e0 <sin>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4650      	mov	r0, sl
 8002962:	4659      	mov	r1, fp
 8002964:	f7fd fdb8 	bl	80004d8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4692      	mov	sl, r2
 800296e:	469b      	mov	fp, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	3308      	adds	r3, #8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fd56 	bl	8000428 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f008 fc2c 	bl	800b1e0 <sin>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4650      	mov	r0, sl
 800298e:	4659      	mov	r1, fp
 8002990:	f7fd fda2 	bl	80004d8 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4640      	mov	r0, r8
 800299a:	4649      	mov	r1, r9
 800299c:	f7fd fbe6 	bl	800016c <__adddf3>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f86e 	bl	8000a88 <__aeabi_d2f>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]
	q[1] =-cos(euler[0]) * sin(euler[1]) * sin(euler[2])   + cos(euler[1]) * cos(euler[2])   * sin(euler[0]);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fd36 	bl	8000428 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f008 fbd6 	bl	800b174 <cos>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	3304      	adds	r3, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fd25 	bl	8000428 <__aeabi_f2d>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f008 fbfb 	bl	800b1e0 <sin>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fd fd71 	bl	80004d8 <__aeabi_dmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	4625      	mov	r5, r4
 80029fc:	461c      	mov	r4, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3308      	adds	r3, #8
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fd0f 	bl	8000428 <__aeabi_f2d>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f008 fbe5 	bl	800b1e0 <sin>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fd fd5b 	bl	80004d8 <__aeabi_dmul>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	4625      	mov	r5, r4
 8002a28:	461c      	mov	r4, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fcf9 	bl	8000428 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f008 fb99 	bl	800b174 <cos>
 8002a42:	4680      	mov	r8, r0
 8002a44:	4689      	mov	r9, r1
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	3308      	adds	r3, #8
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fceb 	bl	8000428 <__aeabi_f2d>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f008 fb8b 	bl	800b174 <cos>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4640      	mov	r0, r8
 8002a64:	4649      	mov	r1, r9
 8002a66:	f7fd fd37 	bl	80004d8 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4690      	mov	r8, r2
 8002a70:	4699      	mov	r9, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fcd6 	bl	8000428 <__aeabi_f2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f008 fbac 	bl	800b1e0 <sin>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4649      	mov	r1, r9
 8002a90:	f7fd fd22 	bl	80004d8 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fb66 	bl	800016c <__adddf3>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1d1c      	adds	r4, r3, #4
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	f7fd ffea 	bl	8000a88 <__aeabi_d2f>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	6023      	str	r3, [r4, #0]
	q[2] = cos(euler[0]) * cos(euler[2])   * sin(euler[1]) + sin(euler[0])  * cos(euler[1]) * sin(euler[2]);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcb3 	bl	8000428 <__aeabi_f2d>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4621      	mov	r1, r4
 8002aca:	f008 fb53 	bl	800b174 <cos>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fca5 	bl	8000428 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f008 fb45 	bl	800b174 <cos>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4620      	mov	r0, r4
 8002af0:	4629      	mov	r1, r5
 8002af2:	f7fd fcf1 	bl	80004d8 <__aeabi_dmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	4625      	mov	r5, r4
 8002afc:	461c      	mov	r4, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fc8f 	bl	8000428 <__aeabi_f2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f008 fb65 	bl	800b1e0 <sin>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fcdb 	bl	80004d8 <__aeabi_dmul>
 8002b22:	4603      	mov	r3, r0
 8002b24:	460c      	mov	r4, r1
 8002b26:	4625      	mov	r5, r4
 8002b28:	461c      	mov	r4, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fc7a 	bl	8000428 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f008 fb50 	bl	800b1e0 <sin>
 8002b40:	4680      	mov	r8, r0
 8002b42:	4689      	mov	r9, r1
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fc6c 	bl	8000428 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f008 fb0c 	bl	800b174 <cos>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4640      	mov	r0, r8
 8002b62:	4649      	mov	r1, r9
 8002b64:	f7fd fcb8 	bl	80004d8 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4690      	mov	r8, r2
 8002b6e:	4699      	mov	r9, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	3308      	adds	r3, #8
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc56 	bl	8000428 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f008 fb2c 	bl	800b1e0 <sin>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fca2 	bl	80004d8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	e003      	b.n	8002ba0 <Quaternion+0x3c0>
 8002b98:	6cd799af 	.word	0x6cd799af
 8002b9c:	3f91df40 	.word	0x3f91df40
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fae1 	bl	800016c <__adddf3>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f103 0408 	add.w	r4, r3, #8
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	f7fd ff64 	bl	8000a88 <__aeabi_d2f>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	6023      	str	r3, [r4, #0]
	q[3] = cos(euler[0]) * cos(euler[1]) * sin(euler[2])   - sin(euler[0])  * cos(euler[2])   * sin(euler[1]);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc2d 	bl	8000428 <__aeabi_f2d>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	f008 facd 	bl	800b174 <cos>
 8002bda:	4604      	mov	r4, r0
 8002bdc:	460d      	mov	r5, r1
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc1f 	bl	8000428 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f008 fabf 	bl	800b174 <cos>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f7fd fc6b 	bl	80004d8 <__aeabi_dmul>
 8002c02:	4603      	mov	r3, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	4625      	mov	r5, r4
 8002c08:	461c      	mov	r4, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc09 	bl	8000428 <__aeabi_f2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f008 fadf 	bl	800b1e0 <sin>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4620      	mov	r0, r4
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7fd fc55 	bl	80004d8 <__aeabi_dmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	4625      	mov	r5, r4
 8002c34:	461c      	mov	r4, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fbf4 	bl	8000428 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f008 faca 	bl	800b1e0 <sin>
 8002c4c:	4680      	mov	r8, r0
 8002c4e:	4689      	mov	r9, r1
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3308      	adds	r3, #8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fbe6 	bl	8000428 <__aeabi_f2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f008 fa86 	bl	800b174 <cos>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fc32 	bl	80004d8 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4690      	mov	r8, r2
 8002c7a:	4699      	mov	r9, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fbd0 	bl	8000428 <__aeabi_f2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f008 faa6 	bl	800b1e0 <sin>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4640      	mov	r0, r8
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	f7fd fc1c 	bl	80004d8 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	f7fd fa5e 	bl	8000168 <__aeabi_dsub>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 040c 	add.w	r4, r3, #12
 8002cba:	4608      	mov	r0, r1
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	f7fd fee3 	bl	8000a88 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6023      	str	r3, [r4, #0]

}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002cd0 <Rotate_BtoW>:
void Rotate_BtoW(f32 *acc, f32 *q)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b093      	sub	sp, #76	; 0x4c
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	f32 R[9];
	f32 x = q[1];
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	647b      	str	r3, [r7, #68]	; 0x44
	f32 y = q[2];
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
	f32 z = q[3];
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 s = q[0];
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38



	 R[0] = 1 - 2*y*y - 2*z*z; R[1] = 2*x*y - 2*s*z;     R[2] = 2*x*z + 2*s*y;
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ff1c 	bl	8000b34 <__addsf3>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe f81f 	bl	8000d44 <__aeabi_fmul>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d0e:	f7fd ff0f 	bl	8000b30 <__aeabi_fsub>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461c      	mov	r4, r3
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd ff0a 	bl	8000b34 <__addsf3>
 8002d20:	4603      	mov	r3, r0
 8002d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f80d 	bl	8000d44 <__aeabi_fmul>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7fd fefe 	bl	8000b30 <__aeabi_fsub>
 8002d34:	4603      	mov	r3, r0
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fef9 	bl	8000b34 <__addsf3>
 8002d42:	4603      	mov	r3, r0
 8002d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fffc 	bl	8000d44 <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461c      	mov	r4, r3
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	4619      	mov	r1, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd feed 	bl	8000b34 <__addsf3>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fff0 	bl	8000d44 <__aeabi_fmul>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7fd fee1 	bl	8000b30 <__aeabi_fsub>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d74:	4619      	mov	r1, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fedc 	bl	8000b34 <__addsf3>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd ffdf 	bl	8000d44 <__aeabi_fmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461c      	mov	r4, r3
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fed0 	bl	8000b34 <__addsf3>
 8002d94:	4603      	mov	r3, r0
 8002d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd ffd3 	bl	8000d44 <__aeabi_fmul>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7fd fec6 	bl	8000b34 <__addsf3>
 8002da8:	4603      	mov	r3, r0
 8002daa:	613b      	str	r3, [r7, #16]
	  R[3] = 2*x*y + 2*s*z;     R[4] = 1 - 2*x*x - 2*z*z; R[5] = 2*y*z - 2*s*x;
 8002dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dae:	4619      	mov	r1, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd febf 	bl	8000b34 <__addsf3>
 8002db6:	4603      	mov	r3, r0
 8002db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd ffc2 	bl	8000d44 <__aeabi_fmul>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461c      	mov	r4, r3
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd feb3 	bl	8000b34 <__addsf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd ffb6 	bl	8000d44 <__aeabi_fmul>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7fd fea9 	bl	8000b34 <__addsf3>
 8002de2:	4603      	mov	r3, r0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	4619      	mov	r1, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fea2 	bl	8000b34 <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd ffa5 	bl	8000d44 <__aeabi_fmul>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e02:	f7fd fe95 	bl	8000b30 <__aeabi_fsub>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461c      	mov	r4, r3
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fe90 	bl	8000b34 <__addsf3>
 8002e14:	4603      	mov	r3, r0
 8002e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd ff93 	bl	8000d44 <__aeabi_fmul>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4619      	mov	r1, r3
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fd fe84 	bl	8000b30 <__aeabi_fsub>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fe7f 	bl	8000b34 <__addsf3>
 8002e36:	4603      	mov	r3, r0
 8002e38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd ff82 	bl	8000d44 <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461c      	mov	r4, r3
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	4619      	mov	r1, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fe73 	bl	8000b34 <__addsf3>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd ff76 	bl	8000d44 <__aeabi_fmul>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7fd fe67 	bl	8000b30 <__aeabi_fsub>
 8002e62:	4603      	mov	r3, r0
 8002e64:	61fb      	str	r3, [r7, #28]
	  R[6] = 2*x*z - 2*s*y;     R[7] = 2*y*z + 2*s*x;     R[8] = 1 - 2*x*x - 2*y*y;
 8002e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fe62 	bl	8000b34 <__addsf3>
 8002e70:	4603      	mov	r3, r0
 8002e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ff65 	bl	8000d44 <__aeabi_fmul>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461c      	mov	r4, r3
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	4619      	mov	r1, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fe56 	bl	8000b34 <__addsf3>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd ff59 	bl	8000d44 <__aeabi_fmul>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fd fe4a 	bl	8000b30 <__aeabi_fsub>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fe45 	bl	8000b34 <__addsf3>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ff48 	bl	8000d44 <__aeabi_fmul>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fe39 	bl	8000b34 <__addsf3>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd ff3c 	bl	8000d44 <__aeabi_fmul>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fd fe2f 	bl	8000b34 <__addsf3>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002edc:	4619      	mov	r1, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fe28 	bl	8000b34 <__addsf3>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd ff2b 	bl	8000d44 <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ef6:	f7fd fe1b 	bl	8000b30 <__aeabi_fsub>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461c      	mov	r4, r3
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	4619      	mov	r1, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fe16 	bl	8000b34 <__addsf3>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd ff19 	bl	8000d44 <__aeabi_fmul>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4619      	mov	r1, r3
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7fd fe0a 	bl	8000b30 <__aeabi_fsub>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28





		f32 acc0 = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f7fd ff0b 	bl	8000d44 <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461c      	mov	r4, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f7fd ff01 	bl	8000d44 <__aeabi_fmul>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4619      	mov	r1, r3
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7fd fdf4 	bl	8000b34 <__addsf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461c      	mov	r4, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3308      	adds	r3, #8
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7fd fef2 	bl	8000d44 <__aeabi_fmul>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4619      	mov	r1, r3
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7fd fde5 	bl	8000b34 <__addsf3>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
		f32 acc1 = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7fd fee4 	bl	8000d44 <__aeabi_fmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461c      	mov	r4, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7fd feda 	bl	8000d44 <__aeabi_fmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4619      	mov	r1, r3
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7fd fdcd 	bl	8000b34 <__addsf3>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7fd fecb 	bl	8000d44 <__aeabi_fmul>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7fd fdbe 	bl	8000b34 <__addsf3>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
		f32 acc2 = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fd febd 	bl	8000d44 <__aeabi_fmul>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461c      	mov	r4, r3
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7fd feb3 	bl	8000d44 <__aeabi_fmul>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7fd fda6 	bl	8000b34 <__addsf3>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461c      	mov	r4, r3
 8002fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f7fd fea4 	bl	8000d44 <__aeabi_fmul>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4619      	mov	r1, r3
 8003000:	4620      	mov	r0, r4
 8003002:	f7fd fd97 	bl	8000b34 <__addsf3>
 8003006:	4603      	mov	r3, r0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
		acc[0]=acc0;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300e:	601a      	str	r2, [r3, #0]
		acc[1]=acc1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	601a      	str	r2, [r3, #0]
		acc[2]=acc2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3308      	adds	r3, #8
 800301c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301e:	601a      	str	r2, [r3, #0]

}
 8003020:	bf00      	nop
 8003022:	374c      	adds	r7, #76	; 0x4c
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <Rotate_BtoW_acc>:
void Rotate_BtoW_acc(f32 *acc, f32 *q)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b095      	sub	sp, #84	; 0x54
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	f32 q0 = -q[0];
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
	f32 R[9];
	f32 acc2[3];
	f32 r0 = q0*q0;
 800303c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800303e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003040:	f7fd fe80 	bl	8000d44 <__aeabi_fmul>
 8003044:	4603      	mov	r3, r0
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
	f32 r1 = q[1]*q[1];
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3304      	adds	r3, #4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7fd fe74 	bl	8000d44 <__aeabi_fmul>
 800305c:	4603      	mov	r3, r0
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
	f32 r2 = q[2]*q[2];
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fd fe68 	bl	8000d44 <__aeabi_fmul>
 8003074:	4603      	mov	r3, r0
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
	f32 r3 = q[3]*q[3];
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7fd fe5c 	bl	8000d44 <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
	R[0] = r0 + r1 - r2 - r3;
 8003090:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003092:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003094:	f7fd fd4e 	bl	8000b34 <__addsf3>
 8003098:	4603      	mov	r3, r0
 800309a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fd47 	bl	8000b30 <__aeabi_fsub>
 80030a2:	4603      	mov	r3, r0
 80030a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fd42 	bl	8000b30 <__aeabi_fsub>
 80030ac:	4603      	mov	r3, r0
 80030ae:	61bb      	str	r3, [r7, #24]
	R[1] = 2*q[1]*q[2] + 2*q0*q[3];
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	3304      	adds	r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fd3b 	bl	8000b34 <__addsf3>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fd fe3a 	bl	8000d44 <__aeabi_fmul>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461c      	mov	r4, r3
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	4619      	mov	r1, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fd2b 	bl	8000b34 <__addsf3>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fe2a 	bl	8000d44 <__aeabi_fmul>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7fd fd1d 	bl	8000b34 <__addsf3>
 80030fa:	4603      	mov	r3, r0
 80030fc:	61fb      	str	r3, [r7, #28]
	R[2] = 2*q[1]*q[3] - 2*q0*q[2];
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fd14 	bl	8000b34 <__addsf3>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4619      	mov	r1, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f7fd fe13 	bl	8000d44 <__aeabi_fmul>
 800311e:	4603      	mov	r3, r0
 8003120:	461c      	mov	r4, r3
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	4619      	mov	r1, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fd04 	bl	8000b34 <__addsf3>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	3308      	adds	r3, #8
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f7fd fe03 	bl	8000d44 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
 8003140:	4619      	mov	r1, r3
 8003142:	4620      	mov	r0, r4
 8003144:	f7fd fcf4 	bl	8000b30 <__aeabi_fsub>
 8003148:	4603      	mov	r3, r0
 800314a:	623b      	str	r3, [r7, #32]
	R[3] = 2*q[1]*q[2] - 2*q0*q[3];
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	3304      	adds	r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fced 	bl	8000b34 <__addsf3>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3308      	adds	r3, #8
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7fd fdec 	bl	8000d44 <__aeabi_fmul>
 800316c:	4603      	mov	r3, r0
 800316e:	461c      	mov	r4, r3
 8003170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003172:	4619      	mov	r1, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fcdd 	bl	8000b34 <__addsf3>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7fd fddc 	bl	8000d44 <__aeabi_fmul>
 800318c:	4603      	mov	r3, r0
 800318e:	4619      	mov	r1, r3
 8003190:	4620      	mov	r0, r4
 8003192:	f7fd fccd 	bl	8000b30 <__aeabi_fsub>
 8003196:	4603      	mov	r3, r0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
	R[4] = r0 - r1 + r2 - r3;
 800319a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800319c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800319e:	f7fd fcc7 	bl	8000b30 <__aeabi_fsub>
 80031a2:	4603      	mov	r3, r0
 80031a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fcc4 	bl	8000b34 <__addsf3>
 80031ac:	4603      	mov	r3, r0
 80031ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fcbd 	bl	8000b30 <__aeabi_fsub>
 80031b6:	4603      	mov	r3, r0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
	R[5] = 2*q[2]*q[3] + 2*q0*q[1];
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fcb6 	bl	8000b34 <__addsf3>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7fd fdb5 	bl	8000d44 <__aeabi_fmul>
 80031da:	4603      	mov	r3, r0
 80031dc:	461c      	mov	r4, r3
 80031de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e0:	4619      	mov	r1, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fca6 	bl	8000b34 <__addsf3>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fd fda5 	bl	8000d44 <__aeabi_fmul>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4619      	mov	r1, r3
 80031fe:	4620      	mov	r0, r4
 8003200:	f7fd fc98 	bl	8000b34 <__addsf3>
 8003204:	4603      	mov	r3, r0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
	R[6] = 2*q[1]*q[3] + 2*q0*q[2];
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3304      	adds	r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fc8f 	bl	8000b34 <__addsf3>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f7fd fd8e 	bl	8000d44 <__aeabi_fmul>
 8003228:	4603      	mov	r3, r0
 800322a:	461c      	mov	r4, r3
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	4619      	mov	r1, r3
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fc7f 	bl	8000b34 <__addsf3>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3308      	adds	r3, #8
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f7fd fd7e 	bl	8000d44 <__aeabi_fmul>
 8003248:	4603      	mov	r3, r0
 800324a:	4619      	mov	r1, r3
 800324c:	4620      	mov	r0, r4
 800324e:	f7fd fc71 	bl	8000b34 <__addsf3>
 8003252:	4603      	mov	r3, r0
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
	R[7] = 2*q[2]*q[3] - 2*q0*q[1];
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fc68 	bl	8000b34 <__addsf3>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fd fd67 	bl	8000d44 <__aeabi_fmul>
 8003276:	4603      	mov	r3, r0
 8003278:	461c      	mov	r4, r3
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	4619      	mov	r1, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fc58 	bl	8000b34 <__addsf3>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	3304      	adds	r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f7fd fd57 	bl	8000d44 <__aeabi_fmul>
 8003296:	4603      	mov	r3, r0
 8003298:	4619      	mov	r1, r3
 800329a:	4620      	mov	r0, r4
 800329c:	f7fd fc48 	bl	8000b30 <__aeabi_fsub>
 80032a0:	4603      	mov	r3, r0
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
	R[8] = r0 - r1 - r2 + r3;
 80032a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80032a8:	f7fd fc42 	bl	8000b30 <__aeabi_fsub>
 80032ac:	4603      	mov	r3, r0
 80032ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd fc3d 	bl	8000b30 <__aeabi_fsub>
 80032b6:	4603      	mov	r3, r0
 80032b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fc3a 	bl	8000b34 <__addsf3>
 80032c0:	4603      	mov	r3, r0
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
	acc2[0] = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f7fd fd39 	bl	8000d44 <__aeabi_fmul>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461c      	mov	r4, r3
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7fd fd2f 	bl	8000d44 <__aeabi_fmul>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7fd fc22 	bl	8000b34 <__addsf3>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461c      	mov	r4, r3
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3308      	adds	r3, #8
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7fd fd20 	bl	8000d44 <__aeabi_fmul>
 8003304:	4603      	mov	r3, r0
 8003306:	4619      	mov	r1, r3
 8003308:	4620      	mov	r0, r4
 800330a:	f7fd fc13 	bl	8000b34 <__addsf3>
 800330e:	4603      	mov	r3, r0
 8003310:	60fb      	str	r3, [r7, #12]
	acc2[1] = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7fd fd12 	bl	8000d44 <__aeabi_fmul>
 8003320:	4603      	mov	r3, r0
 8003322:	461c      	mov	r4, r3
 8003324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f7fd fd08 	bl	8000d44 <__aeabi_fmul>
 8003334:	4603      	mov	r3, r0
 8003336:	4619      	mov	r1, r3
 8003338:	4620      	mov	r0, r4
 800333a:	f7fd fbfb 	bl	8000b34 <__addsf3>
 800333e:	4603      	mov	r3, r0
 8003340:	461c      	mov	r4, r3
 8003342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3308      	adds	r3, #8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7fd fcf9 	bl	8000d44 <__aeabi_fmul>
 8003352:	4603      	mov	r3, r0
 8003354:	4619      	mov	r1, r3
 8003356:	4620      	mov	r0, r4
 8003358:	f7fd fbec 	bl	8000b34 <__addsf3>
 800335c:	4603      	mov	r3, r0
 800335e:	613b      	str	r3, [r7, #16]
	acc2[2] = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fd fceb 	bl	8000d44 <__aeabi_fmul>
 800336e:	4603      	mov	r3, r0
 8003370:	461c      	mov	r4, r3
 8003372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fd fce1 	bl	8000d44 <__aeabi_fmul>
 8003382:	4603      	mov	r3, r0
 8003384:	4619      	mov	r1, r3
 8003386:	4620      	mov	r0, r4
 8003388:	f7fd fbd4 	bl	8000b34 <__addsf3>
 800338c:	4603      	mov	r3, r0
 800338e:	461c      	mov	r4, r3
 8003390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3308      	adds	r3, #8
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fd fcd2 	bl	8000d44 <__aeabi_fmul>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4619      	mov	r1, r3
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7fd fbc5 	bl	8000b34 <__addsf3>
 80033aa:	4603      	mov	r3, r0
 80033ac:	617b      	str	r3, [r7, #20]
	acc[0] = acc2[0];
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
	acc[1] = acc2[1];
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	601a      	str	r2, [r3, #0]
	acc[2] = acc2[2];
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3308      	adds	r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]

}
 80033c4:	bf00      	nop
 80033c6:	3754      	adds	r7, #84	; 0x54
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}

080033cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_MspInit+0x68>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_MspInit+0x68>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6193      	str	r3, [r2, #24]
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_MspInit+0x68>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_MspInit+0x68>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_MspInit+0x68>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	61d3      	str	r3, [r2, #28]
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_MspInit+0x68>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	210f      	movs	r1, #15
 8003406:	f06f 0001 	mvn.w	r0, #1
 800340a:	f000 fb5e 	bl	8003aca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_MspInit+0x6c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_MspInit+0x6c>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	40010000 	.word	0x40010000

0800343c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <HAL_I2C_MspInit+0x70>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d123      	bne.n	80034a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 8003462:	f043 0308 	orr.w	r3, r3, #8
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003478:	2312      	movs	r3, #18
 800347a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	4619      	mov	r1, r3
 8003486:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_I2C_MspInit+0x78>)
 8003488:	f000 fb4a 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 8003492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003496:	61d3      	str	r3, [r2, #28]
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40005400 	.word	0x40005400
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010c00 	.word	0x40010c00

080034b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d10b      	bne.n	80034e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_TIM_Base_MspInit+0x34>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_TIM_Base_MspInit+0x34>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	61d3      	str	r3, [r2, #28]
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_TIM_Base_MspInit+0x34>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d142      	bne.n	8003596 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_TIM_MspPostInit+0xb0>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003540:	2303      	movs	r3, #3
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2302      	movs	r3, #2
 800354a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4619      	mov	r1, r3
 8003552:	4814      	ldr	r0, [pc, #80]	; (80035a4 <HAL_TIM_MspPostInit+0xb4>)
 8003554:	f000 fae4 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2302      	movs	r3, #2
 8003564:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	480e      	ldr	r0, [pc, #56]	; (80035a8 <HAL_TIM_MspPostInit+0xb8>)
 800356e:	f000 fad7 	bl	8003b20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_TIM_MspPostInit+0xbc>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <HAL_TIM_MspPostInit+0xbc>)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010800 	.word	0x40010800
 80035a8:	40010c00 	.word	0x40010c00
 80035ac:	40010000 	.word	0x40010000

080035b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0318 	add.w	r3, r7, #24
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a37      	ldr	r2, [pc, #220]	; (80036a8 <HAL_UART_MspInit+0xf8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d132      	bne.n	8003636 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6193      	str	r3, [r2, #24]
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_UART_MspInit+0xfc>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	f107 0318 	add.w	r3, r7, #24
 8003612:	4619      	mov	r1, r3
 8003614:	4826      	ldr	r0, [pc, #152]	; (80036b0 <HAL_UART_MspInit+0x100>)
 8003616:	f000 fa83 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800361a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800361e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	f107 0318 	add.w	r3, r7, #24
 800362c:	4619      	mov	r1, r3
 800362e:	4820      	ldr	r0, [pc, #128]	; (80036b0 <HAL_UART_MspInit+0x100>)
 8003630:	f000 fa76 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003634:	e034      	b.n	80036a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <HAL_UART_MspInit+0x104>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d12f      	bne.n	80036a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_UART_MspInit+0xfc>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_UART_MspInit+0xfc>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_UART_MspInit+0xfc>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_UART_MspInit+0xfc>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <HAL_UART_MspInit+0xfc>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_UART_MspInit+0xfc>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003670:	2304      	movs	r3, #4
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 0318 	add.w	r3, r7, #24
 8003680:	4619      	mov	r1, r3
 8003682:	480b      	ldr	r0, [pc, #44]	; (80036b0 <HAL_UART_MspInit+0x100>)
 8003684:	f000 fa4c 	bl	8003b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003688:	2308      	movs	r3, #8
 800368a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	4619      	mov	r1, r3
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <HAL_UART_MspInit+0x100>)
 800369c:	f000 fa40 	bl	8003b20 <HAL_GPIO_Init>
}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	; 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010800 	.word	0x40010800
 80036b4:	40004400 	.word	0x40004400

080036b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80036c8:	2200      	movs	r2, #0
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	201e      	movs	r0, #30
 80036ce:	f000 f9fc 	bl	8003aca <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80036d2:	201e      	movs	r0, #30
 80036d4:	f000 fa15 	bl	8003b02 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80036d8:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <HAL_InitTick+0xa0>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_InitTick+0xa0>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_InitTick+0xa0>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036f0:	f107 0210 	add.w	r2, r7, #16
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fee8 	bl	80054d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003700:	f001 febe 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8003704:	4603      	mov	r3, r0
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_InitTick+0xa4>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	3b01      	subs	r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_InitTick+0xa8>)
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <HAL_InitTick+0xac>)
 800371c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_InitTick+0xa8>)
 8003720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003724:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <HAL_InitTick+0xa8>)
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <HAL_InitTick+0xa8>)
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_InitTick+0xa8>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003738:	4809      	ldr	r0, [pc, #36]	; (8003760 <HAL_InitTick+0xa8>)
 800373a:	f001 ff31 	bl	80055a0 <HAL_TIM_Base_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003744:	4806      	ldr	r0, [pc, #24]	; (8003760 <HAL_InitTick+0xa8>)
 8003746:	f001 ff56 	bl	80055f6 <HAL_TIM_Base_Start_IT>
 800374a:	4603      	mov	r3, r0
 800374c:	e000      	b.n	8003750 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	431bde83 	.word	0x431bde83
 8003760:	20004070 	.word	0x20004070
 8003764:	40000800 	.word	0x40000800

08003768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800376c:	f001 fee0 	bl	8005530 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}

08003774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003778:	e7fe      	b.n	8003778 <HardFault_Handler+0x4>

0800377a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <MemManage_Handler+0x4>

08003780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <BusFault_Handler+0x4>

08003786 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <UsageFault_Handler+0x4>

0800378c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <TIM4_IRQHandler+0x10>)
 800379e:	f001 ffb3 	bl	8005708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20004070 	.word	0x20004070

080037ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x50>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x16>
		heap_end = &end;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <_sbrk+0x50>)
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <_sbrk+0x54>)
 80037c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <_sbrk+0x50>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <_sbrk+0x50>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	466a      	mov	r2, sp
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d907      	bls.n	80037e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037d6:	f005 fc61 	bl	800909c <__errno>
 80037da:	4602      	mov	r2, r0
 80037dc:	230c      	movs	r3, #12
 80037de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e006      	b.n	80037f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <_sbrk+0x50>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a03      	ldr	r2, [pc, #12]	; (80037fc <_sbrk+0x50>)
 80037f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000244 	.word	0x20000244
 8003800:	200040f8 	.word	0x200040f8

08003804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <SystemInit+0x5c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <SystemInit+0x5c>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <SystemInit+0x5c>)
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4911      	ldr	r1, [pc, #68]	; (8003860 <SystemInit+0x5c>)
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <SystemInit+0x60>)
 800381c:	4013      	ands	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <SystemInit+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <SystemInit+0x5c>)
 8003826:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <SystemInit+0x5c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <SystemInit+0x5c>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <SystemInit+0x5c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <SystemInit+0x5c>)
 8003842:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003846:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <SystemInit+0x5c>)
 800384a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800384e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <SystemInit+0x64>)
 8003852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003856:	609a      	str	r2, [r3, #8]
#endif 
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40021000 	.word	0x40021000
 8003864:	f8ff0000 	.word	0xf8ff0000
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800386c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800386e:	e003      	b.n	8003878 <LoopCopyDataInit>

08003870 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003872:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003874:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003876:	3104      	adds	r1, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003878:	480a      	ldr	r0, [pc, #40]	; (80038a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800387c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800387e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003880:	d3f6      	bcc.n	8003870 <CopyDataInit>
  ldr r2, =_sbss
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003884:	e002      	b.n	800388c <LoopFillZerobss>

08003886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003888:	f842 3b04 	str.w	r3, [r2], #4

0800388c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800388e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003890:	d3f9      	bcc.n	8003886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003892:	f7ff ffb7 	bl	8003804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003896:	f005 fc07 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800389a:	f7fe fc55 	bl	8002148 <main>
  bx lr
 800389e:	4770      	bx	lr
  ldr r3, =_sidata
 80038a0:	0800cee8 	.word	0x0800cee8
  ldr r0, =_sdata
 80038a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038a8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80038ac:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80038b0:	200040f8 	.word	0x200040f8

080038b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC1_2_IRQHandler>
	...

080038b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_Init+0x28>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <HAL_Init+0x28>)
 80038c2:	f043 0310 	orr.w	r3, r3, #16
 80038c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c8:	2003      	movs	r0, #3
 80038ca:	f000 f8f3 	bl	8003ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7ff fef2 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d4:	f7ff fd7a 	bl	80033cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000

080038e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_IncTick+0x1c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_IncTick+0x20>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	4a03      	ldr	r2, [pc, #12]	; (8003904 <HAL_IncTick+0x20>)
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	2000000c 	.word	0x2000000c
 8003904:	200040b0 	.word	0x200040b0

08003908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return uwTick;
 800390c:	4b02      	ldr	r3, [pc, #8]	; (8003918 <HAL_GetTick+0x10>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	200040b0 	.word	0x200040b0

0800391c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003924:	f7ff fff0 	bl	8003908 <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d005      	beq.n	8003942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_Delay+0x40>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003942:	bf00      	nop
 8003944:	f7ff ffe0 	bl	8003908 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8f7      	bhi.n	8003944 <HAL_Delay+0x28>
  {
  }
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	2000000c 	.word	0x2000000c

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800398c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60d3      	str	r3, [r2, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4906      	ldr	r1, [pc, #24]	; (80039f8 <__NVIC_EnableIRQ+0x34>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	; (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	; (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
         );
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff4f 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003adc:	f7ff ff64 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff ffb2 	bl	8003a50 <NVIC_EncodePriority>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff81 	bl	80039fc <__NVIC_SetPriority>
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff57 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b08b      	sub	sp, #44	; 0x2c
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b32:	e127      	b.n	8003d84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b34:	2201      	movs	r2, #1
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 8116 	bne.w	8003d7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b12      	cmp	r3, #18
 8003b58:	d034      	beq.n	8003bc4 <HAL_GPIO_Init+0xa4>
 8003b5a:	2b12      	cmp	r3, #18
 8003b5c:	d80d      	bhi.n	8003b7a <HAL_GPIO_Init+0x5a>
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x9a>
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d804      	bhi.n	8003b70 <HAL_GPIO_Init+0x50>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d031      	beq.n	8003bce <HAL_GPIO_Init+0xae>
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d01c      	beq.n	8003ba8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b6e:	e048      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d043      	beq.n	8003bfc <HAL_GPIO_Init+0xdc>
 8003b74:	2b11      	cmp	r3, #17
 8003b76:	d01b      	beq.n	8003bb0 <HAL_GPIO_Init+0x90>
          break;
 8003b78:	e043      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b7a:	4a89      	ldr	r2, [pc, #548]	; (8003da0 <HAL_GPIO_Init+0x280>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d026      	beq.n	8003bce <HAL_GPIO_Init+0xae>
 8003b80:	4a87      	ldr	r2, [pc, #540]	; (8003da0 <HAL_GPIO_Init+0x280>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d806      	bhi.n	8003b94 <HAL_GPIO_Init+0x74>
 8003b86:	4a87      	ldr	r2, [pc, #540]	; (8003da4 <HAL_GPIO_Init+0x284>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d020      	beq.n	8003bce <HAL_GPIO_Init+0xae>
 8003b8c:	4a86      	ldr	r2, [pc, #536]	; (8003da8 <HAL_GPIO_Init+0x288>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01d      	beq.n	8003bce <HAL_GPIO_Init+0xae>
          break;
 8003b92:	e036      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b94:	4a85      	ldr	r2, [pc, #532]	; (8003dac <HAL_GPIO_Init+0x28c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <HAL_GPIO_Init+0xae>
 8003b9a:	4a85      	ldr	r2, [pc, #532]	; (8003db0 <HAL_GPIO_Init+0x290>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d016      	beq.n	8003bce <HAL_GPIO_Init+0xae>
 8003ba0:	4a84      	ldr	r2, [pc, #528]	; (8003db4 <HAL_GPIO_Init+0x294>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_GPIO_Init+0xae>
          break;
 8003ba6:	e02c      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	623b      	str	r3, [r7, #32]
          break;
 8003bae:	e028      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	623b      	str	r3, [r7, #32]
          break;
 8003bb8:	e023      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	623b      	str	r3, [r7, #32]
          break;
 8003bc2:	e01e      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	623b      	str	r3, [r7, #32]
          break;
 8003bcc:	e019      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	623b      	str	r3, [r7, #32]
          break;
 8003bda:	e012      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003be4:	2308      	movs	r3, #8
 8003be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	611a      	str	r2, [r3, #16]
          break;
 8003bee:	e008      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	615a      	str	r2, [r3, #20]
          break;
 8003bfa:	e002      	b.n	8003c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
          break;
 8003c00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2bff      	cmp	r3, #255	; 0xff
 8003c06:	d801      	bhi.n	8003c0c <HAL_GPIO_Init+0xec>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	e001      	b.n	8003c10 <HAL_GPIO_Init+0xf0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2bff      	cmp	r3, #255	; 0xff
 8003c16:	d802      	bhi.n	8003c1e <HAL_GPIO_Init+0xfe>
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x104>
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	3b08      	subs	r3, #8
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	210f      	movs	r1, #15
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	401a      	ands	r2, r3
 8003c36:	6a39      	ldr	r1, [r7, #32]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8096 	beq.w	8003d7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_GPIO_Init+0x298>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_GPIO_Init+0x298>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6193      	str	r3, [r2, #24]
 8003c5e:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_GPIO_Init+0x298>)
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c6a:	4a54      	ldr	r2, [pc, #336]	; (8003dbc <HAL_GPIO_Init+0x29c>)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4b      	ldr	r2, [pc, #300]	; (8003dc0 <HAL_GPIO_Init+0x2a0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x19e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4a      	ldr	r2, [pc, #296]	; (8003dc4 <HAL_GPIO_Init+0x2a4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x19a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a49      	ldr	r2, [pc, #292]	; (8003dc8 <HAL_GPIO_Init+0x2a8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x196>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <HAL_GPIO_Init+0x2ac>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x192>
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x1a0>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x1a0>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x1a0>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x1a0>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cd0:	493a      	ldr	r1, [pc, #232]	; (8003dbc <HAL_GPIO_Init+0x29c>)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4938      	ldr	r1, [pc, #224]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	e006      	b.n	8003d06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	4933      	ldr	r1, [pc, #204]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	492e      	ldr	r1, [pc, #184]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
 8003d1e:	e006      	b.n	8003d2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4924      	ldr	r1, [pc, #144]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
 8003d46:	e006      	b.n	8003d56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d48:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	491f      	ldr	r1, [pc, #124]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	491a      	ldr	r1, [pc, #104]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60cb      	str	r3, [r1, #12]
 8003d6e:	e006      	b.n	8003d7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	4915      	ldr	r1, [pc, #84]	; (8003dd0 <HAL_GPIO_Init+0x2b0>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	3301      	adds	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f47f aed0 	bne.w	8003b34 <HAL_GPIO_Init+0x14>
  }
}
 8003d94:	bf00      	nop
 8003d96:	372c      	adds	r7, #44	; 0x2c
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	10210000 	.word	0x10210000
 8003da4:	10110000 	.word	0x10110000
 8003da8:	10120000 	.word	0x10120000
 8003dac:	10310000 	.word	0x10310000
 8003db0:	10320000 	.word	0x10320000
 8003db4:	10220000 	.word	0x10220000
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40010800 	.word	0x40010800
 8003dc4:	40010c00 	.word	0x40010c00
 8003dc8:	40011000 	.word	0x40011000
 8003dcc:	40011400 	.word	0x40011400
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
 8003de0:	4613      	mov	r3, r2
 8003de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003de4:	787b      	ldrb	r3, [r7, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003df0:	e003      	b.n	8003dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	041a      	lsls	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e10f      	b.n	8004036 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fb06 	bl	800343c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e48:	f001 fb1a 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a7b      	ldr	r2, [pc, #492]	; (8004040 <HAL_I2C_Init+0x23c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d807      	bhi.n	8003e68 <HAL_I2C_Init+0x64>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_I2C_Init+0x240>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bf94      	ite	ls
 8003e60:	2301      	movls	r3, #1
 8003e62:	2300      	movhi	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e006      	b.n	8003e76 <HAL_I2C_Init+0x72>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a77      	ldr	r2, [pc, #476]	; (8004048 <HAL_I2C_Init+0x244>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bf94      	ite	ls
 8003e70:	2301      	movls	r3, #1
 8003e72:	2300      	movhi	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0db      	b.n	8004036 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a72      	ldr	r2, [pc, #456]	; (800404c <HAL_I2C_Init+0x248>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0c9b      	lsrs	r3, r3, #18
 8003e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a64      	ldr	r2, [pc, #400]	; (8004040 <HAL_I2C_Init+0x23c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d802      	bhi.n	8003eb8 <HAL_I2C_Init+0xb4>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	e009      	b.n	8003ecc <HAL_I2C_Init+0xc8>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a63      	ldr	r2, [pc, #396]	; (8004050 <HAL_I2C_Init+0x24c>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	3301      	adds	r3, #1
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4956      	ldr	r1, [pc, #344]	; (8004040 <HAL_I2C_Init+0x23c>)
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	d80d      	bhi.n	8003f08 <HAL_I2C_Init+0x104>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e59      	subs	r1, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	bf38      	it	cc
 8003f04:	2304      	movcc	r3, #4
 8003f06:	e04f      	b.n	8003fa8 <HAL_I2C_Init+0x1a4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d111      	bne.n	8003f34 <HAL_I2C_Init+0x130>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	440b      	add	r3, r1
 8003f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e012      	b.n	8003f5a <HAL_I2C_Init+0x156>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	0099      	lsls	r1, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Init+0x15e>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e022      	b.n	8003fa8 <HAL_I2C_Init+0x1a4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10e      	bne.n	8003f88 <HAL_I2C_Init+0x184>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e58      	subs	r0, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	440b      	add	r3, r1
 8003f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Init+0x1a4>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	0099      	lsls	r1, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	6809      	ldr	r1, [r1, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6911      	ldr	r1, [r2, #16]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	000186a0 	.word	0x000186a0
 8004044:	001e847f 	.word	0x001e847f
 8004048:	003d08ff 	.word	0x003d08ff
 800404c:	431bde83 	.word	0x431bde83
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	460b      	mov	r3, r1
 8004062:	817b      	strh	r3, [r7, #10]
 8004064:	4613      	mov	r3, r2
 8004066:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7ff fc4e 	bl	8003908 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 80e0 	bne.w	800423c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2319      	movs	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	4970      	ldr	r1, [pc, #448]	; (8004248 <HAL_I2C_Master_Transmit+0x1f4>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fc3c 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	e0d3      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x50>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0cc      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d007      	beq.n	80040ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2221      	movs	r2, #33	; 0x21
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2210      	movs	r2, #16
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	893a      	ldrh	r2, [r7, #8]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a50      	ldr	r2, [pc, #320]	; (800424c <HAL_I2C_Master_Transmit+0x1f8>)
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 faca 	bl	80046ac <I2C_MasterRequestWrite>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e08d      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004138:	e066      	b.n	8004208 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fcb6 	bl	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e06b      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d11b      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x188>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	6a39      	ldr	r1, [r7, #32]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fca6 	bl	8004b32 <I2C_WaitOnBTFFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d107      	bne.n	8004204 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e01a      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d194      	bne.n	800413a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	00100002 	.word	0x00100002
 800424c:	ffff0000 	.word	0xffff0000

08004250 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	; 0x30
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	460b      	mov	r3, r1
 800425e:	817b      	strh	r3, [r7, #10]
 8004260:	4613      	mov	r3, r2
 8004262:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff fb50 	bl	8003908 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b20      	cmp	r3, #32
 8004274:	f040 8213 	bne.w	800469e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2319      	movs	r3, #25
 800427e:	2201      	movs	r2, #1
 8004280:	497e      	ldr	r1, [pc, #504]	; (800447c <HAL_I2C_Master_Receive+0x22c>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb3e 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
 8004290:	e206      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_I2C_Master_Receive+0x50>
 800429c:	2302      	movs	r3, #2
 800429e:	e1ff      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d007      	beq.n	80042c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2222      	movs	r2, #34	; 0x22
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2210      	movs	r2, #16
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a5e      	ldr	r2, [pc, #376]	; (8004480 <HAL_I2C_Master_Receive+0x230>)
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fa42 	bl	8004798 <I2C_MasterRequestRead>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c0      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d113      	bne.n	800434e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	623b      	str	r3, [r7, #32]
 800433a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e194      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b01      	cmp	r3, #1
 8004354:	d11d      	bne.n	8004392 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004366:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800438e:	b662      	cpsie	i
 8004390:	e172      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b02      	cmp	r3, #2
 8004398:	d11d      	bne.n	80043d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043aa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043d2:	b662      	cpsie	i
 80043d4:	e150      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043fc:	e13c      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b03      	cmp	r3, #3
 8004404:	f200 80f5 	bhi.w	80045f2 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	2b01      	cmp	r3, #1
 800440e:	d123      	bne.n	8004458 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fbcd 	bl	8004bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e13d      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004456:	e10f      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	2b02      	cmp	r3, #2
 800445e:	d150      	bne.n	8004502 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	2200      	movs	r2, #0
 8004468:	4906      	ldr	r1, [pc, #24]	; (8004484 <HAL_I2C_Master_Receive+0x234>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa4a 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e112      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004488:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044cc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004500:	e0ba      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	4967      	ldr	r1, [pc, #412]	; (80046a8 <HAL_I2C_Master_Receive+0x458>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f9f9 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0c1      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800452c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	494f      	ldr	r1, [pc, #316]	; (80046a8 <HAL_I2C_Master_Receive+0x458>)
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f9ca 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e092      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045bc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f0:	e042      	b.n	8004678 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fadc 	bl	8004bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e04c      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d118      	bne.n	8004678 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f aebe 	bne.w	80043fe <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3728      	adds	r7, #40	; 0x28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00010004 	.word	0x00010004

080046ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	460b      	mov	r3, r1
 80046ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d006      	beq.n	80046d6 <I2C_MasterRequestWrite+0x2a>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d003      	beq.n	80046d6 <I2C_MasterRequestWrite+0x2a>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d4:	d108      	bne.n	80046e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e00b      	b.n	8004700 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	2b12      	cmp	r3, #18
 80046ee:	d107      	bne.n	8004700 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f8f9 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e035      	b.n	8004788 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004724:	d108      	bne.n	8004738 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004734:	611a      	str	r2, [r3, #16]
 8004736:	e01b      	b.n	8004770 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	11db      	asrs	r3, r3, #7
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 0306 	and.w	r3, r3, #6
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f063 030f 	orn	r3, r3, #15
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <I2C_MasterRequestWrite+0xe4>)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f92b 	bl	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e010      	b.n	8004788 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4907      	ldr	r1, [pc, #28]	; (8004794 <I2C_MasterRequestWrite+0xe8>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f91b 	bl	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00010008 	.word	0x00010008
 8004794:	00010002 	.word	0x00010002

08004798 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	460b      	mov	r3, r1
 80047a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d006      	beq.n	80047d2 <I2C_MasterRequestRead+0x3a>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d003      	beq.n	80047d2 <I2C_MasterRequestRead+0x3a>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d0:	d108      	bne.n	80047e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e00b      	b.n	80047fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b11      	cmp	r3, #17
 80047ea:	d107      	bne.n	80047fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f87b 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e06d      	b.n	80048f4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	e053      	b.n	80048dc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004834:	897b      	ldrh	r3, [r7, #10]
 8004836:	11db      	asrs	r3, r3, #7
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f063 030f 	orn	r3, r3, #15
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	492a      	ldr	r1, [pc, #168]	; (80048fc <I2C_MasterRequestRead+0x164>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f8ad 	bl	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e048      	b.n	80048f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4923      	ldr	r1, [pc, #140]	; (8004900 <I2C_MasterRequestRead+0x168>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f89d 	bl	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e038      	b.n	80048f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f825 	bl	8004904 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e017      	b.n	80048f4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	11db      	asrs	r3, r3, #7
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f063 030e 	orn	r3, r3, #14
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <I2C_MasterRequestRead+0x168>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f865 	bl	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	00010008 	.word	0x00010008
 8004900:	00010002 	.word	0x00010002

08004904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004914:	e025      	b.n	8004962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d021      	beq.n	8004962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fe fff3 	bl	8003908 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e023      	b.n	80049aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10d      	bne.n	8004988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	e00c      	b.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	43da      	mvns	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0b6      	beq.n	8004916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c0:	e051      	b.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d0:	d123      	bne.n	8004a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e046      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fe ff71 	bl	8003908 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e020      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10c      	bne.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	43da      	mvns	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e00b      	b.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	43da      	mvns	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d18d      	bne.n	80049c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004abc:	e02d      	b.n	8004b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f8ce 	bl	8004c60 <I2C_IsAcknowledgeFailed>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e02d      	b.n	8004b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe ff17 	bl	8003908 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e007      	b.n	8004b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d1ca      	bne.n	8004abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b3e:	e02d      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f88d 	bl	8004c60 <I2C_IsAcknowledgeFailed>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e02d      	b.n	8004bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d021      	beq.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b58:	f7fe fed6 	bl	8003908 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e007      	b.n	8004bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d1ca      	bne.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bc0:	e042      	b.n	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d119      	bne.n	8004c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0210 	mvn.w	r2, #16
 8004bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e029      	b.n	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7fe fe80 	bl	8003908 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e007      	b.n	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d1b5      	bne.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d11b      	bne.n	8004cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e26c      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8087 	beq.w	8004dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cdc:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ce8:	4b8f      	ldr	r3, [pc, #572]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d112      	bne.n	8004d1a <HAL_RCC_OscConfig+0x5e>
 8004cf4:	4b8c      	ldr	r3, [pc, #560]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d10b      	bne.n	8004d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d02:	4b89      	ldr	r3, [pc, #548]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d06c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x12c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d168      	bne.n	8004de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e246      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x76>
 8004d24:	4b80      	ldr	r3, [pc, #512]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7f      	ldr	r2, [pc, #508]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e02e      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x98>
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7a      	ldr	r2, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b78      	ldr	r3, [pc, #480]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a77      	ldr	r2, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0xbc>
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a71      	ldr	r2, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6e      	ldr	r2, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d78:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6a      	ldr	r2, [pc, #424]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fe fdb6 	bl	8003908 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fe fdb2 	bl	8003908 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1fa      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xe4>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fda2 	bl	8003908 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fd9e 	bl	8003908 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1e6      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x10c>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x18c>
 8004e0e:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x176>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1ba      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4939      	ldr	r1, [pc, #228]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <HAL_RCC_OscConfig+0x270>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fe fd57 	bl	8003908 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fd53 	bl	8003908 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e19b      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4927      	ldr	r1, [pc, #156]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <HAL_RCC_OscConfig+0x270>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fe fd36 	bl	8003908 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fe fd32 	bl	8003908 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e17a      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d03a      	beq.n	8004f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d019      	beq.n	8004f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fe fd16 	bl	8003908 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe fd12 	bl	8003908 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e15a      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004efe:	2001      	movs	r0, #1
 8004f00:	f000 fb2a 	bl	8005558 <RCC_Delay>
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0c:	f7fe fcfc 	bl	8003908 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f12:	e00f      	b.n	8004f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f14:	f7fe fcf8 	bl	8003908 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d908      	bls.n	8004f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e140      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	42420000 	.word	0x42420000
 8004f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	4b9e      	ldr	r3, [pc, #632]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e9      	bne.n	8004f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a6 	beq.w	800509a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f52:	4b97      	ldr	r3, [pc, #604]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4a93      	ldr	r2, [pc, #588]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f68:	61d3      	str	r3, [r2, #28]
 8004f6a:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b8e      	ldr	r3, [pc, #568]	; (80051b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d118      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f86:	4b8b      	ldr	r3, [pc, #556]	; (80051b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a8a      	ldr	r2, [pc, #552]	; (80051b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fe fcb9 	bl	8003908 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9a:	f7fe fcb5 	bl	8003908 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b64      	cmp	r3, #100	; 0x64
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0fd      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fac:	4b81      	ldr	r3, [pc, #516]	; (80051b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x312>
 8004fc0:	4b7b      	ldr	r3, [pc, #492]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a7a      	ldr	r2, [pc, #488]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	e02d      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x334>
 8004fd6:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4a72      	ldr	r2, [pc, #456]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	6213      	str	r3, [r2, #32]
 8004fee:	e01c      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCC_OscConfig+0x356>
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a6c      	ldr	r2, [pc, #432]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	f043 0304 	orr.w	r3, r3, #4
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4a69      	ldr	r2, [pc, #420]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6213      	str	r3, [r2, #32]
 8005010:	e00b      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8005012:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a66      	ldr	r2, [pc, #408]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d015      	beq.n	800505e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fe fc69 	bl	8003908 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005038:	e00a      	b.n	8005050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fe fc65 	bl	8003908 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e0ab      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005050:	4b57      	ldr	r3, [pc, #348]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0ee      	beq.n	800503a <HAL_RCC_OscConfig+0x37e>
 800505c:	e014      	b.n	8005088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fe fc53 	bl	8003908 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe fc4f 	bl	8003908 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e095      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507c:	4b4c      	ldr	r3, [pc, #304]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ee      	bne.n	8005066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508e:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	4a47      	ldr	r2, [pc, #284]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8081 	beq.w	80051a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a4:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d061      	beq.n	8005174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d146      	bne.n	8005146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_OscConfig+0x4fc>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7fe fc23 	bl	8003908 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c6:	f7fe fc1f 	bl	8003908 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e067      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d8:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d108      	bne.n	8005100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ee:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	492d      	ldr	r1, [pc, #180]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a19      	ldr	r1, [r3, #32]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	430b      	orrs	r3, r1
 8005112:	4927      	ldr	r1, [pc, #156]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_RCC_OscConfig+0x4fc>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fe fbf3 	bl	8003908 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fe fbef 	bl	8003908 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e037      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x46a>
 8005144:	e02f      	b.n	80051a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <HAL_RCC_OscConfig+0x4fc>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fe fbdc 	bl	8003908 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fe fbd8 	bl	8003908 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e020      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x498>
 8005172:	e018      	b.n	80051a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e013      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_OscConfig+0x4f4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	429a      	cmp	r2, r3
 8005192:	d106      	bne.n	80051a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40007000 	.word	0x40007000
 80051b8:	42420060 	.word	0x42420060

080051bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0d0      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b67      	ldr	r3, [pc, #412]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0207 	bic.w	r2, r3, #7
 80051e6:	4965      	ldr	r1, [pc, #404]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b63      	ldr	r3, [pc, #396]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0b8      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005230:	4b53      	ldr	r3, [pc, #332]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800523a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b50      	ldr	r3, [pc, #320]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	494d      	ldr	r1, [pc, #308]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07f      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e073      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528a:	4b3d      	ldr	r3, [pc, #244]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06b      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4936      	ldr	r1, [pc, #216]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fe fb2c 	bl	8003908 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fe fb28 	bl	8003908 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e053      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d210      	bcs.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4922      	ldr	r1, [pc, #136]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e032      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4916      	ldr	r1, [pc, #88]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534a:	f000 f82d 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 800534e:	4601      	mov	r1, r0
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	5cd3      	ldrb	r3, [r2, r3]
 800535e:	fa21 f303 	lsr.w	r3, r1, r3
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe f9a4 	bl	80036b8 <HAL_InitTick>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
 8005384:	0800ca4c 	.word	0x0800ca4c
 8005388:	20000004 	.word	0x20000004
 800538c:	20000008 	.word	0x20000008

08005390 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <HAL_RCC_EnableCSS+0x14>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	4242004c 	.word	0x4242004c

080053a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a8:	b490      	push	{r4, r7}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053b0:	1d3c      	adds	r4, r7, #4
 80053b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053b8:	4b28      	ldr	r3, [pc, #160]	; (800545c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053d2:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d002      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x40>
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d003      	beq.n	80053ee <HAL_RCC_GetSysClockFreq+0x46>
 80053e6:	e02d      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053ea:	623b      	str	r3, [r7, #32]
      break;
 80053ec:	e02d      	b.n	800544a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	0c9b      	lsrs	r3, r3, #18
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053fa:	4413      	add	r3, r2
 80053fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005400:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800540c:	4b14      	ldr	r3, [pc, #80]	; (8005460 <HAL_RCC_GetSysClockFreq+0xb8>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0c5b      	lsrs	r3, r3, #17
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800541a:	4413      	add	r3, r2
 800541c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005426:	fb02 f203 	mul.w	r2, r2, r3
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	e004      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	623b      	str	r3, [r7, #32]
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005446:	623b      	str	r3, [r7, #32]
      break;
 8005448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544a:	6a3b      	ldr	r3, [r7, #32]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	; 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc90      	pop	{r4, r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	0800c9fc 	.word	0x0800c9fc
 800545c:	0800ca0c 	.word	0x0800ca0c
 8005460:	40021000 	.word	0x40021000
 8005464:	007a1200 	.word	0x007a1200
 8005468:	003d0900 	.word	0x003d0900

0800546c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <HAL_RCC_GetHCLKFreq+0x10>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	20000004 	.word	0x20000004

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005484:	f7ff fff2 	bl	800546c <HAL_RCC_GetHCLKFreq>
 8005488:	4601      	mov	r1, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800ca5c 	.word	0x0800ca5c

080054a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054ac:	f7ff ffde 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b0:	4601      	mov	r1, r0
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	0adb      	lsrs	r3, r3, #11
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4a03      	ldr	r2, [pc, #12]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	0800ca5c 	.word	0x0800ca5c

080054d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	220f      	movs	r2, #15
 80054de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_GetClockConfig+0x58>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 0203 	and.w	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_RCC_GetClockConfig+0x58>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_GetClockConfig+0x58>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_RCC_GetClockConfig+0x58>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_RCC_GetClockConfig+0x5c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0207 	and.w	r2, r3, #7
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	40021000 	.word	0x40021000
 800552c:	40022000 	.word	0x40022000

08005530 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d104      	bne.n	800554a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005540:	f000 f828 	bl	8005594 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	701a      	strb	r2, [r3, #0]
  }
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000
 8005554:	4002100a 	.word	0x4002100a

08005558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <RCC_Delay+0x34>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <RCC_Delay+0x38>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0a5b      	lsrs	r3, r3, #9
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005574:	bf00      	nop
  }
  while (Delay --);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1e5a      	subs	r2, r3, #1
 800557a:	60fa      	str	r2, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f9      	bne.n	8005574 <RCC_Delay+0x1c>
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000004 	.word	0x20000004
 8005590:	10624dd3 	.word	0x10624dd3

08005594 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e01d      	b.n	80055ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fd ff76 	bl	80034b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f000 fb3c 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d007      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e01d      	b.n	800568a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f815 	bl	8005692 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 faee 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fd50 	bl	800615c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a10      	ldr	r2, [pc, #64]	; (8005704 <HAL_TIM_PWM_Start+0x60>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00

08005708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0202 	mvn.w	r2, #2
 8005734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa6a 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa5d 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa6c 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b04      	cmp	r3, #4
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0204 	mvn.w	r2, #4
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa40 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa33 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa42 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0208 	mvn.w	r2, #8
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2204      	movs	r2, #4
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa16 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa09 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa18 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d122      	bne.n	8005860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b10      	cmp	r3, #16
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0210 	mvn.w	r2, #16
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2208      	movs	r2, #8
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9ec 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f9df 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f9ee 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0201 	mvn.w	r2, #1
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc ff92 	bl	80027b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d107      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fcc3 	bl	800623e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9b2 	bl	8005c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0220 	mvn.w	r2, #32
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fc8e 	bl	800622c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800592e:	2302      	movs	r3, #2
 8005930:	e0b4      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	f200 809f 	bhi.w	8005a88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005985 	.word	0x08005985
 8005954:	08005a89 	.word	0x08005a89
 8005958:	08005a89 	.word	0x08005a89
 800595c:	08005a89 	.word	0x08005a89
 8005960:	080059c5 	.word	0x080059c5
 8005964:	08005a89 	.word	0x08005a89
 8005968:	08005a89 	.word	0x08005a89
 800596c:	08005a89 	.word	0x08005a89
 8005970:	08005a07 	.word	0x08005a07
 8005974:	08005a89 	.word	0x08005a89
 8005978:	08005a89 	.word	0x08005a89
 800597c:	08005a89 	.word	0x08005a89
 8005980:	08005a47 	.word	0x08005a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f9c8 	bl	8005d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0208 	orr.w	r2, r2, #8
 800599e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0204 	bic.w	r2, r2, #4
 80059ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6999      	ldr	r1, [r3, #24]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	619a      	str	r2, [r3, #24]
      break;
 80059c2:	e062      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fa0e 	bl	8005dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6999      	ldr	r1, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	619a      	str	r2, [r3, #24]
      break;
 8005a04:	e041      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fa57 	bl	8005ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0208 	orr.w	r2, r2, #8
 8005a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0204 	bic.w	r2, r2, #4
 8005a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	61da      	str	r2, [r3, #28]
      break;
 8005a44:	e021      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 faa1 	bl	8005f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	021a      	lsls	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	61da      	str	r2, [r3, #28]
      break;
 8005a86:	e000      	b.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_ConfigClockSource+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0a6      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x166>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d067      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x120>
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d80b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x6c>
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d073      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0x140>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d802      	bhi.n	8005b06 <HAL_TIM_ConfigClockSource+0x62>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d06f      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b04:	e078      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d06c      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0x140>
 8005b0a:	2b30      	cmp	r3, #48	; 0x30
 8005b0c:	d06a      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b0e:	e073      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d00d      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0x8c>
 8005b14:	2b70      	cmp	r3, #112	; 0x70
 8005b16:	d804      	bhi.n	8005b22 <HAL_TIM_ConfigClockSource+0x7e>
 8005b18:	2b50      	cmp	r3, #80	; 0x50
 8005b1a:	d033      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0xe0>
 8005b1c:	2b60      	cmp	r3, #96	; 0x60
 8005b1e:	d041      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b20:	e06a      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d066      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x152>
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d017      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b2e:	e063      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f000 faed 	bl	800611e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	609a      	str	r2, [r3, #8]
      break;
 8005b5c:	e04c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f000 fad6 	bl	800611e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b80:	609a      	str	r2, [r3, #8]
      break;
 8005b82:	e039      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f000 fa4d 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2150      	movs	r1, #80	; 0x50
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 faa4 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005ba2:	e029      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6859      	ldr	r1, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f000 fa6b 	bl	800608c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2160      	movs	r1, #96	; 0x60
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fa94 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005bc2:	e019      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f000 fa2d 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fa84 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005be2:	e009      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 fa7b 	bl	80060ea <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
	...

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <TIM_Base_SetConfig+0xb8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_Base_SetConfig+0x30>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d007      	beq.n	8005c8c <TIM_Base_SetConfig+0x30>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <TIM_Base_SetConfig+0xbc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0x30>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0xc0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <TIM_Base_SetConfig+0xb8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0x62>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x62>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <TIM_Base_SetConfig+0xbc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x62>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <TIM_Base_SetConfig+0xc0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <TIM_Base_SetConfig+0xb8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d103      	bne.n	8005d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	615a      	str	r2, [r3, #20]
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800

08005d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0302 	bic.w	r3, r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <TIM_OC1_SetConfig+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d10c      	bne.n	8005d96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0308 	bic.w	r3, r3, #8
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <TIM_OC1_SetConfig+0xc8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d111      	bne.n	8005dc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00

08005dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0210 	bic.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <TIM_OC2_SetConfig+0xd0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC2_SetConfig+0xd0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d113      	bne.n	8005e98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	40012c00 	.word	0x40012c00

08005ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <TIM_OC3_SetConfig+0xd0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10d      	bne.n	8005f3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <TIM_OC3_SetConfig+0xd0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d113      	bne.n	8005f6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc80      	pop	{r7}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40012c00 	.word	0x40012c00

08005f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a0f      	ldr	r2, [pc, #60]	; (800602c <TIM_OC4_SetConfig+0x98>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d109      	bne.n	8006008 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	019b      	lsls	r3, r3, #6
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00

08006030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	031b      	lsls	r3, r3, #12
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	f043 0307 	orr.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006138:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	021a      	lsls	r2, r3, #8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	431a      	orrs	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4313      	orrs	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	609a      	str	r2, [r3, #8]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2201      	movs	r2, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e032      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e03f      	b.n	80062e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fd f99a 	bl	80035b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2224      	movs	r2, #36	; 0x24
 8006280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f90b 	bl	80064b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695a      	ldr	r2, [r3, #20]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b088      	sub	sp, #32
 80062ee:	af02      	add	r7, sp, #8
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b20      	cmp	r3, #32
 8006308:	f040 8083 	bne.w	8006412 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_UART_Transmit+0x2e>
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e07b      	b.n	8006414 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UART_Transmit+0x40>
 8006326:	2302      	movs	r3, #2
 8006328:	e074      	b.n	8006414 <HAL_UART_Transmit+0x12a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2221      	movs	r2, #33	; 0x21
 800633c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006340:	f7fd fae2 	bl	8003908 <HAL_GetTick>
 8006344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006352:	e042      	b.n	80063da <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d122      	bne.n	80063b2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2200      	movs	r2, #0
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 f850 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e046      	b.n	8006414 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006398:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	3302      	adds	r3, #2
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	e017      	b.n	80063da <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	e013      	b.n	80063da <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f82d 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e023      	b.n	8006414 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	60ba      	str	r2, [r7, #8]
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1b7      	bne.n	8006354 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2200      	movs	r2, #0
 80063ec:	2140      	movs	r1, #64	; 0x40
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f814 	bl	800641c <UART_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00a      	b.n	8006414 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
  }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642c:	e02c      	b.n	8006488 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d028      	beq.n	8006488 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <UART_WaitOnFlagUntilTimeout+0x30>
 800643c:	f7fd fa64 	bl	8003908 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d21d      	bcs.n	8006488 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800645a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e00f      	b.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4013      	ands	r3, r2
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d0c3      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064ea:	f023 030c 	bic.w	r3, r3, #12
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a52      	ldr	r2, [pc, #328]	; (800665c <UART_SetConfig+0x1ac>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d14e      	bne.n	80065b6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006518:	f7fe ffc6 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 800651c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009a      	lsls	r2, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	4a4a      	ldr	r2, [pc, #296]	; (8006660 <UART_SetConfig+0x1b0>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	0119      	lsls	r1, r3, #4
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009a      	lsls	r2, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	fbb2 f2f3 	udiv	r2, r2, r3
 8006554:	4b42      	ldr	r3, [pc, #264]	; (8006660 <UART_SetConfig+0x1b0>)
 8006556:	fba3 0302 	umull	r0, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2064      	movs	r0, #100	; 0x64
 800655e:	fb00 f303 	mul.w	r3, r0, r3
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	3332      	adds	r3, #50	; 0x32
 8006568:	4a3d      	ldr	r2, [pc, #244]	; (8006660 <UART_SetConfig+0x1b0>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006574:	4419      	add	r1, r3
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009a      	lsls	r2, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	fbb2 f2f3 	udiv	r2, r2, r3
 800658c:	4b34      	ldr	r3, [pc, #208]	; (8006660 <UART_SetConfig+0x1b0>)
 800658e:	fba3 0302 	umull	r0, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2064      	movs	r0, #100	; 0x64
 8006596:	fb00 f303 	mul.w	r3, r0, r3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	3332      	adds	r3, #50	; 0x32
 80065a0:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <UART_SetConfig+0x1b0>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	440a      	add	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80065b4:	e04d      	b.n	8006652 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7fe ff63 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 80065ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009a      	lsls	r2, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	4a23      	ldr	r2, [pc, #140]	; (8006660 <UART_SetConfig+0x1b0>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	0119      	lsls	r1, r3, #4
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009a      	lsls	r2, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <UART_SetConfig+0x1b0>)
 80065f4:	fba3 0302 	umull	r0, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2064      	movs	r0, #100	; 0x64
 80065fc:	fb00 f303 	mul.w	r3, r0, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	3332      	adds	r3, #50	; 0x32
 8006606:	4a16      	ldr	r2, [pc, #88]	; (8006660 <UART_SetConfig+0x1b0>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006612:	4419      	add	r1, r3
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009a      	lsls	r2, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	fbb2 f2f3 	udiv	r2, r2, r3
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <UART_SetConfig+0x1b0>)
 800662c:	fba3 0302 	umull	r0, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2064      	movs	r0, #100	; 0x64
 8006634:	fb00 f303 	mul.w	r3, r0, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	3332      	adds	r3, #50	; 0x32
 800663e:	4a08      	ldr	r2, [pc, #32]	; (8006660 <UART_SetConfig+0x1b0>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	440a      	add	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40013800 	.word	0x40013800
 8006660:	51eb851f 	.word	0x51eb851f

08006664 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666a:	f3ef 8305 	mrs	r3, IPSR
 800666e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006676:	f3ef 8310 	mrs	r3, PRIMASK
 800667a:	607b      	str	r3, [r7, #4]
  return(result);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <osKernelInitialize+0x32>
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <osKernelInitialize+0x60>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d109      	bne.n	800669e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800668a:	f3ef 8311 	mrs	r3, BASEPRI
 800668e:	603b      	str	r3, [r7, #0]
  return(result);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006696:	f06f 0305 	mvn.w	r3, #5
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e00c      	b.n	80066b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <osKernelInitialize+0x60>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80066a6:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <osKernelInitialize+0x60>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e002      	b.n	80066b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr
 80066c4:	20000248 	.word	0x20000248

080066c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ce:	f3ef 8305 	mrs	r3, IPSR
 80066d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10f      	bne.n	80066fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066da:	f3ef 8310 	mrs	r3, PRIMASK
 80066de:	607b      	str	r3, [r7, #4]
  return(result);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <osKernelStart+0x32>
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <osKernelStart+0x64>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d109      	bne.n	8006702 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ee:	f3ef 8311 	mrs	r3, BASEPRI
 80066f2:	603b      	str	r3, [r7, #0]
  return(result);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <osKernelStart+0x3a>
    stat = osErrorISR;
 80066fa:	f06f 0305 	mvn.w	r3, #5
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e00e      	b.n	8006720 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <osKernelStart+0x64>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <osKernelStart+0x64>)
 800670c:	2202      	movs	r2, #2
 800670e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006710:	f001 f8d8 	bl	80078c4 <vTaskStartScheduler>
      stat = osOK;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e002      	b.n	8006720 <osKernelStart+0x58>
    } else {
      stat = osError;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000248 	.word	0x20000248

08006730 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006736:	f3ef 8305 	mrs	r3, IPSR
 800673a:	60bb      	str	r3, [r7, #8]
  return(result);
 800673c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	607b      	str	r3, [r7, #4]
  return(result);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <osKernelGetTickCount+0x32>
 800674e:	4b0b      	ldr	r3, [pc, #44]	; (800677c <osKernelGetTickCount+0x4c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d109      	bne.n	800676a <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006756:	f3ef 8311 	mrs	r3, BASEPRI
 800675a:	603b      	str	r3, [r7, #0]
  return(result);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006762:	f001 f9cb 	bl	8007afc <xTaskGetTickCountFromISR>
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	e002      	b.n	8006770 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800676a:	f001 f9b9 	bl	8007ae0 <xTaskGetTickCount>
 800676e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006770:	68fb      	ldr	r3, [r7, #12]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000248 	.word	0x20000248

08006780 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b092      	sub	sp, #72	; 0x48
 8006784:	af04      	add	r7, sp, #16
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006790:	f3ef 8305 	mrs	r3, IPSR
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 8094 	bne.w	80068c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679e:	f3ef 8310 	mrs	r3, PRIMASK
 80067a2:	623b      	str	r3, [r7, #32]
  return(result);
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 808d 	bne.w	80068c6 <osThreadNew+0x146>
 80067ac:	4b48      	ldr	r3, [pc, #288]	; (80068d0 <osThreadNew+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d106      	bne.n	80067c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067b4:	f3ef 8311 	mrs	r3, BASEPRI
 80067b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 8082 	bne.w	80068c6 <osThreadNew+0x146>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d07e      	beq.n	80068c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80067cc:	2318      	movs	r3, #24
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80067d0:	2300      	movs	r3, #0
 80067d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80067d4:	f107 031b 	add.w	r3, r7, #27
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d045      	beq.n	8006872 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <osThreadNew+0x74>
        name = attr->name;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <osThreadNew+0x9a>
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	2b38      	cmp	r3, #56	; 0x38
 800680c:	d805      	bhi.n	800681a <osThreadNew+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <osThreadNew+0x9e>
        return (NULL);
 800681a:	2300      	movs	r3, #0
 800681c:	e054      	b.n	80068c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <osThreadNew+0xd4>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b5b      	cmp	r3, #91	; 0x5b
 800683c:	d90a      	bls.n	8006854 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006842:	2b00      	cmp	r3, #0
 8006844:	d006      	beq.n	8006854 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <osThreadNew+0xd4>
        mem = 1;
 800684e:	2301      	movs	r3, #1
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
 8006852:	e010      	b.n	8006876 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10c      	bne.n	8006876 <osThreadNew+0xf6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d108      	bne.n	8006876 <osThreadNew+0xf6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <osThreadNew+0xf6>
          mem = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006870:	e001      	b.n	8006876 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	2b01      	cmp	r3, #1
 800687a:	d110      	bne.n	800689e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006884:	9202      	str	r2, [sp, #8]
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fe08 	bl	80074a8 <xTaskCreateStatic>
 8006898:	4603      	mov	r3, r0
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e013      	b.n	80068c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d110      	bne.n	80068c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fe4f 	bl	800755a <xTaskCreate>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <osThreadNew+0x146>
          hTask = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3738      	adds	r7, #56	; 0x38
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000248 	.word	0x20000248

080068d4 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068dc:	f3ef 8305 	mrs	r3, IPSR
 80068e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80068e2:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ec:	617b      	str	r3, [r7, #20]
  return(result);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <osDelayUntil+0x34>
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <osDelayUntil+0x64>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d109      	bne.n	8006910 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006900:	613b      	str	r3, [r7, #16]
  return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8006908:	f06f 0305 	mvn.w	r3, #5
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	e00e      	b.n	800692e <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8006914:	f001 f8e4 	bl	8007ae0 <xTaskGetTickCount>
 8006918:	4603      	mov	r3, r0
 800691a:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4611      	mov	r1, r2
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ff51 	bl	80077d0 <vTaskDelayUntil>
  }

  return (stat);
 800692e:	69fb      	ldr	r3, [r7, #28]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000248 	.word	0x20000248

0800693c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a06      	ldr	r2, [pc, #24]	; (8006964 <vApplicationGetIdleTaskMemory+0x28>)
 800694c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a05      	ldr	r2, [pc, #20]	; (8006968 <vApplicationGetIdleTaskMemory+0x2c>)
 8006952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2280      	movs	r2, #128	; 0x80
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	2000024c 	.word	0x2000024c
 8006968:	200002a8 	.word	0x200002a8

0800696c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a07      	ldr	r2, [pc, #28]	; (8006998 <vApplicationGetTimerTaskMemory+0x2c>)
 800697c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a06      	ldr	r2, [pc, #24]	; (800699c <vApplicationGetTimerTaskMemory+0x30>)
 8006982:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800698a:	601a      	str	r2, [r3, #0]
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200004a8 	.word	0x200004a8
 800699c:	20000504 	.word	0x20000504

080069a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f103 0208 	add.w	r2, r3, #8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f103 0208 	add.w	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f103 0208 	add.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr

080069f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d103      	bne.n	8006a5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e00c      	b.n	8006a76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e002      	b.n	8006a6a <vListInsert+0x2e>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d2f6      	bcs.n	8006a64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6892      	ldr	r2, [r2, #8]
 8006ac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6852      	ldr	r2, [r2, #4]
 8006acc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d103      	bne.n	8006ae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	1e5a      	subs	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
	...

08006b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	e7fe      	b.n	8006b26 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006b28:	f001 ffee 	bl	8008b08 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	68f9      	ldr	r1, [r7, #12]
 8006b36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	441a      	add	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	22ff      	movs	r2, #255	; 0xff
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	22ff      	movs	r2, #255	; 0xff
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d114      	bne.n	8006ba8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01a      	beq.n	8006bbc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3310      	adds	r3, #16
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f930 	bl	8007df0 <xTaskRemoveFromEventList>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d012      	beq.n	8006bbc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <xQueueGenericReset+0xcc>)
 8006b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	e009      	b.n	8006bbc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3310      	adds	r3, #16
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fef7 	bl	80069a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3324      	adds	r3, #36	; 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fef2 	bl	80069a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bbc:	f001 ffd2 	bl	8008b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bc0:	2301      	movs	r3, #1
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	; 0x38
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xQueueGenericCreateStatic+0x28>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <xQueueGenericCreateStatic+0x42>
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <xQueueGenericCreateStatic+0x4e>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <xQueueGenericCreateStatic+0x52>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueGenericCreateStatic+0x54>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <xQueueGenericCreateStatic+0x6c>
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	e7fe      	b.n	8006c3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <xQueueGenericCreateStatic+0x78>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <xQueueGenericCreateStatic+0x7c>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <xQueueGenericCreateStatic+0x7e>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <xQueueGenericCreateStatic+0x96>
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e7fe      	b.n	8006c64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c66:	2350      	movs	r3, #80	; 0x50
 8006c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b50      	cmp	r3, #80	; 0x50
 8006c6e:	d009      	beq.n	8006c84 <xQueueGenericCreateStatic+0xb4>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	e7fe      	b.n	8006c82 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f805 	bl	8006cb4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3730      	adds	r7, #48	; 0x30
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	69b8      	ldr	r0, [r7, #24]
 8006ce6:	f7ff ff0b 	bl	8006b00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	; 0x38
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <xQueueGenericSend+0x30>
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d103      	bne.n	8006d3a <xQueueGenericSend+0x3e>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericSend+0x42>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericSend+0x44>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <xQueueGenericSend+0x5c>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	e7fe      	b.n	8006d56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d103      	bne.n	8006d66 <xQueueGenericSend+0x6a>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <xQueueGenericSend+0x6e>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <xQueueGenericSend+0x70>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <xQueueGenericSend+0x88>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	e7fe      	b.n	8006d82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d84:	f001 f9ee 	bl	8008164 <xTaskGetSchedulerState>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <xQueueGenericSend+0x98>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <xQueueGenericSend+0x9c>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <xQueueGenericSend+0x9e>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <xQueueGenericSend+0xb6>
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db2:	f001 fea9 	bl	8008b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <xQueueGenericSend+0xcc>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d129      	bne.n	8006e1c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dce:	f000 f9ff 	bl	80071d0 <prvCopyDataToQueue>
 8006dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	3324      	adds	r3, #36	; 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 f805 	bl	8007df0 <xTaskRemoveFromEventList>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dec:	4b3f      	ldr	r3, [pc, #252]	; (8006eec <xQueueGenericSend+0x1f0>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	e00a      	b.n	8006e14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <xQueueGenericSend+0x1f0>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e14:	f001 fea6 	bl	8008b64 <vPortExitCritical>
				return pdPASS;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e063      	b.n	8006ee4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e22:	f001 fe9f 	bl	8008b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e05c      	b.n	8006ee4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 f83d 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e3e:	f001 fe91 	bl	8008b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e42:	f000 fda3 	bl	800798c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e46:	f001 fe5f 	bl	8008b08 <vPortEnterCritical>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d103      	bne.n	8006e60 <xQueueGenericSend+0x164>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSend+0x17a>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e76:	f001 fe75 	bl	8008b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e7a:	1d3a      	adds	r2, r7, #4
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 f82c 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d124      	bne.n	8006ed8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e90:	f000 fa96 	bl	80073c0 <prvIsQueueFull>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 ff56 	bl	8007d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eaa:	f000 fa21 	bl	80072f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eae:	f000 fd7b 	bl	80079a8 <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f47f af7c 	bne.w	8006db2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <xQueueGenericSend+0x1f0>)
 8006ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	e772      	b.n	8006db2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f000 fa0f 	bl	80072f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed2:	f000 fd69 	bl	80079a8 <xTaskResumeAll>
 8006ed6:	e76c      	b.n	8006db2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 fa09 	bl	80072f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ede:	f000 fd63 	bl	80079a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ee2:	2300      	movs	r3, #0
		}
	}
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3738      	adds	r7, #56	; 0x38
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <xQueueGenericSendFromISR+0x2c>
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1a:	e7fe      	b.n	8006f1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <xQueueGenericSendFromISR+0x3a>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <xQueueGenericSendFromISR+0x3e>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueGenericSendFromISR+0x40>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <xQueueGenericSendFromISR+0x58>
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	e7fe      	b.n	8006f46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d103      	bne.n	8006f56 <xQueueGenericSendFromISR+0x66>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <xQueueGenericSendFromISR+0x6a>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <xQueueGenericSendFromISR+0x6c>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <xQueueGenericSendFromISR+0x84>
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e7fe      	b.n	8006f72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f74:	f001 fe82 	bl	8008c7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f78:	f3ef 8211 	mrs	r2, BASEPRI
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61ba      	str	r2, [r7, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <xQueueGenericSendFromISR+0xb6>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d12c      	bne.n	8007000 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb6:	f000 f90b 	bl	80071d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d112      	bne.n	8006fea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d016      	beq.n	8006ffa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	3324      	adds	r3, #36	; 0x24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 ff0d 	bl	8007df0 <xTaskRemoveFromEventList>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e007      	b.n	8006ffa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	b25a      	sxtb	r2, r3
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ffe:	e001      	b.n	8007004 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007000:	2300      	movs	r3, #0
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007010:	4618      	mov	r0, r3
 8007012:	3738      	adds	r7, #56	; 0x38
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007024:	2300      	movs	r3, #0
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <xQueueReceive+0x2e>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	e7fe      	b.n	8007044 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <xQueueReceive+0x3c>
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <xQueueReceive+0x40>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <xQueueReceive+0x42>
 8007058:	2300      	movs	r3, #0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <xQueueReceive+0x5a>
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e7fe      	b.n	8007070 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007072:	f001 f877 	bl	8008164 <xTaskGetSchedulerState>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xQueueReceive+0x6a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueueReceive+0x6e>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueReceive+0x70>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <xQueueReceive+0x88>
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e7fe      	b.n	800709e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070a0:	f001 fd32 	bl	8008b08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01f      	beq.n	80070f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b4:	f000 f8f6 	bl	80072a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00f      	beq.n	80070e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	3310      	adds	r3, #16
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fe8f 	bl	8007df0 <xTaskRemoveFromEventList>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070d8:	4b3c      	ldr	r3, [pc, #240]	; (80071cc <xQueueReceive+0x1b4>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070e8:	f001 fd3c 	bl	8008b64 <vPortExitCritical>
				return pdPASS;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e069      	b.n	80071c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070f6:	f001 fd35 	bl	8008b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e062      	b.n	80071c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007104:	f107 0310 	add.w	r3, r7, #16
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fed3 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007112:	f001 fd27 	bl	8008b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007116:	f000 fc39 	bl	800798c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800711a:	f001 fcf5 	bl	8008b08 <vPortEnterCritical>
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007124:	b25b      	sxtb	r3, r3
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d103      	bne.n	8007134 <xQueueReceive+0x11c>
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713a:	b25b      	sxtb	r3, r3
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d103      	bne.n	800714a <xQueueReceive+0x132>
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800714a:	f001 fd0b 	bl	8008b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800714e:	1d3a      	adds	r2, r7, #4
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fec2 	bl	8007ee0 <xTaskCheckForTimeOut>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d123      	bne.n	80071aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007164:	f000 f916 	bl	8007394 <prvIsQueueEmpty>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d017      	beq.n	800719e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fdec 	bl	8007d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	f000 f8b7 	bl	80072f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007182:	f000 fc11 	bl	80079a8 <xTaskResumeAll>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d189      	bne.n	80070a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <xQueueReceive+0x1b4>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	e780      	b.n	80070a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800719e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a0:	f000 f8a6 	bl	80072f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071a4:	f000 fc00 	bl	80079a8 <xTaskResumeAll>
 80071a8:	e77a      	b.n	80070a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ac:	f000 f8a0 	bl	80072f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071b0:	f000 fbfa 	bl	80079a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b6:	f000 f8ed 	bl	8007394 <prvIsQueueEmpty>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f43f af6f 	beq.w	80070a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3730      	adds	r7, #48	; 0x30
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10d      	bne.n	800720a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d14d      	bne.n	8007292 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ffd0 	bl	80081a0 <xTaskPriorityDisinherit>
 8007200:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	e043      	b.n	8007292 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d119      	bne.n	8007244 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6898      	ldr	r0, [r3, #8]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	461a      	mov	r2, r3
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	f001 ff68 	bl	80090f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	441a      	add	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d32b      	bcc.n	8007292 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	e026      	b.n	8007292 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68d8      	ldr	r0, [r3, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	461a      	mov	r2, r3
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	f001 ff4e 	bl	80090f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	425b      	negs	r3, r3
 800725e:	441a      	add	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d207      	bcs.n	8007280 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	425b      	negs	r3, r3
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d105      	bne.n	8007292 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	3b01      	subs	r3, #1
 8007290:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800729a:	697b      	ldr	r3, [r7, #20]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d018      	beq.n	80072e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	441a      	add	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d303      	bcc.n	80072d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68d9      	ldr	r1, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	461a      	mov	r2, r3
 80072e2:	6838      	ldr	r0, [r7, #0]
 80072e4:	f001 ff04 	bl	80090f0 <memcpy>
	}
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072f8:	f001 fc06 	bl	8008b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007302:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007304:	e011      	b.n	800732a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	d012      	beq.n	8007334 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fd6c 	bl	8007df0 <xTaskRemoveFromEventList>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800731e:	f000 fe3f 	bl	8007fa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	3b01      	subs	r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	dce9      	bgt.n	8007306 <prvUnlockQueue+0x16>
 8007332:	e000      	b.n	8007336 <prvUnlockQueue+0x46>
					break;
 8007334:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	22ff      	movs	r2, #255	; 0xff
 800733a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800733e:	f001 fc11 	bl	8008b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007342:	f001 fbe1 	bl	8008b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800734e:	e011      	b.n	8007374 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d012      	beq.n	800737e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3310      	adds	r3, #16
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fd47 	bl	8007df0 <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007368:	f000 fe1a 	bl	8007fa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	3b01      	subs	r3, #1
 8007370:	b2db      	uxtb	r3, r3
 8007372:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007378:	2b00      	cmp	r3, #0
 800737a:	dce9      	bgt.n	8007350 <prvUnlockQueue+0x60>
 800737c:	e000      	b.n	8007380 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800737e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	22ff      	movs	r2, #255	; 0xff
 8007384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007388:	f001 fbec 	bl	8008b64 <vPortExitCritical>
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800739c:	f001 fbb4 	bl	8008b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e001      	b.n	80073b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b2:	f001 fbd7 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 80073b6:	68fb      	ldr	r3, [r7, #12]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c8:	f001 fb9e 	bl	8008b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d102      	bne.n	80073de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e001      	b.n	80073e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073e2:	f001 fbbf 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e014      	b.n	800742a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007400:	4a0e      	ldr	r2, [pc, #56]	; (800743c <vQueueAddToRegistry+0x4c>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800740c:	490b      	ldr	r1, [pc, #44]	; (800743c <vQueueAddToRegistry+0x4c>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <vQueueAddToRegistry+0x4c>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007422:	e005      	b.n	8007430 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b07      	cmp	r3, #7
 800742e:	d9e7      	bls.n	8007400 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	200040b4 	.word	0x200040b4

08007440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007450:	f001 fb5a 	bl	8008b08 <vPortEnterCritical>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d103      	bne.n	800746a <vQueueWaitForMessageRestricted+0x2a>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007470:	b25b      	sxtb	r3, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d103      	bne.n	8007480 <vQueueWaitForMessageRestricted+0x40>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007480:	f001 fb70 	bl	8008b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fc81 	bl	8007d9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff28 	bl	80072f0 <prvUnlockQueue>
	}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	; 0x38
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <xTaskCreateStatic+0x28>
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
 80074ce:	e7fe      	b.n	80074ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <xTaskCreateStatic+0x42>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e7fe      	b.n	80074e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ea:	235c      	movs	r3, #92	; 0x5c
 80074ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b5c      	cmp	r3, #92	; 0x5c
 80074f2:	d009      	beq.n	8007508 <xTaskCreateStatic+0x60>
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	e7fe      	b.n	8007506 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01e      	beq.n	800754c <xTaskCreateStatic+0xa4>
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01b      	beq.n	800754c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	2202      	movs	r2, #2
 8007522:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007526:	2300      	movs	r3, #0
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	9302      	str	r3, [sp, #8]
 800752e:	f107 0314 	add.w	r3, r7, #20
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f850 	bl	80075e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007546:	f000 f8d3 	bl	80076f0 <prvAddNewTaskToReadyList>
 800754a:	e001      	b.n	8007550 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007550:	697b      	ldr	r3, [r7, #20]
	}
 8007552:	4618      	mov	r0, r3
 8007554:	3728      	adds	r7, #40	; 0x28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800755a:	b580      	push	{r7, lr}
 800755c:	b08c      	sub	sp, #48	; 0x30
 800755e:	af04      	add	r7, sp, #16
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fbc0 	bl	8008cf4 <pvPortMalloc>
 8007574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00e      	beq.n	800759a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800757c:	205c      	movs	r0, #92	; 0x5c
 800757e:	f001 fbb9 	bl	8008cf4 <pvPortMalloc>
 8007582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
 8007590:	e005      	b.n	800759e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007592:	6978      	ldr	r0, [r7, #20]
 8007594:	f001 fc70 	bl	8008e78 <vPortFree>
 8007598:	e001      	b.n	800759e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	2300      	movs	r3, #0
 80075b0:	9303      	str	r3, [sp, #12]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f80e 	bl	80075e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c8:	69f8      	ldr	r0, [r7, #28]
 80075ca:	f000 f891 	bl	80076f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e002      	b.n	80075da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075d4:	f04f 33ff 	mov.w	r3, #4294967295
 80075d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075da:	69bb      	ldr	r3, [r7, #24]
	}
 80075dc:	4618      	mov	r0, r3
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	461a      	mov	r2, r3
 80075fc:	21a5      	movs	r1, #165	; 0xa5
 80075fe:	f001 fd82 	bl	8009106 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800760c:	3b01      	subs	r3, #1
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <prvInitialiseNewTask+0x56>
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e7fe      	b.n	8007638 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e012      	b.n	8007666 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	7819      	ldrb	r1, [r3, #0]
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	3334      	adds	r3, #52	; 0x34
 8007650:	460a      	mov	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2b0f      	cmp	r3, #15
 800766a:	d9e9      	bls.n	8007640 <prvInitialiseNewTask+0x5c>
 800766c:	e000      	b.n	8007670 <prvInitialiseNewTask+0x8c>
		{
			break;
 800766e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	2b37      	cmp	r3, #55	; 0x37
 800767c:	d901      	bls.n	8007682 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800767e:	2337      	movs	r3, #55	; 0x37
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007686:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	3304      	adds	r3, #4
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff f9a0 	bl	80069de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	3318      	adds	r3, #24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff f99b 	bl	80069de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	69b8      	ldr	r0, [r7, #24]
 80076d2:	f001 f92f 	bl	8008934 <pxPortInitialiseStack>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e8:	bf00      	nop
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076f8:	f001 fa06 	bl	8008b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076fc:	4b2d      	ldr	r3, [pc, #180]	; (80077b4 <prvAddNewTaskToReadyList+0xc4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a2c      	ldr	r2, [pc, #176]	; (80077b4 <prvAddNewTaskToReadyList+0xc4>)
 8007704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007706:	4b2c      	ldr	r3, [pc, #176]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800770e:	4a2a      	ldr	r2, [pc, #168]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <prvAddNewTaskToReadyList+0xc4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d110      	bne.n	800773e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800771c:	f000 fc64 	bl	8007fe8 <prvInitialiseTaskLists>
 8007720:	e00d      	b.n	800773e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <prvAddNewTaskToReadyList+0xcc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	429a      	cmp	r2, r3
 8007736:	d802      	bhi.n	800773e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007738:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800773e:	4b20      	ldr	r3, [pc, #128]	; (80077c0 <prvAddNewTaskToReadyList+0xd0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <prvAddNewTaskToReadyList+0xd0>)
 8007746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007748:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <prvAddNewTaskToReadyList+0xd0>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <prvAddNewTaskToReadyList+0xd4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d903      	bls.n	8007764 <prvAddNewTaskToReadyList+0x74>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <prvAddNewTaskToReadyList+0xd4>)
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <prvAddNewTaskToReadyList+0xd8>)
 8007772:	441a      	add	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7ff f93b 	bl	80069f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007780:	f001 f9f0 	bl	8008b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <prvAddNewTaskToReadyList+0xcc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d207      	bcs.n	80077aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800779a:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <prvAddNewTaskToReadyList+0xdc>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000dd8 	.word	0x20000dd8
 80077b8:	20000904 	.word	0x20000904
 80077bc:	20000de4 	.word	0x20000de4
 80077c0:	20000df4 	.word	0x20000df4
 80077c4:	20000de0 	.word	0x20000de0
 80077c8:	20000908 	.word	0x20000908
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08a      	sub	sp, #40	; 0x28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <vTaskDelayUntil+0x28>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e7fe      	b.n	80077f6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <vTaskDelayUntil+0x42>
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	e7fe      	b.n	8007810 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8007812:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <vTaskDelayUntil+0xe8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <vTaskDelayUntil+0x5e>
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	e7fe      	b.n	800782c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800782e:	f000 f8ad 	bl	800798c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007832:	4b22      	ldr	r3, [pc, #136]	; (80078bc <vTaskDelayUntil+0xec>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	4413      	add	r3, r2
 8007840:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	429a      	cmp	r2, r3
 800784a:	d20b      	bcs.n	8007864 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	429a      	cmp	r2, r3
 8007854:	d211      	bcs.n	800787a <vTaskDelayUntil+0xaa>
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	429a      	cmp	r2, r3
 800785c:	d90d      	bls.n	800787a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	e00a      	b.n	800787a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	429a      	cmp	r2, r3
 800786c:	d303      	bcc.n	8007876 <vTaskDelayUntil+0xa6>
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	429a      	cmp	r2, r3
 8007874:	d901      	bls.n	800787a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007876:	2301      	movs	r3, #1
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d006      	beq.n	8007894 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fcf2 	bl	8008278 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007894:	f000 f888 	bl	80079a8 <xTaskResumeAll>
 8007898:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d107      	bne.n	80078b0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <vTaskDelayUntil+0xf0>)
 80078a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078b0:	bf00      	nop
 80078b2:	3728      	adds	r7, #40	; 0x28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000e00 	.word	0x20000e00
 80078bc:	20000ddc 	.word	0x20000ddc
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078d2:	463a      	mov	r2, r7
 80078d4:	1d39      	adds	r1, r7, #4
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f82e 	bl	800693c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	9202      	str	r2, [sp, #8]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	2300      	movs	r3, #0
 80078f0:	460a      	mov	r2, r1
 80078f2:	4920      	ldr	r1, [pc, #128]	; (8007974 <vTaskStartScheduler+0xb0>)
 80078f4:	4820      	ldr	r0, [pc, #128]	; (8007978 <vTaskStartScheduler+0xb4>)
 80078f6:	f7ff fdd7 	bl	80074a8 <xTaskCreateStatic>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b1f      	ldr	r3, [pc, #124]	; (800797c <vTaskStartScheduler+0xb8>)
 80078fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007900:	4b1e      	ldr	r3, [pc, #120]	; (800797c <vTaskStartScheduler+0xb8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e001      	b.n	8007912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007918:	f000 fd02 	bl	8008320 <xTimerCreateTimerTask>
 800791c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d115      	bne.n	8007950 <vTaskStartScheduler+0x8c>
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007936:	4b12      	ldr	r3, [pc, #72]	; (8007980 <vTaskStartScheduler+0xbc>)
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <vTaskStartScheduler+0xc0>)
 8007940:	2201      	movs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <vTaskStartScheduler+0xc4>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800794a:	f001 f86d 	bl	8008a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800794e:	e00d      	b.n	800796c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d109      	bne.n	800796c <vTaskStartScheduler+0xa8>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e7fe      	b.n	800796a <vTaskStartScheduler+0xa6>
}
 800796c:	bf00      	nop
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	0800ca10 	.word	0x0800ca10
 8007978:	08007fb9 	.word	0x08007fb9
 800797c:	20000dfc 	.word	0x20000dfc
 8007980:	20000df8 	.word	0x20000df8
 8007984:	20000de4 	.word	0x20000de4
 8007988:	20000ddc 	.word	0x20000ddc

0800798c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <vTaskSuspendAll+0x18>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	4a03      	ldr	r2, [pc, #12]	; (80079a4 <vTaskSuspendAll+0x18>)
 8007998:	6013      	str	r3, [r2, #0]
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000e00 	.word	0x20000e00

080079a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079b6:	4b41      	ldr	r3, [pc, #260]	; (8007abc <xTaskResumeAll+0x114>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <xTaskResumeAll+0x2a>
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	e7fe      	b.n	80079d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079d2:	f001 f899 	bl	8008b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <xTaskResumeAll+0x114>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4a37      	ldr	r2, [pc, #220]	; (8007abc <xTaskResumeAll+0x114>)
 80079de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e0:	4b36      	ldr	r3, [pc, #216]	; (8007abc <xTaskResumeAll+0x114>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d162      	bne.n	8007aae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079e8:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <xTaskResumeAll+0x118>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d05e      	beq.n	8007aae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f0:	e02f      	b.n	8007a52 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079f2:	4b34      	ldr	r3, [pc, #208]	; (8007ac4 <xTaskResumeAll+0x11c>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3318      	adds	r3, #24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff f854 	bl	8006aac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff f84f 	bl	8006aac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b2d      	ldr	r3, [pc, #180]	; (8007ac8 <xTaskResumeAll+0x120>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d903      	bls.n	8007a22 <xTaskResumeAll+0x7a>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <xTaskResumeAll+0x120>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4a27      	ldr	r2, [pc, #156]	; (8007acc <xTaskResumeAll+0x124>)
 8007a30:	441a      	add	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fe ffdc 	bl	80069f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <xTaskResumeAll+0x128>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a4c:	4b21      	ldr	r3, [pc, #132]	; (8007ad4 <xTaskResumeAll+0x12c>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <xTaskResumeAll+0x11c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1cb      	bne.n	80079f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a60:	f000 fb5c 	bl	800811c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <xTaskResumeAll+0x130>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d010      	beq.n	8007a92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a70:	f000 f856 	bl	8007b20 <xTaskIncrementTick>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a7a:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <xTaskResumeAll+0x12c>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f1      	bne.n	8007a70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <xTaskResumeAll+0x130>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <xTaskResumeAll+0x12c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <xTaskResumeAll+0x134>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aae:	f001 f859 	bl	8008b64 <vPortExitCritical>

	return xAlreadyYielded;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000e00 	.word	0x20000e00
 8007ac0:	20000dd8 	.word	0x20000dd8
 8007ac4:	20000d98 	.word	0x20000d98
 8007ac8:	20000de0 	.word	0x20000de0
 8007acc:	20000908 	.word	0x20000908
 8007ad0:	20000904 	.word	0x20000904
 8007ad4:	20000dec 	.word	0x20000dec
 8007ad8:	20000de8 	.word	0x20000de8
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <xTaskGetTickCount+0x18>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007aec:	687b      	ldr	r3, [r7, #4]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	20000ddc 	.word	0x20000ddc

08007afc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b02:	f001 f8bb 	bl	8008c7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <xTaskGetTickCountFromISR+0x20>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b10:	683b      	ldr	r3, [r7, #0]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000ddc 	.word	0x20000ddc

08007b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b2a:	4b51      	ldr	r3, [pc, #324]	; (8007c70 <xTaskIncrementTick+0x150>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 808d 	bne.w	8007c4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b34:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <xTaskIncrementTick+0x154>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b3c:	4a4d      	ldr	r2, [pc, #308]	; (8007c74 <xTaskIncrementTick+0x154>)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11f      	bne.n	8007b88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b48:	4b4b      	ldr	r3, [pc, #300]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <xTaskIncrementTick+0x46>
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	e7fe      	b.n	8007b64 <xTaskIncrementTick+0x44>
 8007b66:	4b44      	ldr	r3, [pc, #272]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <xTaskIncrementTick+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a41      	ldr	r2, [pc, #260]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	4a41      	ldr	r2, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x15c>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <xTaskIncrementTick+0x160>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <xTaskIncrementTick+0x160>)
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	f000 faca 	bl	800811c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d34e      	bcc.n	8007c30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b92:	4b39      	ldr	r3, [pc, #228]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <xTaskIncrementTick+0x80>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <xTaskIncrementTick+0x82>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	601a      	str	r2, [r3, #0]
					break;
 8007bae:	e03f      	b.n	8007c30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bb0:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <xTaskIncrementTick+0x158>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d203      	bcs.n	8007bd0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bc8:	4a2e      	ldr	r2, [pc, #184]	; (8007c84 <xTaskIncrementTick+0x164>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6013      	str	r3, [r2, #0]
						break;
 8007bce:	e02f      	b.n	8007c30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe ff69 	bl	8006aac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe ff60 	bl	8006aac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <xTaskIncrementTick+0x168>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d903      	bls.n	8007c00 <xTaskIncrementTick+0xe0>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <xTaskIncrementTick+0x168>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <xTaskIncrementTick+0x16c>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe feed 	bl	80069f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <xTaskIncrementTick+0x170>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3b3      	bcc.n	8007b92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	e7b0      	b.n	8007b92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <xTaskIncrementTick+0x170>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4915      	ldr	r1, [pc, #84]	; (8007c8c <xTaskIncrementTick+0x16c>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d907      	bls.n	8007c58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e004      	b.n	8007c58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTaskIncrementTick+0x174>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	4a0f      	ldr	r2, [pc, #60]	; (8007c94 <xTaskIncrementTick+0x174>)
 8007c56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <xTaskIncrementTick+0x178>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000e00 	.word	0x20000e00
 8007c74:	20000ddc 	.word	0x20000ddc
 8007c78:	20000d90 	.word	0x20000d90
 8007c7c:	20000d94 	.word	0x20000d94
 8007c80:	20000df0 	.word	0x20000df0
 8007c84:	20000df8 	.word	0x20000df8
 8007c88:	20000de0 	.word	0x20000de0
 8007c8c:	20000908 	.word	0x20000908
 8007c90:	20000904 	.word	0x20000904
 8007c94:	20000de8 	.word	0x20000de8
 8007c98:	20000dec 	.word	0x20000dec

08007c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <vTaskSwitchContext+0xa4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007caa:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <vTaskSwitchContext+0xa8>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb0:	e040      	b.n	8007d34 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <vTaskSwitchContext+0xa8>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007cb8:	4b23      	ldr	r3, [pc, #140]	; (8007d48 <vTaskSwitchContext+0xac>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e00f      	b.n	8007ce0 <vTaskSwitchContext+0x44>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <vTaskSwitchContext+0x3e>
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	e7fe      	b.n	8007cd8 <vTaskSwitchContext+0x3c>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	491a      	ldr	r1, [pc, #104]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0e5      	beq.n	8007cc0 <vTaskSwitchContext+0x24>
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007d00:	4413      	add	r3, r2
 8007d02:	60bb      	str	r3, [r7, #8]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3308      	adds	r3, #8
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d104      	bne.n	8007d24 <vTaskSwitchContext+0x88>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4a06      	ldr	r2, [pc, #24]	; (8007d48 <vTaskSwitchContext+0xac>)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6013      	str	r3, [r2, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000e00 	.word	0x20000e00
 8007d44:	20000dec 	.word	0x20000dec
 8007d48:	20000de0 	.word	0x20000de0
 8007d4c:	20000908 	.word	0x20000908
 8007d50:	20000904 	.word	0x20000904

08007d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <vTaskPlaceOnEventList+0x24>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e7fe      	b.n	8007d76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d78:	4b07      	ldr	r3, [pc, #28]	; (8007d98 <vTaskPlaceOnEventList+0x44>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3318      	adds	r3, #24
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fe fe5b 	bl	8006a3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d86:	2101      	movs	r1, #1
 8007d88:	6838      	ldr	r0, [r7, #0]
 8007d8a:	f000 fa75 	bl	8008278 <prvAddCurrentTaskToDelayedList>
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000904 	.word	0x20000904

08007d9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <vTaskPlaceOnEventListRestricted+0x26>
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e7fe      	b.n	8007dc0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vTaskPlaceOnEventListRestricted+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7fe fe13 	bl	80069f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	68b8      	ldr	r0, [r7, #8]
 8007de0:	f000 fa4a 	bl	8008278 <prvAddCurrentTaskToDelayedList>
	}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000904 	.word	0x20000904

08007df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <xTaskRemoveFromEventList+0x2a>
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e7fe      	b.n	8007e18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3318      	adds	r3, #24
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fe44 	bl	8006aac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e24:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <xTaskRemoveFromEventList+0xac>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11d      	bne.n	8007e68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fe3b 	bl	8006aac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <xTaskRemoveFromEventList+0xb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d903      	bls.n	8007e4a <xTaskRemoveFromEventList+0x5a>
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <xTaskRemoveFromEventList+0xb0>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <xTaskRemoveFromEventList+0xb4>)
 8007e58:	441a      	add	r2, r3
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f7fe fdc8 	bl	80069f6 <vListInsertEnd>
 8007e66:	e005      	b.n	8007e74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	480e      	ldr	r0, [pc, #56]	; (8007ea8 <xTaskRemoveFromEventList+0xb8>)
 8007e70:	f7fe fdc1 	bl	80069f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <xTaskRemoveFromEventList+0xbc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d905      	bls.n	8007e8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <xTaskRemoveFromEventList+0xc0>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e001      	b.n	8007e92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000e00 	.word	0x20000e00
 8007ea0:	20000de0 	.word	0x20000de0
 8007ea4:	20000908 	.word	0x20000908
 8007ea8:	20000d98 	.word	0x20000d98
 8007eac:	20000904 	.word	0x20000904
 8007eb0:	20000dec 	.word	0x20000dec

08007eb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <vTaskInternalSetTimeOutState+0x24>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <vTaskInternalSetTimeOutState+0x28>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20000df0 	.word	0x20000df0
 8007edc:	20000ddc 	.word	0x20000ddc

08007ee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <xTaskCheckForTimeOut+0x24>
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	e7fe      	b.n	8007f02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <xTaskCheckForTimeOut+0x3e>
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e7fe      	b.n	8007f1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007f1e:	f000 fdf3 	bl	8008b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <xTaskCheckForTimeOut+0xb8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	d102      	bne.n	8007f42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e023      	b.n	8007f8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <xTaskCheckForTimeOut+0xbc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d007      	beq.n	8007f5e <xTaskCheckForTimeOut+0x7e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e015      	b.n	8007f8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d20b      	bcs.n	8007f80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ff9d 	bl	8007eb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	e004      	b.n	8007f8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f86:	2301      	movs	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f8a:	f000 fdeb 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20000ddc 	.word	0x20000ddc
 8007f9c:	20000df0 	.word	0x20000df0

08007fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <vTaskMissedYield+0x14>)
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000dec 	.word	0x20000dec

08007fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc0:	f000 f852 	bl	8008068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <prvIdleTask+0x28>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d9f9      	bls.n	8007fc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <prvIdleTask+0x2c>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fdc:	e7f0      	b.n	8007fc0 <prvIdleTask+0x8>
 8007fde:	bf00      	nop
 8007fe0:	20000908 	.word	0x20000908
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fee:	2300      	movs	r3, #0
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	e00c      	b.n	800800e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <prvInitialiseTaskLists+0x60>)
 8008000:	4413      	add	r3, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fccc 	bl	80069a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3301      	adds	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b37      	cmp	r3, #55	; 0x37
 8008012:	d9ef      	bls.n	8007ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008014:	480d      	ldr	r0, [pc, #52]	; (800804c <prvInitialiseTaskLists+0x64>)
 8008016:	f7fe fcc3 	bl	80069a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800801a:	480d      	ldr	r0, [pc, #52]	; (8008050 <prvInitialiseTaskLists+0x68>)
 800801c:	f7fe fcc0 	bl	80069a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008020:	480c      	ldr	r0, [pc, #48]	; (8008054 <prvInitialiseTaskLists+0x6c>)
 8008022:	f7fe fcbd 	bl	80069a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008026:	480c      	ldr	r0, [pc, #48]	; (8008058 <prvInitialiseTaskLists+0x70>)
 8008028:	f7fe fcba 	bl	80069a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800802c:	480b      	ldr	r0, [pc, #44]	; (800805c <prvInitialiseTaskLists+0x74>)
 800802e:	f7fe fcb7 	bl	80069a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <prvInitialiseTaskLists+0x78>)
 8008034:	4a05      	ldr	r2, [pc, #20]	; (800804c <prvInitialiseTaskLists+0x64>)
 8008036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <prvInitialiseTaskLists+0x7c>)
 800803a:	4a05      	ldr	r2, [pc, #20]	; (8008050 <prvInitialiseTaskLists+0x68>)
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20000908 	.word	0x20000908
 800804c:	20000d68 	.word	0x20000d68
 8008050:	20000d7c 	.word	0x20000d7c
 8008054:	20000d98 	.word	0x20000d98
 8008058:	20000dac 	.word	0x20000dac
 800805c:	20000dc4 	.word	0x20000dc4
 8008060:	20000d90 	.word	0x20000d90
 8008064:	20000d94 	.word	0x20000d94

08008068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800806e:	e019      	b.n	80080a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008070:	f000 fd4a 	bl	8008b08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <prvCheckTasksWaitingTermination+0x4c>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3304      	adds	r3, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fd13 	bl	8006aac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvCheckTasksWaitingTermination+0x50>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <prvCheckTasksWaitingTermination+0x50>)
 800808e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <prvCheckTasksWaitingTermination+0x54>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	4a09      	ldr	r2, [pc, #36]	; (80080bc <prvCheckTasksWaitingTermination+0x54>)
 8008098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800809a:	f000 fd63 	bl	8008b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f80e 	bl	80080c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <prvCheckTasksWaitingTermination+0x54>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e1      	bne.n	8008070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000dac 	.word	0x20000dac
 80080b8:	20000dd8 	.word	0x20000dd8
 80080bc:	20000dc0 	.word	0x20000dc0

080080c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d108      	bne.n	80080e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fece 	bl	8008e78 <vPortFree>
				vPortFree( pxTCB );
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fecb 	bl	8008e78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080e2:	e017      	b.n	8008114 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d103      	bne.n	80080f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fec2 	bl	8008e78 <vPortFree>
	}
 80080f4:	e00e      	b.n	8008114 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d009      	beq.n	8008114 <prvDeleteTCB+0x54>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e7fe      	b.n	8008112 <prvDeleteTCB+0x52>
	}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008122:	4b0e      	ldr	r3, [pc, #56]	; (800815c <prvResetNextTaskUnblockTime+0x40>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvResetNextTaskUnblockTime+0x14>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvResetNextTaskUnblockTime+0x16>
 8008130:	2300      	movs	r3, #0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <prvResetNextTaskUnblockTime+0x44>)
 8008138:	f04f 32ff 	mov.w	r2, #4294967295
 800813c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800813e:	e008      	b.n	8008152 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <prvResetNextTaskUnblockTime+0x40>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4a04      	ldr	r2, [pc, #16]	; (8008160 <prvResetNextTaskUnblockTime+0x44>)
 8008150:	6013      	str	r3, [r2, #0]
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	20000d90 	.word	0x20000d90
 8008160:	20000df8 	.word	0x20000df8

08008164 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800816a:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <xTaskGetSchedulerState+0x34>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008172:	2301      	movs	r3, #1
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	e008      	b.n	800818a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008178:	4b08      	ldr	r3, [pc, #32]	; (800819c <xTaskGetSchedulerState+0x38>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008180:	2302      	movs	r3, #2
 8008182:	607b      	str	r3, [r7, #4]
 8008184:	e001      	b.n	800818a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008186:	2300      	movs	r3, #0
 8008188:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800818a:	687b      	ldr	r3, [r7, #4]
	}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000de4 	.word	0x20000de4
 800819c:	20000e00 	.word	0x20000e00

080081a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d054      	beq.n	8008260 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081b6:	4b2d      	ldr	r3, [pc, #180]	; (800826c <xTaskPriorityDisinherit+0xcc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d009      	beq.n	80081d4 <xTaskPriorityDisinherit+0x34>
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e7fe      	b.n	80081d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <xTaskPriorityDisinherit+0x50>
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60bb      	str	r3, [r7, #8]
 80081ee:	e7fe      	b.n	80081ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008202:	429a      	cmp	r2, r3
 8008204:	d02c      	beq.n	8008260 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	2b00      	cmp	r3, #0
 800820c:	d128      	bne.n	8008260 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fc4a 	bl	8006aac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <xTaskPriorityDisinherit+0xd0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d903      	bls.n	8008240 <xTaskPriorityDisinherit+0xa0>
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <xTaskPriorityDisinherit+0xd0>)
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4a09      	ldr	r2, [pc, #36]	; (8008274 <xTaskPriorityDisinherit+0xd4>)
 800824e:	441a      	add	r2, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	3304      	adds	r3, #4
 8008254:	4619      	mov	r1, r3
 8008256:	4610      	mov	r0, r2
 8008258:	f7fe fbcd 	bl	80069f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008260:	697b      	ldr	r3, [r7, #20]
	}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000904 	.word	0x20000904
 8008270:	20000de0 	.word	0x20000de0
 8008274:	20000908 	.word	0x20000908

08008278 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008282:	4b21      	ldr	r3, [pc, #132]	; (8008308 <prvAddCurrentTaskToDelayedList+0x90>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008288:	4b20      	ldr	r3, [pc, #128]	; (800830c <prvAddCurrentTaskToDelayedList+0x94>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fc0c 	bl	8006aac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d10a      	bne.n	80082b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a2:	4b1a      	ldr	r3, [pc, #104]	; (800830c <prvAddCurrentTaskToDelayedList+0x94>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4819      	ldr	r0, [pc, #100]	; (8008310 <prvAddCurrentTaskToDelayedList+0x98>)
 80082ac:	f7fe fba3 	bl	80069f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b0:	e026      	b.n	8008300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4413      	add	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <prvAddCurrentTaskToDelayedList+0x94>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d209      	bcs.n	80082de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ca:	4b12      	ldr	r3, [pc, #72]	; (8008314 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b0f      	ldr	r3, [pc, #60]	; (800830c <prvAddCurrentTaskToDelayedList+0x94>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f7fe fbb0 	bl	8006a3c <vListInsert>
}
 80082dc:	e010      	b.n	8008300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <prvAddCurrentTaskToDelayedList+0x94>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f7fe fba6 	bl	8006a3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d202      	bcs.n	8008300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082fa:	4a08      	ldr	r2, [pc, #32]	; (800831c <prvAddCurrentTaskToDelayedList+0xa4>)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6013      	str	r3, [r2, #0]
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000ddc 	.word	0x20000ddc
 800830c:	20000904 	.word	0x20000904
 8008310:	20000dc4 	.word	0x20000dc4
 8008314:	20000d94 	.word	0x20000d94
 8008318:	20000d90 	.word	0x20000d90
 800831c:	20000df8 	.word	0x20000df8

08008320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800832a:	f000 fac3 	bl	80088b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800832e:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <xTimerCreateTimerTask+0x80>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d021      	beq.n	800837a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800833e:	1d3a      	adds	r2, r7, #4
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	f107 030c 	add.w	r3, r7, #12
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fb0f 	bl	800696c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	9202      	str	r2, [sp, #8]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2302      	movs	r3, #2
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2300      	movs	r3, #0
 800835e:	460a      	mov	r2, r1
 8008360:	4910      	ldr	r1, [pc, #64]	; (80083a4 <xTimerCreateTimerTask+0x84>)
 8008362:	4811      	ldr	r0, [pc, #68]	; (80083a8 <xTimerCreateTimerTask+0x88>)
 8008364:	f7ff f8a0 	bl	80074a8 <xTaskCreateStatic>
 8008368:	4602      	mov	r2, r0
 800836a:	4b10      	ldr	r3, [pc, #64]	; (80083ac <xTimerCreateTimerTask+0x8c>)
 800836c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <xTimerCreateTimerTask+0x8c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008376:	2301      	movs	r3, #1
 8008378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <xTimerCreateTimerTask+0x74>
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e7fe      	b.n	8008392 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008394:	697b      	ldr	r3, [r7, #20]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000e34 	.word	0x20000e34
 80083a4:	0800ca18 	.word	0x0800ca18
 80083a8:	080084c9 	.word	0x080084c9
 80083ac:	20000e38 	.word	0x20000e38

080083b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083be:	2300      	movs	r3, #0
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <xTimerGenericCommand+0x2c>
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	e7fe      	b.n	80083da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083dc:	4b19      	ldr	r3, [pc, #100]	; (8008444 <xTimerGenericCommand+0x94>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d02a      	beq.n	800843a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	dc18      	bgt.n	8008428 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083f6:	f7ff feb5 	bl	8008164 <xTaskGetSchedulerState>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d109      	bne.n	8008414 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <xTimerGenericCommand+0x94>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	f107 0110 	add.w	r1, r7, #16
 8008408:	2300      	movs	r3, #0
 800840a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840c:	f7fe fc76 	bl	8006cfc <xQueueGenericSend>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24
 8008412:	e012      	b.n	800843a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <xTimerGenericCommand+0x94>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	f107 0110 	add.w	r1, r7, #16
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	f7fe fc6c 	bl	8006cfc <xQueueGenericSend>
 8008424:	6278      	str	r0, [r7, #36]	; 0x24
 8008426:	e008      	b.n	800843a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <xTimerGenericCommand+0x94>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	f107 0110 	add.w	r1, r7, #16
 8008430:	2300      	movs	r3, #0
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	f7fe fd5c 	bl	8006ef0 <xQueueGenericSendFromISR>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	; 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20000e34 	.word	0x20000e34

08008448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af02      	add	r7, sp, #8
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <prvProcessExpiredTimer+0x7c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fb23 	bl	8006aac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d121      	bne.n	80084b2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	18d1      	adds	r1, r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6978      	ldr	r0, [r7, #20]
 800847c:	f000 f8c8 	bl	8008610 <prvInsertTimerInActiveList>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d015      	beq.n	80084b2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008486:	2300      	movs	r3, #0
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	2100      	movs	r1, #0
 8008490:	6978      	ldr	r0, [r7, #20]
 8008492:	f7ff ff8d 	bl	80083b0 <xTimerGenericCommand>
 8008496:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <prvProcessExpiredTimer+0x6a>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e7fe      	b.n	80084b0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	4798      	blx	r3
}
 80084ba:	bf00      	nop
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000e2c 	.word	0x20000e2c

080084c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f857 	bl	8008588 <prvGetNextExpireTime>
 80084da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4619      	mov	r1, r3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f803 	bl	80084ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084e6:	f000 f8d5 	bl	8008694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ea:	e7f1      	b.n	80084d0 <prvTimerTask+0x8>

080084ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084f6:	f7ff fa49 	bl	800798c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f866 	bl	80085d0 <prvSampleTimeNow>
 8008504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d130      	bne.n	800856e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x3c>
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	d806      	bhi.n	8008528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800851a:	f7ff fa45 	bl	80079a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ff91 	bl	8008448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008526:	e024      	b.n	8008572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <prvProcessTimerOrBlockTask+0x90>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2300      	movne	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008540:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <prvProcessTimerOrBlockTask+0x94>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4619      	mov	r1, r3
 800854e:	f7fe ff77 	bl	8007440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008552:	f7ff fa29 	bl	80079a8 <xTaskResumeAll>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <prvProcessTimerOrBlockTask+0x98>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	f3bf 8f6f 	isb	sy
}
 800856c:	e001      	b.n	8008572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800856e:	f7ff fa1b 	bl	80079a8 <xTaskResumeAll>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000e30 	.word	0x20000e30
 8008580:	20000e34 	.word	0x20000e34
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <prvGetNextExpireTime+0x44>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	bf0c      	ite	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	2300      	movne	r3, #0
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d105      	bne.n	80085ba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ae:	4b07      	ldr	r3, [pc, #28]	; (80085cc <prvGetNextExpireTime+0x44>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e001      	b.n	80085be <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085be:	68fb      	ldr	r3, [r7, #12]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000e2c 	.word	0x20000e2c

080085d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085d8:	f7ff fa82 	bl	8007ae0 <xTaskGetTickCount>
 80085dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085de:	4b0b      	ldr	r3, [pc, #44]	; (800860c <prvSampleTimeNow+0x3c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d205      	bcs.n	80085f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085e8:	f000 f904 	bl	80087f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e002      	b.n	80085fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085fa:	4a04      	ldr	r2, [pc, #16]	; (800860c <prvSampleTimeNow+0x3c>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008600:	68fb      	ldr	r3, [r7, #12]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000e3c 	.word	0x20000e3c

08008610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d812      	bhi.n	800865c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	1ad2      	subs	r2, r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e01b      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800864a:	4b10      	ldr	r3, [pc, #64]	; (800868c <prvInsertTimerInActiveList+0x7c>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f7fe f9f1 	bl	8006a3c <vListInsert>
 800865a:	e012      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d206      	bcs.n	8008672 <prvInsertTimerInActiveList+0x62>
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e007      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <prvInsertTimerInActiveList+0x80>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fe f9dd 	bl	8006a3c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000e30 	.word	0x20000e30
 8008690:	20000e2c 	.word	0x20000e2c

08008694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800869a:	e099      	b.n	80087d0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da17      	bge.n	80086d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	3304      	adds	r3, #4
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <prvProcessReceivedCommands+0x2e>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e7fe      	b.n	80086c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c8:	6850      	ldr	r0, [r2, #4]
 80086ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086cc:	6892      	ldr	r2, [r2, #8]
 80086ce:	4611      	mov	r1, r2
 80086d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	db7a      	blt.n	80087ce <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	3304      	adds	r3, #4
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe f9df 	bl	8006aac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086ee:	463b      	mov	r3, r7
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff ff6d 	bl	80085d0 <prvSampleTimeNow>
 80086f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b09      	cmp	r3, #9
 80086fc:	d868      	bhi.n	80087d0 <prvProcessReceivedCommands+0x13c>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <prvProcessReceivedCommands+0x70>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	0800872d 	.word	0x0800872d
 8008708:	0800872d 	.word	0x0800872d
 800870c:	0800872d 	.word	0x0800872d
 8008710:	080087d1 	.word	0x080087d1
 8008714:	08008787 	.word	0x08008787
 8008718:	080087bd 	.word	0x080087bd
 800871c:	0800872d 	.word	0x0800872d
 8008720:	0800872d 	.word	0x0800872d
 8008724:	080087d1 	.word	0x080087d1
 8008728:	08008787 	.word	0x08008787
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	18d1      	adds	r1, r2, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873a:	f7ff ff69 	bl	8008610 <prvInsertTimerInActiveList>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d045      	beq.n	80087d0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d13d      	bne.n	80087d0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	441a      	add	r2, r3
 800875c:	2300      	movs	r3, #0
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	2100      	movs	r1, #0
 8008764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008766:	f7ff fe23 	bl	80083b0 <xTimerGenericCommand>
 800876a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d12e      	bne.n	80087d0 <prvProcessReceivedCommands+0x13c>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e7fe      	b.n	8008784 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <prvProcessReceivedCommands+0x114>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e7fe      	b.n	80087a6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	18d1      	adds	r1, r2, r3
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f7ff ff2b 	bl	8008610 <prvInsertTimerInActiveList>
					break;
 80087ba:	e009      	b.n	80087d0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80087c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c8:	f000 fb56 	bl	8008e78 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087cc:	e000      	b.n	80087d0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <prvProcessReceivedCommands+0x15c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	1d39      	adds	r1, r7, #4
 80087d6:	2200      	movs	r2, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fc1d 	bl	8007018 <xQueueReceive>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af5b 	bne.w	800869c <prvProcessReceivedCommands+0x8>
	}
}
 80087e6:	bf00      	nop
 80087e8:	3730      	adds	r7, #48	; 0x30
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000e34 	.word	0x20000e34

080087f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087fa:	e044      	b.n	8008886 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087fc:	4b2b      	ldr	r3, [pc, #172]	; (80088ac <prvSwitchTimerLists+0xb8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008806:	4b29      	ldr	r3, [pc, #164]	; (80088ac <prvSwitchTimerLists+0xb8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3304      	adds	r3, #4
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe f949 	bl	8006aac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d12d      	bne.n	8008886 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4413      	add	r3, r2
 8008832:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	429a      	cmp	r2, r3
 800883a:	d90e      	bls.n	800885a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <prvSwitchTimerLists+0xb8>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f7fe f8f2 	bl	8006a3c <vListInsert>
 8008858:	e015      	b.n	8008886 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800885a:	2300      	movs	r3, #0
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff fda3 	bl	80083b0 <xTimerGenericCommand>
 800886a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <prvSwitchTimerLists+0x92>
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	e7fe      	b.n	8008884 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <prvSwitchTimerLists+0xb8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1b5      	bne.n	80087fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <prvSwitchTimerLists+0xb8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <prvSwitchTimerLists+0xbc>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a04      	ldr	r2, [pc, #16]	; (80088ac <prvSwitchTimerLists+0xb8>)
 800889c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800889e:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <prvSwitchTimerLists+0xbc>)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6013      	str	r3, [r2, #0]
}
 80088a4:	bf00      	nop
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000e2c 	.word	0x20000e2c
 80088b0:	20000e30 	.word	0x20000e30

080088b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ba:	f000 f925 	bl	8008b08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d120      	bne.n	8008908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088c6:	4814      	ldr	r0, [pc, #80]	; (8008918 <prvCheckForValidListAndQueue+0x64>)
 80088c8:	f7fe f86a 	bl	80069a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088cc:	4813      	ldr	r0, [pc, #76]	; (800891c <prvCheckForValidListAndQueue+0x68>)
 80088ce:	f7fe f867 	bl	80069a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <prvCheckForValidListAndQueue+0x6c>)
 80088d4:	4a10      	ldr	r2, [pc, #64]	; (8008918 <prvCheckForValidListAndQueue+0x64>)
 80088d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <prvCheckForValidListAndQueue+0x70>)
 80088da:	4a10      	ldr	r2, [pc, #64]	; (800891c <prvCheckForValidListAndQueue+0x68>)
 80088dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088de:	2300      	movs	r3, #0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <prvCheckForValidListAndQueue+0x74>)
 80088e4:	4a11      	ldr	r2, [pc, #68]	; (800892c <prvCheckForValidListAndQueue+0x78>)
 80088e6:	2110      	movs	r1, #16
 80088e8:	200a      	movs	r0, #10
 80088ea:	f7fe f971 	bl	8006bd0 <xQueueGenericCreateStatic>
 80088ee:	4602      	mov	r2, r0
 80088f0:	4b08      	ldr	r3, [pc, #32]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <prvCheckForValidListAndQueue+0x60>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	490b      	ldr	r1, [pc, #44]	; (8008930 <prvCheckForValidListAndQueue+0x7c>)
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fd74 	bl	80073f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008908:	f000 f92c 	bl	8008b64 <vPortExitCritical>
}
 800890c:	bf00      	nop
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000e34 	.word	0x20000e34
 8008918:	20000e04 	.word	0x20000e04
 800891c:	20000e18 	.word	0x20000e18
 8008920:	20000e2c 	.word	0x20000e2c
 8008924:	20000e30 	.word	0x20000e30
 8008928:	20000ee0 	.word	0x20000ee0
 800892c:	20000e40 	.word	0x20000e40
 8008930:	0800ca20 	.word	0x0800ca20

08008934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3b04      	subs	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800894c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b04      	subs	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 0201 	bic.w	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <pxPortInitialiseStack+0x54>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b14      	subs	r3, #20
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b20      	subs	r3, #32
 800897a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr
 8008988:	0800898d 	.word	0x0800898d

0800898c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008992:	2300      	movs	r3, #0
 8008994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <prvTaskExitError+0x4c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d009      	beq.n	80089b4 <prvTaskExitError+0x28>
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e7fe      	b.n	80089b2 <prvTaskExitError+0x26>
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089c6:	bf00      	nop
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0fc      	beq.n	80089c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	20000010 	.word	0x20000010
 80089dc:	00000000 	.word	0x00000000

080089e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <pxCurrentTCBConst2>)
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089ea:	f380 8809 	msr	PSP, r0
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80089fe:	4770      	bx	lr

08008a00 <pxCurrentTCBConst2>:
 8008a00:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a08:	4806      	ldr	r0, [pc, #24]	; (8008a24 <prvPortStartFirstTask+0x1c>)
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f380 8808 	msr	MSP, r0
 8008a12:	b662      	cpsie	i
 8008a14:	b661      	cpsie	f
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	df00      	svc	0
 8008a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a22:	bf00      	nop
 8008a24:	e000ed08 	.word	0xe000ed08

08008a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a2e:	4b31      	ldr	r3, [pc, #196]	; (8008af4 <xPortStartScheduler+0xcc>)
 8008a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	22ff      	movs	r2, #255	; 0xff
 8008a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <xPortStartScheduler+0xd0>)
 8008a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a56:	4b29      	ldr	r3, [pc, #164]	; (8008afc <xPortStartScheduler+0xd4>)
 8008a58:	2207      	movs	r2, #7
 8008a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a5c:	e009      	b.n	8008a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a5e:	4b27      	ldr	r3, [pc, #156]	; (8008afc <xPortStartScheduler+0xd4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4a25      	ldr	r2, [pc, #148]	; (8008afc <xPortStartScheduler+0xd4>)
 8008a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d0ef      	beq.n	8008a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <xPortStartScheduler+0xd4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f1c3 0307 	rsb	r3, r3, #7
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d009      	beq.n	8008a9e <xPortStartScheduler+0x76>
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60bb      	str	r3, [r7, #8]
 8008a9c:	e7fe      	b.n	8008a9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a9e:	4b17      	ldr	r3, [pc, #92]	; (8008afc <xPortStartScheduler+0xd4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <xPortStartScheduler+0xd4>)
 8008aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <xPortStartScheduler+0xd4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ab0:	4a12      	ldr	r2, [pc, #72]	; (8008afc <xPortStartScheduler+0xd4>)
 8008ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <xPortStartScheduler+0xd8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0f      	ldr	r2, [pc, #60]	; (8008b00 <xPortStartScheduler+0xd8>)
 8008ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <xPortStartScheduler+0xd8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a0c      	ldr	r2, [pc, #48]	; (8008b00 <xPortStartScheduler+0xd8>)
 8008ace:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ad4:	f000 f8b0 	bl	8008c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <xPortStartScheduler+0xdc>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ade:	f7ff ff93 	bl	8008a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ae2:	f7ff f8db 	bl	8007c9c <vTaskSwitchContext>
	prvTaskExitError();
 8008ae6:	f7ff ff51 	bl	800898c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	e000e400 	.word	0xe000e400
 8008af8:	20000f30 	.word	0x20000f30
 8008afc:	20000f34 	.word	0x20000f34
 8008b00:	e000ed20 	.word	0xe000ed20
 8008b04:	20000010 	.word	0x20000010

08008b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b20:	4b0e      	ldr	r3, [pc, #56]	; (8008b5c <vPortEnterCritical+0x54>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <vPortEnterCritical+0x54>)
 8008b28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <vPortEnterCritical+0x54>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10e      	bne.n	8008b50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <vPortEnterCritical+0x58>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <vPortEnterCritical+0x48>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	e7fe      	b.n	8008b4e <vPortEnterCritical+0x46>
	}
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000010 	.word	0x20000010
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b6a:	4b10      	ldr	r3, [pc, #64]	; (8008bac <vPortExitCritical+0x48>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <vPortExitCritical+0x22>
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	607b      	str	r3, [r7, #4]
 8008b84:	e7fe      	b.n	8008b84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008b86:	4b09      	ldr	r3, [pc, #36]	; (8008bac <vPortExitCritical+0x48>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4a07      	ldr	r2, [pc, #28]	; (8008bac <vPortExitCritical+0x48>)
 8008b8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b90:	4b06      	ldr	r3, [pc, #24]	; (8008bac <vPortExitCritical+0x48>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <vPortExitCritical+0x3e>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr
 8008bac:	20000010 	.word	0x20000010

08008bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bc0:	6010      	str	r0, [r2, #0]
 8008bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008bc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bca:	f380 8811 	msr	BASEPRI, r0
 8008bce:	f7ff f865 	bl	8007c9c <vTaskSwitchContext>
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008be6:	f380 8809 	msr	PSP, r0
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	4770      	bx	lr

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c10:	f7fe ff86 	bl	8007b20 <xTaskIncrementTick>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1a:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <SysTick_Handler+0x3c>)
 8008c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	2300      	movs	r3, #0
 8008c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <vPortSetupTimerInterrupt+0x30>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <vPortSetupTimerInterrupt+0x34>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <vPortSetupTimerInterrupt+0x38>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c52:	099b      	lsrs	r3, r3, #6
 8008c54:	4a08      	ldr	r2, [pc, #32]	; (8008c78 <vPortSetupTimerInterrupt+0x40>)
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5a:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <vPortSetupTimerInterrupt+0x30>)
 8008c5c:	2207      	movs	r2, #7
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr
 8008c68:	e000e010 	.word	0xe000e010
 8008c6c:	e000e018 	.word	0xe000e018
 8008c70:	20000004 	.word	0x20000004
 8008c74:	10624dd3 	.word	0x10624dd3
 8008c78:	e000e014 	.word	0xe000e014

08008c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c82:	f3ef 8305 	mrs	r3, IPSR
 8008c86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	d913      	bls.n	8008cb6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c8e:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <vPortValidateInterruptPriority+0x68>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <vPortValidateInterruptPriority+0x6c>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	7afa      	ldrb	r2, [r7, #11]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d209      	bcs.n	8008cb6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	607b      	str	r3, [r7, #4]
 8008cb4:	e7fe      	b.n	8008cb4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cb6:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <vPortValidateInterruptPriority+0x70>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <vPortValidateInterruptPriority+0x74>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d909      	bls.n	8008cda <vPortValidateInterruptPriority+0x5e>
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	e7fe      	b.n	8008cd8 <vPortValidateInterruptPriority+0x5c>
	}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr
 8008ce4:	e000e3f0 	.word	0xe000e3f0
 8008ce8:	20000f30 	.word	0x20000f30
 8008cec:	e000ed0c 	.word	0xe000ed0c
 8008cf0:	20000f34 	.word	0x20000f34

08008cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d00:	f7fe fe44 	bl	800798c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d04:	4b57      	ldr	r3, [pc, #348]	; (8008e64 <pvPortMalloc+0x170>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d0c:	f000 f90c 	bl	8008f28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d10:	4b55      	ldr	r3, [pc, #340]	; (8008e68 <pvPortMalloc+0x174>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4013      	ands	r3, r2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 808c 	bne.w	8008e36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01c      	beq.n	8008d5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d24:	2208      	movs	r2, #8
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d013      	beq.n	8008d5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f023 0307 	bic.w	r3, r3, #7
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <pvPortMalloc+0x6a>
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e7fe      	b.n	8008d5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d068      	beq.n	8008e36 <pvPortMalloc+0x142>
 8008d64:	4b41      	ldr	r3, [pc, #260]	; (8008e6c <pvPortMalloc+0x178>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d863      	bhi.n	8008e36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d6e:	4b40      	ldr	r3, [pc, #256]	; (8008e70 <pvPortMalloc+0x17c>)
 8008d70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d72:	4b3f      	ldr	r3, [pc, #252]	; (8008e70 <pvPortMalloc+0x17c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d78:	e004      	b.n	8008d84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d903      	bls.n	8008d96 <pvPortMalloc+0xa2>
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f1      	bne.n	8008d7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d96:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <pvPortMalloc+0x170>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d04a      	beq.n	8008e36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2208      	movs	r2, #8
 8008da6:	4413      	add	r3, r2
 8008da8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	2308      	movs	r3, #8
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d91e      	bls.n	8008e00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d009      	beq.n	8008de8 <pvPortMalloc+0xf4>
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	e7fe      	b.n	8008de6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dfa:	69b8      	ldr	r0, [r7, #24]
 8008dfc:	f000 f8f6 	bl	8008fec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e00:	4b1a      	ldr	r3, [pc, #104]	; (8008e6c <pvPortMalloc+0x178>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	4a18      	ldr	r2, [pc, #96]	; (8008e6c <pvPortMalloc+0x178>)
 8008e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e0e:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <pvPortMalloc+0x178>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b18      	ldr	r3, [pc, #96]	; (8008e74 <pvPortMalloc+0x180>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d203      	bcs.n	8008e22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <pvPortMalloc+0x178>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <pvPortMalloc+0x180>)
 8008e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <pvPortMalloc+0x174>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e36:	f7fe fdb7 	bl	80079a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <pvPortMalloc+0x164>
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	e7fe      	b.n	8008e56 <pvPortMalloc+0x162>
	return pvReturn;
 8008e58:	69fb      	ldr	r3, [r7, #28]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20003e20 	.word	0x20003e20
 8008e68:	20003e2c 	.word	0x20003e2c
 8008e6c:	20003e24 	.word	0x20003e24
 8008e70:	20003e18 	.word	0x20003e18
 8008e74:	20003e28 	.word	0x20003e28

08008e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d046      	beq.n	8008f18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	425b      	negs	r3, r3
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4b20      	ldr	r3, [pc, #128]	; (8008f20 <vPortFree+0xa8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <vPortFree+0x42>
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	e7fe      	b.n	8008eb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <vPortFree+0x5e>
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60bb      	str	r3, [r7, #8]
 8008ed4:	e7fe      	b.n	8008ed4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <vPortFree+0xa8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d019      	beq.n	8008f18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d115      	bne.n	8008f18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <vPortFree+0xa8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008efc:	f7fe fd46 	bl	800798c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <vPortFree+0xac>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4413      	add	r3, r2
 8008f0a:	4a06      	ldr	r2, [pc, #24]	; (8008f24 <vPortFree+0xac>)
 8008f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f000 f86c 	bl	8008fec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f14:	f7fe fd48 	bl	80079a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20003e2c 	.word	0x20003e2c
 8008f24:	20003e24 	.word	0x20003e24

08008f28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f2e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8008f32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f34:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <prvHeapInit+0xac>)
 8008f36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3307      	adds	r3, #7
 8008f46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0307 	bic.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	4a1f      	ldr	r2, [pc, #124]	; (8008fd4 <prvHeapInit+0xac>)
 8008f58:	4413      	add	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f60:	4a1d      	ldr	r2, [pc, #116]	; (8008fd8 <prvHeapInit+0xb0>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <prvHeapInit+0xb0>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f74:	2208      	movs	r2, #8
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0307 	bic.w	r3, r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <prvHeapInit+0xb4>)
 8008f88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f8a:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <prvHeapInit+0xb4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <prvHeapInit+0xb4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	1ad2      	subs	r2, r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <prvHeapInit+0xb4>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <prvHeapInit+0xb8>)
 8008fb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <prvHeapInit+0xbc>)
 8008fbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fc0:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <prvHeapInit+0xc0>)
 8008fc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fc6:	601a      	str	r2, [r3, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000f38 	.word	0x20000f38
 8008fd8:	20003e18 	.word	0x20003e18
 8008fdc:	20003e20 	.word	0x20003e20
 8008fe0:	20003e28 	.word	0x20003e28
 8008fe4:	20003e24 	.word	0x20003e24
 8008fe8:	20003e2c 	.word	0x20003e2c

08008fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ff4:	4b27      	ldr	r3, [pc, #156]	; (8009094 <prvInsertBlockIntoFreeList+0xa8>)
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e002      	b.n	8009000 <prvInsertBlockIntoFreeList+0x14>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d8f7      	bhi.n	8008ffa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4413      	add	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d108      	bne.n	800902e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	441a      	add	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	441a      	add	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d118      	bne.n	8009074 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <prvInsertBlockIntoFreeList+0xac>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d00d      	beq.n	800906a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e008      	b.n	800907c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800906a:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <prvInsertBlockIntoFreeList+0xac>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e003      	b.n	800907c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d002      	beq.n	800908a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	20003e18 	.word	0x20003e18
 8009098:	20003e20 	.word	0x20003e20

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000014 	.word	0x20000014

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	2500      	movs	r5, #0
 80090ac:	4e0c      	ldr	r6, [pc, #48]	; (80090e0 <__libc_init_array+0x38>)
 80090ae:	4c0d      	ldr	r4, [pc, #52]	; (80090e4 <__libc_init_array+0x3c>)
 80090b0:	1ba4      	subs	r4, r4, r6
 80090b2:	10a4      	asrs	r4, r4, #2
 80090b4:	42a5      	cmp	r5, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	f003 fbee 	bl	800c898 <_init>
 80090bc:	2500      	movs	r5, #0
 80090be:	4e0a      	ldr	r6, [pc, #40]	; (80090e8 <__libc_init_array+0x40>)
 80090c0:	4c0a      	ldr	r4, [pc, #40]	; (80090ec <__libc_init_array+0x44>)
 80090c2:	1ba4      	subs	r4, r4, r6
 80090c4:	10a4      	asrs	r4, r4, #2
 80090c6:	42a5      	cmp	r5, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090d0:	4798      	blx	r3
 80090d2:	3501      	adds	r5, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090da:	4798      	blx	r3
 80090dc:	3501      	adds	r5, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	0800cee0 	.word	0x0800cee0
 80090e4:	0800cee0 	.word	0x0800cee0
 80090e8:	0800cee0 	.word	0x0800cee0
 80090ec:	0800cee4 	.word	0x0800cee4

080090f0 <memcpy>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	1e43      	subs	r3, r0, #1
 80090f4:	440a      	add	r2, r1
 80090f6:	4291      	cmp	r1, r2
 80090f8:	d100      	bne.n	80090fc <memcpy+0xc>
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009104:	e7f7      	b.n	80090f6 <memcpy+0x6>

08009106 <memset>:
 8009106:	4603      	mov	r3, r0
 8009108:	4402      	add	r2, r0
 800910a:	4293      	cmp	r3, r2
 800910c:	d100      	bne.n	8009110 <memset+0xa>
 800910e:	4770      	bx	lr
 8009110:	f803 1b01 	strb.w	r1, [r3], #1
 8009114:	e7f9      	b.n	800910a <memset+0x4>

08009116 <__cvt>:
 8009116:	2b00      	cmp	r3, #0
 8009118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	461e      	mov	r6, r3
 800911e:	bfbb      	ittet	lt
 8009120:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009124:	461e      	movlt	r6, r3
 8009126:	2300      	movge	r3, #0
 8009128:	232d      	movlt	r3, #45	; 0x2d
 800912a:	b088      	sub	sp, #32
 800912c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800912e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009132:	f027 0720 	bic.w	r7, r7, #32
 8009136:	2f46      	cmp	r7, #70	; 0x46
 8009138:	4614      	mov	r4, r2
 800913a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800913c:	700b      	strb	r3, [r1, #0]
 800913e:	d004      	beq.n	800914a <__cvt+0x34>
 8009140:	2f45      	cmp	r7, #69	; 0x45
 8009142:	d100      	bne.n	8009146 <__cvt+0x30>
 8009144:	3501      	adds	r5, #1
 8009146:	2302      	movs	r3, #2
 8009148:	e000      	b.n	800914c <__cvt+0x36>
 800914a:	2303      	movs	r3, #3
 800914c:	aa07      	add	r2, sp, #28
 800914e:	9204      	str	r2, [sp, #16]
 8009150:	aa06      	add	r2, sp, #24
 8009152:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009156:	e9cd 3500 	strd	r3, r5, [sp]
 800915a:	4622      	mov	r2, r4
 800915c:	4633      	mov	r3, r6
 800915e:	f000 fcd7 	bl	8009b10 <_dtoa_r>
 8009162:	2f47      	cmp	r7, #71	; 0x47
 8009164:	4680      	mov	r8, r0
 8009166:	d102      	bne.n	800916e <__cvt+0x58>
 8009168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d526      	bpl.n	80091bc <__cvt+0xa6>
 800916e:	2f46      	cmp	r7, #70	; 0x46
 8009170:	eb08 0905 	add.w	r9, r8, r5
 8009174:	d111      	bne.n	800919a <__cvt+0x84>
 8009176:	f898 3000 	ldrb.w	r3, [r8]
 800917a:	2b30      	cmp	r3, #48	; 0x30
 800917c:	d10a      	bne.n	8009194 <__cvt+0x7e>
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	4620      	mov	r0, r4
 8009184:	4631      	mov	r1, r6
 8009186:	f7f7 fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800918a:	b918      	cbnz	r0, 8009194 <__cvt+0x7e>
 800918c:	f1c5 0501 	rsb	r5, r5, #1
 8009190:	f8ca 5000 	str.w	r5, [sl]
 8009194:	f8da 3000 	ldr.w	r3, [sl]
 8009198:	4499      	add	r9, r3
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4620      	mov	r0, r4
 80091a0:	4631      	mov	r1, r6
 80091a2:	f7f7 fc01 	bl	80009a8 <__aeabi_dcmpeq>
 80091a6:	b938      	cbnz	r0, 80091b8 <__cvt+0xa2>
 80091a8:	2230      	movs	r2, #48	; 0x30
 80091aa:	9b07      	ldr	r3, [sp, #28]
 80091ac:	454b      	cmp	r3, r9
 80091ae:	d205      	bcs.n	80091bc <__cvt+0xa6>
 80091b0:	1c59      	adds	r1, r3, #1
 80091b2:	9107      	str	r1, [sp, #28]
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e7f8      	b.n	80091aa <__cvt+0x94>
 80091b8:	f8cd 901c 	str.w	r9, [sp, #28]
 80091bc:	4640      	mov	r0, r8
 80091be:	9b07      	ldr	r3, [sp, #28]
 80091c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091c2:	eba3 0308 	sub.w	r3, r3, r8
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	b008      	add	sp, #32
 80091ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080091ce <__exponent>:
 80091ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091d0:	2900      	cmp	r1, #0
 80091d2:	bfb4      	ite	lt
 80091d4:	232d      	movlt	r3, #45	; 0x2d
 80091d6:	232b      	movge	r3, #43	; 0x2b
 80091d8:	4604      	mov	r4, r0
 80091da:	bfb8      	it	lt
 80091dc:	4249      	neglt	r1, r1
 80091de:	2909      	cmp	r1, #9
 80091e0:	f804 2b02 	strb.w	r2, [r4], #2
 80091e4:	7043      	strb	r3, [r0, #1]
 80091e6:	dd21      	ble.n	800922c <__exponent+0x5e>
 80091e8:	f10d 0307 	add.w	r3, sp, #7
 80091ec:	461f      	mov	r7, r3
 80091ee:	260a      	movs	r6, #10
 80091f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80091f4:	fb06 1115 	mls	r1, r6, r5, r1
 80091f8:	2d09      	cmp	r5, #9
 80091fa:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80091fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009202:	f103 32ff 	add.w	r2, r3, #4294967295
 8009206:	4629      	mov	r1, r5
 8009208:	dc09      	bgt.n	800921e <__exponent+0x50>
 800920a:	3130      	adds	r1, #48	; 0x30
 800920c:	3b02      	subs	r3, #2
 800920e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009212:	42bb      	cmp	r3, r7
 8009214:	4622      	mov	r2, r4
 8009216:	d304      	bcc.n	8009222 <__exponent+0x54>
 8009218:	1a10      	subs	r0, r2, r0
 800921a:	b003      	add	sp, #12
 800921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921e:	4613      	mov	r3, r2
 8009220:	e7e6      	b.n	80091f0 <__exponent+0x22>
 8009222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009226:	f804 2b01 	strb.w	r2, [r4], #1
 800922a:	e7f2      	b.n	8009212 <__exponent+0x44>
 800922c:	2330      	movs	r3, #48	; 0x30
 800922e:	4419      	add	r1, r3
 8009230:	7083      	strb	r3, [r0, #2]
 8009232:	1d02      	adds	r2, r0, #4
 8009234:	70c1      	strb	r1, [r0, #3]
 8009236:	e7ef      	b.n	8009218 <__exponent+0x4a>

08009238 <_printf_float>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b091      	sub	sp, #68	; 0x44
 800923e:	460c      	mov	r4, r1
 8009240:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009242:	4693      	mov	fp, r2
 8009244:	461e      	mov	r6, r3
 8009246:	4605      	mov	r5, r0
 8009248:	f001 fa16 	bl	800a678 <_localeconv_r>
 800924c:	6803      	ldr	r3, [r0, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	9309      	str	r3, [sp, #36]	; 0x24
 8009252:	f7f6 ff7d 	bl	8000150 <strlen>
 8009256:	2300      	movs	r3, #0
 8009258:	930e      	str	r3, [sp, #56]	; 0x38
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	900a      	str	r0, [sp, #40]	; 0x28
 800925e:	3307      	adds	r3, #7
 8009260:	f023 0307 	bic.w	r3, r3, #7
 8009264:	f103 0208 	add.w	r2, r3, #8
 8009268:	f894 8018 	ldrb.w	r8, [r4, #24]
 800926c:	f8d4 a000 	ldr.w	sl, [r4]
 8009270:	603a      	str	r2, [r7, #0]
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800927a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800927e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009282:	930b      	str	r3, [sp, #44]	; 0x2c
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	4ba6      	ldr	r3, [pc, #664]	; (8009524 <_printf_float+0x2ec>)
 800928a:	4638      	mov	r0, r7
 800928c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800928e:	f7f7 fbbd 	bl	8000a0c <__aeabi_dcmpun>
 8009292:	bb68      	cbnz	r0, 80092f0 <_printf_float+0xb8>
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	4ba2      	ldr	r3, [pc, #648]	; (8009524 <_printf_float+0x2ec>)
 800929a:	4638      	mov	r0, r7
 800929c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800929e:	f7f7 fb97 	bl	80009d0 <__aeabi_dcmple>
 80092a2:	bb28      	cbnz	r0, 80092f0 <_printf_float+0xb8>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4638      	mov	r0, r7
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 fb86 	bl	80009bc <__aeabi_dcmplt>
 80092b0:	b110      	cbz	r0, 80092b8 <_printf_float+0x80>
 80092b2:	232d      	movs	r3, #45	; 0x2d
 80092b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b8:	4f9b      	ldr	r7, [pc, #620]	; (8009528 <_printf_float+0x2f0>)
 80092ba:	4b9c      	ldr	r3, [pc, #624]	; (800952c <_printf_float+0x2f4>)
 80092bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092c0:	bf98      	it	ls
 80092c2:	461f      	movls	r7, r3
 80092c4:	2303      	movs	r3, #3
 80092c6:	f04f 0900 	mov.w	r9, #0
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	f02a 0304 	bic.w	r3, sl, #4
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	9600      	str	r6, [sp, #0]
 80092d4:	465b      	mov	r3, fp
 80092d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80092d8:	4621      	mov	r1, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 f9e2 	bl	80096a4 <_printf_common>
 80092e0:	3001      	adds	r0, #1
 80092e2:	f040 8090 	bne.w	8009406 <_printf_float+0x1ce>
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	b011      	add	sp, #68	; 0x44
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	463a      	mov	r2, r7
 80092f2:	464b      	mov	r3, r9
 80092f4:	4638      	mov	r0, r7
 80092f6:	4649      	mov	r1, r9
 80092f8:	f7f7 fb88 	bl	8000a0c <__aeabi_dcmpun>
 80092fc:	b110      	cbz	r0, 8009304 <_printf_float+0xcc>
 80092fe:	4f8c      	ldr	r7, [pc, #560]	; (8009530 <_printf_float+0x2f8>)
 8009300:	4b8c      	ldr	r3, [pc, #560]	; (8009534 <_printf_float+0x2fc>)
 8009302:	e7db      	b.n	80092bc <_printf_float+0x84>
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800930a:	1c59      	adds	r1, r3, #1
 800930c:	a80d      	add	r0, sp, #52	; 0x34
 800930e:	a90e      	add	r1, sp, #56	; 0x38
 8009310:	d140      	bne.n	8009394 <_printf_float+0x15c>
 8009312:	2306      	movs	r3, #6
 8009314:	6063      	str	r3, [r4, #4]
 8009316:	f04f 0c00 	mov.w	ip, #0
 800931a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800931e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	463a      	mov	r2, r7
 800932e:	464b      	mov	r3, r9
 8009330:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff feee 	bl	8009116 <__cvt>
 800933a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800933e:	2b47      	cmp	r3, #71	; 0x47
 8009340:	4607      	mov	r7, r0
 8009342:	d109      	bne.n	8009358 <_printf_float+0x120>
 8009344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009346:	1cd8      	adds	r0, r3, #3
 8009348:	db02      	blt.n	8009350 <_printf_float+0x118>
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	4293      	cmp	r3, r2
 800934e:	dd47      	ble.n	80093e0 <_printf_float+0x1a8>
 8009350:	f1a8 0802 	sub.w	r8, r8, #2
 8009354:	fa5f f888 	uxtb.w	r8, r8
 8009358:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800935c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800935e:	d824      	bhi.n	80093aa <_printf_float+0x172>
 8009360:	3901      	subs	r1, #1
 8009362:	4642      	mov	r2, r8
 8009364:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009368:	910d      	str	r1, [sp, #52]	; 0x34
 800936a:	f7ff ff30 	bl	80091ce <__exponent>
 800936e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009370:	4681      	mov	r9, r0
 8009372:	1813      	adds	r3, r2, r0
 8009374:	2a01      	cmp	r2, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	dc02      	bgt.n	8009380 <_printf_float+0x148>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	07d1      	lsls	r1, r2, #31
 800937e:	d501      	bpl.n	8009384 <_printf_float+0x14c>
 8009380:	3301      	adds	r3, #1
 8009382:	6123      	str	r3, [r4, #16]
 8009384:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0a2      	beq.n	80092d2 <_printf_float+0x9a>
 800938c:	232d      	movs	r3, #45	; 0x2d
 800938e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009392:	e79e      	b.n	80092d2 <_printf_float+0x9a>
 8009394:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009398:	f000 816e 	beq.w	8009678 <_printf_float+0x440>
 800939c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093a0:	d1b9      	bne.n	8009316 <_printf_float+0xde>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1b7      	bne.n	8009316 <_printf_float+0xde>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7b4      	b.n	8009314 <_printf_float+0xdc>
 80093aa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80093ae:	d119      	bne.n	80093e4 <_printf_float+0x1ac>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	dd0c      	ble.n	80093d0 <_printf_float+0x198>
 80093b6:	6121      	str	r1, [r4, #16]
 80093b8:	b913      	cbnz	r3, 80093c0 <_printf_float+0x188>
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	07d2      	lsls	r2, r2, #31
 80093be:	d502      	bpl.n	80093c6 <_printf_float+0x18e>
 80093c0:	3301      	adds	r3, #1
 80093c2:	440b      	add	r3, r1
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c8:	f04f 0900 	mov.w	r9, #0
 80093cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80093ce:	e7d9      	b.n	8009384 <_printf_float+0x14c>
 80093d0:	b913      	cbnz	r3, 80093d8 <_printf_float+0x1a0>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d501      	bpl.n	80093dc <_printf_float+0x1a4>
 80093d8:	3302      	adds	r3, #2
 80093da:	e7f3      	b.n	80093c4 <_printf_float+0x18c>
 80093dc:	2301      	movs	r3, #1
 80093de:	e7f1      	b.n	80093c4 <_printf_float+0x18c>
 80093e0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80093e4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80093e8:	4293      	cmp	r3, r2
 80093ea:	db05      	blt.n	80093f8 <_printf_float+0x1c0>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	07d1      	lsls	r1, r2, #31
 80093f2:	d5e8      	bpl.n	80093c6 <_printf_float+0x18e>
 80093f4:	3301      	adds	r3, #1
 80093f6:	e7e5      	b.n	80093c4 <_printf_float+0x18c>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfcc      	ite	gt
 80093fc:	2301      	movgt	r3, #1
 80093fe:	f1c3 0302 	rsble	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	e7de      	b.n	80093c4 <_printf_float+0x18c>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	055a      	lsls	r2, r3, #21
 800940a:	d407      	bmi.n	800941c <_printf_float+0x1e4>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	463a      	mov	r2, r7
 8009410:	4659      	mov	r1, fp
 8009412:	4628      	mov	r0, r5
 8009414:	47b0      	blx	r6
 8009416:	3001      	adds	r0, #1
 8009418:	d129      	bne.n	800946e <_printf_float+0x236>
 800941a:	e764      	b.n	80092e6 <_printf_float+0xae>
 800941c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009420:	f240 80d7 	bls.w	80095d2 <_printf_float+0x39a>
 8009424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	f7f7 fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8009430:	b388      	cbz	r0, 8009496 <_printf_float+0x25e>
 8009432:	2301      	movs	r3, #1
 8009434:	4a40      	ldr	r2, [pc, #256]	; (8009538 <_printf_float+0x300>)
 8009436:	4659      	mov	r1, fp
 8009438:	4628      	mov	r0, r5
 800943a:	47b0      	blx	r6
 800943c:	3001      	adds	r0, #1
 800943e:	f43f af52 	beq.w	80092e6 <_printf_float+0xae>
 8009442:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009446:	429a      	cmp	r2, r3
 8009448:	db02      	blt.n	8009450 <_printf_float+0x218>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	07d8      	lsls	r0, r3, #31
 800944e:	d50e      	bpl.n	800946e <_printf_float+0x236>
 8009450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009454:	4659      	mov	r1, fp
 8009456:	4628      	mov	r0, r5
 8009458:	47b0      	blx	r6
 800945a:	3001      	adds	r0, #1
 800945c:	f43f af43 	beq.w	80092e6 <_printf_float+0xae>
 8009460:	2700      	movs	r7, #0
 8009462:	f104 081a 	add.w	r8, r4, #26
 8009466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009468:	3b01      	subs	r3, #1
 800946a:	42bb      	cmp	r3, r7
 800946c:	dc09      	bgt.n	8009482 <_printf_float+0x24a>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	079f      	lsls	r7, r3, #30
 8009472:	f100 80fd 	bmi.w	8009670 <_printf_float+0x438>
 8009476:	68e0      	ldr	r0, [r4, #12]
 8009478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800947a:	4298      	cmp	r0, r3
 800947c:	bfb8      	it	lt
 800947e:	4618      	movlt	r0, r3
 8009480:	e733      	b.n	80092ea <_printf_float+0xb2>
 8009482:	2301      	movs	r3, #1
 8009484:	4642      	mov	r2, r8
 8009486:	4659      	mov	r1, fp
 8009488:	4628      	mov	r0, r5
 800948a:	47b0      	blx	r6
 800948c:	3001      	adds	r0, #1
 800948e:	f43f af2a 	beq.w	80092e6 <_printf_float+0xae>
 8009492:	3701      	adds	r7, #1
 8009494:	e7e7      	b.n	8009466 <_printf_float+0x22e>
 8009496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009498:	2b00      	cmp	r3, #0
 800949a:	dc2b      	bgt.n	80094f4 <_printf_float+0x2bc>
 800949c:	2301      	movs	r3, #1
 800949e:	4a26      	ldr	r2, [pc, #152]	; (8009538 <_printf_float+0x300>)
 80094a0:	4659      	mov	r1, fp
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b0      	blx	r6
 80094a6:	3001      	adds	r0, #1
 80094a8:	f43f af1d 	beq.w	80092e6 <_printf_float+0xae>
 80094ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ae:	b923      	cbnz	r3, 80094ba <_printf_float+0x282>
 80094b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b2:	b913      	cbnz	r3, 80094ba <_printf_float+0x282>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	d5d9      	bpl.n	800946e <_printf_float+0x236>
 80094ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094be:	4659      	mov	r1, fp
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b0      	blx	r6
 80094c4:	3001      	adds	r0, #1
 80094c6:	f43f af0e 	beq.w	80092e6 <_printf_float+0xae>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 091a 	add.w	r9, r4, #26
 80094d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d4:	425b      	negs	r3, r3
 80094d6:	4543      	cmp	r3, r8
 80094d8:	dc01      	bgt.n	80094de <_printf_float+0x2a6>
 80094da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094dc:	e797      	b.n	800940e <_printf_float+0x1d6>
 80094de:	2301      	movs	r3, #1
 80094e0:	464a      	mov	r2, r9
 80094e2:	4659      	mov	r1, fp
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b0      	blx	r6
 80094e8:	3001      	adds	r0, #1
 80094ea:	f43f aefc 	beq.w	80092e6 <_printf_float+0xae>
 80094ee:	f108 0801 	add.w	r8, r8, #1
 80094f2:	e7ee      	b.n	80094d2 <_printf_float+0x29a>
 80094f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094f8:	429a      	cmp	r2, r3
 80094fa:	bfa8      	it	ge
 80094fc:	461a      	movge	r2, r3
 80094fe:	2a00      	cmp	r2, #0
 8009500:	4690      	mov	r8, r2
 8009502:	dd07      	ble.n	8009514 <_printf_float+0x2dc>
 8009504:	4613      	mov	r3, r2
 8009506:	4659      	mov	r1, fp
 8009508:	463a      	mov	r2, r7
 800950a:	4628      	mov	r0, r5
 800950c:	47b0      	blx	r6
 800950e:	3001      	adds	r0, #1
 8009510:	f43f aee9 	beq.w	80092e6 <_printf_float+0xae>
 8009514:	f104 031a 	add.w	r3, r4, #26
 8009518:	f04f 0a00 	mov.w	sl, #0
 800951c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009520:	930b      	str	r3, [sp, #44]	; 0x2c
 8009522:	e015      	b.n	8009550 <_printf_float+0x318>
 8009524:	7fefffff 	.word	0x7fefffff
 8009528:	0800ca68 	.word	0x0800ca68
 800952c:	0800ca64 	.word	0x0800ca64
 8009530:	0800ca70 	.word	0x0800ca70
 8009534:	0800ca6c 	.word	0x0800ca6c
 8009538:	0800ca74 	.word	0x0800ca74
 800953c:	2301      	movs	r3, #1
 800953e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009540:	4659      	mov	r1, fp
 8009542:	4628      	mov	r0, r5
 8009544:	47b0      	blx	r6
 8009546:	3001      	adds	r0, #1
 8009548:	f43f aecd 	beq.w	80092e6 <_printf_float+0xae>
 800954c:	f10a 0a01 	add.w	sl, sl, #1
 8009550:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009554:	eba9 0308 	sub.w	r3, r9, r8
 8009558:	4553      	cmp	r3, sl
 800955a:	dcef      	bgt.n	800953c <_printf_float+0x304>
 800955c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009560:	429a      	cmp	r2, r3
 8009562:	444f      	add	r7, r9
 8009564:	db14      	blt.n	8009590 <_printf_float+0x358>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	07da      	lsls	r2, r3, #31
 800956a:	d411      	bmi.n	8009590 <_printf_float+0x358>
 800956c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800956e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009570:	eba3 0209 	sub.w	r2, r3, r9
 8009574:	eba3 0901 	sub.w	r9, r3, r1
 8009578:	4591      	cmp	r9, r2
 800957a:	bfa8      	it	ge
 800957c:	4691      	movge	r9, r2
 800957e:	f1b9 0f00 	cmp.w	r9, #0
 8009582:	dc0d      	bgt.n	80095a0 <_printf_float+0x368>
 8009584:	2700      	movs	r7, #0
 8009586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800958a:	f104 081a 	add.w	r8, r4, #26
 800958e:	e018      	b.n	80095c2 <_printf_float+0x38a>
 8009590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009594:	4659      	mov	r1, fp
 8009596:	4628      	mov	r0, r5
 8009598:	47b0      	blx	r6
 800959a:	3001      	adds	r0, #1
 800959c:	d1e6      	bne.n	800956c <_printf_float+0x334>
 800959e:	e6a2      	b.n	80092e6 <_printf_float+0xae>
 80095a0:	464b      	mov	r3, r9
 80095a2:	463a      	mov	r2, r7
 80095a4:	4659      	mov	r1, fp
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b0      	blx	r6
 80095aa:	3001      	adds	r0, #1
 80095ac:	d1ea      	bne.n	8009584 <_printf_float+0x34c>
 80095ae:	e69a      	b.n	80092e6 <_printf_float+0xae>
 80095b0:	2301      	movs	r3, #1
 80095b2:	4642      	mov	r2, r8
 80095b4:	4659      	mov	r1, fp
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b0      	blx	r6
 80095ba:	3001      	adds	r0, #1
 80095bc:	f43f ae93 	beq.w	80092e6 <_printf_float+0xae>
 80095c0:	3701      	adds	r7, #1
 80095c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	eba3 0309 	sub.w	r3, r3, r9
 80095cc:	42bb      	cmp	r3, r7
 80095ce:	dcef      	bgt.n	80095b0 <_printf_float+0x378>
 80095d0:	e74d      	b.n	800946e <_printf_float+0x236>
 80095d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d4:	2a01      	cmp	r2, #1
 80095d6:	dc01      	bgt.n	80095dc <_printf_float+0x3a4>
 80095d8:	07db      	lsls	r3, r3, #31
 80095da:	d538      	bpl.n	800964e <_printf_float+0x416>
 80095dc:	2301      	movs	r3, #1
 80095de:	463a      	mov	r2, r7
 80095e0:	4659      	mov	r1, fp
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b0      	blx	r6
 80095e6:	3001      	adds	r0, #1
 80095e8:	f43f ae7d 	beq.w	80092e6 <_printf_float+0xae>
 80095ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095f0:	4659      	mov	r1, fp
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b0      	blx	r6
 80095f6:	3001      	adds	r0, #1
 80095f8:	f107 0701 	add.w	r7, r7, #1
 80095fc:	f43f ae73 	beq.w	80092e6 <_printf_float+0xae>
 8009600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009606:	2200      	movs	r2, #0
 8009608:	f103 38ff 	add.w	r8, r3, #4294967295
 800960c:	2300      	movs	r3, #0
 800960e:	f7f7 f9cb 	bl	80009a8 <__aeabi_dcmpeq>
 8009612:	b9c0      	cbnz	r0, 8009646 <_printf_float+0x40e>
 8009614:	4643      	mov	r3, r8
 8009616:	463a      	mov	r2, r7
 8009618:	4659      	mov	r1, fp
 800961a:	4628      	mov	r0, r5
 800961c:	47b0      	blx	r6
 800961e:	3001      	adds	r0, #1
 8009620:	d10d      	bne.n	800963e <_printf_float+0x406>
 8009622:	e660      	b.n	80092e6 <_printf_float+0xae>
 8009624:	2301      	movs	r3, #1
 8009626:	4642      	mov	r2, r8
 8009628:	4659      	mov	r1, fp
 800962a:	4628      	mov	r0, r5
 800962c:	47b0      	blx	r6
 800962e:	3001      	adds	r0, #1
 8009630:	f43f ae59 	beq.w	80092e6 <_printf_float+0xae>
 8009634:	3701      	adds	r7, #1
 8009636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009638:	3b01      	subs	r3, #1
 800963a:	42bb      	cmp	r3, r7
 800963c:	dcf2      	bgt.n	8009624 <_printf_float+0x3ec>
 800963e:	464b      	mov	r3, r9
 8009640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009644:	e6e4      	b.n	8009410 <_printf_float+0x1d8>
 8009646:	2700      	movs	r7, #0
 8009648:	f104 081a 	add.w	r8, r4, #26
 800964c:	e7f3      	b.n	8009636 <_printf_float+0x3fe>
 800964e:	2301      	movs	r3, #1
 8009650:	e7e1      	b.n	8009616 <_printf_float+0x3de>
 8009652:	2301      	movs	r3, #1
 8009654:	4642      	mov	r2, r8
 8009656:	4659      	mov	r1, fp
 8009658:	4628      	mov	r0, r5
 800965a:	47b0      	blx	r6
 800965c:	3001      	adds	r0, #1
 800965e:	f43f ae42 	beq.w	80092e6 <_printf_float+0xae>
 8009662:	3701      	adds	r7, #1
 8009664:	68e3      	ldr	r3, [r4, #12]
 8009666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	42bb      	cmp	r3, r7
 800966c:	dcf1      	bgt.n	8009652 <_printf_float+0x41a>
 800966e:	e702      	b.n	8009476 <_printf_float+0x23e>
 8009670:	2700      	movs	r7, #0
 8009672:	f104 0819 	add.w	r8, r4, #25
 8009676:	e7f5      	b.n	8009664 <_printf_float+0x42c>
 8009678:	2b00      	cmp	r3, #0
 800967a:	f43f ae94 	beq.w	80093a6 <_printf_float+0x16e>
 800967e:	f04f 0c00 	mov.w	ip, #0
 8009682:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009686:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009690:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	463a      	mov	r2, r7
 8009698:	464b      	mov	r3, r9
 800969a:	4628      	mov	r0, r5
 800969c:	f7ff fd3b 	bl	8009116 <__cvt>
 80096a0:	4607      	mov	r7, r0
 80096a2:	e64f      	b.n	8009344 <_printf_float+0x10c>

080096a4 <_printf_common>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	4691      	mov	r9, r2
 80096aa:	461f      	mov	r7, r3
 80096ac:	688a      	ldr	r2, [r1, #8]
 80096ae:	690b      	ldr	r3, [r1, #16]
 80096b0:	4606      	mov	r6, r0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfb8      	it	lt
 80096b6:	4613      	movlt	r3, r2
 80096b8:	f8c9 3000 	str.w	r3, [r9]
 80096bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096c0:	460c      	mov	r4, r1
 80096c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c6:	b112      	cbz	r2, 80096ce <_printf_common+0x2a>
 80096c8:	3301      	adds	r3, #1
 80096ca:	f8c9 3000 	str.w	r3, [r9]
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	0699      	lsls	r1, r3, #26
 80096d2:	bf42      	ittt	mi
 80096d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096d8:	3302      	addmi	r3, #2
 80096da:	f8c9 3000 	strmi.w	r3, [r9]
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	f015 0506 	ands.w	r5, r5, #6
 80096e4:	d107      	bne.n	80096f6 <_printf_common+0x52>
 80096e6:	f104 0a19 	add.w	sl, r4, #25
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	f8d9 2000 	ldr.w	r2, [r9]
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	42ab      	cmp	r3, r5
 80096f4:	dc29      	bgt.n	800974a <_printf_common+0xa6>
 80096f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	3300      	adds	r3, #0
 80096fe:	bf18      	it	ne
 8009700:	2301      	movne	r3, #1
 8009702:	0692      	lsls	r2, r2, #26
 8009704:	d42e      	bmi.n	8009764 <_printf_common+0xc0>
 8009706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800970a:	4639      	mov	r1, r7
 800970c:	4630      	mov	r0, r6
 800970e:	47c0      	blx	r8
 8009710:	3001      	adds	r0, #1
 8009712:	d021      	beq.n	8009758 <_printf_common+0xb4>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	68e5      	ldr	r5, [r4, #12]
 8009718:	f003 0306 	and.w	r3, r3, #6
 800971c:	2b04      	cmp	r3, #4
 800971e:	bf18      	it	ne
 8009720:	2500      	movne	r5, #0
 8009722:	f8d9 2000 	ldr.w	r2, [r9]
 8009726:	f04f 0900 	mov.w	r9, #0
 800972a:	bf08      	it	eq
 800972c:	1aad      	subeq	r5, r5, r2
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	6922      	ldr	r2, [r4, #16]
 8009732:	bf08      	it	eq
 8009734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009738:	4293      	cmp	r3, r2
 800973a:	bfc4      	itt	gt
 800973c:	1a9b      	subgt	r3, r3, r2
 800973e:	18ed      	addgt	r5, r5, r3
 8009740:	341a      	adds	r4, #26
 8009742:	454d      	cmp	r5, r9
 8009744:	d11a      	bne.n	800977c <_printf_common+0xd8>
 8009746:	2000      	movs	r0, #0
 8009748:	e008      	b.n	800975c <_printf_common+0xb8>
 800974a:	2301      	movs	r3, #1
 800974c:	4652      	mov	r2, sl
 800974e:	4639      	mov	r1, r7
 8009750:	4630      	mov	r0, r6
 8009752:	47c0      	blx	r8
 8009754:	3001      	adds	r0, #1
 8009756:	d103      	bne.n	8009760 <_printf_common+0xbc>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009760:	3501      	adds	r5, #1
 8009762:	e7c2      	b.n	80096ea <_printf_common+0x46>
 8009764:	2030      	movs	r0, #48	; 0x30
 8009766:	18e1      	adds	r1, r4, r3
 8009768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009772:	4422      	add	r2, r4
 8009774:	3302      	adds	r3, #2
 8009776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800977a:	e7c4      	b.n	8009706 <_printf_common+0x62>
 800977c:	2301      	movs	r3, #1
 800977e:	4622      	mov	r2, r4
 8009780:	4639      	mov	r1, r7
 8009782:	4630      	mov	r0, r6
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d0e6      	beq.n	8009758 <_printf_common+0xb4>
 800978a:	f109 0901 	add.w	r9, r9, #1
 800978e:	e7d8      	b.n	8009742 <_printf_common+0x9e>

08009790 <_printf_i>:
 8009790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009794:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009798:	460c      	mov	r4, r1
 800979a:	7e09      	ldrb	r1, [r1, #24]
 800979c:	b085      	sub	sp, #20
 800979e:	296e      	cmp	r1, #110	; 0x6e
 80097a0:	4617      	mov	r7, r2
 80097a2:	4606      	mov	r6, r0
 80097a4:	4698      	mov	r8, r3
 80097a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097a8:	f000 80b3 	beq.w	8009912 <_printf_i+0x182>
 80097ac:	d822      	bhi.n	80097f4 <_printf_i+0x64>
 80097ae:	2963      	cmp	r1, #99	; 0x63
 80097b0:	d036      	beq.n	8009820 <_printf_i+0x90>
 80097b2:	d80a      	bhi.n	80097ca <_printf_i+0x3a>
 80097b4:	2900      	cmp	r1, #0
 80097b6:	f000 80b9 	beq.w	800992c <_printf_i+0x19c>
 80097ba:	2958      	cmp	r1, #88	; 0x58
 80097bc:	f000 8083 	beq.w	80098c6 <_printf_i+0x136>
 80097c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097c8:	e032      	b.n	8009830 <_printf_i+0xa0>
 80097ca:	2964      	cmp	r1, #100	; 0x64
 80097cc:	d001      	beq.n	80097d2 <_printf_i+0x42>
 80097ce:	2969      	cmp	r1, #105	; 0x69
 80097d0:	d1f6      	bne.n	80097c0 <_printf_i+0x30>
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	6813      	ldr	r3, [r2, #0]
 80097d6:	0605      	lsls	r5, r0, #24
 80097d8:	f103 0104 	add.w	r1, r3, #4
 80097dc:	d52a      	bpl.n	8009834 <_printf_i+0xa4>
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6011      	str	r1, [r2, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da03      	bge.n	80097ee <_printf_i+0x5e>
 80097e6:	222d      	movs	r2, #45	; 0x2d
 80097e8:	425b      	negs	r3, r3
 80097ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097ee:	486f      	ldr	r0, [pc, #444]	; (80099ac <_printf_i+0x21c>)
 80097f0:	220a      	movs	r2, #10
 80097f2:	e039      	b.n	8009868 <_printf_i+0xd8>
 80097f4:	2973      	cmp	r1, #115	; 0x73
 80097f6:	f000 809d 	beq.w	8009934 <_printf_i+0x1a4>
 80097fa:	d808      	bhi.n	800980e <_printf_i+0x7e>
 80097fc:	296f      	cmp	r1, #111	; 0x6f
 80097fe:	d020      	beq.n	8009842 <_printf_i+0xb2>
 8009800:	2970      	cmp	r1, #112	; 0x70
 8009802:	d1dd      	bne.n	80097c0 <_printf_i+0x30>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	f043 0320 	orr.w	r3, r3, #32
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	e003      	b.n	8009816 <_printf_i+0x86>
 800980e:	2975      	cmp	r1, #117	; 0x75
 8009810:	d017      	beq.n	8009842 <_printf_i+0xb2>
 8009812:	2978      	cmp	r1, #120	; 0x78
 8009814:	d1d4      	bne.n	80097c0 <_printf_i+0x30>
 8009816:	2378      	movs	r3, #120	; 0x78
 8009818:	4865      	ldr	r0, [pc, #404]	; (80099b0 <_printf_i+0x220>)
 800981a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800981e:	e055      	b.n	80098cc <_printf_i+0x13c>
 8009820:	6813      	ldr	r3, [r2, #0]
 8009822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009826:	1d19      	adds	r1, r3, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6011      	str	r1, [r2, #0]
 800982c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009830:	2301      	movs	r3, #1
 8009832:	e08c      	b.n	800994e <_printf_i+0x1be>
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800983a:	6011      	str	r1, [r2, #0]
 800983c:	bf18      	it	ne
 800983e:	b21b      	sxthne	r3, r3
 8009840:	e7cf      	b.n	80097e2 <_printf_i+0x52>
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	6825      	ldr	r5, [r4, #0]
 8009846:	1d18      	adds	r0, r3, #4
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	0628      	lsls	r0, r5, #24
 800984c:	d501      	bpl.n	8009852 <_printf_i+0xc2>
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	e002      	b.n	8009858 <_printf_i+0xc8>
 8009852:	0668      	lsls	r0, r5, #25
 8009854:	d5fb      	bpl.n	800984e <_printf_i+0xbe>
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	296f      	cmp	r1, #111	; 0x6f
 800985a:	bf14      	ite	ne
 800985c:	220a      	movne	r2, #10
 800985e:	2208      	moveq	r2, #8
 8009860:	4852      	ldr	r0, [pc, #328]	; (80099ac <_printf_i+0x21c>)
 8009862:	2100      	movs	r1, #0
 8009864:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009868:	6865      	ldr	r5, [r4, #4]
 800986a:	2d00      	cmp	r5, #0
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	f2c0 8095 	blt.w	800999c <_printf_i+0x20c>
 8009872:	6821      	ldr	r1, [r4, #0]
 8009874:	f021 0104 	bic.w	r1, r1, #4
 8009878:	6021      	str	r1, [r4, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d13d      	bne.n	80098fa <_printf_i+0x16a>
 800987e:	2d00      	cmp	r5, #0
 8009880:	f040 808e 	bne.w	80099a0 <_printf_i+0x210>
 8009884:	4665      	mov	r5, ip
 8009886:	2a08      	cmp	r2, #8
 8009888:	d10b      	bne.n	80098a2 <_printf_i+0x112>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	07db      	lsls	r3, r3, #31
 800988e:	d508      	bpl.n	80098a2 <_printf_i+0x112>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	bfde      	ittt	le
 8009898:	2330      	movle	r3, #48	; 0x30
 800989a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098a2:	ebac 0305 	sub.w	r3, ip, r5
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	f8cd 8000 	str.w	r8, [sp]
 80098ac:	463b      	mov	r3, r7
 80098ae:	aa03      	add	r2, sp, #12
 80098b0:	4621      	mov	r1, r4
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff fef6 	bl	80096a4 <_printf_common>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d14d      	bne.n	8009958 <_printf_i+0x1c8>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	b005      	add	sp, #20
 80098c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098c6:	4839      	ldr	r0, [pc, #228]	; (80099ac <_printf_i+0x21c>)
 80098c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098cc:	6813      	ldr	r3, [r2, #0]
 80098ce:	6821      	ldr	r1, [r4, #0]
 80098d0:	1d1d      	adds	r5, r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6015      	str	r5, [r2, #0]
 80098d6:	060a      	lsls	r2, r1, #24
 80098d8:	d50b      	bpl.n	80098f2 <_printf_i+0x162>
 80098da:	07ca      	lsls	r2, r1, #31
 80098dc:	bf44      	itt	mi
 80098de:	f041 0120 	orrmi.w	r1, r1, #32
 80098e2:	6021      	strmi	r1, [r4, #0]
 80098e4:	b91b      	cbnz	r3, 80098ee <_printf_i+0x15e>
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	f022 0220 	bic.w	r2, r2, #32
 80098ec:	6022      	str	r2, [r4, #0]
 80098ee:	2210      	movs	r2, #16
 80098f0:	e7b7      	b.n	8009862 <_printf_i+0xd2>
 80098f2:	064d      	lsls	r5, r1, #25
 80098f4:	bf48      	it	mi
 80098f6:	b29b      	uxthmi	r3, r3
 80098f8:	e7ef      	b.n	80098da <_printf_i+0x14a>
 80098fa:	4665      	mov	r5, ip
 80098fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009900:	fb02 3311 	mls	r3, r2, r1, r3
 8009904:	5cc3      	ldrb	r3, [r0, r3]
 8009906:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800990a:	460b      	mov	r3, r1
 800990c:	2900      	cmp	r1, #0
 800990e:	d1f5      	bne.n	80098fc <_printf_i+0x16c>
 8009910:	e7b9      	b.n	8009886 <_printf_i+0xf6>
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	6825      	ldr	r5, [r4, #0]
 8009916:	1d18      	adds	r0, r3, #4
 8009918:	6961      	ldr	r1, [r4, #20]
 800991a:	6010      	str	r0, [r2, #0]
 800991c:	0628      	lsls	r0, r5, #24
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	d501      	bpl.n	8009926 <_printf_i+0x196>
 8009922:	6019      	str	r1, [r3, #0]
 8009924:	e002      	b.n	800992c <_printf_i+0x19c>
 8009926:	066a      	lsls	r2, r5, #25
 8009928:	d5fb      	bpl.n	8009922 <_printf_i+0x192>
 800992a:	8019      	strh	r1, [r3, #0]
 800992c:	2300      	movs	r3, #0
 800992e:	4665      	mov	r5, ip
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	e7b9      	b.n	80098a8 <_printf_i+0x118>
 8009934:	6813      	ldr	r3, [r2, #0]
 8009936:	1d19      	adds	r1, r3, #4
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	681d      	ldr	r5, [r3, #0]
 800993c:	6862      	ldr	r2, [r4, #4]
 800993e:	2100      	movs	r1, #0
 8009940:	4628      	mov	r0, r5
 8009942:	f000 fec1 	bl	800a6c8 <memchr>
 8009946:	b108      	cbz	r0, 800994c <_printf_i+0x1bc>
 8009948:	1b40      	subs	r0, r0, r5
 800994a:	6060      	str	r0, [r4, #4]
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	2300      	movs	r3, #0
 8009952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009956:	e7a7      	b.n	80098a8 <_printf_i+0x118>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	462a      	mov	r2, r5
 800995c:	4639      	mov	r1, r7
 800995e:	4630      	mov	r0, r6
 8009960:	47c0      	blx	r8
 8009962:	3001      	adds	r0, #1
 8009964:	d0aa      	beq.n	80098bc <_printf_i+0x12c>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	079b      	lsls	r3, r3, #30
 800996a:	d413      	bmi.n	8009994 <_printf_i+0x204>
 800996c:	68e0      	ldr	r0, [r4, #12]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	4298      	cmp	r0, r3
 8009972:	bfb8      	it	lt
 8009974:	4618      	movlt	r0, r3
 8009976:	e7a3      	b.n	80098c0 <_printf_i+0x130>
 8009978:	2301      	movs	r3, #1
 800997a:	464a      	mov	r2, r9
 800997c:	4639      	mov	r1, r7
 800997e:	4630      	mov	r0, r6
 8009980:	47c0      	blx	r8
 8009982:	3001      	adds	r0, #1
 8009984:	d09a      	beq.n	80098bc <_printf_i+0x12c>
 8009986:	3501      	adds	r5, #1
 8009988:	68e3      	ldr	r3, [r4, #12]
 800998a:	9a03      	ldr	r2, [sp, #12]
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	42ab      	cmp	r3, r5
 8009990:	dcf2      	bgt.n	8009978 <_printf_i+0x1e8>
 8009992:	e7eb      	b.n	800996c <_printf_i+0x1dc>
 8009994:	2500      	movs	r5, #0
 8009996:	f104 0919 	add.w	r9, r4, #25
 800999a:	e7f5      	b.n	8009988 <_printf_i+0x1f8>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1ac      	bne.n	80098fa <_printf_i+0x16a>
 80099a0:	7803      	ldrb	r3, [r0, #0]
 80099a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099aa:	e76c      	b.n	8009886 <_printf_i+0xf6>
 80099ac:	0800ca76 	.word	0x0800ca76
 80099b0:	0800ca87 	.word	0x0800ca87

080099b4 <siprintf>:
 80099b4:	b40e      	push	{r1, r2, r3}
 80099b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099ba:	b500      	push	{lr}
 80099bc:	b09c      	sub	sp, #112	; 0x70
 80099be:	ab1d      	add	r3, sp, #116	; 0x74
 80099c0:	9002      	str	r0, [sp, #8]
 80099c2:	9006      	str	r0, [sp, #24]
 80099c4:	9107      	str	r1, [sp, #28]
 80099c6:	9104      	str	r1, [sp, #16]
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <siprintf+0x38>)
 80099ca:	4909      	ldr	r1, [pc, #36]	; (80099f0 <siprintf+0x3c>)
 80099cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d0:	9105      	str	r1, [sp, #20]
 80099d2:	6800      	ldr	r0, [r0, #0]
 80099d4:	a902      	add	r1, sp, #8
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	f001 fa6e 	bl	800aeb8 <_svfiprintf_r>
 80099dc:	2200      	movs	r2, #0
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	b01c      	add	sp, #112	; 0x70
 80099e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e8:	b003      	add	sp, #12
 80099ea:	4770      	bx	lr
 80099ec:	20000014 	.word	0x20000014
 80099f0:	ffff0208 	.word	0xffff0208

080099f4 <quorem>:
 80099f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	6903      	ldr	r3, [r0, #16]
 80099fa:	690c      	ldr	r4, [r1, #16]
 80099fc:	4680      	mov	r8, r0
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	f2c0 8084 	blt.w	8009b0c <quorem+0x118>
 8009a04:	3c01      	subs	r4, #1
 8009a06:	f101 0714 	add.w	r7, r1, #20
 8009a0a:	f100 0614 	add.w	r6, r0, #20
 8009a0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a16:	3501      	adds	r5, #1
 8009a18:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a20:	eb06 030c 	add.w	r3, r6, ip
 8009a24:	eb07 090c 	add.w	r9, r7, ip
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	b39d      	cbz	r5, 8009a94 <quorem+0xa0>
 8009a2c:	f04f 0a00 	mov.w	sl, #0
 8009a30:	4638      	mov	r0, r7
 8009a32:	46b6      	mov	lr, r6
 8009a34:	46d3      	mov	fp, sl
 8009a36:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a3a:	b293      	uxth	r3, r2
 8009a3c:	fb05 a303 	mla	r3, r5, r3, sl
 8009a40:	0c12      	lsrs	r2, r2, #16
 8009a42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a46:	fb05 a202 	mla	r2, r5, r2, sl
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	ebab 0303 	sub.w	r3, fp, r3
 8009a50:	f8de b000 	ldr.w	fp, [lr]
 8009a54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a58:	fa1f fb8b 	uxth.w	fp, fp
 8009a5c:	445b      	add	r3, fp
 8009a5e:	fa1f fb82 	uxth.w	fp, r2
 8009a62:	f8de 2000 	ldr.w	r2, [lr]
 8009a66:	4581      	cmp	r9, r0
 8009a68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a76:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a7a:	f84e 3b04 	str.w	r3, [lr], #4
 8009a7e:	d2da      	bcs.n	8009a36 <quorem+0x42>
 8009a80:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a84:	b933      	cbnz	r3, 8009a94 <quorem+0xa0>
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	3b04      	subs	r3, #4
 8009a8a:	429e      	cmp	r6, r3
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	d331      	bcc.n	8009af4 <quorem+0x100>
 8009a90:	f8c8 4010 	str.w	r4, [r8, #16]
 8009a94:	4640      	mov	r0, r8
 8009a96:	f001 f839 	bl	800ab0c <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	db26      	blt.n	8009aec <quorem+0xf8>
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f04f 0c00 	mov.w	ip, #0
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	f857 1b04 	ldr.w	r1, [r7], #4
 8009aaa:	f8d0 e000 	ldr.w	lr, [r0]
 8009aae:	b28b      	uxth	r3, r1
 8009ab0:	ebac 0303 	sub.w	r3, ip, r3
 8009ab4:	fa1f f28e 	uxth.w	r2, lr
 8009ab8:	4413      	add	r3, r2
 8009aba:	0c0a      	lsrs	r2, r1, #16
 8009abc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aca:	45b9      	cmp	r9, r7
 8009acc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ad0:	f840 3b04 	str.w	r3, [r0], #4
 8009ad4:	d2e7      	bcs.n	8009aa6 <quorem+0xb2>
 8009ad6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009ada:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009ade:	b92a      	cbnz	r2, 8009aec <quorem+0xf8>
 8009ae0:	3b04      	subs	r3, #4
 8009ae2:	429e      	cmp	r6, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	d30b      	bcc.n	8009b00 <quorem+0x10c>
 8009ae8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aec:	4628      	mov	r0, r5
 8009aee:	b003      	add	sp, #12
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	6812      	ldr	r2, [r2, #0]
 8009af6:	3b04      	subs	r3, #4
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	d1c9      	bne.n	8009a90 <quorem+0x9c>
 8009afc:	3c01      	subs	r4, #1
 8009afe:	e7c4      	b.n	8009a8a <quorem+0x96>
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	3b04      	subs	r3, #4
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	d1ef      	bne.n	8009ae8 <quorem+0xf4>
 8009b08:	3c01      	subs	r4, #1
 8009b0a:	e7ea      	b.n	8009ae2 <quorem+0xee>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7ee      	b.n	8009aee <quorem+0xfa>

08009b10 <_dtoa_r>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4616      	mov	r6, r2
 8009b16:	461f      	mov	r7, r3
 8009b18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b1a:	b095      	sub	sp, #84	; 0x54
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009b22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009b26:	b93d      	cbnz	r5, 8009b38 <_dtoa_r+0x28>
 8009b28:	2010      	movs	r0, #16
 8009b2a:	f000 fdb3 	bl	800a694 <malloc>
 8009b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b34:	6005      	str	r5, [r0, #0]
 8009b36:	60c5      	str	r5, [r0, #12]
 8009b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	b151      	cbz	r1, 8009b54 <_dtoa_r+0x44>
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	2301      	movs	r3, #1
 8009b42:	4093      	lsls	r3, r2
 8009b44:	604a      	str	r2, [r1, #4]
 8009b46:	608b      	str	r3, [r1, #8]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 fdff 	bl	800a74c <_Bfree>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	1e3b      	subs	r3, r7, #0
 8009b56:	bfaf      	iteee	ge
 8009b58:	2300      	movge	r3, #0
 8009b5a:	2201      	movlt	r2, #1
 8009b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b60:	9303      	strlt	r3, [sp, #12]
 8009b62:	bfac      	ite	ge
 8009b64:	f8c8 3000 	strge.w	r3, [r8]
 8009b68:	f8c8 2000 	strlt.w	r2, [r8]
 8009b6c:	4bae      	ldr	r3, [pc, #696]	; (8009e28 <_dtoa_r+0x318>)
 8009b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b72:	ea33 0308 	bics.w	r3, r3, r8
 8009b76:	d11b      	bne.n	8009bb0 <_dtoa_r+0xa0>
 8009b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	b923      	cbnz	r3, 8009b8e <_dtoa_r+0x7e>
 8009b84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f000 8545 	beq.w	800a618 <_dtoa_r+0xb08>
 8009b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b90:	b953      	cbnz	r3, 8009ba8 <_dtoa_r+0x98>
 8009b92:	4ba6      	ldr	r3, [pc, #664]	; (8009e2c <_dtoa_r+0x31c>)
 8009b94:	e021      	b.n	8009bda <_dtoa_r+0xca>
 8009b96:	4ba6      	ldr	r3, [pc, #664]	; (8009e30 <_dtoa_r+0x320>)
 8009b98:	9306      	str	r3, [sp, #24]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	9806      	ldr	r0, [sp, #24]
 8009ba2:	b015      	add	sp, #84	; 0x54
 8009ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba8:	4ba0      	ldr	r3, [pc, #640]	; (8009e2c <_dtoa_r+0x31c>)
 8009baa:	9306      	str	r3, [sp, #24]
 8009bac:	3303      	adds	r3, #3
 8009bae:	e7f5      	b.n	8009b9c <_dtoa_r+0x8c>
 8009bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 fef4 	bl	80009a8 <__aeabi_dcmpeq>
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	b160      	cbz	r0, 8009bde <_dtoa_r+0xce>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8520 	beq.w	800a612 <_dtoa_r+0xb02>
 8009bd2:	4b98      	ldr	r3, [pc, #608]	; (8009e34 <_dtoa_r+0x324>)
 8009bd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	e7e0      	b.n	8009ba0 <_dtoa_r+0x90>
 8009bde:	ab12      	add	r3, sp, #72	; 0x48
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	ab13      	add	r3, sp, #76	; 0x4c
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	4632      	mov	r2, r6
 8009be8:	463b      	mov	r3, r7
 8009bea:	4620      	mov	r0, r4
 8009bec:	f001 f806 	bl	800abfc <__d2b>
 8009bf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009bf4:	4683      	mov	fp, r0
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	d07d      	beq.n	8009cf6 <_dtoa_r+0x1e6>
 8009bfa:	46b0      	mov	r8, r6
 8009bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009c04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009c08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b89      	ldr	r3, [pc, #548]	; (8009e38 <_dtoa_r+0x328>)
 8009c14:	4640      	mov	r0, r8
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f6 faa6 	bl	8000168 <__aeabi_dsub>
 8009c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8009e10 <_dtoa_r+0x300>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 fc59 	bl	80004d8 <__aeabi_dmul>
 8009c26:	a37c      	add	r3, pc, #496	; (adr r3, 8009e18 <_dtoa_r+0x308>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fa9e 	bl	800016c <__adddf3>
 8009c30:	4606      	mov	r6, r0
 8009c32:	4628      	mov	r0, r5
 8009c34:	460f      	mov	r7, r1
 8009c36:	f7f6 fbe5 	bl	8000404 <__aeabi_i2d>
 8009c3a:	a379      	add	r3, pc, #484	; (adr r3, 8009e20 <_dtoa_r+0x310>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 fa8e 	bl	800016c <__adddf3>
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	f7f6 fef0 	bl	8000a38 <__aeabi_d2iz>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	f7f6 feab 	bl	80009bc <__aeabi_dcmplt>
 8009c66:	b148      	cbz	r0, 8009c7c <_dtoa_r+0x16c>
 8009c68:	4650      	mov	r0, sl
 8009c6a:	f7f6 fbcb 	bl	8000404 <__aeabi_i2d>
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	f7f6 fe99 	bl	80009a8 <__aeabi_dcmpeq>
 8009c76:	b908      	cbnz	r0, 8009c7c <_dtoa_r+0x16c>
 8009c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c7c:	f1ba 0f16 	cmp.w	sl, #22
 8009c80:	d85a      	bhi.n	8009d38 <_dtoa_r+0x228>
 8009c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c86:	496d      	ldr	r1, [pc, #436]	; (8009e3c <_dtoa_r+0x32c>)
 8009c88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c90:	f7f6 feb2 	bl	80009f8 <__aeabi_dcmpgt>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d051      	beq.n	8009d3c <_dtoa_r+0x22c>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8009ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ca2:	1b5d      	subs	r5, r3, r5
 8009ca4:	1e6b      	subs	r3, r5, #1
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	bf43      	ittte	mi
 8009caa:	2300      	movmi	r3, #0
 8009cac:	f1c5 0901 	rsbmi	r9, r5, #1
 8009cb0:	9307      	strmi	r3, [sp, #28]
 8009cb2:	f04f 0900 	movpl.w	r9, #0
 8009cb6:	f1ba 0f00 	cmp.w	sl, #0
 8009cba:	db41      	blt.n	8009d40 <_dtoa_r+0x230>
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009cc2:	4453      	add	r3, sl
 8009cc4:	9307      	str	r3, [sp, #28]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9308      	str	r3, [sp, #32]
 8009cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ccc:	2b09      	cmp	r3, #9
 8009cce:	f200 808f 	bhi.w	8009df0 <_dtoa_r+0x2e0>
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	bfc4      	itt	gt
 8009cd6:	3b04      	subgt	r3, #4
 8009cd8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009cda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cdc:	bfc8      	it	gt
 8009cde:	2500      	movgt	r5, #0
 8009ce0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ce4:	bfd8      	it	le
 8009ce6:	2501      	movle	r5, #1
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	f200 808d 	bhi.w	8009e08 <_dtoa_r+0x2f8>
 8009cee:	e8df f003 	tbb	[pc, r3]
 8009cf2:	7d7b      	.short	0x7d7b
 8009cf4:	6f2f      	.short	0x6f2f
 8009cf6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009cfa:	441d      	add	r5, r3
 8009cfc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009d00:	2820      	cmp	r0, #32
 8009d02:	dd13      	ble.n	8009d2c <_dtoa_r+0x21c>
 8009d04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009d08:	9b02      	ldr	r3, [sp, #8]
 8009d0a:	fa08 f800 	lsl.w	r8, r8, r0
 8009d0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d12:	fa23 f000 	lsr.w	r0, r3, r0
 8009d16:	ea48 0000 	orr.w	r0, r8, r0
 8009d1a:	f7f6 fb63 	bl	80003e4 <__aeabi_ui2d>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4680      	mov	r8, r0
 8009d22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009d26:	3d01      	subs	r5, #1
 8009d28:	9310      	str	r3, [sp, #64]	; 0x40
 8009d2a:	e771      	b.n	8009c10 <_dtoa_r+0x100>
 8009d2c:	9b02      	ldr	r3, [sp, #8]
 8009d2e:	f1c0 0020 	rsb	r0, r0, #32
 8009d32:	fa03 f000 	lsl.w	r0, r3, r0
 8009d36:	e7f0      	b.n	8009d1a <_dtoa_r+0x20a>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e7b0      	b.n	8009c9e <_dtoa_r+0x18e>
 8009d3c:	900d      	str	r0, [sp, #52]	; 0x34
 8009d3e:	e7af      	b.n	8009ca0 <_dtoa_r+0x190>
 8009d40:	f1ca 0300 	rsb	r3, sl, #0
 8009d44:	9308      	str	r3, [sp, #32]
 8009d46:	2300      	movs	r3, #0
 8009d48:	eba9 090a 	sub.w	r9, r9, sl
 8009d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d4e:	e7bc      	b.n	8009cca <_dtoa_r+0x1ba>
 8009d50:	2301      	movs	r3, #1
 8009d52:	9309      	str	r3, [sp, #36]	; 0x24
 8009d54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	dd74      	ble.n	8009e44 <_dtoa_r+0x334>
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d62:	6072      	str	r2, [r6, #4]
 8009d64:	2204      	movs	r2, #4
 8009d66:	f102 0014 	add.w	r0, r2, #20
 8009d6a:	4298      	cmp	r0, r3
 8009d6c:	6871      	ldr	r1, [r6, #4]
 8009d6e:	d96e      	bls.n	8009e4e <_dtoa_r+0x33e>
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 fcb7 	bl	800a6e4 <_Balloc>
 8009d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d78:	6030      	str	r0, [r6, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f1b8 0f0e 	cmp.w	r8, #14
 8009d80:	9306      	str	r3, [sp, #24]
 8009d82:	f200 80ed 	bhi.w	8009f60 <_dtoa_r+0x450>
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	f000 80ea 	beq.w	8009f60 <_dtoa_r+0x450>
 8009d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d90:	f1ba 0f00 	cmp.w	sl, #0
 8009d94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009d98:	dd77      	ble.n	8009e8a <_dtoa_r+0x37a>
 8009d9a:	4a28      	ldr	r2, [pc, #160]	; (8009e3c <_dtoa_r+0x32c>)
 8009d9c:	f00a 030f 	and.w	r3, sl, #15
 8009da0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009da4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009da8:	06f0      	lsls	r0, r6, #27
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009db2:	d568      	bpl.n	8009e86 <_dtoa_r+0x376>
 8009db4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009db8:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <_dtoa_r+0x330>)
 8009dba:	2503      	movs	r5, #3
 8009dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dc0:	f7f6 fcb4 	bl	800072c <__aeabi_ddiv>
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	f006 060f 	and.w	r6, r6, #15
 8009dcc:	4f1c      	ldr	r7, [pc, #112]	; (8009e40 <_dtoa_r+0x330>)
 8009dce:	e04f      	b.n	8009e70 <_dtoa_r+0x360>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dd6:	4453      	add	r3, sl
 8009dd8:	f103 0801 	add.w	r8, r3, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	4643      	mov	r3, r8
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	bfb8      	it	lt
 8009de4:	2301      	movlt	r3, #1
 8009de6:	e7ba      	b.n	8009d5e <_dtoa_r+0x24e>
 8009de8:	2300      	movs	r3, #0
 8009dea:	e7b2      	b.n	8009d52 <_dtoa_r+0x242>
 8009dec:	2300      	movs	r3, #0
 8009dee:	e7f0      	b.n	8009dd2 <_dtoa_r+0x2c2>
 8009df0:	2501      	movs	r5, #1
 8009df2:	2300      	movs	r3, #0
 8009df4:	9509      	str	r5, [sp, #36]	; 0x24
 8009df6:	931e      	str	r3, [sp, #120]	; 0x78
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	9304      	str	r3, [sp, #16]
 8009e00:	4698      	mov	r8, r3
 8009e02:	2312      	movs	r3, #18
 8009e04:	921f      	str	r2, [sp, #124]	; 0x7c
 8009e06:	e7aa      	b.n	8009d5e <_dtoa_r+0x24e>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0c:	e7f4      	b.n	8009df8 <_dtoa_r+0x2e8>
 8009e0e:	bf00      	nop
 8009e10:	636f4361 	.word	0x636f4361
 8009e14:	3fd287a7 	.word	0x3fd287a7
 8009e18:	8b60c8b3 	.word	0x8b60c8b3
 8009e1c:	3fc68a28 	.word	0x3fc68a28
 8009e20:	509f79fb 	.word	0x509f79fb
 8009e24:	3fd34413 	.word	0x3fd34413
 8009e28:	7ff00000 	.word	0x7ff00000
 8009e2c:	0800caa1 	.word	0x0800caa1
 8009e30:	0800ca98 	.word	0x0800ca98
 8009e34:	0800ca75 	.word	0x0800ca75
 8009e38:	3ff80000 	.word	0x3ff80000
 8009e3c:	0800cad8 	.word	0x0800cad8
 8009e40:	0800cab0 	.word	0x0800cab0
 8009e44:	2301      	movs	r3, #1
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	4698      	mov	r8, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	e7da      	b.n	8009e04 <_dtoa_r+0x2f4>
 8009e4e:	3101      	adds	r1, #1
 8009e50:	6071      	str	r1, [r6, #4]
 8009e52:	0052      	lsls	r2, r2, #1
 8009e54:	e787      	b.n	8009d66 <_dtoa_r+0x256>
 8009e56:	07f1      	lsls	r1, r6, #31
 8009e58:	d508      	bpl.n	8009e6c <_dtoa_r+0x35c>
 8009e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e62:	f7f6 fb39 	bl	80004d8 <__aeabi_dmul>
 8009e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	1076      	asrs	r6, r6, #1
 8009e6e:	3708      	adds	r7, #8
 8009e70:	2e00      	cmp	r6, #0
 8009e72:	d1f0      	bne.n	8009e56 <_dtoa_r+0x346>
 8009e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e7c:	f7f6 fc56 	bl	800072c <__aeabi_ddiv>
 8009e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e84:	e01b      	b.n	8009ebe <_dtoa_r+0x3ae>
 8009e86:	2502      	movs	r5, #2
 8009e88:	e7a0      	b.n	8009dcc <_dtoa_r+0x2bc>
 8009e8a:	f000 80a4 	beq.w	8009fd6 <_dtoa_r+0x4c6>
 8009e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e92:	f1ca 0600 	rsb	r6, sl, #0
 8009e96:	4ba0      	ldr	r3, [pc, #640]	; (800a118 <_dtoa_r+0x608>)
 8009e98:	f006 020f 	and.w	r2, r6, #15
 8009e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fb18 	bl	80004d8 <__aeabi_dmul>
 8009ea8:	2502      	movs	r5, #2
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb0:	4f9a      	ldr	r7, [pc, #616]	; (800a11c <_dtoa_r+0x60c>)
 8009eb2:	1136      	asrs	r6, r6, #4
 8009eb4:	2e00      	cmp	r6, #0
 8009eb6:	f040 8083 	bne.w	8009fc0 <_dtoa_r+0x4b0>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e0      	bne.n	8009e80 <_dtoa_r+0x370>
 8009ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 808a 	beq.w	8009fda <_dtoa_r+0x4ca>
 8009ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4b92      	ldr	r3, [pc, #584]	; (800a120 <_dtoa_r+0x610>)
 8009ed6:	f7f6 fd71 	bl	80009bc <__aeabi_dcmplt>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d07d      	beq.n	8009fda <_dtoa_r+0x4ca>
 8009ede:	f1b8 0f00 	cmp.w	r8, #0
 8009ee2:	d07a      	beq.n	8009fda <_dtoa_r+0x4ca>
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dd36      	ble.n	8009f58 <_dtoa_r+0x448>
 8009eea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4b8c      	ldr	r3, [pc, #560]	; (800a124 <_dtoa_r+0x614>)
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efa:	9e04      	ldr	r6, [sp, #16]
 8009efc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009f00:	3501      	adds	r5, #1
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7f6 fa7e 	bl	8000404 <__aeabi_i2d>
 8009f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f0c:	f7f6 fae4 	bl	80004d8 <__aeabi_dmul>
 8009f10:	2200      	movs	r2, #0
 8009f12:	4b85      	ldr	r3, [pc, #532]	; (800a128 <_dtoa_r+0x618>)
 8009f14:	f7f6 f92a 	bl	800016c <__adddf3>
 8009f18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f20:	950b      	str	r5, [sp, #44]	; 0x2c
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	d15c      	bne.n	8009fe0 <_dtoa_r+0x4d0>
 8009f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4b7f      	ldr	r3, [pc, #508]	; (800a12c <_dtoa_r+0x61c>)
 8009f2e:	f7f6 f91b 	bl	8000168 <__aeabi_dsub>
 8009f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f34:	462b      	mov	r3, r5
 8009f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3a:	f7f6 fd5d 	bl	80009f8 <__aeabi_dcmpgt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f040 8281 	bne.w	800a446 <_dtoa_r+0x936>
 8009f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009f4e:	f7f6 fd35 	bl	80009bc <__aeabi_dcmplt>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f040 8275 	bne.w	800a442 <_dtoa_r+0x932>
 8009f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f2c0 814b 	blt.w	800a1fe <_dtoa_r+0x6ee>
 8009f68:	f1ba 0f0e 	cmp.w	sl, #14
 8009f6c:	f300 8147 	bgt.w	800a1fe <_dtoa_r+0x6ee>
 8009f70:	4b69      	ldr	r3, [pc, #420]	; (800a118 <_dtoa_r+0x608>)
 8009f72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f280 80d7 	bge.w	800a134 <_dtoa_r+0x624>
 8009f86:	f1b8 0f00 	cmp.w	r8, #0
 8009f8a:	f300 80d3 	bgt.w	800a134 <_dtoa_r+0x624>
 8009f8e:	f040 8257 	bne.w	800a440 <_dtoa_r+0x930>
 8009f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f96:	2200      	movs	r2, #0
 8009f98:	4b64      	ldr	r3, [pc, #400]	; (800a12c <_dtoa_r+0x61c>)
 8009f9a:	f7f6 fa9d 	bl	80004d8 <__aeabi_dmul>
 8009f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fa2:	f7f6 fd1f 	bl	80009e4 <__aeabi_dcmpge>
 8009fa6:	4646      	mov	r6, r8
 8009fa8:	4647      	mov	r7, r8
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f040 822d 	bne.w	800a40a <_dtoa_r+0x8fa>
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	9a06      	ldr	r2, [sp, #24]
 8009fb4:	1c5d      	adds	r5, r3, #1
 8009fb6:	2331      	movs	r3, #49	; 0x31
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	7013      	strb	r3, [r2, #0]
 8009fbe:	e228      	b.n	800a412 <_dtoa_r+0x902>
 8009fc0:	07f2      	lsls	r2, r6, #31
 8009fc2:	d505      	bpl.n	8009fd0 <_dtoa_r+0x4c0>
 8009fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc8:	f7f6 fa86 	bl	80004d8 <__aeabi_dmul>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	3501      	adds	r5, #1
 8009fd0:	1076      	asrs	r6, r6, #1
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	e76e      	b.n	8009eb4 <_dtoa_r+0x3a4>
 8009fd6:	2502      	movs	r5, #2
 8009fd8:	e771      	b.n	8009ebe <_dtoa_r+0x3ae>
 8009fda:	4657      	mov	r7, sl
 8009fdc:	4646      	mov	r6, r8
 8009fde:	e790      	b.n	8009f02 <_dtoa_r+0x3f2>
 8009fe0:	4b4d      	ldr	r3, [pc, #308]	; (800a118 <_dtoa_r+0x608>)
 8009fe2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009fe6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d048      	beq.n	800a082 <_dtoa_r+0x572>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	494e      	ldr	r1, [pc, #312]	; (800a130 <_dtoa_r+0x620>)
 8009ff8:	f7f6 fb98 	bl	800072c <__aeabi_ddiv>
 8009ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a000:	f7f6 f8b2 	bl	8000168 <__aeabi_dsub>
 800a004:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a008:	9d06      	ldr	r5, [sp, #24]
 800a00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00e:	f7f6 fd13 	bl	8000a38 <__aeabi_d2iz>
 800a012:	9011      	str	r0, [sp, #68]	; 0x44
 800a014:	f7f6 f9f6 	bl	8000404 <__aeabi_i2d>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a020:	f7f6 f8a2 	bl	8000168 <__aeabi_dsub>
 800a024:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a02a:	3330      	adds	r3, #48	; 0x30
 800a02c:	f805 3b01 	strb.w	r3, [r5], #1
 800a030:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a034:	f7f6 fcc2 	bl	80009bc <__aeabi_dcmplt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d163      	bne.n	800a104 <_dtoa_r+0x5f4>
 800a03c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a040:	2000      	movs	r0, #0
 800a042:	4937      	ldr	r1, [pc, #220]	; (800a120 <_dtoa_r+0x610>)
 800a044:	f7f6 f890 	bl	8000168 <__aeabi_dsub>
 800a048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a04c:	f7f6 fcb6 	bl	80009bc <__aeabi_dcmplt>
 800a050:	2800      	cmp	r0, #0
 800a052:	f040 80b5 	bne.w	800a1c0 <_dtoa_r+0x6b0>
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	1aeb      	subs	r3, r5, r3
 800a05a:	429e      	cmp	r6, r3
 800a05c:	f77f af7c 	ble.w	8009f58 <_dtoa_r+0x448>
 800a060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a064:	2200      	movs	r2, #0
 800a066:	4b2f      	ldr	r3, [pc, #188]	; (800a124 <_dtoa_r+0x614>)
 800a068:	f7f6 fa36 	bl	80004d8 <__aeabi_dmul>
 800a06c:	2200      	movs	r2, #0
 800a06e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a076:	4b2b      	ldr	r3, [pc, #172]	; (800a124 <_dtoa_r+0x614>)
 800a078:	f7f6 fa2e 	bl	80004d8 <__aeabi_dmul>
 800a07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a080:	e7c3      	b.n	800a00a <_dtoa_r+0x4fa>
 800a082:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a086:	f7f6 fa27 	bl	80004d8 <__aeabi_dmul>
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a090:	199d      	adds	r5, r3, r6
 800a092:	461e      	mov	r6, r3
 800a094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a098:	f7f6 fcce 	bl	8000a38 <__aeabi_d2iz>
 800a09c:	9011      	str	r0, [sp, #68]	; 0x44
 800a09e:	f7f6 f9b1 	bl	8000404 <__aeabi_i2d>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b4:	3330      	adds	r3, #48	; 0x30
 800a0b6:	f806 3b01 	strb.w	r3, [r6], #1
 800a0ba:	42ae      	cmp	r6, r5
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	d124      	bne.n	800a10c <_dtoa_r+0x5fc>
 800a0c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <_dtoa_r+0x620>)
 800a0c8:	f7f6 f850 	bl	800016c <__adddf3>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d4:	f7f6 fc90 	bl	80009f8 <__aeabi_dcmpgt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d171      	bne.n	800a1c0 <_dtoa_r+0x6b0>
 800a0dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4913      	ldr	r1, [pc, #76]	; (800a130 <_dtoa_r+0x620>)
 800a0e4:	f7f6 f840 	bl	8000168 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f0:	f7f6 fc64 	bl	80009bc <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f af2f 	beq.w	8009f58 <_dtoa_r+0x448>
 800a0fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0fe:	1e6a      	subs	r2, r5, #1
 800a100:	2b30      	cmp	r3, #48	; 0x30
 800a102:	d001      	beq.n	800a108 <_dtoa_r+0x5f8>
 800a104:	46ba      	mov	sl, r7
 800a106:	e04a      	b.n	800a19e <_dtoa_r+0x68e>
 800a108:	4615      	mov	r5, r2
 800a10a:	e7f6      	b.n	800a0fa <_dtoa_r+0x5ea>
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <_dtoa_r+0x614>)
 800a10e:	f7f6 f9e3 	bl	80004d8 <__aeabi_dmul>
 800a112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a116:	e7bd      	b.n	800a094 <_dtoa_r+0x584>
 800a118:	0800cad8 	.word	0x0800cad8
 800a11c:	0800cab0 	.word	0x0800cab0
 800a120:	3ff00000 	.word	0x3ff00000
 800a124:	40240000 	.word	0x40240000
 800a128:	401c0000 	.word	0x401c0000
 800a12c:	40140000 	.word	0x40140000
 800a130:	3fe00000 	.word	0x3fe00000
 800a134:	9d06      	ldr	r5, [sp, #24]
 800a136:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 faf3 	bl	800072c <__aeabi_ddiv>
 800a146:	f7f6 fc77 	bl	8000a38 <__aeabi_d2iz>
 800a14a:	4681      	mov	r9, r0
 800a14c:	f7f6 f95a 	bl	8000404 <__aeabi_i2d>
 800a150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a154:	f7f6 f9c0 	bl	80004d8 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 f802 	bl	8000168 <__aeabi_dsub>
 800a164:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a168:	f805 6b01 	strb.w	r6, [r5], #1
 800a16c:	9e06      	ldr	r6, [sp, #24]
 800a16e:	4602      	mov	r2, r0
 800a170:	1bae      	subs	r6, r5, r6
 800a172:	45b0      	cmp	r8, r6
 800a174:	460b      	mov	r3, r1
 800a176:	d135      	bne.n	800a1e4 <_dtoa_r+0x6d4>
 800a178:	f7f5 fff8 	bl	800016c <__adddf3>
 800a17c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a180:	4606      	mov	r6, r0
 800a182:	460f      	mov	r7, r1
 800a184:	f7f6 fc38 	bl	80009f8 <__aeabi_dcmpgt>
 800a188:	b9c8      	cbnz	r0, 800a1be <_dtoa_r+0x6ae>
 800a18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	f7f6 fc09 	bl	80009a8 <__aeabi_dcmpeq>
 800a196:	b110      	cbz	r0, 800a19e <_dtoa_r+0x68e>
 800a198:	f019 0f01 	tst.w	r9, #1
 800a19c:	d10f      	bne.n	800a1be <_dtoa_r+0x6ae>
 800a19e:	4659      	mov	r1, fp
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fad3 	bl	800a74c <_Bfree>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1aa:	702b      	strb	r3, [r5, #0]
 800a1ac:	f10a 0301 	add.w	r3, sl, #1
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f43f acf3 	beq.w	8009ba0 <_dtoa_r+0x90>
 800a1ba:	601d      	str	r5, [r3, #0]
 800a1bc:	e4f0      	b.n	8009ba0 <_dtoa_r+0x90>
 800a1be:	4657      	mov	r7, sl
 800a1c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1c4:	1e6b      	subs	r3, r5, #1
 800a1c6:	2a39      	cmp	r2, #57	; 0x39
 800a1c8:	d106      	bne.n	800a1d8 <_dtoa_r+0x6c8>
 800a1ca:	9a06      	ldr	r2, [sp, #24]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d107      	bne.n	800a1e0 <_dtoa_r+0x6d0>
 800a1d0:	2330      	movs	r3, #48	; 0x30
 800a1d2:	7013      	strb	r3, [r2, #0]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	3701      	adds	r7, #1
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	3201      	adds	r2, #1
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	e791      	b.n	800a104 <_dtoa_r+0x5f4>
 800a1e0:	461d      	mov	r5, r3
 800a1e2:	e7ed      	b.n	800a1c0 <_dtoa_r+0x6b0>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4b99      	ldr	r3, [pc, #612]	; (800a44c <_dtoa_r+0x93c>)
 800a1e8:	f7f6 f976 	bl	80004d8 <__aeabi_dmul>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	f7f6 fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d09e      	beq.n	800a13a <_dtoa_r+0x62a>
 800a1fc:	e7cf      	b.n	800a19e <_dtoa_r+0x68e>
 800a1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a200:	2a00      	cmp	r2, #0
 800a202:	f000 8088 	beq.w	800a316 <_dtoa_r+0x806>
 800a206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a208:	2a01      	cmp	r2, #1
 800a20a:	dc6d      	bgt.n	800a2e8 <_dtoa_r+0x7d8>
 800a20c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a20e:	2a00      	cmp	r2, #0
 800a210:	d066      	beq.n	800a2e0 <_dtoa_r+0x7d0>
 800a212:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a216:	464d      	mov	r5, r9
 800a218:	9e08      	ldr	r6, [sp, #32]
 800a21a:	9a07      	ldr	r2, [sp, #28]
 800a21c:	2101      	movs	r1, #1
 800a21e:	441a      	add	r2, r3
 800a220:	4620      	mov	r0, r4
 800a222:	4499      	add	r9, r3
 800a224:	9207      	str	r2, [sp, #28]
 800a226:	f000 fb31 	bl	800a88c <__i2b>
 800a22a:	4607      	mov	r7, r0
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	dd0b      	ble.n	800a248 <_dtoa_r+0x738>
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd08      	ble.n	800a248 <_dtoa_r+0x738>
 800a236:	42ab      	cmp	r3, r5
 800a238:	bfa8      	it	ge
 800a23a:	462b      	movge	r3, r5
 800a23c:	9a07      	ldr	r2, [sp, #28]
 800a23e:	eba9 0903 	sub.w	r9, r9, r3
 800a242:	1aed      	subs	r5, r5, r3
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	9b08      	ldr	r3, [sp, #32]
 800a24a:	b1eb      	cbz	r3, 800a288 <_dtoa_r+0x778>
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d065      	beq.n	800a31e <_dtoa_r+0x80e>
 800a252:	b18e      	cbz	r6, 800a278 <_dtoa_r+0x768>
 800a254:	4639      	mov	r1, r7
 800a256:	4632      	mov	r2, r6
 800a258:	4620      	mov	r0, r4
 800a25a:	f000 fbb5 	bl	800a9c8 <__pow5mult>
 800a25e:	465a      	mov	r2, fp
 800a260:	4601      	mov	r1, r0
 800a262:	4607      	mov	r7, r0
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb1a 	bl	800a89e <__multiply>
 800a26a:	4659      	mov	r1, fp
 800a26c:	900a      	str	r0, [sp, #40]	; 0x28
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 fa6c 	bl	800a74c <_Bfree>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	469b      	mov	fp, r3
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	1b9a      	subs	r2, r3, r6
 800a27c:	d004      	beq.n	800a288 <_dtoa_r+0x778>
 800a27e:	4659      	mov	r1, fp
 800a280:	4620      	mov	r0, r4
 800a282:	f000 fba1 	bl	800a9c8 <__pow5mult>
 800a286:	4683      	mov	fp, r0
 800a288:	2101      	movs	r1, #1
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 fafe 	bl	800a88c <__i2b>
 800a290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a292:	4606      	mov	r6, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 81c6 	beq.w	800a626 <_dtoa_r+0xb16>
 800a29a:	461a      	mov	r2, r3
 800a29c:	4601      	mov	r1, r0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 fb92 	bl	800a9c8 <__pow5mult>
 800a2a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	dc3e      	bgt.n	800a32a <_dtoa_r+0x81a>
 800a2ac:	9b02      	ldr	r3, [sp, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d137      	bne.n	800a322 <_dtoa_r+0x812>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d134      	bne.n	800a326 <_dtoa_r+0x816>
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2c2:	0d1b      	lsrs	r3, r3, #20
 800a2c4:	051b      	lsls	r3, r3, #20
 800a2c6:	b12b      	cbz	r3, 800a2d4 <_dtoa_r+0x7c4>
 800a2c8:	9b07      	ldr	r3, [sp, #28]
 800a2ca:	f109 0901 	add.w	r9, r9, #1
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	9308      	str	r3, [sp, #32]
 800a2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d128      	bne.n	800a32e <_dtoa_r+0x81e>
 800a2dc:	2001      	movs	r0, #1
 800a2de:	e02e      	b.n	800a33e <_dtoa_r+0x82e>
 800a2e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2e6:	e796      	b.n	800a216 <_dtoa_r+0x706>
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	f108 36ff 	add.w	r6, r8, #4294967295
 800a2ee:	42b3      	cmp	r3, r6
 800a2f0:	bfb7      	itett	lt
 800a2f2:	9b08      	ldrlt	r3, [sp, #32]
 800a2f4:	1b9e      	subge	r6, r3, r6
 800a2f6:	1af2      	sublt	r2, r6, r3
 800a2f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a2fa:	bfbf      	itttt	lt
 800a2fc:	9608      	strlt	r6, [sp, #32]
 800a2fe:	189b      	addlt	r3, r3, r2
 800a300:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a302:	2600      	movlt	r6, #0
 800a304:	f1b8 0f00 	cmp.w	r8, #0
 800a308:	bfb9      	ittee	lt
 800a30a:	eba9 0508 	sublt.w	r5, r9, r8
 800a30e:	2300      	movlt	r3, #0
 800a310:	464d      	movge	r5, r9
 800a312:	4643      	movge	r3, r8
 800a314:	e781      	b.n	800a21a <_dtoa_r+0x70a>
 800a316:	9e08      	ldr	r6, [sp, #32]
 800a318:	464d      	mov	r5, r9
 800a31a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a31c:	e786      	b.n	800a22c <_dtoa_r+0x71c>
 800a31e:	9a08      	ldr	r2, [sp, #32]
 800a320:	e7ad      	b.n	800a27e <_dtoa_r+0x76e>
 800a322:	2300      	movs	r3, #0
 800a324:	e7d6      	b.n	800a2d4 <_dtoa_r+0x7c4>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	e7d4      	b.n	800a2d4 <_dtoa_r+0x7c4>
 800a32a:	2300      	movs	r3, #0
 800a32c:	9308      	str	r3, [sp, #32]
 800a32e:	6933      	ldr	r3, [r6, #16]
 800a330:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a334:	6918      	ldr	r0, [r3, #16]
 800a336:	f000 fa5b 	bl	800a7f0 <__hi0bits>
 800a33a:	f1c0 0020 	rsb	r0, r0, #32
 800a33e:	9b07      	ldr	r3, [sp, #28]
 800a340:	4418      	add	r0, r3
 800a342:	f010 001f 	ands.w	r0, r0, #31
 800a346:	d047      	beq.n	800a3d8 <_dtoa_r+0x8c8>
 800a348:	f1c0 0320 	rsb	r3, r0, #32
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	dd3b      	ble.n	800a3c8 <_dtoa_r+0x8b8>
 800a350:	9b07      	ldr	r3, [sp, #28]
 800a352:	f1c0 001c 	rsb	r0, r0, #28
 800a356:	4481      	add	r9, r0
 800a358:	4405      	add	r5, r0
 800a35a:	4403      	add	r3, r0
 800a35c:	9307      	str	r3, [sp, #28]
 800a35e:	f1b9 0f00 	cmp.w	r9, #0
 800a362:	dd05      	ble.n	800a370 <_dtoa_r+0x860>
 800a364:	4659      	mov	r1, fp
 800a366:	464a      	mov	r2, r9
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fb7b 	bl	800aa64 <__lshift>
 800a36e:	4683      	mov	fp, r0
 800a370:	9b07      	ldr	r3, [sp, #28]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd05      	ble.n	800a382 <_dtoa_r+0x872>
 800a376:	4631      	mov	r1, r6
 800a378:	461a      	mov	r2, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fb72 	bl	800aa64 <__lshift>
 800a380:	4606      	mov	r6, r0
 800a382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a384:	b353      	cbz	r3, 800a3dc <_dtoa_r+0x8cc>
 800a386:	4631      	mov	r1, r6
 800a388:	4658      	mov	r0, fp
 800a38a:	f000 fbbf 	bl	800ab0c <__mcmp>
 800a38e:	2800      	cmp	r0, #0
 800a390:	da24      	bge.n	800a3dc <_dtoa_r+0x8cc>
 800a392:	2300      	movs	r3, #0
 800a394:	4659      	mov	r1, fp
 800a396:	220a      	movs	r2, #10
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 f9ee 	bl	800a77a <__multadd>
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3a4:	4683      	mov	fp, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 8144 	beq.w	800a634 <_dtoa_r+0xb24>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 f9e1 	bl	800a77a <__multadd>
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	4607      	mov	r7, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dc4d      	bgt.n	800a45c <_dtoa_r+0x94c>
 800a3c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	dd4a      	ble.n	800a45c <_dtoa_r+0x94c>
 800a3c6:	e011      	b.n	800a3ec <_dtoa_r+0x8dc>
 800a3c8:	d0c9      	beq.n	800a35e <_dtoa_r+0x84e>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	331c      	adds	r3, #28
 800a3ce:	441a      	add	r2, r3
 800a3d0:	4499      	add	r9, r3
 800a3d2:	441d      	add	r5, r3
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	e7c1      	b.n	800a35c <_dtoa_r+0x84c>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	e7f6      	b.n	800a3ca <_dtoa_r+0x8ba>
 800a3dc:	f1b8 0f00 	cmp.w	r8, #0
 800a3e0:	dc36      	bgt.n	800a450 <_dtoa_r+0x940>
 800a3e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	dd33      	ble.n	800a450 <_dtoa_r+0x940>
 800a3e8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	b963      	cbnz	r3, 800a40a <_dtoa_r+0x8fa>
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 f9c0 	bl	800a77a <__multadd>
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	4658      	mov	r0, fp
 800a400:	f000 fb84 	bl	800ab0c <__mcmp>
 800a404:	2800      	cmp	r0, #0
 800a406:	f73f add3 	bgt.w	8009fb0 <_dtoa_r+0x4a0>
 800a40a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a40c:	9d06      	ldr	r5, [sp, #24]
 800a40e:	ea6f 0a03 	mvn.w	sl, r3
 800a412:	f04f 0900 	mov.w	r9, #0
 800a416:	4631      	mov	r1, r6
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 f997 	bl	800a74c <_Bfree>
 800a41e:	2f00      	cmp	r7, #0
 800a420:	f43f aebd 	beq.w	800a19e <_dtoa_r+0x68e>
 800a424:	f1b9 0f00 	cmp.w	r9, #0
 800a428:	d005      	beq.n	800a436 <_dtoa_r+0x926>
 800a42a:	45b9      	cmp	r9, r7
 800a42c:	d003      	beq.n	800a436 <_dtoa_r+0x926>
 800a42e:	4649      	mov	r1, r9
 800a430:	4620      	mov	r0, r4
 800a432:	f000 f98b 	bl	800a74c <_Bfree>
 800a436:	4639      	mov	r1, r7
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 f987 	bl	800a74c <_Bfree>
 800a43e:	e6ae      	b.n	800a19e <_dtoa_r+0x68e>
 800a440:	2600      	movs	r6, #0
 800a442:	4637      	mov	r7, r6
 800a444:	e7e1      	b.n	800a40a <_dtoa_r+0x8fa>
 800a446:	46ba      	mov	sl, r7
 800a448:	4637      	mov	r7, r6
 800a44a:	e5b1      	b.n	8009fb0 <_dtoa_r+0x4a0>
 800a44c:	40240000 	.word	0x40240000
 800a450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a452:	f8cd 8010 	str.w	r8, [sp, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 80f3 	beq.w	800a642 <_dtoa_r+0xb32>
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	dd05      	ble.n	800a46c <_dtoa_r+0x95c>
 800a460:	4639      	mov	r1, r7
 800a462:	462a      	mov	r2, r5
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fafd 	bl	800aa64 <__lshift>
 800a46a:	4607      	mov	r7, r0
 800a46c:	9b08      	ldr	r3, [sp, #32]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d04c      	beq.n	800a50c <_dtoa_r+0x9fc>
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	4620      	mov	r0, r4
 800a476:	f000 f935 	bl	800a6e4 <_Balloc>
 800a47a:	4605      	mov	r5, r0
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	f107 010c 	add.w	r1, r7, #12
 800a482:	3202      	adds	r2, #2
 800a484:	0092      	lsls	r2, r2, #2
 800a486:	300c      	adds	r0, #12
 800a488:	f7fe fe32 	bl	80090f0 <memcpy>
 800a48c:	2201      	movs	r2, #1
 800a48e:	4629      	mov	r1, r5
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fae7 	bl	800aa64 <__lshift>
 800a496:	46b9      	mov	r9, r7
 800a498:	4607      	mov	r7, r0
 800a49a:	9b06      	ldr	r3, [sp, #24]
 800a49c:	9307      	str	r3, [sp, #28]
 800a49e:	9b02      	ldr	r3, [sp, #8]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	9308      	str	r3, [sp, #32]
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4658      	mov	r0, fp
 800a4aa:	f7ff faa3 	bl	80099f4 <quorem>
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fb28 	bl	800ab0c <__mcmp>
 800a4bc:	463a      	mov	r2, r7
 800a4be:	9002      	str	r0, [sp, #8]
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 fb3c 	bl	800ab40 <__mdiff>
 800a4c8:	68c3      	ldr	r3, [r0, #12]
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	bb03      	cbnz	r3, 800a510 <_dtoa_r+0xa00>
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	9009      	str	r0, [sp, #36]	; 0x24
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fb1a 	bl	800ab0c <__mcmp>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4dc:	4611      	mov	r1, r2
 800a4de:	4620      	mov	r0, r4
 800a4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e2:	f000 f933 	bl	800a74c <_Bfree>
 800a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e8:	b9a3      	cbnz	r3, 800a514 <_dtoa_r+0xa04>
 800a4ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4ec:	b992      	cbnz	r2, 800a514 <_dtoa_r+0xa04>
 800a4ee:	9a08      	ldr	r2, [sp, #32]
 800a4f0:	b982      	cbnz	r2, 800a514 <_dtoa_r+0xa04>
 800a4f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4f6:	d029      	beq.n	800a54c <_dtoa_r+0xa3c>
 800a4f8:	9b02      	ldr	r3, [sp, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dd01      	ble.n	800a502 <_dtoa_r+0x9f2>
 800a4fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a502:	9b07      	ldr	r3, [sp, #28]
 800a504:	1c5d      	adds	r5, r3, #1
 800a506:	f883 8000 	strb.w	r8, [r3]
 800a50a:	e784      	b.n	800a416 <_dtoa_r+0x906>
 800a50c:	4638      	mov	r0, r7
 800a50e:	e7c2      	b.n	800a496 <_dtoa_r+0x986>
 800a510:	2301      	movs	r3, #1
 800a512:	e7e3      	b.n	800a4dc <_dtoa_r+0x9cc>
 800a514:	9a02      	ldr	r2, [sp, #8]
 800a516:	2a00      	cmp	r2, #0
 800a518:	db04      	blt.n	800a524 <_dtoa_r+0xa14>
 800a51a:	d123      	bne.n	800a564 <_dtoa_r+0xa54>
 800a51c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a51e:	bb0a      	cbnz	r2, 800a564 <_dtoa_r+0xa54>
 800a520:	9a08      	ldr	r2, [sp, #32]
 800a522:	b9fa      	cbnz	r2, 800a564 <_dtoa_r+0xa54>
 800a524:	2b00      	cmp	r3, #0
 800a526:	ddec      	ble.n	800a502 <_dtoa_r+0x9f2>
 800a528:	4659      	mov	r1, fp
 800a52a:	2201      	movs	r2, #1
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fa99 	bl	800aa64 <__lshift>
 800a532:	4631      	mov	r1, r6
 800a534:	4683      	mov	fp, r0
 800a536:	f000 fae9 	bl	800ab0c <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	dc03      	bgt.n	800a546 <_dtoa_r+0xa36>
 800a53e:	d1e0      	bne.n	800a502 <_dtoa_r+0x9f2>
 800a540:	f018 0f01 	tst.w	r8, #1
 800a544:	d0dd      	beq.n	800a502 <_dtoa_r+0x9f2>
 800a546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a54a:	d1d8      	bne.n	800a4fe <_dtoa_r+0x9ee>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	9a07      	ldr	r2, [sp, #28]
 800a550:	1c5d      	adds	r5, r3, #1
 800a552:	2339      	movs	r3, #57	; 0x39
 800a554:	7013      	strb	r3, [r2, #0]
 800a556:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a55a:	1e6a      	subs	r2, r5, #1
 800a55c:	2b39      	cmp	r3, #57	; 0x39
 800a55e:	d04d      	beq.n	800a5fc <_dtoa_r+0xaec>
 800a560:	3301      	adds	r3, #1
 800a562:	e052      	b.n	800a60a <_dtoa_r+0xafa>
 800a564:	9a07      	ldr	r2, [sp, #28]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f102 0501 	add.w	r5, r2, #1
 800a56c:	dd06      	ble.n	800a57c <_dtoa_r+0xa6c>
 800a56e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a572:	d0eb      	beq.n	800a54c <_dtoa_r+0xa3c>
 800a574:	f108 0801 	add.w	r8, r8, #1
 800a578:	9b07      	ldr	r3, [sp, #28]
 800a57a:	e7c4      	b.n	800a506 <_dtoa_r+0x9f6>
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	9a04      	ldr	r2, [sp, #16]
 800a580:	1aeb      	subs	r3, r5, r3
 800a582:	4293      	cmp	r3, r2
 800a584:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a588:	d021      	beq.n	800a5ce <_dtoa_r+0xabe>
 800a58a:	4659      	mov	r1, fp
 800a58c:	2300      	movs	r3, #0
 800a58e:	220a      	movs	r2, #10
 800a590:	4620      	mov	r0, r4
 800a592:	f000 f8f2 	bl	800a77a <__multadd>
 800a596:	45b9      	cmp	r9, r7
 800a598:	4683      	mov	fp, r0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	f04f 020a 	mov.w	r2, #10
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	d105      	bne.n	800a5b4 <_dtoa_r+0xaa4>
 800a5a8:	f000 f8e7 	bl	800a77a <__multadd>
 800a5ac:	4681      	mov	r9, r0
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	9507      	str	r5, [sp, #28]
 800a5b2:	e778      	b.n	800a4a6 <_dtoa_r+0x996>
 800a5b4:	f000 f8e1 	bl	800a77a <__multadd>
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	2300      	movs	r3, #0
 800a5be:	220a      	movs	r2, #10
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 f8da 	bl	800a77a <__multadd>
 800a5c6:	4607      	mov	r7, r0
 800a5c8:	e7f2      	b.n	800a5b0 <_dtoa_r+0xaa0>
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	4659      	mov	r1, fp
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fa46 	bl	800aa64 <__lshift>
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4683      	mov	fp, r0
 800a5dc:	f000 fa96 	bl	800ab0c <__mcmp>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dcb8      	bgt.n	800a556 <_dtoa_r+0xa46>
 800a5e4:	d102      	bne.n	800a5ec <_dtoa_r+0xadc>
 800a5e6:	f018 0f01 	tst.w	r8, #1
 800a5ea:	d1b4      	bne.n	800a556 <_dtoa_r+0xa46>
 800a5ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5f0:	1e6a      	subs	r2, r5, #1
 800a5f2:	2b30      	cmp	r3, #48	; 0x30
 800a5f4:	f47f af0f 	bne.w	800a416 <_dtoa_r+0x906>
 800a5f8:	4615      	mov	r5, r2
 800a5fa:	e7f7      	b.n	800a5ec <_dtoa_r+0xadc>
 800a5fc:	9b06      	ldr	r3, [sp, #24]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d105      	bne.n	800a60e <_dtoa_r+0xafe>
 800a602:	2331      	movs	r3, #49	; 0x31
 800a604:	9a06      	ldr	r2, [sp, #24]
 800a606:	f10a 0a01 	add.w	sl, sl, #1
 800a60a:	7013      	strb	r3, [r2, #0]
 800a60c:	e703      	b.n	800a416 <_dtoa_r+0x906>
 800a60e:	4615      	mov	r5, r2
 800a610:	e7a1      	b.n	800a556 <_dtoa_r+0xa46>
 800a612:	4b17      	ldr	r3, [pc, #92]	; (800a670 <_dtoa_r+0xb60>)
 800a614:	f7ff bae1 	b.w	8009bda <_dtoa_r+0xca>
 800a618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f47f aabb 	bne.w	8009b96 <_dtoa_r+0x86>
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <_dtoa_r+0xb64>)
 800a622:	f7ff bada 	b.w	8009bda <_dtoa_r+0xca>
 800a626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a628:	2b01      	cmp	r3, #1
 800a62a:	f77f ae3f 	ble.w	800a2ac <_dtoa_r+0x79c>
 800a62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	e653      	b.n	800a2dc <_dtoa_r+0x7cc>
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	dc03      	bgt.n	800a642 <_dtoa_r+0xb32>
 800a63a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	f73f aed5 	bgt.w	800a3ec <_dtoa_r+0x8dc>
 800a642:	9d06      	ldr	r5, [sp, #24]
 800a644:	4631      	mov	r1, r6
 800a646:	4658      	mov	r0, fp
 800a648:	f7ff f9d4 	bl	80099f4 <quorem>
 800a64c:	9b06      	ldr	r3, [sp, #24]
 800a64e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a652:	f805 8b01 	strb.w	r8, [r5], #1
 800a656:	9a04      	ldr	r2, [sp, #16]
 800a658:	1aeb      	subs	r3, r5, r3
 800a65a:	429a      	cmp	r2, r3
 800a65c:	ddb5      	ble.n	800a5ca <_dtoa_r+0xaba>
 800a65e:	4659      	mov	r1, fp
 800a660:	2300      	movs	r3, #0
 800a662:	220a      	movs	r2, #10
 800a664:	4620      	mov	r0, r4
 800a666:	f000 f888 	bl	800a77a <__multadd>
 800a66a:	4683      	mov	fp, r0
 800a66c:	e7ea      	b.n	800a644 <_dtoa_r+0xb34>
 800a66e:	bf00      	nop
 800a670:	0800ca74 	.word	0x0800ca74
 800a674:	0800ca98 	.word	0x0800ca98

0800a678 <_localeconv_r>:
 800a678:	4b04      	ldr	r3, [pc, #16]	; (800a68c <_localeconv_r+0x14>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6a18      	ldr	r0, [r3, #32]
 800a67e:	4b04      	ldr	r3, [pc, #16]	; (800a690 <_localeconv_r+0x18>)
 800a680:	2800      	cmp	r0, #0
 800a682:	bf08      	it	eq
 800a684:	4618      	moveq	r0, r3
 800a686:	30f0      	adds	r0, #240	; 0xf0
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000014 	.word	0x20000014
 800a690:	20000078 	.word	0x20000078

0800a694 <malloc>:
 800a694:	4b02      	ldr	r3, [pc, #8]	; (800a6a0 <malloc+0xc>)
 800a696:	4601      	mov	r1, r0
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	f000 bb59 	b.w	800ad50 <_malloc_r>
 800a69e:	bf00      	nop
 800a6a0:	20000014 	.word	0x20000014

0800a6a4 <__ascii_mbtowc>:
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	b901      	cbnz	r1, 800a6aa <__ascii_mbtowc+0x6>
 800a6a8:	a901      	add	r1, sp, #4
 800a6aa:	b142      	cbz	r2, 800a6be <__ascii_mbtowc+0x1a>
 800a6ac:	b14b      	cbz	r3, 800a6c2 <__ascii_mbtowc+0x1e>
 800a6ae:	7813      	ldrb	r3, [r2, #0]
 800a6b0:	600b      	str	r3, [r1, #0]
 800a6b2:	7812      	ldrb	r2, [r2, #0]
 800a6b4:	1c10      	adds	r0, r2, #0
 800a6b6:	bf18      	it	ne
 800a6b8:	2001      	movne	r0, #1
 800a6ba:	b002      	add	sp, #8
 800a6bc:	4770      	bx	lr
 800a6be:	4610      	mov	r0, r2
 800a6c0:	e7fb      	b.n	800a6ba <__ascii_mbtowc+0x16>
 800a6c2:	f06f 0001 	mvn.w	r0, #1
 800a6c6:	e7f8      	b.n	800a6ba <__ascii_mbtowc+0x16>

0800a6c8 <memchr>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	b2c9      	uxtb	r1, r1
 800a6cc:	4402      	add	r2, r0
 800a6ce:	4290      	cmp	r0, r2
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	d101      	bne.n	800a6d8 <memchr+0x10>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e003      	b.n	800a6e0 <memchr+0x18>
 800a6d8:	781c      	ldrb	r4, [r3, #0]
 800a6da:	3001      	adds	r0, #1
 800a6dc:	428c      	cmp	r4, r1
 800a6de:	d1f6      	bne.n	800a6ce <memchr+0x6>
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	bd10      	pop	{r4, pc}

0800a6e4 <_Balloc>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460e      	mov	r6, r1
 800a6ec:	b93d      	cbnz	r5, 800a6fe <_Balloc+0x1a>
 800a6ee:	2010      	movs	r0, #16
 800a6f0:	f7ff ffd0 	bl	800a694 <malloc>
 800a6f4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6fa:	6005      	str	r5, [r0, #0]
 800a6fc:	60c5      	str	r5, [r0, #12]
 800a6fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a700:	68eb      	ldr	r3, [r5, #12]
 800a702:	b183      	cbz	r3, 800a726 <_Balloc+0x42>
 800a704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a70c:	b9b8      	cbnz	r0, 800a73e <_Balloc+0x5a>
 800a70e:	2101      	movs	r1, #1
 800a710:	fa01 f506 	lsl.w	r5, r1, r6
 800a714:	1d6a      	adds	r2, r5, #5
 800a716:	0092      	lsls	r2, r2, #2
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fabe 	bl	800ac9a <_calloc_r>
 800a71e:	b160      	cbz	r0, 800a73a <_Balloc+0x56>
 800a720:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a724:	e00e      	b.n	800a744 <_Balloc+0x60>
 800a726:	2221      	movs	r2, #33	; 0x21
 800a728:	2104      	movs	r1, #4
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fab5 	bl	800ac9a <_calloc_r>
 800a730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a732:	60e8      	str	r0, [r5, #12]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e4      	bne.n	800a704 <_Balloc+0x20>
 800a73a:	2000      	movs	r0, #0
 800a73c:	bd70      	pop	{r4, r5, r6, pc}
 800a73e:	6802      	ldr	r2, [r0, #0]
 800a740:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a744:	2300      	movs	r3, #0
 800a746:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a74a:	e7f7      	b.n	800a73c <_Balloc+0x58>

0800a74c <_Bfree>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a750:	4606      	mov	r6, r0
 800a752:	460d      	mov	r5, r1
 800a754:	b93c      	cbnz	r4, 800a766 <_Bfree+0x1a>
 800a756:	2010      	movs	r0, #16
 800a758:	f7ff ff9c 	bl	800a694 <malloc>
 800a75c:	6270      	str	r0, [r6, #36]	; 0x24
 800a75e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a762:	6004      	str	r4, [r0, #0]
 800a764:	60c4      	str	r4, [r0, #12]
 800a766:	b13d      	cbz	r5, 800a778 <_Bfree+0x2c>
 800a768:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a76a:	686a      	ldr	r2, [r5, #4]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a772:	6029      	str	r1, [r5, #0]
 800a774:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a778:	bd70      	pop	{r4, r5, r6, pc}

0800a77a <__multadd>:
 800a77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a77e:	461f      	mov	r7, r3
 800a780:	4606      	mov	r6, r0
 800a782:	460c      	mov	r4, r1
 800a784:	2300      	movs	r3, #0
 800a786:	690d      	ldr	r5, [r1, #16]
 800a788:	f101 0c14 	add.w	ip, r1, #20
 800a78c:	f8dc 0000 	ldr.w	r0, [ip]
 800a790:	3301      	adds	r3, #1
 800a792:	b281      	uxth	r1, r0
 800a794:	fb02 7101 	mla	r1, r2, r1, r7
 800a798:	0c00      	lsrs	r0, r0, #16
 800a79a:	0c0f      	lsrs	r7, r1, #16
 800a79c:	fb02 7000 	mla	r0, r2, r0, r7
 800a7a0:	b289      	uxth	r1, r1
 800a7a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a7a6:	429d      	cmp	r5, r3
 800a7a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a7ac:	f84c 1b04 	str.w	r1, [ip], #4
 800a7b0:	dcec      	bgt.n	800a78c <__multadd+0x12>
 800a7b2:	b1d7      	cbz	r7, 800a7ea <__multadd+0x70>
 800a7b4:	68a3      	ldr	r3, [r4, #8]
 800a7b6:	42ab      	cmp	r3, r5
 800a7b8:	dc12      	bgt.n	800a7e0 <__multadd+0x66>
 800a7ba:	6861      	ldr	r1, [r4, #4]
 800a7bc:	4630      	mov	r0, r6
 800a7be:	3101      	adds	r1, #1
 800a7c0:	f7ff ff90 	bl	800a6e4 <_Balloc>
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	6922      	ldr	r2, [r4, #16]
 800a7c8:	f104 010c 	add.w	r1, r4, #12
 800a7cc:	3202      	adds	r2, #2
 800a7ce:	0092      	lsls	r2, r2, #2
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	f7fe fc8d 	bl	80090f0 <memcpy>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff ffb7 	bl	800a74c <_Bfree>
 800a7de:	4644      	mov	r4, r8
 800a7e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	615f      	str	r7, [r3, #20]
 800a7e8:	6125      	str	r5, [r4, #16]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7f0 <__hi0bits>:
 800a7f0:	0c02      	lsrs	r2, r0, #16
 800a7f2:	0412      	lsls	r2, r2, #16
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	b9b2      	cbnz	r2, 800a826 <__hi0bits+0x36>
 800a7f8:	0403      	lsls	r3, r0, #16
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a800:	bf04      	itt	eq
 800a802:	021b      	lsleq	r3, r3, #8
 800a804:	3008      	addeq	r0, #8
 800a806:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a80a:	bf04      	itt	eq
 800a80c:	011b      	lsleq	r3, r3, #4
 800a80e:	3004      	addeq	r0, #4
 800a810:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a814:	bf04      	itt	eq
 800a816:	009b      	lsleq	r3, r3, #2
 800a818:	3002      	addeq	r0, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	db06      	blt.n	800a82c <__hi0bits+0x3c>
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	d503      	bpl.n	800a82a <__hi0bits+0x3a>
 800a822:	3001      	adds	r0, #1
 800a824:	4770      	bx	lr
 800a826:	2000      	movs	r0, #0
 800a828:	e7e8      	b.n	800a7fc <__hi0bits+0xc>
 800a82a:	2020      	movs	r0, #32
 800a82c:	4770      	bx	lr

0800a82e <__lo0bits>:
 800a82e:	6803      	ldr	r3, [r0, #0]
 800a830:	4601      	mov	r1, r0
 800a832:	f013 0207 	ands.w	r2, r3, #7
 800a836:	d00b      	beq.n	800a850 <__lo0bits+0x22>
 800a838:	07da      	lsls	r2, r3, #31
 800a83a:	d423      	bmi.n	800a884 <__lo0bits+0x56>
 800a83c:	0798      	lsls	r0, r3, #30
 800a83e:	bf49      	itett	mi
 800a840:	085b      	lsrmi	r3, r3, #1
 800a842:	089b      	lsrpl	r3, r3, #2
 800a844:	2001      	movmi	r0, #1
 800a846:	600b      	strmi	r3, [r1, #0]
 800a848:	bf5c      	itt	pl
 800a84a:	600b      	strpl	r3, [r1, #0]
 800a84c:	2002      	movpl	r0, #2
 800a84e:	4770      	bx	lr
 800a850:	b298      	uxth	r0, r3
 800a852:	b9a8      	cbnz	r0, 800a880 <__lo0bits+0x52>
 800a854:	2010      	movs	r0, #16
 800a856:	0c1b      	lsrs	r3, r3, #16
 800a858:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a85c:	bf04      	itt	eq
 800a85e:	0a1b      	lsreq	r3, r3, #8
 800a860:	3008      	addeq	r0, #8
 800a862:	071a      	lsls	r2, r3, #28
 800a864:	bf04      	itt	eq
 800a866:	091b      	lsreq	r3, r3, #4
 800a868:	3004      	addeq	r0, #4
 800a86a:	079a      	lsls	r2, r3, #30
 800a86c:	bf04      	itt	eq
 800a86e:	089b      	lsreq	r3, r3, #2
 800a870:	3002      	addeq	r0, #2
 800a872:	07da      	lsls	r2, r3, #31
 800a874:	d402      	bmi.n	800a87c <__lo0bits+0x4e>
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	d006      	beq.n	800a888 <__lo0bits+0x5a>
 800a87a:	3001      	adds	r0, #1
 800a87c:	600b      	str	r3, [r1, #0]
 800a87e:	4770      	bx	lr
 800a880:	4610      	mov	r0, r2
 800a882:	e7e9      	b.n	800a858 <__lo0bits+0x2a>
 800a884:	2000      	movs	r0, #0
 800a886:	4770      	bx	lr
 800a888:	2020      	movs	r0, #32
 800a88a:	4770      	bx	lr

0800a88c <__i2b>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	460c      	mov	r4, r1
 800a890:	2101      	movs	r1, #1
 800a892:	f7ff ff27 	bl	800a6e4 <_Balloc>
 800a896:	2201      	movs	r2, #1
 800a898:	6144      	str	r4, [r0, #20]
 800a89a:	6102      	str	r2, [r0, #16]
 800a89c:	bd10      	pop	{r4, pc}

0800a89e <__multiply>:
 800a89e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	690a      	ldr	r2, [r1, #16]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	4688      	mov	r8, r1
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	bfbe      	ittt	lt
 800a8ae:	460b      	movlt	r3, r1
 800a8b0:	46a0      	movlt	r8, r4
 800a8b2:	461c      	movlt	r4, r3
 800a8b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a8bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8c4:	eb07 0609 	add.w	r6, r7, r9
 800a8c8:	42b3      	cmp	r3, r6
 800a8ca:	bfb8      	it	lt
 800a8cc:	3101      	addlt	r1, #1
 800a8ce:	f7ff ff09 	bl	800a6e4 <_Balloc>
 800a8d2:	f100 0514 	add.w	r5, r0, #20
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	2200      	movs	r2, #0
 800a8da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a8de:	4573      	cmp	r3, lr
 800a8e0:	d316      	bcc.n	800a910 <__multiply+0x72>
 800a8e2:	f104 0214 	add.w	r2, r4, #20
 800a8e6:	f108 0114 	add.w	r1, r8, #20
 800a8ea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a8ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	9b00      	ldr	r3, [sp, #0]
 800a8f6:	9201      	str	r2, [sp, #4]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d80c      	bhi.n	800a916 <__multiply+0x78>
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	dd03      	ble.n	800a908 <__multiply+0x6a>
 800a900:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a904:	2b00      	cmp	r3, #0
 800a906:	d05d      	beq.n	800a9c4 <__multiply+0x126>
 800a908:	6106      	str	r6, [r0, #16]
 800a90a:	b003      	add	sp, #12
 800a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a910:	f843 2b04 	str.w	r2, [r3], #4
 800a914:	e7e3      	b.n	800a8de <__multiply+0x40>
 800a916:	f8b2 b000 	ldrh.w	fp, [r2]
 800a91a:	f1bb 0f00 	cmp.w	fp, #0
 800a91e:	d023      	beq.n	800a968 <__multiply+0xca>
 800a920:	4689      	mov	r9, r1
 800a922:	46ac      	mov	ip, r5
 800a924:	f04f 0800 	mov.w	r8, #0
 800a928:	f859 4b04 	ldr.w	r4, [r9], #4
 800a92c:	f8dc a000 	ldr.w	sl, [ip]
 800a930:	b2a3      	uxth	r3, r4
 800a932:	fa1f fa8a 	uxth.w	sl, sl
 800a936:	fb0b a303 	mla	r3, fp, r3, sl
 800a93a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a93e:	f8dc 4000 	ldr.w	r4, [ip]
 800a942:	4443      	add	r3, r8
 800a944:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a948:	fb0b 840a 	mla	r4, fp, sl, r8
 800a94c:	46e2      	mov	sl, ip
 800a94e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a952:	b29b      	uxth	r3, r3
 800a954:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a958:	454f      	cmp	r7, r9
 800a95a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a95e:	f84a 3b04 	str.w	r3, [sl], #4
 800a962:	d82b      	bhi.n	800a9bc <__multiply+0x11e>
 800a964:	f8cc 8004 	str.w	r8, [ip, #4]
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	3204      	adds	r2, #4
 800a96c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a970:	f1ba 0f00 	cmp.w	sl, #0
 800a974:	d020      	beq.n	800a9b8 <__multiply+0x11a>
 800a976:	4689      	mov	r9, r1
 800a978:	46a8      	mov	r8, r5
 800a97a:	f04f 0b00 	mov.w	fp, #0
 800a97e:	682b      	ldr	r3, [r5, #0]
 800a980:	f8b9 c000 	ldrh.w	ip, [r9]
 800a984:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	fb0a 440c 	mla	r4, sl, ip, r4
 800a98e:	46c4      	mov	ip, r8
 800a990:	445c      	add	r4, fp
 800a992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a996:	f84c 3b04 	str.w	r3, [ip], #4
 800a99a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a99e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a9a2:	0c1b      	lsrs	r3, r3, #16
 800a9a4:	fb0a b303 	mla	r3, sl, r3, fp
 800a9a8:	454f      	cmp	r7, r9
 800a9aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a9b2:	d805      	bhi.n	800a9c0 <__multiply+0x122>
 800a9b4:	f8c8 3004 	str.w	r3, [r8, #4]
 800a9b8:	3504      	adds	r5, #4
 800a9ba:	e79b      	b.n	800a8f4 <__multiply+0x56>
 800a9bc:	46d4      	mov	ip, sl
 800a9be:	e7b3      	b.n	800a928 <__multiply+0x8a>
 800a9c0:	46e0      	mov	r8, ip
 800a9c2:	e7dd      	b.n	800a980 <__multiply+0xe2>
 800a9c4:	3e01      	subs	r6, #1
 800a9c6:	e799      	b.n	800a8fc <__multiply+0x5e>

0800a9c8 <__pow5mult>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	f012 0203 	ands.w	r2, r2, #3
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	d007      	beq.n	800a9e8 <__pow5mult+0x20>
 800a9d8:	4c21      	ldr	r4, [pc, #132]	; (800aa60 <__pow5mult+0x98>)
 800a9da:	3a01      	subs	r2, #1
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9e2:	f7ff feca 	bl	800a77a <__multadd>
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	10ad      	asrs	r5, r5, #2
 800a9ea:	d035      	beq.n	800aa58 <__pow5mult+0x90>
 800a9ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ee:	b93c      	cbnz	r4, 800aa00 <__pow5mult+0x38>
 800a9f0:	2010      	movs	r0, #16
 800a9f2:	f7ff fe4f 	bl	800a694 <malloc>
 800a9f6:	6270      	str	r0, [r6, #36]	; 0x24
 800a9f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9fc:	6004      	str	r4, [r0, #0]
 800a9fe:	60c4      	str	r4, [r0, #12]
 800aa00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa08:	b94c      	cbnz	r4, 800aa1e <__pow5mult+0x56>
 800aa0a:	f240 2171 	movw	r1, #625	; 0x271
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ff3c 	bl	800a88c <__i2b>
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	07eb      	lsls	r3, r5, #31
 800aa24:	d50a      	bpl.n	800aa3c <__pow5mult+0x74>
 800aa26:	4639      	mov	r1, r7
 800aa28:	4622      	mov	r2, r4
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff ff37 	bl	800a89e <__multiply>
 800aa30:	4681      	mov	r9, r0
 800aa32:	4639      	mov	r1, r7
 800aa34:	4630      	mov	r0, r6
 800aa36:	f7ff fe89 	bl	800a74c <_Bfree>
 800aa3a:	464f      	mov	r7, r9
 800aa3c:	106d      	asrs	r5, r5, #1
 800aa3e:	d00b      	beq.n	800aa58 <__pow5mult+0x90>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	b938      	cbnz	r0, 800aa54 <__pow5mult+0x8c>
 800aa44:	4622      	mov	r2, r4
 800aa46:	4621      	mov	r1, r4
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7ff ff28 	bl	800a89e <__multiply>
 800aa4e:	6020      	str	r0, [r4, #0]
 800aa50:	f8c0 8000 	str.w	r8, [r0]
 800aa54:	4604      	mov	r4, r0
 800aa56:	e7e4      	b.n	800aa22 <__pow5mult+0x5a>
 800aa58:	4638      	mov	r0, r7
 800aa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800cba0 	.word	0x0800cba0

0800aa64 <__lshift>:
 800aa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa68:	460c      	mov	r4, r1
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa74:	eb0a 0903 	add.w	r9, sl, r3
 800aa78:	6849      	ldr	r1, [r1, #4]
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	f109 0501 	add.w	r5, r9, #1
 800aa80:	42ab      	cmp	r3, r5
 800aa82:	db32      	blt.n	800aaea <__lshift+0x86>
 800aa84:	4638      	mov	r0, r7
 800aa86:	f7ff fe2d 	bl	800a6e4 <_Balloc>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4680      	mov	r8, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f100 0114 	add.w	r1, r0, #20
 800aa94:	4553      	cmp	r3, sl
 800aa96:	db2b      	blt.n	800aaf0 <__lshift+0x8c>
 800aa98:	6920      	ldr	r0, [r4, #16]
 800aa9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa9e:	f104 0314 	add.w	r3, r4, #20
 800aaa2:	f016 021f 	ands.w	r2, r6, #31
 800aaa6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaae:	d025      	beq.n	800aafc <__lshift+0x98>
 800aab0:	2000      	movs	r0, #0
 800aab2:	f1c2 0e20 	rsb	lr, r2, #32
 800aab6:	468a      	mov	sl, r1
 800aab8:	681e      	ldr	r6, [r3, #0]
 800aaba:	4096      	lsls	r6, r2
 800aabc:	4330      	orrs	r0, r6
 800aabe:	f84a 0b04 	str.w	r0, [sl], #4
 800aac2:	f853 0b04 	ldr.w	r0, [r3], #4
 800aac6:	459c      	cmp	ip, r3
 800aac8:	fa20 f00e 	lsr.w	r0, r0, lr
 800aacc:	d814      	bhi.n	800aaf8 <__lshift+0x94>
 800aace:	6048      	str	r0, [r1, #4]
 800aad0:	b108      	cbz	r0, 800aad6 <__lshift+0x72>
 800aad2:	f109 0502 	add.w	r5, r9, #2
 800aad6:	3d01      	subs	r5, #1
 800aad8:	4638      	mov	r0, r7
 800aada:	f8c8 5010 	str.w	r5, [r8, #16]
 800aade:	4621      	mov	r1, r4
 800aae0:	f7ff fe34 	bl	800a74c <_Bfree>
 800aae4:	4640      	mov	r0, r8
 800aae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaea:	3101      	adds	r1, #1
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	e7c7      	b.n	800aa80 <__lshift+0x1c>
 800aaf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	e7cd      	b.n	800aa94 <__lshift+0x30>
 800aaf8:	4651      	mov	r1, sl
 800aafa:	e7dc      	b.n	800aab6 <__lshift+0x52>
 800aafc:	3904      	subs	r1, #4
 800aafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab02:	459c      	cmp	ip, r3
 800ab04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab08:	d8f9      	bhi.n	800aafe <__lshift+0x9a>
 800ab0a:	e7e4      	b.n	800aad6 <__lshift+0x72>

0800ab0c <__mcmp>:
 800ab0c:	6903      	ldr	r3, [r0, #16]
 800ab0e:	690a      	ldr	r2, [r1, #16]
 800ab10:	b530      	push	{r4, r5, lr}
 800ab12:	1a9b      	subs	r3, r3, r2
 800ab14:	d10c      	bne.n	800ab30 <__mcmp+0x24>
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	3014      	adds	r0, #20
 800ab1a:	3114      	adds	r1, #20
 800ab1c:	1884      	adds	r4, r0, r2
 800ab1e:	4411      	add	r1, r2
 800ab20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab28:	4295      	cmp	r5, r2
 800ab2a:	d003      	beq.n	800ab34 <__mcmp+0x28>
 800ab2c:	d305      	bcc.n	800ab3a <__mcmp+0x2e>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4618      	mov	r0, r3
 800ab32:	bd30      	pop	{r4, r5, pc}
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d3f3      	bcc.n	800ab20 <__mcmp+0x14>
 800ab38:	e7fa      	b.n	800ab30 <__mcmp+0x24>
 800ab3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3e:	e7f7      	b.n	800ab30 <__mcmp+0x24>

0800ab40 <__mdiff>:
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	460d      	mov	r5, r1
 800ab46:	4607      	mov	r7, r0
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	f7ff ffdd 	bl	800ab0c <__mcmp>
 800ab52:	1e06      	subs	r6, r0, #0
 800ab54:	d108      	bne.n	800ab68 <__mdiff+0x28>
 800ab56:	4631      	mov	r1, r6
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7ff fdc3 	bl	800a6e4 <_Balloc>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab68:	bfa4      	itt	ge
 800ab6a:	4623      	movge	r3, r4
 800ab6c:	462c      	movge	r4, r5
 800ab6e:	4638      	mov	r0, r7
 800ab70:	6861      	ldr	r1, [r4, #4]
 800ab72:	bfa6      	itte	ge
 800ab74:	461d      	movge	r5, r3
 800ab76:	2600      	movge	r6, #0
 800ab78:	2601      	movlt	r6, #1
 800ab7a:	f7ff fdb3 	bl	800a6e4 <_Balloc>
 800ab7e:	f04f 0e00 	mov.w	lr, #0
 800ab82:	60c6      	str	r6, [r0, #12]
 800ab84:	692b      	ldr	r3, [r5, #16]
 800ab86:	6926      	ldr	r6, [r4, #16]
 800ab88:	f104 0214 	add.w	r2, r4, #20
 800ab8c:	f105 0914 	add.w	r9, r5, #20
 800ab90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ab94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ab98:	f100 0114 	add.w	r1, r0, #20
 800ab9c:	f852 ab04 	ldr.w	sl, [r2], #4
 800aba0:	f859 5b04 	ldr.w	r5, [r9], #4
 800aba4:	fa1f f38a 	uxth.w	r3, sl
 800aba8:	4473      	add	r3, lr
 800abaa:	b2ac      	uxth	r4, r5
 800abac:	1b1b      	subs	r3, r3, r4
 800abae:	0c2c      	lsrs	r4, r5, #16
 800abb0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800abb4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800abb8:	b29b      	uxth	r3, r3
 800abba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800abbe:	45c8      	cmp	r8, r9
 800abc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800abc4:	4694      	mov	ip, r2
 800abc6:	f841 4b04 	str.w	r4, [r1], #4
 800abca:	d8e7      	bhi.n	800ab9c <__mdiff+0x5c>
 800abcc:	45bc      	cmp	ip, r7
 800abce:	d304      	bcc.n	800abda <__mdiff+0x9a>
 800abd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800abd4:	b183      	cbz	r3, 800abf8 <__mdiff+0xb8>
 800abd6:	6106      	str	r6, [r0, #16]
 800abd8:	e7c4      	b.n	800ab64 <__mdiff+0x24>
 800abda:	f85c 4b04 	ldr.w	r4, [ip], #4
 800abde:	b2a2      	uxth	r2, r4
 800abe0:	4472      	add	r2, lr
 800abe2:	1413      	asrs	r3, r2, #16
 800abe4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800abe8:	b292      	uxth	r2, r2
 800abea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800abf2:	f841 2b04 	str.w	r2, [r1], #4
 800abf6:	e7e9      	b.n	800abcc <__mdiff+0x8c>
 800abf8:	3e01      	subs	r6, #1
 800abfa:	e7e9      	b.n	800abd0 <__mdiff+0x90>

0800abfc <__d2b>:
 800abfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ac00:	461c      	mov	r4, r3
 800ac02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ac06:	2101      	movs	r1, #1
 800ac08:	4690      	mov	r8, r2
 800ac0a:	f7ff fd6b 	bl	800a6e4 <_Balloc>
 800ac0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ac12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ac16:	4607      	mov	r7, r0
 800ac18:	bb34      	cbnz	r4, 800ac68 <__d2b+0x6c>
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	f1b8 0200 	subs.w	r2, r8, #0
 800ac20:	d027      	beq.n	800ac72 <__d2b+0x76>
 800ac22:	a802      	add	r0, sp, #8
 800ac24:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ac28:	f7ff fe01 	bl	800a82e <__lo0bits>
 800ac2c:	9900      	ldr	r1, [sp, #0]
 800ac2e:	b1f0      	cbz	r0, 800ac6e <__d2b+0x72>
 800ac30:	9a01      	ldr	r2, [sp, #4]
 800ac32:	f1c0 0320 	rsb	r3, r0, #32
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	430b      	orrs	r3, r1
 800ac3c:	40c2      	lsrs	r2, r0
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	9201      	str	r2, [sp, #4]
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bf14      	ite	ne
 800ac48:	2102      	movne	r1, #2
 800ac4a:	2101      	moveq	r1, #1
 800ac4c:	61bb      	str	r3, [r7, #24]
 800ac4e:	6139      	str	r1, [r7, #16]
 800ac50:	b1c4      	cbz	r4, 800ac84 <__d2b+0x88>
 800ac52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac56:	4404      	add	r4, r0
 800ac58:	6034      	str	r4, [r6, #0]
 800ac5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac5e:	6028      	str	r0, [r5, #0]
 800ac60:	4638      	mov	r0, r7
 800ac62:	b002      	add	sp, #8
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ac6c:	e7d5      	b.n	800ac1a <__d2b+0x1e>
 800ac6e:	6179      	str	r1, [r7, #20]
 800ac70:	e7e7      	b.n	800ac42 <__d2b+0x46>
 800ac72:	a801      	add	r0, sp, #4
 800ac74:	f7ff fddb 	bl	800a82e <__lo0bits>
 800ac78:	2101      	movs	r1, #1
 800ac7a:	9b01      	ldr	r3, [sp, #4]
 800ac7c:	6139      	str	r1, [r7, #16]
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	3020      	adds	r0, #32
 800ac82:	e7e5      	b.n	800ac50 <__d2b+0x54>
 800ac84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ac8c:	6030      	str	r0, [r6, #0]
 800ac8e:	6918      	ldr	r0, [r3, #16]
 800ac90:	f7ff fdae 	bl	800a7f0 <__hi0bits>
 800ac94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac98:	e7e1      	b.n	800ac5e <__d2b+0x62>

0800ac9a <_calloc_r>:
 800ac9a:	b538      	push	{r3, r4, r5, lr}
 800ac9c:	fb02 f401 	mul.w	r4, r2, r1
 800aca0:	4621      	mov	r1, r4
 800aca2:	f000 f855 	bl	800ad50 <_malloc_r>
 800aca6:	4605      	mov	r5, r0
 800aca8:	b118      	cbz	r0, 800acb2 <_calloc_r+0x18>
 800acaa:	4622      	mov	r2, r4
 800acac:	2100      	movs	r1, #0
 800acae:	f7fe fa2a 	bl	8009106 <memset>
 800acb2:	4628      	mov	r0, r5
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800acb8 <_free_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4605      	mov	r5, r0
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d043      	beq.n	800ad48 <_free_r+0x90>
 800acc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc4:	1f0c      	subs	r4, r1, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfb8      	it	lt
 800acca:	18e4      	addlt	r4, r4, r3
 800accc:	f000 fa22 	bl	800b114 <__malloc_lock>
 800acd0:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <_free_r+0x94>)
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	4610      	mov	r0, r2
 800acd6:	b933      	cbnz	r3, 800ace6 <_free_r+0x2e>
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	6014      	str	r4, [r2, #0]
 800acdc:	4628      	mov	r0, r5
 800acde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ace2:	f000 ba18 	b.w	800b116 <__malloc_unlock>
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	d90b      	bls.n	800ad02 <_free_r+0x4a>
 800acea:	6821      	ldr	r1, [r4, #0]
 800acec:	1862      	adds	r2, r4, r1
 800acee:	4293      	cmp	r3, r2
 800acf0:	bf01      	itttt	eq
 800acf2:	681a      	ldreq	r2, [r3, #0]
 800acf4:	685b      	ldreq	r3, [r3, #4]
 800acf6:	1852      	addeq	r2, r2, r1
 800acf8:	6022      	streq	r2, [r4, #0]
 800acfa:	6063      	str	r3, [r4, #4]
 800acfc:	6004      	str	r4, [r0, #0]
 800acfe:	e7ed      	b.n	800acdc <_free_r+0x24>
 800ad00:	4613      	mov	r3, r2
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	b10a      	cbz	r2, 800ad0a <_free_r+0x52>
 800ad06:	42a2      	cmp	r2, r4
 800ad08:	d9fa      	bls.n	800ad00 <_free_r+0x48>
 800ad0a:	6819      	ldr	r1, [r3, #0]
 800ad0c:	1858      	adds	r0, r3, r1
 800ad0e:	42a0      	cmp	r0, r4
 800ad10:	d10b      	bne.n	800ad2a <_free_r+0x72>
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	4401      	add	r1, r0
 800ad16:	1858      	adds	r0, r3, r1
 800ad18:	4282      	cmp	r2, r0
 800ad1a:	6019      	str	r1, [r3, #0]
 800ad1c:	d1de      	bne.n	800acdc <_free_r+0x24>
 800ad1e:	6810      	ldr	r0, [r2, #0]
 800ad20:	6852      	ldr	r2, [r2, #4]
 800ad22:	4401      	add	r1, r0
 800ad24:	6019      	str	r1, [r3, #0]
 800ad26:	605a      	str	r2, [r3, #4]
 800ad28:	e7d8      	b.n	800acdc <_free_r+0x24>
 800ad2a:	d902      	bls.n	800ad32 <_free_r+0x7a>
 800ad2c:	230c      	movs	r3, #12
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	e7d4      	b.n	800acdc <_free_r+0x24>
 800ad32:	6820      	ldr	r0, [r4, #0]
 800ad34:	1821      	adds	r1, r4, r0
 800ad36:	428a      	cmp	r2, r1
 800ad38:	bf01      	itttt	eq
 800ad3a:	6811      	ldreq	r1, [r2, #0]
 800ad3c:	6852      	ldreq	r2, [r2, #4]
 800ad3e:	1809      	addeq	r1, r1, r0
 800ad40:	6021      	streq	r1, [r4, #0]
 800ad42:	6062      	str	r2, [r4, #4]
 800ad44:	605c      	str	r4, [r3, #4]
 800ad46:	e7c9      	b.n	800acdc <_free_r+0x24>
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20003e30 	.word	0x20003e30

0800ad50 <_malloc_r>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	1ccd      	adds	r5, r1, #3
 800ad54:	f025 0503 	bic.w	r5, r5, #3
 800ad58:	3508      	adds	r5, #8
 800ad5a:	2d0c      	cmp	r5, #12
 800ad5c:	bf38      	it	cc
 800ad5e:	250c      	movcc	r5, #12
 800ad60:	2d00      	cmp	r5, #0
 800ad62:	4606      	mov	r6, r0
 800ad64:	db01      	blt.n	800ad6a <_malloc_r+0x1a>
 800ad66:	42a9      	cmp	r1, r5
 800ad68:	d903      	bls.n	800ad72 <_malloc_r+0x22>
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	6033      	str	r3, [r6, #0]
 800ad6e:	2000      	movs	r0, #0
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
 800ad72:	f000 f9cf 	bl	800b114 <__malloc_lock>
 800ad76:	4a21      	ldr	r2, [pc, #132]	; (800adfc <_malloc_r+0xac>)
 800ad78:	6814      	ldr	r4, [r2, #0]
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	b991      	cbnz	r1, 800ada4 <_malloc_r+0x54>
 800ad7e:	4c20      	ldr	r4, [pc, #128]	; (800ae00 <_malloc_r+0xb0>)
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	b91b      	cbnz	r3, 800ad8c <_malloc_r+0x3c>
 800ad84:	4630      	mov	r0, r6
 800ad86:	f000 f98f 	bl	800b0a8 <_sbrk_r>
 800ad8a:	6020      	str	r0, [r4, #0]
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f000 f98a 	bl	800b0a8 <_sbrk_r>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d124      	bne.n	800ade2 <_malloc_r+0x92>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	f000 f9ba 	bl	800b116 <__malloc_unlock>
 800ada2:	e7e4      	b.n	800ad6e <_malloc_r+0x1e>
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	1b5b      	subs	r3, r3, r5
 800ada8:	d418      	bmi.n	800addc <_malloc_r+0x8c>
 800adaa:	2b0b      	cmp	r3, #11
 800adac:	d90f      	bls.n	800adce <_malloc_r+0x7e>
 800adae:	600b      	str	r3, [r1, #0]
 800adb0:	18cc      	adds	r4, r1, r3
 800adb2:	50cd      	str	r5, [r1, r3]
 800adb4:	4630      	mov	r0, r6
 800adb6:	f000 f9ae 	bl	800b116 <__malloc_unlock>
 800adba:	f104 000b 	add.w	r0, r4, #11
 800adbe:	1d23      	adds	r3, r4, #4
 800adc0:	f020 0007 	bic.w	r0, r0, #7
 800adc4:	1ac3      	subs	r3, r0, r3
 800adc6:	d0d3      	beq.n	800ad70 <_malloc_r+0x20>
 800adc8:	425a      	negs	r2, r3
 800adca:	50e2      	str	r2, [r4, r3]
 800adcc:	e7d0      	b.n	800ad70 <_malloc_r+0x20>
 800adce:	684b      	ldr	r3, [r1, #4]
 800add0:	428c      	cmp	r4, r1
 800add2:	bf16      	itet	ne
 800add4:	6063      	strne	r3, [r4, #4]
 800add6:	6013      	streq	r3, [r2, #0]
 800add8:	460c      	movne	r4, r1
 800adda:	e7eb      	b.n	800adb4 <_malloc_r+0x64>
 800addc:	460c      	mov	r4, r1
 800adde:	6849      	ldr	r1, [r1, #4]
 800ade0:	e7cc      	b.n	800ad7c <_malloc_r+0x2c>
 800ade2:	1cc4      	adds	r4, r0, #3
 800ade4:	f024 0403 	bic.w	r4, r4, #3
 800ade8:	42a0      	cmp	r0, r4
 800adea:	d005      	beq.n	800adf8 <_malloc_r+0xa8>
 800adec:	1a21      	subs	r1, r4, r0
 800adee:	4630      	mov	r0, r6
 800adf0:	f000 f95a 	bl	800b0a8 <_sbrk_r>
 800adf4:	3001      	adds	r0, #1
 800adf6:	d0cf      	beq.n	800ad98 <_malloc_r+0x48>
 800adf8:	6025      	str	r5, [r4, #0]
 800adfa:	e7db      	b.n	800adb4 <_malloc_r+0x64>
 800adfc:	20003e30 	.word	0x20003e30
 800ae00:	20003e34 	.word	0x20003e34

0800ae04 <__ssputs_r>:
 800ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	688e      	ldr	r6, [r1, #8]
 800ae0a:	4682      	mov	sl, r0
 800ae0c:	429e      	cmp	r6, r3
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4690      	mov	r8, r2
 800ae12:	4699      	mov	r9, r3
 800ae14:	d837      	bhi.n	800ae86 <__ssputs_r+0x82>
 800ae16:	898a      	ldrh	r2, [r1, #12]
 800ae18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae1c:	d031      	beq.n	800ae82 <__ssputs_r+0x7e>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	6825      	ldr	r5, [r4, #0]
 800ae22:	6909      	ldr	r1, [r1, #16]
 800ae24:	1a6f      	subs	r7, r5, r1
 800ae26:	6965      	ldr	r5, [r4, #20]
 800ae28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae2c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ae30:	f109 0301 	add.w	r3, r9, #1
 800ae34:	443b      	add	r3, r7
 800ae36:	429d      	cmp	r5, r3
 800ae38:	bf38      	it	cc
 800ae3a:	461d      	movcc	r5, r3
 800ae3c:	0553      	lsls	r3, r2, #21
 800ae3e:	d530      	bpl.n	800aea2 <__ssputs_r+0x9e>
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7ff ff85 	bl	800ad50 <_malloc_r>
 800ae46:	4606      	mov	r6, r0
 800ae48:	b950      	cbnz	r0, 800ae60 <__ssputs_r+0x5c>
 800ae4a:	230c      	movs	r3, #12
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	f8ca 3000 	str.w	r3, [sl]
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	463a      	mov	r2, r7
 800ae62:	6921      	ldr	r1, [r4, #16]
 800ae64:	f7fe f944 	bl	80090f0 <memcpy>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	6126      	str	r6, [r4, #16]
 800ae76:	443e      	add	r6, r7
 800ae78:	6026      	str	r6, [r4, #0]
 800ae7a:	464e      	mov	r6, r9
 800ae7c:	6165      	str	r5, [r4, #20]
 800ae7e:	1bed      	subs	r5, r5, r7
 800ae80:	60a5      	str	r5, [r4, #8]
 800ae82:	454e      	cmp	r6, r9
 800ae84:	d900      	bls.n	800ae88 <__ssputs_r+0x84>
 800ae86:	464e      	mov	r6, r9
 800ae88:	4632      	mov	r2, r6
 800ae8a:	4641      	mov	r1, r8
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	f000 f928 	bl	800b0e2 <memmove>
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	2000      	movs	r0, #0
 800ae96:	1b9b      	subs	r3, r3, r6
 800ae98:	60a3      	str	r3, [r4, #8]
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	441e      	add	r6, r3
 800ae9e:	6026      	str	r6, [r4, #0]
 800aea0:	e7dc      	b.n	800ae5c <__ssputs_r+0x58>
 800aea2:	462a      	mov	r2, r5
 800aea4:	f000 f938 	bl	800b118 <_realloc_r>
 800aea8:	4606      	mov	r6, r0
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d1e2      	bne.n	800ae74 <__ssputs_r+0x70>
 800aeae:	6921      	ldr	r1, [r4, #16]
 800aeb0:	4650      	mov	r0, sl
 800aeb2:	f7ff ff01 	bl	800acb8 <_free_r>
 800aeb6:	e7c8      	b.n	800ae4a <__ssputs_r+0x46>

0800aeb8 <_svfiprintf_r>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	461d      	mov	r5, r3
 800aebe:	898b      	ldrh	r3, [r1, #12]
 800aec0:	b09d      	sub	sp, #116	; 0x74
 800aec2:	061f      	lsls	r7, r3, #24
 800aec4:	4680      	mov	r8, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	4616      	mov	r6, r2
 800aeca:	d50f      	bpl.n	800aeec <_svfiprintf_r+0x34>
 800aecc:	690b      	ldr	r3, [r1, #16]
 800aece:	b96b      	cbnz	r3, 800aeec <_svfiprintf_r+0x34>
 800aed0:	2140      	movs	r1, #64	; 0x40
 800aed2:	f7ff ff3d 	bl	800ad50 <_malloc_r>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	6120      	str	r0, [r4, #16]
 800aeda:	b928      	cbnz	r0, 800aee8 <_svfiprintf_r+0x30>
 800aedc:	230c      	movs	r3, #12
 800aede:	f8c8 3000 	str.w	r3, [r8]
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	e0c8      	b.n	800b07a <_svfiprintf_r+0x1c2>
 800aee8:	2340      	movs	r3, #64	; 0x40
 800aeea:	6163      	str	r3, [r4, #20]
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef6:	2330      	movs	r3, #48	; 0x30
 800aef8:	f04f 0b01 	mov.w	fp, #1
 800aefc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af00:	9503      	str	r5, [sp, #12]
 800af02:	4637      	mov	r7, r6
 800af04:	463d      	mov	r5, r7
 800af06:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af0a:	b10b      	cbz	r3, 800af10 <_svfiprintf_r+0x58>
 800af0c:	2b25      	cmp	r3, #37	; 0x25
 800af0e:	d13e      	bne.n	800af8e <_svfiprintf_r+0xd6>
 800af10:	ebb7 0a06 	subs.w	sl, r7, r6
 800af14:	d00b      	beq.n	800af2e <_svfiprintf_r+0x76>
 800af16:	4653      	mov	r3, sl
 800af18:	4632      	mov	r2, r6
 800af1a:	4621      	mov	r1, r4
 800af1c:	4640      	mov	r0, r8
 800af1e:	f7ff ff71 	bl	800ae04 <__ssputs_r>
 800af22:	3001      	adds	r0, #1
 800af24:	f000 80a4 	beq.w	800b070 <_svfiprintf_r+0x1b8>
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	4453      	add	r3, sl
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	783b      	ldrb	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 809d 	beq.w	800b070 <_svfiprintf_r+0x1b8>
 800af36:	2300      	movs	r3, #0
 800af38:	f04f 32ff 	mov.w	r2, #4294967295
 800af3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af48:	931a      	str	r3, [sp, #104]	; 0x68
 800af4a:	462f      	mov	r7, r5
 800af4c:	2205      	movs	r2, #5
 800af4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af52:	4850      	ldr	r0, [pc, #320]	; (800b094 <_svfiprintf_r+0x1dc>)
 800af54:	f7ff fbb8 	bl	800a6c8 <memchr>
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	b9d0      	cbnz	r0, 800af92 <_svfiprintf_r+0xda>
 800af5c:	06d9      	lsls	r1, r3, #27
 800af5e:	bf44      	itt	mi
 800af60:	2220      	movmi	r2, #32
 800af62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af66:	071a      	lsls	r2, r3, #28
 800af68:	bf44      	itt	mi
 800af6a:	222b      	movmi	r2, #43	; 0x2b
 800af6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af70:	782a      	ldrb	r2, [r5, #0]
 800af72:	2a2a      	cmp	r2, #42	; 0x2a
 800af74:	d015      	beq.n	800afa2 <_svfiprintf_r+0xea>
 800af76:	462f      	mov	r7, r5
 800af78:	2000      	movs	r0, #0
 800af7a:	250a      	movs	r5, #10
 800af7c:	9a07      	ldr	r2, [sp, #28]
 800af7e:	4639      	mov	r1, r7
 800af80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af84:	3b30      	subs	r3, #48	; 0x30
 800af86:	2b09      	cmp	r3, #9
 800af88:	d94d      	bls.n	800b026 <_svfiprintf_r+0x16e>
 800af8a:	b1b8      	cbz	r0, 800afbc <_svfiprintf_r+0x104>
 800af8c:	e00f      	b.n	800afae <_svfiprintf_r+0xf6>
 800af8e:	462f      	mov	r7, r5
 800af90:	e7b8      	b.n	800af04 <_svfiprintf_r+0x4c>
 800af92:	4a40      	ldr	r2, [pc, #256]	; (800b094 <_svfiprintf_r+0x1dc>)
 800af94:	463d      	mov	r5, r7
 800af96:	1a80      	subs	r0, r0, r2
 800af98:	fa0b f000 	lsl.w	r0, fp, r0
 800af9c:	4318      	orrs	r0, r3
 800af9e:	9004      	str	r0, [sp, #16]
 800afa0:	e7d3      	b.n	800af4a <_svfiprintf_r+0x92>
 800afa2:	9a03      	ldr	r2, [sp, #12]
 800afa4:	1d11      	adds	r1, r2, #4
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	9103      	str	r1, [sp, #12]
 800afaa:	2a00      	cmp	r2, #0
 800afac:	db01      	blt.n	800afb2 <_svfiprintf_r+0xfa>
 800afae:	9207      	str	r2, [sp, #28]
 800afb0:	e004      	b.n	800afbc <_svfiprintf_r+0x104>
 800afb2:	4252      	negs	r2, r2
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	9207      	str	r2, [sp, #28]
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	783b      	ldrb	r3, [r7, #0]
 800afbe:	2b2e      	cmp	r3, #46	; 0x2e
 800afc0:	d10c      	bne.n	800afdc <_svfiprintf_r+0x124>
 800afc2:	787b      	ldrb	r3, [r7, #1]
 800afc4:	2b2a      	cmp	r3, #42	; 0x2a
 800afc6:	d133      	bne.n	800b030 <_svfiprintf_r+0x178>
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	3702      	adds	r7, #2
 800afcc:	1d1a      	adds	r2, r3, #4
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	9203      	str	r2, [sp, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfb8      	it	lt
 800afd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	4d2e      	ldr	r5, [pc, #184]	; (800b098 <_svfiprintf_r+0x1e0>)
 800afde:	2203      	movs	r2, #3
 800afe0:	7839      	ldrb	r1, [r7, #0]
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7ff fb70 	bl	800a6c8 <memchr>
 800afe8:	b138      	cbz	r0, 800affa <_svfiprintf_r+0x142>
 800afea:	2340      	movs	r3, #64	; 0x40
 800afec:	1b40      	subs	r0, r0, r5
 800afee:	fa03 f000 	lsl.w	r0, r3, r0
 800aff2:	9b04      	ldr	r3, [sp, #16]
 800aff4:	3701      	adds	r7, #1
 800aff6:	4303      	orrs	r3, r0
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	7839      	ldrb	r1, [r7, #0]
 800affc:	2206      	movs	r2, #6
 800affe:	4827      	ldr	r0, [pc, #156]	; (800b09c <_svfiprintf_r+0x1e4>)
 800b000:	1c7e      	adds	r6, r7, #1
 800b002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b006:	f7ff fb5f 	bl	800a6c8 <memchr>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d038      	beq.n	800b080 <_svfiprintf_r+0x1c8>
 800b00e:	4b24      	ldr	r3, [pc, #144]	; (800b0a0 <_svfiprintf_r+0x1e8>)
 800b010:	bb13      	cbnz	r3, 800b058 <_svfiprintf_r+0x1a0>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	3307      	adds	r3, #7
 800b016:	f023 0307 	bic.w	r3, r3, #7
 800b01a:	3308      	adds	r3, #8
 800b01c:	9303      	str	r3, [sp, #12]
 800b01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b020:	444b      	add	r3, r9
 800b022:	9309      	str	r3, [sp, #36]	; 0x24
 800b024:	e76d      	b.n	800af02 <_svfiprintf_r+0x4a>
 800b026:	fb05 3202 	mla	r2, r5, r2, r3
 800b02a:	2001      	movs	r0, #1
 800b02c:	460f      	mov	r7, r1
 800b02e:	e7a6      	b.n	800af7e <_svfiprintf_r+0xc6>
 800b030:	2300      	movs	r3, #0
 800b032:	250a      	movs	r5, #10
 800b034:	4619      	mov	r1, r3
 800b036:	3701      	adds	r7, #1
 800b038:	9305      	str	r3, [sp, #20]
 800b03a:	4638      	mov	r0, r7
 800b03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b040:	3a30      	subs	r2, #48	; 0x30
 800b042:	2a09      	cmp	r2, #9
 800b044:	d903      	bls.n	800b04e <_svfiprintf_r+0x196>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0c8      	beq.n	800afdc <_svfiprintf_r+0x124>
 800b04a:	9105      	str	r1, [sp, #20]
 800b04c:	e7c6      	b.n	800afdc <_svfiprintf_r+0x124>
 800b04e:	fb05 2101 	mla	r1, r5, r1, r2
 800b052:	2301      	movs	r3, #1
 800b054:	4607      	mov	r7, r0
 800b056:	e7f0      	b.n	800b03a <_svfiprintf_r+0x182>
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4622      	mov	r2, r4
 800b05e:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <_svfiprintf_r+0x1ec>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4640      	mov	r0, r8
 800b064:	f7fe f8e8 	bl	8009238 <_printf_float>
 800b068:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b06c:	4681      	mov	r9, r0
 800b06e:	d1d6      	bne.n	800b01e <_svfiprintf_r+0x166>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	065b      	lsls	r3, r3, #25
 800b074:	f53f af35 	bmi.w	800aee2 <_svfiprintf_r+0x2a>
 800b078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b07a:	b01d      	add	sp, #116	; 0x74
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	ab03      	add	r3, sp, #12
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	4622      	mov	r2, r4
 800b086:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <_svfiprintf_r+0x1ec>)
 800b088:	a904      	add	r1, sp, #16
 800b08a:	4640      	mov	r0, r8
 800b08c:	f7fe fb80 	bl	8009790 <_printf_i>
 800b090:	e7ea      	b.n	800b068 <_svfiprintf_r+0x1b0>
 800b092:	bf00      	nop
 800b094:	0800cbac 	.word	0x0800cbac
 800b098:	0800cbb2 	.word	0x0800cbb2
 800b09c:	0800cbb6 	.word	0x0800cbb6
 800b0a0:	08009239 	.word	0x08009239
 800b0a4:	0800ae05 	.word	0x0800ae05

0800b0a8 <_sbrk_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4c05      	ldr	r4, [pc, #20]	; (800b0c4 <_sbrk_r+0x1c>)
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	f7f8 fb7a 	bl	80037ac <_sbrk>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_sbrk_r+0x1a>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_sbrk_r+0x1a>
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	200040f4 	.word	0x200040f4

0800b0c8 <__ascii_wctomb>:
 800b0c8:	b149      	cbz	r1, 800b0de <__ascii_wctomb+0x16>
 800b0ca:	2aff      	cmp	r2, #255	; 0xff
 800b0cc:	bf8b      	itete	hi
 800b0ce:	238a      	movhi	r3, #138	; 0x8a
 800b0d0:	700a      	strbls	r2, [r1, #0]
 800b0d2:	6003      	strhi	r3, [r0, #0]
 800b0d4:	2001      	movls	r0, #1
 800b0d6:	bf88      	it	hi
 800b0d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0dc:	4770      	bx	lr
 800b0de:	4608      	mov	r0, r1
 800b0e0:	4770      	bx	lr

0800b0e2 <memmove>:
 800b0e2:	4288      	cmp	r0, r1
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	eb01 0302 	add.w	r3, r1, r2
 800b0ea:	d807      	bhi.n	800b0fc <memmove+0x1a>
 800b0ec:	1e42      	subs	r2, r0, #1
 800b0ee:	4299      	cmp	r1, r3
 800b0f0:	d00a      	beq.n	800b108 <memmove+0x26>
 800b0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b0fa:	e7f8      	b.n	800b0ee <memmove+0xc>
 800b0fc:	4283      	cmp	r3, r0
 800b0fe:	d9f5      	bls.n	800b0ec <memmove+0xa>
 800b100:	1881      	adds	r1, r0, r2
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	42d3      	cmn	r3, r2
 800b106:	d100      	bne.n	800b10a <memmove+0x28>
 800b108:	bd10      	pop	{r4, pc}
 800b10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b10e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b112:	e7f7      	b.n	800b104 <memmove+0x22>

0800b114 <__malloc_lock>:
 800b114:	4770      	bx	lr

0800b116 <__malloc_unlock>:
 800b116:	4770      	bx	lr

0800b118 <_realloc_r>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	4607      	mov	r7, r0
 800b11c:	4614      	mov	r4, r2
 800b11e:	460e      	mov	r6, r1
 800b120:	b921      	cbnz	r1, 800b12c <_realloc_r+0x14>
 800b122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b126:	4611      	mov	r1, r2
 800b128:	f7ff be12 	b.w	800ad50 <_malloc_r>
 800b12c:	b922      	cbnz	r2, 800b138 <_realloc_r+0x20>
 800b12e:	f7ff fdc3 	bl	800acb8 <_free_r>
 800b132:	4625      	mov	r5, r4
 800b134:	4628      	mov	r0, r5
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	f000 f814 	bl	800b164 <_malloc_usable_size_r>
 800b13c:	42a0      	cmp	r0, r4
 800b13e:	d20f      	bcs.n	800b160 <_realloc_r+0x48>
 800b140:	4621      	mov	r1, r4
 800b142:	4638      	mov	r0, r7
 800b144:	f7ff fe04 	bl	800ad50 <_malloc_r>
 800b148:	4605      	mov	r5, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0f2      	beq.n	800b134 <_realloc_r+0x1c>
 800b14e:	4631      	mov	r1, r6
 800b150:	4622      	mov	r2, r4
 800b152:	f7fd ffcd 	bl	80090f0 <memcpy>
 800b156:	4631      	mov	r1, r6
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff fdad 	bl	800acb8 <_free_r>
 800b15e:	e7e9      	b.n	800b134 <_realloc_r+0x1c>
 800b160:	4635      	mov	r5, r6
 800b162:	e7e7      	b.n	800b134 <_realloc_r+0x1c>

0800b164 <_malloc_usable_size_r>:
 800b164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b168:	1f18      	subs	r0, r3, #4
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bfbc      	itt	lt
 800b16e:	580b      	ldrlt	r3, [r1, r0]
 800b170:	18c0      	addlt	r0, r0, r3
 800b172:	4770      	bx	lr

0800b174 <cos>:
 800b174:	b530      	push	{r4, r5, lr}
 800b176:	4a18      	ldr	r2, [pc, #96]	; (800b1d8 <cos+0x64>)
 800b178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b17c:	4293      	cmp	r3, r2
 800b17e:	b087      	sub	sp, #28
 800b180:	dc04      	bgt.n	800b18c <cos+0x18>
 800b182:	2200      	movs	r2, #0
 800b184:	2300      	movs	r3, #0
 800b186:	f000 fc37 	bl	800b9f8 <__kernel_cos>
 800b18a:	e006      	b.n	800b19a <cos+0x26>
 800b18c:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <cos+0x68>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	dd05      	ble.n	800b19e <cos+0x2a>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	f7f4 ffe7 	bl	8000168 <__aeabi_dsub>
 800b19a:	b007      	add	sp, #28
 800b19c:	bd30      	pop	{r4, r5, pc}
 800b19e:	aa02      	add	r2, sp, #8
 800b1a0:	f000 f98e 	bl	800b4c0 <__ieee754_rem_pio2>
 800b1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a8:	f000 0403 	and.w	r4, r0, #3
 800b1ac:	2c01      	cmp	r4, #1
 800b1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b2:	d008      	beq.n	800b1c6 <cos+0x52>
 800b1b4:	2c02      	cmp	r4, #2
 800b1b6:	d00c      	beq.n	800b1d2 <cos+0x5e>
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	d0e4      	beq.n	800b186 <cos+0x12>
 800b1bc:	2401      	movs	r4, #1
 800b1be:	9400      	str	r4, [sp, #0]
 800b1c0:	f001 f822 	bl	800c208 <__kernel_sin>
 800b1c4:	e7e9      	b.n	800b19a <cos+0x26>
 800b1c6:	9400      	str	r4, [sp, #0]
 800b1c8:	f001 f81e 	bl	800c208 <__kernel_sin>
 800b1cc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b1d0:	e7e3      	b.n	800b19a <cos+0x26>
 800b1d2:	f000 fc11 	bl	800b9f8 <__kernel_cos>
 800b1d6:	e7f9      	b.n	800b1cc <cos+0x58>
 800b1d8:	3fe921fb 	.word	0x3fe921fb
 800b1dc:	7fefffff 	.word	0x7fefffff

0800b1e0 <sin>:
 800b1e0:	b530      	push	{r4, r5, lr}
 800b1e2:	4a1a      	ldr	r2, [pc, #104]	; (800b24c <sin+0x6c>)
 800b1e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	dc06      	bgt.n	800b1fc <sin+0x1c>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f001 f807 	bl	800c208 <__kernel_sin>
 800b1fa:	e006      	b.n	800b20a <sin+0x2a>
 800b1fc:	4a14      	ldr	r2, [pc, #80]	; (800b250 <sin+0x70>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	dd05      	ble.n	800b20e <sin+0x2e>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	f7f4 ffaf 	bl	8000168 <__aeabi_dsub>
 800b20a:	b007      	add	sp, #28
 800b20c:	bd30      	pop	{r4, r5, pc}
 800b20e:	aa02      	add	r2, sp, #8
 800b210:	f000 f956 	bl	800b4c0 <__ieee754_rem_pio2>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	f000 0403 	and.w	r4, r0, #3
 800b21c:	2c01      	cmp	r4, #1
 800b21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b222:	d005      	beq.n	800b230 <sin+0x50>
 800b224:	2c02      	cmp	r4, #2
 800b226:	d006      	beq.n	800b236 <sin+0x56>
 800b228:	b964      	cbnz	r4, 800b244 <sin+0x64>
 800b22a:	2401      	movs	r4, #1
 800b22c:	9400      	str	r4, [sp, #0]
 800b22e:	e7e2      	b.n	800b1f6 <sin+0x16>
 800b230:	f000 fbe2 	bl	800b9f8 <__kernel_cos>
 800b234:	e7e9      	b.n	800b20a <sin+0x2a>
 800b236:	2401      	movs	r4, #1
 800b238:	9400      	str	r4, [sp, #0]
 800b23a:	f000 ffe5 	bl	800c208 <__kernel_sin>
 800b23e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b242:	e7e2      	b.n	800b20a <sin+0x2a>
 800b244:	f000 fbd8 	bl	800b9f8 <__kernel_cos>
 800b248:	e7f9      	b.n	800b23e <sin+0x5e>
 800b24a:	bf00      	nop
 800b24c:	3fe921fb 	.word	0x3fe921fb
 800b250:	7fefffff 	.word	0x7fefffff

0800b254 <atan2>:
 800b254:	f000 b854 	b.w	800b300 <__ieee754_atan2>

0800b258 <sqrt>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	b08b      	sub	sp, #44	; 0x2c
 800b25e:	4604      	mov	r4, r0
 800b260:	460d      	mov	r5, r1
 800b262:	f000 fb1d 	bl	800b8a0 <__ieee754_sqrt>
 800b266:	4b24      	ldr	r3, [pc, #144]	; (800b2f8 <sqrt+0xa0>)
 800b268:	4680      	mov	r8, r0
 800b26a:	f993 a000 	ldrsb.w	sl, [r3]
 800b26e:	4689      	mov	r9, r1
 800b270:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b274:	d02b      	beq.n	800b2ce <sqrt+0x76>
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f5 fbc5 	bl	8000a0c <__aeabi_dcmpun>
 800b282:	4683      	mov	fp, r0
 800b284:	bb18      	cbnz	r0, 800b2ce <sqrt+0x76>
 800b286:	2600      	movs	r6, #0
 800b288:	2700      	movs	r7, #0
 800b28a:	4632      	mov	r2, r6
 800b28c:	463b      	mov	r3, r7
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 fb93 	bl	80009bc <__aeabi_dcmplt>
 800b296:	b1d0      	cbz	r0, 800b2ce <sqrt+0x76>
 800b298:	2301      	movs	r3, #1
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	4b17      	ldr	r3, [pc, #92]	; (800b2fc <sqrt+0xa4>)
 800b29e:	f8cd b020 	str.w	fp, [sp, #32]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b2a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d112      	bne.n	800b2d8 <sqrt+0x80>
 800b2b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b2b6:	4668      	mov	r0, sp
 800b2b8:	f001 fa72 	bl	800c7a0 <matherr>
 800b2bc:	b1b8      	cbz	r0, 800b2ee <sqrt+0x96>
 800b2be:	9b08      	ldr	r3, [sp, #32]
 800b2c0:	b11b      	cbz	r3, 800b2ca <sqrt+0x72>
 800b2c2:	f7fd feeb 	bl	800909c <__errno>
 800b2c6:	9b08      	ldr	r3, [sp, #32]
 800b2c8:	6003      	str	r3, [r0, #0]
 800b2ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	b00b      	add	sp, #44	; 0x2c
 800b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d8:	4632      	mov	r2, r6
 800b2da:	463b      	mov	r3, r7
 800b2dc:	4630      	mov	r0, r6
 800b2de:	4639      	mov	r1, r7
 800b2e0:	f7f5 fa24 	bl	800072c <__aeabi_ddiv>
 800b2e4:	f1ba 0f02 	cmp.w	sl, #2
 800b2e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2ec:	d1e3      	bne.n	800b2b6 <sqrt+0x5e>
 800b2ee:	f7fd fed5 	bl	800909c <__errno>
 800b2f2:	2321      	movs	r3, #33	; 0x21
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	e7e2      	b.n	800b2be <sqrt+0x66>
 800b2f8:	200001e4 	.word	0x200001e4
 800b2fc:	0800ccbe 	.word	0x0800ccbe

0800b300 <__ieee754_atan2>:
 800b300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	4256      	negs	r6, r2
 800b306:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b30a:	4316      	orrs	r6, r2
 800b30c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800b4b8 <__ieee754_atan2+0x1b8>
 800b310:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b314:	454e      	cmp	r6, r9
 800b316:	4604      	mov	r4, r0
 800b318:	460d      	mov	r5, r1
 800b31a:	469e      	mov	lr, r3
 800b31c:	d808      	bhi.n	800b330 <__ieee754_atan2+0x30>
 800b31e:	4246      	negs	r6, r0
 800b320:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b324:	4306      	orrs	r6, r0
 800b326:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b32a:	454e      	cmp	r6, r9
 800b32c:	4688      	mov	r8, r1
 800b32e:	d906      	bls.n	800b33e <__ieee754_atan2+0x3e>
 800b330:	4620      	mov	r0, r4
 800b332:	4629      	mov	r1, r5
 800b334:	f7f4 ff1a 	bl	800016c <__adddf3>
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	e030      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b33e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b342:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b346:	4316      	orrs	r6, r2
 800b348:	d103      	bne.n	800b352 <__ieee754_atan2+0x52>
 800b34a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34e:	f001 b813 	b.w	800c378 <atan>
 800b352:	179e      	asrs	r6, r3, #30
 800b354:	f006 0602 	and.w	r6, r6, #2
 800b358:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b35c:	ea57 0100 	orrs.w	r1, r7, r0
 800b360:	d107      	bne.n	800b372 <__ieee754_atan2+0x72>
 800b362:	2e02      	cmp	r6, #2
 800b364:	d079      	beq.n	800b45a <__ieee754_atan2+0x15a>
 800b366:	2e03      	cmp	r6, #3
 800b368:	d11a      	bne.n	800b3a0 <__ieee754_atan2+0xa0>
 800b36a:	a541      	add	r5, pc, #260	; (adr r5, 800b470 <__ieee754_atan2+0x170>)
 800b36c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b370:	e016      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b372:	ea5c 0102 	orrs.w	r1, ip, r2
 800b376:	d106      	bne.n	800b386 <__ieee754_atan2+0x86>
 800b378:	f1b8 0f00 	cmp.w	r8, #0
 800b37c:	da71      	bge.n	800b462 <__ieee754_atan2+0x162>
 800b37e:	a53e      	add	r5, pc, #248	; (adr r5, 800b478 <__ieee754_atan2+0x178>)
 800b380:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b384:	e00c      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b386:	45cc      	cmp	ip, r9
 800b388:	d123      	bne.n	800b3d2 <__ieee754_atan2+0xd2>
 800b38a:	4567      	cmp	r7, ip
 800b38c:	d114      	bne.n	800b3b8 <__ieee754_atan2+0xb8>
 800b38e:	2e02      	cmp	r6, #2
 800b390:	d00a      	beq.n	800b3a8 <__ieee754_atan2+0xa8>
 800b392:	2e03      	cmp	r6, #3
 800b394:	d00c      	beq.n	800b3b0 <__ieee754_atan2+0xb0>
 800b396:	2e01      	cmp	r6, #1
 800b398:	d15b      	bne.n	800b452 <__ieee754_atan2+0x152>
 800b39a:	a539      	add	r5, pc, #228	; (adr r5, 800b480 <__ieee754_atan2+0x180>)
 800b39c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a8:	a537      	add	r5, pc, #220	; (adr r5, 800b488 <__ieee754_atan2+0x188>)
 800b3aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3ae:	e7f7      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b3b0:	a537      	add	r5, pc, #220	; (adr r5, 800b490 <__ieee754_atan2+0x190>)
 800b3b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3b6:	e7f3      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b3b8:	2e02      	cmp	r6, #2
 800b3ba:	d04e      	beq.n	800b45a <__ieee754_atan2+0x15a>
 800b3bc:	2e03      	cmp	r6, #3
 800b3be:	d0d4      	beq.n	800b36a <__ieee754_atan2+0x6a>
 800b3c0:	2e01      	cmp	r6, #1
 800b3c2:	f04f 0400 	mov.w	r4, #0
 800b3c6:	d102      	bne.n	800b3ce <__ieee754_atan2+0xce>
 800b3c8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b3cc:	e7e8      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	e7e6      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b3d2:	454f      	cmp	r7, r9
 800b3d4:	d0d0      	beq.n	800b378 <__ieee754_atan2+0x78>
 800b3d6:	eba7 070c 	sub.w	r7, r7, ip
 800b3da:	153f      	asrs	r7, r7, #20
 800b3dc:	2f3c      	cmp	r7, #60	; 0x3c
 800b3de:	dc1e      	bgt.n	800b41e <__ieee754_atan2+0x11e>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	da01      	bge.n	800b3e8 <__ieee754_atan2+0xe8>
 800b3e4:	373c      	adds	r7, #60	; 0x3c
 800b3e6:	db1e      	blt.n	800b426 <__ieee754_atan2+0x126>
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f7f5 f99e 	bl	800072c <__aeabi_ddiv>
 800b3f0:	f001 f94c 	bl	800c68c <fabs>
 800b3f4:	f000 ffc0 	bl	800c378 <atan>
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	2e01      	cmp	r6, #1
 800b3fe:	d015      	beq.n	800b42c <__ieee754_atan2+0x12c>
 800b400:	2e02      	cmp	r6, #2
 800b402:	d017      	beq.n	800b434 <__ieee754_atan2+0x134>
 800b404:	2e00      	cmp	r6, #0
 800b406:	d0cb      	beq.n	800b3a0 <__ieee754_atan2+0xa0>
 800b408:	a323      	add	r3, pc, #140	; (adr r3, 800b498 <__ieee754_atan2+0x198>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f4 fea9 	bl	8000168 <__aeabi_dsub>
 800b416:	a322      	add	r3, pc, #136	; (adr r3, 800b4a0 <__ieee754_atan2+0x1a0>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	e016      	b.n	800b44c <__ieee754_atan2+0x14c>
 800b41e:	a522      	add	r5, pc, #136	; (adr r5, 800b4a8 <__ieee754_atan2+0x1a8>)
 800b420:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b424:	e7ea      	b.n	800b3fc <__ieee754_atan2+0xfc>
 800b426:	2400      	movs	r4, #0
 800b428:	2500      	movs	r5, #0
 800b42a:	e7e7      	b.n	800b3fc <__ieee754_atan2+0xfc>
 800b42c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b430:	461d      	mov	r5, r3
 800b432:	e7b5      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b434:	a318      	add	r3, pc, #96	; (adr r3, 800b498 <__ieee754_atan2+0x198>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4620      	mov	r0, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7f4 fe93 	bl	8000168 <__aeabi_dsub>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	a116      	add	r1, pc, #88	; (adr r1, 800b4a0 <__ieee754_atan2+0x1a0>)
 800b448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b44c:	f7f4 fe8c 	bl	8000168 <__aeabi_dsub>
 800b450:	e772      	b.n	800b338 <__ieee754_atan2+0x38>
 800b452:	a517      	add	r5, pc, #92	; (adr r5, 800b4b0 <__ieee754_atan2+0x1b0>)
 800b454:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b458:	e7a2      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b45a:	a511      	add	r5, pc, #68	; (adr r5, 800b4a0 <__ieee754_atan2+0x1a0>)
 800b45c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b460:	e79e      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b462:	a511      	add	r5, pc, #68	; (adr r5, 800b4a8 <__ieee754_atan2+0x1a8>)
 800b464:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b468:	e79a      	b.n	800b3a0 <__ieee754_atan2+0xa0>
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w
 800b470:	54442d18 	.word	0x54442d18
 800b474:	c00921fb 	.word	0xc00921fb
 800b478:	54442d18 	.word	0x54442d18
 800b47c:	bff921fb 	.word	0xbff921fb
 800b480:	54442d18 	.word	0x54442d18
 800b484:	bfe921fb 	.word	0xbfe921fb
 800b488:	7f3321d2 	.word	0x7f3321d2
 800b48c:	4002d97c 	.word	0x4002d97c
 800b490:	7f3321d2 	.word	0x7f3321d2
 800b494:	c002d97c 	.word	0xc002d97c
 800b498:	33145c07 	.word	0x33145c07
 800b49c:	3ca1a626 	.word	0x3ca1a626
 800b4a0:	54442d18 	.word	0x54442d18
 800b4a4:	400921fb 	.word	0x400921fb
 800b4a8:	54442d18 	.word	0x54442d18
 800b4ac:	3ff921fb 	.word	0x3ff921fb
 800b4b0:	54442d18 	.word	0x54442d18
 800b4b4:	3fe921fb 	.word	0x3fe921fb
 800b4b8:	7ff00000 	.word	0x7ff00000
 800b4bc:	00000000 	.word	0x00000000

0800b4c0 <__ieee754_rem_pio2>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	4ac2      	ldr	r2, [pc, #776]	; (800b7d0 <__ieee754_rem_pio2+0x310>)
 800b4c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b4cc:	4592      	cmp	sl, r2
 800b4ce:	b08d      	sub	sp, #52	; 0x34
 800b4d0:	468b      	mov	fp, r1
 800b4d2:	dc07      	bgt.n	800b4e4 <__ieee754_rem_pio2+0x24>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e9c4 0100 	strd	r0, r1, [r4]
 800b4dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b4e0:	2500      	movs	r5, #0
 800b4e2:	e023      	b.n	800b52c <__ieee754_rem_pio2+0x6c>
 800b4e4:	4abb      	ldr	r2, [pc, #748]	; (800b7d4 <__ieee754_rem_pio2+0x314>)
 800b4e6:	4592      	cmp	sl, r2
 800b4e8:	dc71      	bgt.n	800b5ce <__ieee754_rem_pio2+0x10e>
 800b4ea:	a3ab      	add	r3, pc, #684	; (adr r3, 800b798 <__ieee754_rem_pio2+0x2d8>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	4db9      	ldr	r5, [pc, #740]	; (800b7d8 <__ieee754_rem_pio2+0x318>)
 800b4f4:	dd36      	ble.n	800b564 <__ieee754_rem_pio2+0xa4>
 800b4f6:	f7f4 fe37 	bl	8000168 <__aeabi_dsub>
 800b4fa:	45aa      	cmp	sl, r5
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	d018      	beq.n	800b534 <__ieee754_rem_pio2+0x74>
 800b502:	a3a7      	add	r3, pc, #668	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x2e0>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fe2e 	bl	8000168 <__aeabi_dsub>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	e9c4 2300 	strd	r2, r3, [r4]
 800b516:	4639      	mov	r1, r7
 800b518:	f7f4 fe26 	bl	8000168 <__aeabi_dsub>
 800b51c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x2e0>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fe21 	bl	8000168 <__aeabi_dsub>
 800b526:	2501      	movs	r5, #1
 800b528:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b52c:	4628      	mov	r0, r5
 800b52e:	b00d      	add	sp, #52	; 0x34
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	a39c      	add	r3, pc, #624	; (adr r3, 800b7a8 <__ieee754_rem_pio2+0x2e8>)
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	f7f4 fe15 	bl	8000168 <__aeabi_dsub>
 800b53e:	a39c      	add	r3, pc, #624	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x2f0>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	f7f4 fe0e 	bl	8000168 <__aeabi_dsub>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4630      	mov	r0, r6
 800b552:	e9c4 2300 	strd	r2, r3, [r4]
 800b556:	4639      	mov	r1, r7
 800b558:	f7f4 fe06 	bl	8000168 <__aeabi_dsub>
 800b55c:	a394      	add	r3, pc, #592	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x2f0>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	e7de      	b.n	800b522 <__ieee754_rem_pio2+0x62>
 800b564:	f7f4 fe02 	bl	800016c <__adddf3>
 800b568:	45aa      	cmp	sl, r5
 800b56a:	4606      	mov	r6, r0
 800b56c:	460f      	mov	r7, r1
 800b56e:	d016      	beq.n	800b59e <__ieee754_rem_pio2+0xde>
 800b570:	a38b      	add	r3, pc, #556	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x2e0>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f4 fdf9 	bl	800016c <__adddf3>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4630      	mov	r0, r6
 800b580:	e9c4 2300 	strd	r2, r3, [r4]
 800b584:	4639      	mov	r1, r7
 800b586:	f7f4 fdef 	bl	8000168 <__aeabi_dsub>
 800b58a:	a385      	add	r3, pc, #532	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x2e0>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fdec 	bl	800016c <__adddf3>
 800b594:	f04f 35ff 	mov.w	r5, #4294967295
 800b598:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b59c:	e7c6      	b.n	800b52c <__ieee754_rem_pio2+0x6c>
 800b59e:	a382      	add	r3, pc, #520	; (adr r3, 800b7a8 <__ieee754_rem_pio2+0x2e8>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7f4 fde2 	bl	800016c <__adddf3>
 800b5a8:	a381      	add	r3, pc, #516	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x2f0>)
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	f7f4 fddb 	bl	800016c <__adddf3>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	e9c4 2300 	strd	r2, r3, [r4]
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	f7f4 fdd1 	bl	8000168 <__aeabi_dsub>
 800b5c6:	a37a      	add	r3, pc, #488	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x2f0>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	e7e0      	b.n	800b590 <__ieee754_rem_pio2+0xd0>
 800b5ce:	4a83      	ldr	r2, [pc, #524]	; (800b7dc <__ieee754_rem_pio2+0x31c>)
 800b5d0:	4592      	cmp	sl, r2
 800b5d2:	f300 80d2 	bgt.w	800b77a <__ieee754_rem_pio2+0x2ba>
 800b5d6:	f001 f859 	bl	800c68c <fabs>
 800b5da:	a377      	add	r3, pc, #476	; (adr r3, 800b7b8 <__ieee754_rem_pio2+0x2f8>)
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	460f      	mov	r7, r1
 800b5e4:	f7f4 ff78 	bl	80004d8 <__aeabi_dmul>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4b7d      	ldr	r3, [pc, #500]	; (800b7e0 <__ieee754_rem_pio2+0x320>)
 800b5ec:	f7f4 fdbe 	bl	800016c <__adddf3>
 800b5f0:	f7f5 fa22 	bl	8000a38 <__aeabi_d2iz>
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	f7f4 ff05 	bl	8000404 <__aeabi_i2d>
 800b5fa:	a367      	add	r3, pc, #412	; (adr r3, 800b798 <__ieee754_rem_pio2+0x2d8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b604:	f7f4 ff68 	bl	80004d8 <__aeabi_dmul>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4630      	mov	r0, r6
 800b60e:	4639      	mov	r1, r7
 800b610:	f7f4 fdaa 	bl	8000168 <__aeabi_dsub>
 800b614:	a362      	add	r3, pc, #392	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x2e0>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b622:	f7f4 ff59 	bl	80004d8 <__aeabi_dmul>
 800b626:	2d1f      	cmp	r5, #31
 800b628:	4680      	mov	r8, r0
 800b62a:	4689      	mov	r9, r1
 800b62c:	dc0e      	bgt.n	800b64c <__ieee754_rem_pio2+0x18c>
 800b62e:	4b6d      	ldr	r3, [pc, #436]	; (800b7e4 <__ieee754_rem_pio2+0x324>)
 800b630:	1e6a      	subs	r2, r5, #1
 800b632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b636:	4553      	cmp	r3, sl
 800b638:	d008      	beq.n	800b64c <__ieee754_rem_pio2+0x18c>
 800b63a:	4642      	mov	r2, r8
 800b63c:	464b      	mov	r3, r9
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f4 fd91 	bl	8000168 <__aeabi_dsub>
 800b646:	e9c4 0100 	strd	r0, r1, [r4]
 800b64a:	e011      	b.n	800b670 <__ieee754_rem_pio2+0x1b0>
 800b64c:	464b      	mov	r3, r9
 800b64e:	4642      	mov	r2, r8
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f4 fd88 	bl	8000168 <__aeabi_dsub>
 800b658:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b65c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b660:	ebaa 0303 	sub.w	r3, sl, r3
 800b664:	2b10      	cmp	r3, #16
 800b666:	dc1f      	bgt.n	800b6a8 <__ieee754_rem_pio2+0x1e8>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	e9c4 2300 	strd	r2, r3, [r4]
 800b670:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b674:	4630      	mov	r0, r6
 800b676:	4653      	mov	r3, sl
 800b678:	4639      	mov	r1, r7
 800b67a:	f7f4 fd75 	bl	8000168 <__aeabi_dsub>
 800b67e:	4642      	mov	r2, r8
 800b680:	464b      	mov	r3, r9
 800b682:	f7f4 fd71 	bl	8000168 <__aeabi_dsub>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	f1bb 0f00 	cmp.w	fp, #0
 800b68e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b692:	f6bf af4b 	bge.w	800b52c <__ieee754_rem_pio2+0x6c>
 800b696:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b69a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b69e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b6a2:	60e1      	str	r1, [r4, #12]
 800b6a4:	426d      	negs	r5, r5
 800b6a6:	e741      	b.n	800b52c <__ieee754_rem_pio2+0x6c>
 800b6a8:	a33f      	add	r3, pc, #252	; (adr r3, 800b7a8 <__ieee754_rem_pio2+0x2e8>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b2:	f7f4 ff11 	bl	80004d8 <__aeabi_dmul>
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	f7f4 fd51 	bl	8000168 <__aeabi_dsub>
 800b6c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f4 fd49 	bl	8000168 <__aeabi_dsub>
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	464b      	mov	r3, r9
 800b6da:	f7f4 fd45 	bl	8000168 <__aeabi_dsub>
 800b6de:	a334      	add	r3, pc, #208	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x2f0>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	460f      	mov	r7, r1
 800b6e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ec:	f7f4 fef4 	bl	80004d8 <__aeabi_dmul>
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	f7f4 fd38 	bl	8000168 <__aeabi_dsub>
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4689      	mov	r9, r1
 800b700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b704:	f7f4 fd30 	bl	8000168 <__aeabi_dsub>
 800b708:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b70c:	ebaa 0a03 	sub.w	sl, sl, r3
 800b710:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b714:	dc06      	bgt.n	800b724 <__ieee754_rem_pio2+0x264>
 800b716:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9c4 2300 	strd	r2, r3, [r4]
 800b722:	e7a5      	b.n	800b670 <__ieee754_rem_pio2+0x1b0>
 800b724:	a326      	add	r3, pc, #152	; (adr r3, 800b7c0 <__ieee754_rem_pio2+0x300>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72e:	f7f4 fed3 	bl	80004d8 <__aeabi_dmul>
 800b732:	4680      	mov	r8, r0
 800b734:	4689      	mov	r9, r1
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b73e:	f7f4 fd13 	bl	8000168 <__aeabi_dsub>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4606      	mov	r6, r0
 800b748:	460f      	mov	r7, r1
 800b74a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b74e:	f7f4 fd0b 	bl	8000168 <__aeabi_dsub>
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	f7f4 fd07 	bl	8000168 <__aeabi_dsub>
 800b75a:	a31b      	add	r3, pc, #108	; (adr r3, 800b7c8 <__ieee754_rem_pio2+0x308>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	4680      	mov	r8, r0
 800b762:	4689      	mov	r9, r1
 800b764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b768:	f7f4 feb6 	bl	80004d8 <__aeabi_dmul>
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	f7f4 fcfa 	bl	8000168 <__aeabi_dsub>
 800b774:	4680      	mov	r8, r0
 800b776:	4689      	mov	r9, r1
 800b778:	e75f      	b.n	800b63a <__ieee754_rem_pio2+0x17a>
 800b77a:	4a1b      	ldr	r2, [pc, #108]	; (800b7e8 <__ieee754_rem_pio2+0x328>)
 800b77c:	4592      	cmp	sl, r2
 800b77e:	dd35      	ble.n	800b7ec <__ieee754_rem_pio2+0x32c>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	f7f4 fcf0 	bl	8000168 <__aeabi_dsub>
 800b788:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b78c:	e9c4 0100 	strd	r0, r1, [r4]
 800b790:	e6a6      	b.n	800b4e0 <__ieee754_rem_pio2+0x20>
 800b792:	bf00      	nop
 800b794:	f3af 8000 	nop.w
 800b798:	54400000 	.word	0x54400000
 800b79c:	3ff921fb 	.word	0x3ff921fb
 800b7a0:	1a626331 	.word	0x1a626331
 800b7a4:	3dd0b461 	.word	0x3dd0b461
 800b7a8:	1a600000 	.word	0x1a600000
 800b7ac:	3dd0b461 	.word	0x3dd0b461
 800b7b0:	2e037073 	.word	0x2e037073
 800b7b4:	3ba3198a 	.word	0x3ba3198a
 800b7b8:	6dc9c883 	.word	0x6dc9c883
 800b7bc:	3fe45f30 	.word	0x3fe45f30
 800b7c0:	2e000000 	.word	0x2e000000
 800b7c4:	3ba3198a 	.word	0x3ba3198a
 800b7c8:	252049c1 	.word	0x252049c1
 800b7cc:	397b839a 	.word	0x397b839a
 800b7d0:	3fe921fb 	.word	0x3fe921fb
 800b7d4:	4002d97b 	.word	0x4002d97b
 800b7d8:	3ff921fb 	.word	0x3ff921fb
 800b7dc:	413921fb 	.word	0x413921fb
 800b7e0:	3fe00000 	.word	0x3fe00000
 800b7e4:	0800ccc4 	.word	0x0800ccc4
 800b7e8:	7fefffff 	.word	0x7fefffff
 800b7ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b7f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b7f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b7f8:	460f      	mov	r7, r1
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	f7f5 f91c 	bl	8000a38 <__aeabi_d2iz>
 800b800:	f7f4 fe00 	bl	8000404 <__aeabi_i2d>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b810:	f7f4 fcaa 	bl	8000168 <__aeabi_dsub>
 800b814:	2200      	movs	r2, #0
 800b816:	4b20      	ldr	r3, [pc, #128]	; (800b898 <__ieee754_rem_pio2+0x3d8>)
 800b818:	f7f4 fe5e 	bl	80004d8 <__aeabi_dmul>
 800b81c:	460f      	mov	r7, r1
 800b81e:	4606      	mov	r6, r0
 800b820:	f7f5 f90a 	bl	8000a38 <__aeabi_d2iz>
 800b824:	f7f4 fdee 	bl	8000404 <__aeabi_i2d>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b834:	f7f4 fc98 	bl	8000168 <__aeabi_dsub>
 800b838:	2200      	movs	r2, #0
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <__ieee754_rem_pio2+0x3d8>)
 800b83c:	f7f4 fe4c 	bl	80004d8 <__aeabi_dmul>
 800b840:	f04f 0803 	mov.w	r8, #3
 800b844:	2600      	movs	r6, #0
 800b846:	2700      	movs	r7, #0
 800b848:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b84c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b850:	4632      	mov	r2, r6
 800b852:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b856:	463b      	mov	r3, r7
 800b858:	f108 3aff 	add.w	sl, r8, #4294967295
 800b85c:	f7f5 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 800b860:	b9b8      	cbnz	r0, 800b892 <__ieee754_rem_pio2+0x3d2>
 800b862:	4b0e      	ldr	r3, [pc, #56]	; (800b89c <__ieee754_rem_pio2+0x3dc>)
 800b864:	462a      	mov	r2, r5
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	2302      	movs	r3, #2
 800b86a:	4621      	mov	r1, r4
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	a806      	add	r0, sp, #24
 800b870:	4643      	mov	r3, r8
 800b872:	f000 f97f 	bl	800bb74 <__kernel_rem_pio2>
 800b876:	f1bb 0f00 	cmp.w	fp, #0
 800b87a:	4605      	mov	r5, r0
 800b87c:	f6bf ae56 	bge.w	800b52c <__ieee754_rem_pio2+0x6c>
 800b880:	6863      	ldr	r3, [r4, #4]
 800b882:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	68e3      	ldr	r3, [r4, #12]
 800b88a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b88e:	60e3      	str	r3, [r4, #12]
 800b890:	e708      	b.n	800b6a4 <__ieee754_rem_pio2+0x1e4>
 800b892:	46d0      	mov	r8, sl
 800b894:	e7dc      	b.n	800b850 <__ieee754_rem_pio2+0x390>
 800b896:	bf00      	nop
 800b898:	41700000 	.word	0x41700000
 800b89c:	0800cd44 	.word	0x0800cd44

0800b8a0 <__ieee754_sqrt>:
 800b8a0:	4b54      	ldr	r3, [pc, #336]	; (800b9f4 <__ieee754_sqrt+0x154>)
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	438b      	bics	r3, r1
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	460a      	mov	r2, r1
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	d10f      	bne.n	800b8d2 <__ieee754_sqrt+0x32>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	f7f4 fe0f 	bl	80004d8 <__aeabi_dmul>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7f4 fc53 	bl	800016c <__adddf3>
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	dc0e      	bgt.n	800b8f8 <__ieee754_sqrt+0x58>
 800b8da:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b8de:	ea5c 0707 	orrs.w	r7, ip, r7
 800b8e2:	d0f2      	beq.n	800b8ca <__ieee754_sqrt+0x2a>
 800b8e4:	b141      	cbz	r1, 800b8f8 <__ieee754_sqrt+0x58>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	f7f4 fc3d 	bl	8000168 <__aeabi_dsub>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	f7f4 ff1b 	bl	800072c <__aeabi_ddiv>
 800b8f6:	e7e6      	b.n	800b8c6 <__ieee754_sqrt+0x26>
 800b8f8:	1512      	asrs	r2, r2, #20
 800b8fa:	d074      	beq.n	800b9e6 <__ieee754_sqrt+0x146>
 800b8fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b900:	07d5      	lsls	r5, r2, #31
 800b902:	f04f 0500 	mov.w	r5, #0
 800b906:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b90a:	bf48      	it	mi
 800b90c:	0fd9      	lsrmi	r1, r3, #31
 800b90e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b912:	bf44      	itt	mi
 800b914:	005b      	lslmi	r3, r3, #1
 800b916:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b91a:	1051      	asrs	r1, r2, #1
 800b91c:	0fda      	lsrs	r2, r3, #31
 800b91e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b922:	4628      	mov	r0, r5
 800b924:	2216      	movs	r2, #22
 800b926:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	1987      	adds	r7, r0, r6
 800b92e:	42a7      	cmp	r7, r4
 800b930:	bfde      	ittt	le
 800b932:	19b8      	addle	r0, r7, r6
 800b934:	1be4      	suble	r4, r4, r7
 800b936:	19ad      	addle	r5, r5, r6
 800b938:	0fdf      	lsrs	r7, r3, #31
 800b93a:	3a01      	subs	r2, #1
 800b93c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b940:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b944:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b948:	d1f0      	bne.n	800b92c <__ieee754_sqrt+0x8c>
 800b94a:	f04f 0c20 	mov.w	ip, #32
 800b94e:	4696      	mov	lr, r2
 800b950:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b954:	4284      	cmp	r4, r0
 800b956:	eb06 070e 	add.w	r7, r6, lr
 800b95a:	dc02      	bgt.n	800b962 <__ieee754_sqrt+0xc2>
 800b95c:	d112      	bne.n	800b984 <__ieee754_sqrt+0xe4>
 800b95e:	429f      	cmp	r7, r3
 800b960:	d810      	bhi.n	800b984 <__ieee754_sqrt+0xe4>
 800b962:	2f00      	cmp	r7, #0
 800b964:	eb07 0e06 	add.w	lr, r7, r6
 800b968:	da42      	bge.n	800b9f0 <__ieee754_sqrt+0x150>
 800b96a:	f1be 0f00 	cmp.w	lr, #0
 800b96e:	db3f      	blt.n	800b9f0 <__ieee754_sqrt+0x150>
 800b970:	f100 0801 	add.w	r8, r0, #1
 800b974:	1a24      	subs	r4, r4, r0
 800b976:	4640      	mov	r0, r8
 800b978:	429f      	cmp	r7, r3
 800b97a:	bf88      	it	hi
 800b97c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b980:	1bdb      	subs	r3, r3, r7
 800b982:	4432      	add	r2, r6
 800b984:	0064      	lsls	r4, r4, #1
 800b986:	f1bc 0c01 	subs.w	ip, ip, #1
 800b98a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b98e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b992:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b996:	d1dd      	bne.n	800b954 <__ieee754_sqrt+0xb4>
 800b998:	4323      	orrs	r3, r4
 800b99a:	d006      	beq.n	800b9aa <__ieee754_sqrt+0x10a>
 800b99c:	1c54      	adds	r4, r2, #1
 800b99e:	bf0b      	itete	eq
 800b9a0:	4662      	moveq	r2, ip
 800b9a2:	3201      	addne	r2, #1
 800b9a4:	3501      	addeq	r5, #1
 800b9a6:	f022 0201 	bicne.w	r2, r2, #1
 800b9aa:	106b      	asrs	r3, r5, #1
 800b9ac:	0852      	lsrs	r2, r2, #1
 800b9ae:	07e8      	lsls	r0, r5, #31
 800b9b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9b8:	bf48      	it	mi
 800b9ba:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b9be:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b9c2:	4616      	mov	r6, r2
 800b9c4:	e781      	b.n	800b8ca <__ieee754_sqrt+0x2a>
 800b9c6:	0adc      	lsrs	r4, r3, #11
 800b9c8:	3915      	subs	r1, #21
 800b9ca:	055b      	lsls	r3, r3, #21
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	d0fa      	beq.n	800b9c6 <__ieee754_sqrt+0x126>
 800b9d0:	02e6      	lsls	r6, r4, #11
 800b9d2:	d50a      	bpl.n	800b9ea <__ieee754_sqrt+0x14a>
 800b9d4:	f1c2 0020 	rsb	r0, r2, #32
 800b9d8:	fa23 f000 	lsr.w	r0, r3, r0
 800b9dc:	1e55      	subs	r5, r2, #1
 800b9de:	4093      	lsls	r3, r2
 800b9e0:	4304      	orrs	r4, r0
 800b9e2:	1b4a      	subs	r2, r1, r5
 800b9e4:	e78a      	b.n	800b8fc <__ieee754_sqrt+0x5c>
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	e7f0      	b.n	800b9cc <__ieee754_sqrt+0x12c>
 800b9ea:	0064      	lsls	r4, r4, #1
 800b9ec:	3201      	adds	r2, #1
 800b9ee:	e7ef      	b.n	800b9d0 <__ieee754_sqrt+0x130>
 800b9f0:	4680      	mov	r8, r0
 800b9f2:	e7bf      	b.n	800b974 <__ieee754_sqrt+0xd4>
 800b9f4:	7ff00000 	.word	0x7ff00000

0800b9f8 <__kernel_cos>:
 800b9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ba04:	4680      	mov	r8, r0
 800ba06:	460f      	mov	r7, r1
 800ba08:	e9cd 2300 	strd	r2, r3, [sp]
 800ba0c:	da04      	bge.n	800ba18 <__kernel_cos+0x20>
 800ba0e:	f7f5 f813 	bl	8000a38 <__aeabi_d2iz>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f000 8086 	beq.w	800bb24 <__kernel_cos+0x12c>
 800ba18:	4642      	mov	r2, r8
 800ba1a:	463b      	mov	r3, r7
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4639      	mov	r1, r7
 800ba20:	f7f4 fd5a 	bl	80004d8 <__aeabi_dmul>
 800ba24:	2200      	movs	r2, #0
 800ba26:	4b4e      	ldr	r3, [pc, #312]	; (800bb60 <__kernel_cos+0x168>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	f7f4 fd54 	bl	80004d8 <__aeabi_dmul>
 800ba30:	a33f      	add	r3, pc, #252	; (adr r3, 800bb30 <__kernel_cos+0x138>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	4682      	mov	sl, r0
 800ba38:	468b      	mov	fp, r1
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7f4 fd4b 	bl	80004d8 <__aeabi_dmul>
 800ba42:	a33d      	add	r3, pc, #244	; (adr r3, 800bb38 <__kernel_cos+0x140>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fb90 	bl	800016c <__adddf3>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f7f4 fd42 	bl	80004d8 <__aeabi_dmul>
 800ba54:	a33a      	add	r3, pc, #232	; (adr r3, 800bb40 <__kernel_cos+0x148>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fb85 	bl	8000168 <__aeabi_dsub>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	f7f4 fd39 	bl	80004d8 <__aeabi_dmul>
 800ba66:	a338      	add	r3, pc, #224	; (adr r3, 800bb48 <__kernel_cos+0x150>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fb7e 	bl	800016c <__adddf3>
 800ba70:	4622      	mov	r2, r4
 800ba72:	462b      	mov	r3, r5
 800ba74:	f7f4 fd30 	bl	80004d8 <__aeabi_dmul>
 800ba78:	a335      	add	r3, pc, #212	; (adr r3, 800bb50 <__kernel_cos+0x158>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fb73 	bl	8000168 <__aeabi_dsub>
 800ba82:	4622      	mov	r2, r4
 800ba84:	462b      	mov	r3, r5
 800ba86:	f7f4 fd27 	bl	80004d8 <__aeabi_dmul>
 800ba8a:	a333      	add	r3, pc, #204	; (adr r3, 800bb58 <__kernel_cos+0x160>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fb6c 	bl	800016c <__adddf3>
 800ba94:	4622      	mov	r2, r4
 800ba96:	462b      	mov	r3, r5
 800ba98:	f7f4 fd1e 	bl	80004d8 <__aeabi_dmul>
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	462b      	mov	r3, r5
 800baa0:	f7f4 fd1a 	bl	80004d8 <__aeabi_dmul>
 800baa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	4640      	mov	r0, r8
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fd12 	bl	80004d8 <__aeabi_dmul>
 800bab4:	460b      	mov	r3, r1
 800bab6:	4602      	mov	r2, r0
 800bab8:	4629      	mov	r1, r5
 800baba:	4620      	mov	r0, r4
 800babc:	f7f4 fb54 	bl	8000168 <__aeabi_dsub>
 800bac0:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <__kernel_cos+0x16c>)
 800bac2:	4680      	mov	r8, r0
 800bac4:	429e      	cmp	r6, r3
 800bac6:	4689      	mov	r9, r1
 800bac8:	dc0e      	bgt.n	800bae8 <__kernel_cos+0xf0>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4650      	mov	r0, sl
 800bad0:	4659      	mov	r1, fp
 800bad2:	f7f4 fb49 	bl	8000168 <__aeabi_dsub>
 800bad6:	4602      	mov	r2, r0
 800bad8:	2000      	movs	r0, #0
 800bada:	460b      	mov	r3, r1
 800badc:	4922      	ldr	r1, [pc, #136]	; (800bb68 <__kernel_cos+0x170>)
 800bade:	f7f4 fb43 	bl	8000168 <__aeabi_dsub>
 800bae2:	b003      	add	sp, #12
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	2400      	movs	r4, #0
 800baea:	4b20      	ldr	r3, [pc, #128]	; (800bb6c <__kernel_cos+0x174>)
 800baec:	4622      	mov	r2, r4
 800baee:	429e      	cmp	r6, r3
 800baf0:	bfcc      	ite	gt
 800baf2:	4d1f      	ldrgt	r5, [pc, #124]	; (800bb70 <__kernel_cos+0x178>)
 800baf4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800baf8:	462b      	mov	r3, r5
 800bafa:	2000      	movs	r0, #0
 800bafc:	491a      	ldr	r1, [pc, #104]	; (800bb68 <__kernel_cos+0x170>)
 800bafe:	f7f4 fb33 	bl	8000168 <__aeabi_dsub>
 800bb02:	4622      	mov	r2, r4
 800bb04:	4606      	mov	r6, r0
 800bb06:	460f      	mov	r7, r1
 800bb08:	462b      	mov	r3, r5
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	4659      	mov	r1, fp
 800bb0e:	f7f4 fb2b 	bl	8000168 <__aeabi_dsub>
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	f7f4 fb27 	bl	8000168 <__aeabi_dsub>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	e7dc      	b.n	800bade <__kernel_cos+0xe6>
 800bb24:	2000      	movs	r0, #0
 800bb26:	4910      	ldr	r1, [pc, #64]	; (800bb68 <__kernel_cos+0x170>)
 800bb28:	e7db      	b.n	800bae2 <__kernel_cos+0xea>
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w
 800bb30:	be8838d4 	.word	0xbe8838d4
 800bb34:	bda8fae9 	.word	0xbda8fae9
 800bb38:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb3c:	3e21ee9e 	.word	0x3e21ee9e
 800bb40:	809c52ad 	.word	0x809c52ad
 800bb44:	3e927e4f 	.word	0x3e927e4f
 800bb48:	19cb1590 	.word	0x19cb1590
 800bb4c:	3efa01a0 	.word	0x3efa01a0
 800bb50:	16c15177 	.word	0x16c15177
 800bb54:	3f56c16c 	.word	0x3f56c16c
 800bb58:	5555554c 	.word	0x5555554c
 800bb5c:	3fa55555 	.word	0x3fa55555
 800bb60:	3fe00000 	.word	0x3fe00000
 800bb64:	3fd33332 	.word	0x3fd33332
 800bb68:	3ff00000 	.word	0x3ff00000
 800bb6c:	3fe90000 	.word	0x3fe90000
 800bb70:	3fd20000 	.word	0x3fd20000

0800bb74 <__kernel_rem_pio2>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bb7c:	9307      	str	r3, [sp, #28]
 800bb7e:	9104      	str	r1, [sp, #16]
 800bb80:	4bbf      	ldr	r3, [pc, #764]	; (800be80 <__kernel_rem_pio2+0x30c>)
 800bb82:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bb84:	1ed4      	subs	r4, r2, #3
 800bb86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	9302      	str	r3, [sp, #8]
 800bb8e:	9b07      	ldr	r3, [sp, #28]
 800bb90:	9008      	str	r0, [sp, #32]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	9306      	str	r3, [sp, #24]
 800bb96:	2318      	movs	r3, #24
 800bb98:	fb94 f4f3 	sdiv	r4, r4, r3
 800bb9c:	f06f 0317 	mvn.w	r3, #23
 800bba0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bba4:	fb04 3303 	mla	r3, r4, r3, r3
 800bba8:	eb03 0a02 	add.w	sl, r3, r2
 800bbac:	9a06      	ldr	r2, [sp, #24]
 800bbae:	9b02      	ldr	r3, [sp, #8]
 800bbb0:	1aa7      	subs	r7, r4, r2
 800bbb2:	eb03 0802 	add.w	r8, r3, r2
 800bbb6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bbb8:	2200      	movs	r2, #0
 800bbba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	ae1e      	add	r6, sp, #120	; 0x78
 800bbc2:	4545      	cmp	r5, r8
 800bbc4:	dd14      	ble.n	800bbf0 <__kernel_rem_pio2+0x7c>
 800bbc6:	2600      	movs	r6, #0
 800bbc8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800bbcc:	9b02      	ldr	r3, [sp, #8]
 800bbce:	429e      	cmp	r6, r3
 800bbd0:	dc39      	bgt.n	800bc46 <__kernel_rem_pio2+0xd2>
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	f04f 0800 	mov.w	r8, #0
 800bbd8:	3b08      	subs	r3, #8
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	9b07      	ldr	r3, [sp, #28]
 800bbde:	f04f 0900 	mov.w	r9, #0
 800bbe2:	199d      	adds	r5, r3, r6
 800bbe4:	ab20      	add	r3, sp, #128	; 0x80
 800bbe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bbea:	9305      	str	r3, [sp, #20]
 800bbec:	2700      	movs	r7, #0
 800bbee:	e023      	b.n	800bc38 <__kernel_rem_pio2+0xc4>
 800bbf0:	42ef      	cmn	r7, r5
 800bbf2:	d40b      	bmi.n	800bc0c <__kernel_rem_pio2+0x98>
 800bbf4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bbf8:	e9cd 2300 	strd	r2, r3, [sp]
 800bbfc:	f7f4 fc02 	bl	8000404 <__aeabi_i2d>
 800bc00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc04:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800bc08:	3501      	adds	r5, #1
 800bc0a:	e7da      	b.n	800bbc2 <__kernel_rem_pio2+0x4e>
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4619      	mov	r1, r3
 800bc10:	e7f8      	b.n	800bc04 <__kernel_rem_pio2+0x90>
 800bc12:	9905      	ldr	r1, [sp, #20]
 800bc14:	9d00      	ldr	r5, [sp, #0]
 800bc16:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bc1a:	9105      	str	r1, [sp, #20]
 800bc1c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bc20:	9500      	str	r5, [sp, #0]
 800bc22:	f7f4 fc59 	bl	80004d8 <__aeabi_dmul>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fa9d 	bl	800016c <__adddf3>
 800bc32:	4680      	mov	r8, r0
 800bc34:	4689      	mov	r9, r1
 800bc36:	3701      	adds	r7, #1
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	429f      	cmp	r7, r3
 800bc3c:	dde9      	ble.n	800bc12 <__kernel_rem_pio2+0x9e>
 800bc3e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bc42:	3601      	adds	r6, #1
 800bc44:	e7c2      	b.n	800bbcc <__kernel_rem_pio2+0x58>
 800bc46:	9b02      	ldr	r3, [sp, #8]
 800bc48:	aa0c      	add	r2, sp, #48	; 0x30
 800bc4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc50:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc52:	9f02      	ldr	r7, [sp, #8]
 800bc54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc58:	930a      	str	r3, [sp, #40]	; 0x28
 800bc5a:	2600      	movs	r6, #0
 800bc5c:	ab98      	add	r3, sp, #608	; 0x260
 800bc5e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800bc62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc6a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800bc6e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800bc72:	ab98      	add	r3, sp, #608	; 0x260
 800bc74:	445b      	add	r3, fp
 800bc76:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800bc7a:	1bbb      	subs	r3, r7, r6
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dc71      	bgt.n	800bd64 <__kernel_rem_pio2+0x1f0>
 800bc80:	4652      	mov	r2, sl
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f000 fd8f 	bl	800c7a8 <scalbn>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	f7f4 fc20 	bl	80004d8 <__aeabi_dmul>
 800bc98:	f000 fcfe 	bl	800c698 <floor>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4b79      	ldr	r3, [pc, #484]	; (800be84 <__kernel_rem_pio2+0x310>)
 800bca0:	f7f4 fc1a 	bl	80004d8 <__aeabi_dmul>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4620      	mov	r0, r4
 800bcaa:	4629      	mov	r1, r5
 800bcac:	f7f4 fa5c 	bl	8000168 <__aeabi_dsub>
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	f7f4 fec0 	bl	8000a38 <__aeabi_d2iz>
 800bcb8:	9005      	str	r0, [sp, #20]
 800bcba:	f7f4 fba3 	bl	8000404 <__aeabi_i2d>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	f7f4 fa4f 	bl	8000168 <__aeabi_dsub>
 800bcca:	f1ba 0f00 	cmp.w	sl, #0
 800bcce:	4680      	mov	r8, r0
 800bcd0:	4689      	mov	r9, r1
 800bcd2:	dd6c      	ble.n	800bdae <__kernel_rem_pio2+0x23a>
 800bcd4:	1e7a      	subs	r2, r7, #1
 800bcd6:	ab0c      	add	r3, sp, #48	; 0x30
 800bcd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bcdc:	f1ca 0118 	rsb	r1, sl, #24
 800bce0:	9c05      	ldr	r4, [sp, #20]
 800bce2:	fa40 f301 	asr.w	r3, r0, r1
 800bce6:	441c      	add	r4, r3
 800bce8:	408b      	lsls	r3, r1
 800bcea:	1ac0      	subs	r0, r0, r3
 800bcec:	ab0c      	add	r3, sp, #48	; 0x30
 800bcee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bcf2:	f1ca 0317 	rsb	r3, sl, #23
 800bcf6:	9405      	str	r4, [sp, #20]
 800bcf8:	fa40 f303 	asr.w	r3, r0, r3
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dd62      	ble.n	800bdca <__kernel_rem_pio2+0x256>
 800bd04:	2200      	movs	r2, #0
 800bd06:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bd0a:	4614      	mov	r4, r2
 800bd0c:	9b05      	ldr	r3, [sp, #20]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	4297      	cmp	r7, r2
 800bd14:	f300 809f 	bgt.w	800be56 <__kernel_rem_pio2+0x2e2>
 800bd18:	f1ba 0f00 	cmp.w	sl, #0
 800bd1c:	dd07      	ble.n	800bd2e <__kernel_rem_pio2+0x1ba>
 800bd1e:	f1ba 0f01 	cmp.w	sl, #1
 800bd22:	f000 80bb 	beq.w	800be9c <__kernel_rem_pio2+0x328>
 800bd26:	f1ba 0f02 	cmp.w	sl, #2
 800bd2a:	f000 80c1 	beq.w	800beb0 <__kernel_rem_pio2+0x33c>
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d14a      	bne.n	800bdca <__kernel_rem_pio2+0x256>
 800bd34:	4642      	mov	r2, r8
 800bd36:	464b      	mov	r3, r9
 800bd38:	2000      	movs	r0, #0
 800bd3a:	4953      	ldr	r1, [pc, #332]	; (800be88 <__kernel_rem_pio2+0x314>)
 800bd3c:	f7f4 fa14 	bl	8000168 <__aeabi_dsub>
 800bd40:	4680      	mov	r8, r0
 800bd42:	4689      	mov	r9, r1
 800bd44:	2c00      	cmp	r4, #0
 800bd46:	d040      	beq.n	800bdca <__kernel_rem_pio2+0x256>
 800bd48:	4652      	mov	r2, sl
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	494e      	ldr	r1, [pc, #312]	; (800be88 <__kernel_rem_pio2+0x314>)
 800bd4e:	f000 fd2b 	bl	800c7a8 <scalbn>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fa05 	bl	8000168 <__aeabi_dsub>
 800bd5e:	4680      	mov	r8, r0
 800bd60:	4689      	mov	r9, r1
 800bd62:	e032      	b.n	800bdca <__kernel_rem_pio2+0x256>
 800bd64:	2200      	movs	r2, #0
 800bd66:	4b49      	ldr	r3, [pc, #292]	; (800be8c <__kernel_rem_pio2+0x318>)
 800bd68:	4640      	mov	r0, r8
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	f7f4 fbb4 	bl	80004d8 <__aeabi_dmul>
 800bd70:	f7f4 fe62 	bl	8000a38 <__aeabi_d2iz>
 800bd74:	f7f4 fb46 	bl	8000404 <__aeabi_i2d>
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4b45      	ldr	r3, [pc, #276]	; (800be90 <__kernel_rem_pio2+0x31c>)
 800bd7c:	e9cd 0100 	strd	r0, r1, [sp]
 800bd80:	f7f4 fbaa 	bl	80004d8 <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 f9ec 	bl	8000168 <__aeabi_dsub>
 800bd90:	f7f4 fe52 	bl	8000a38 <__aeabi_d2iz>
 800bd94:	ab0c      	add	r3, sp, #48	; 0x30
 800bd96:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bd9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bda2:	f7f4 f9e3 	bl	800016c <__adddf3>
 800bda6:	3601      	adds	r6, #1
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	e765      	b.n	800bc7a <__kernel_rem_pio2+0x106>
 800bdae:	d105      	bne.n	800bdbc <__kernel_rem_pio2+0x248>
 800bdb0:	1e7b      	subs	r3, r7, #1
 800bdb2:	aa0c      	add	r2, sp, #48	; 0x30
 800bdb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bdb8:	15c3      	asrs	r3, r0, #23
 800bdba:	e79f      	b.n	800bcfc <__kernel_rem_pio2+0x188>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4b35      	ldr	r3, [pc, #212]	; (800be94 <__kernel_rem_pio2+0x320>)
 800bdc0:	f7f4 fe10 	bl	80009e4 <__aeabi_dcmpge>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d143      	bne.n	800be50 <__kernel_rem_pio2+0x2dc>
 800bdc8:	9000      	str	r0, [sp, #0]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f7f4 fde9 	bl	80009a8 <__aeabi_dcmpeq>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f000 80c3 	beq.w	800bf62 <__kernel_rem_pio2+0x3ee>
 800bddc:	1e7c      	subs	r4, r7, #1
 800bdde:	4623      	mov	r3, r4
 800bde0:	2200      	movs	r2, #0
 800bde2:	9902      	ldr	r1, [sp, #8]
 800bde4:	428b      	cmp	r3, r1
 800bde6:	da6a      	bge.n	800bebe <__kernel_rem_pio2+0x34a>
 800bde8:	2a00      	cmp	r2, #0
 800bdea:	f000 8084 	beq.w	800bef6 <__kernel_rem_pio2+0x382>
 800bdee:	ab0c      	add	r3, sp, #48	; 0x30
 800bdf0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bdf4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 80b0 	beq.w	800bf5e <__kernel_rem_pio2+0x3ea>
 800bdfe:	4652      	mov	r2, sl
 800be00:	2000      	movs	r0, #0
 800be02:	4921      	ldr	r1, [pc, #132]	; (800be88 <__kernel_rem_pio2+0x314>)
 800be04:	f000 fcd0 	bl	800c7a8 <scalbn>
 800be08:	4625      	mov	r5, r4
 800be0a:	4606      	mov	r6, r0
 800be0c:	460f      	mov	r7, r1
 800be0e:	f04f 0a00 	mov.w	sl, #0
 800be12:	00e3      	lsls	r3, r4, #3
 800be14:	aa98      	add	r2, sp, #608	; 0x260
 800be16:	eb02 0803 	add.w	r8, r2, r3
 800be1a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800be8c <__kernel_rem_pio2+0x318>
 800be1e:	9306      	str	r3, [sp, #24]
 800be20:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800be24:	2d00      	cmp	r5, #0
 800be26:	f280 80d2 	bge.w	800bfce <__kernel_rem_pio2+0x45a>
 800be2a:	2500      	movs	r5, #0
 800be2c:	9a06      	ldr	r2, [sp, #24]
 800be2e:	ab98      	add	r3, sp, #608	; 0x260
 800be30:	189e      	adds	r6, r3, r2
 800be32:	3ea8      	subs	r6, #168	; 0xa8
 800be34:	1b63      	subs	r3, r4, r5
 800be36:	2b00      	cmp	r3, #0
 800be38:	f2c0 80f9 	blt.w	800c02e <__kernel_rem_pio2+0x4ba>
 800be3c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800be98 <__kernel_rem_pio2+0x324>
 800be40:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800be44:	f04f 0a00 	mov.w	sl, #0
 800be48:	f04f 0b00 	mov.w	fp, #0
 800be4c:	2700      	movs	r7, #0
 800be4e:	e0e2      	b.n	800c016 <__kernel_rem_pio2+0x4a2>
 800be50:	2302      	movs	r3, #2
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	e756      	b.n	800bd04 <__kernel_rem_pio2+0x190>
 800be56:	ab0c      	add	r3, sp, #48	; 0x30
 800be58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5c:	b94c      	cbnz	r4, 800be72 <__kernel_rem_pio2+0x2fe>
 800be5e:	b12b      	cbz	r3, 800be6c <__kernel_rem_pio2+0x2f8>
 800be60:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800be64:	a80c      	add	r0, sp, #48	; 0x30
 800be66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800be6a:	2301      	movs	r3, #1
 800be6c:	3201      	adds	r2, #1
 800be6e:	461c      	mov	r4, r3
 800be70:	e74f      	b.n	800bd12 <__kernel_rem_pio2+0x19e>
 800be72:	1acb      	subs	r3, r1, r3
 800be74:	a80c      	add	r0, sp, #48	; 0x30
 800be76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800be7a:	4623      	mov	r3, r4
 800be7c:	e7f6      	b.n	800be6c <__kernel_rem_pio2+0x2f8>
 800be7e:	bf00      	nop
 800be80:	0800ce90 	.word	0x0800ce90
 800be84:	40200000 	.word	0x40200000
 800be88:	3ff00000 	.word	0x3ff00000
 800be8c:	3e700000 	.word	0x3e700000
 800be90:	41700000 	.word	0x41700000
 800be94:	3fe00000 	.word	0x3fe00000
 800be98:	0800ce48 	.word	0x0800ce48
 800be9c:	1e7a      	subs	r2, r7, #1
 800be9e:	ab0c      	add	r3, sp, #48	; 0x30
 800bea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bea8:	a90c      	add	r1, sp, #48	; 0x30
 800beaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800beae:	e73e      	b.n	800bd2e <__kernel_rem_pio2+0x1ba>
 800beb0:	1e7a      	subs	r2, r7, #1
 800beb2:	ab0c      	add	r3, sp, #48	; 0x30
 800beb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bebc:	e7f4      	b.n	800bea8 <__kernel_rem_pio2+0x334>
 800bebe:	a90c      	add	r1, sp, #48	; 0x30
 800bec0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	430a      	orrs	r2, r1
 800bec8:	e78b      	b.n	800bde2 <__kernel_rem_pio2+0x26e>
 800beca:	3401      	adds	r4, #1
 800becc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	d0fa      	beq.n	800beca <__kernel_rem_pio2+0x356>
 800bed4:	ab98      	add	r3, sp, #608	; 0x260
 800bed6:	449b      	add	fp, r3
 800bed8:	9b07      	ldr	r3, [sp, #28]
 800beda:	1c7e      	adds	r6, r7, #1
 800bedc:	19dd      	adds	r5, r3, r7
 800bede:	ab98      	add	r3, sp, #608	; 0x260
 800bee0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bee4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800bee8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800beec:	443c      	add	r4, r7
 800beee:	42b4      	cmp	r4, r6
 800bef0:	da04      	bge.n	800befc <__kernel_rem_pio2+0x388>
 800bef2:	4627      	mov	r7, r4
 800bef4:	e6b1      	b.n	800bc5a <__kernel_rem_pio2+0xe6>
 800bef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef8:	2401      	movs	r4, #1
 800befa:	e7e7      	b.n	800becc <__kernel_rem_pio2+0x358>
 800befc:	f105 0308 	add.w	r3, r5, #8
 800bf00:	9309      	str	r3, [sp, #36]	; 0x24
 800bf02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf04:	2700      	movs	r7, #0
 800bf06:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf0a:	f7f4 fa7b 	bl	8000404 <__aeabi_i2d>
 800bf0e:	f04f 0800 	mov.w	r8, #0
 800bf12:	f04f 0900 	mov.w	r9, #0
 800bf16:	9b08      	ldr	r3, [sp, #32]
 800bf18:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bf1c:	3b08      	subs	r3, #8
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	f105 0310 	add.w	r3, r5, #16
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	9b06      	ldr	r3, [sp, #24]
 800bf28:	429f      	cmp	r7, r3
 800bf2a:	dd04      	ble.n	800bf36 <__kernel_rem_pio2+0x3c2>
 800bf2c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bf30:	3601      	adds	r6, #1
 800bf32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bf34:	e7db      	b.n	800beee <__kernel_rem_pio2+0x37a>
 800bf36:	9905      	ldr	r1, [sp, #20]
 800bf38:	9d00      	ldr	r5, [sp, #0]
 800bf3a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bf3e:	9105      	str	r1, [sp, #20]
 800bf40:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bf44:	9500      	str	r5, [sp, #0]
 800bf46:	f7f4 fac7 	bl	80004d8 <__aeabi_dmul>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4640      	mov	r0, r8
 800bf50:	4649      	mov	r1, r9
 800bf52:	f7f4 f90b 	bl	800016c <__adddf3>
 800bf56:	3701      	adds	r7, #1
 800bf58:	4680      	mov	r8, r0
 800bf5a:	4689      	mov	r9, r1
 800bf5c:	e7e3      	b.n	800bf26 <__kernel_rem_pio2+0x3b2>
 800bf5e:	3c01      	subs	r4, #1
 800bf60:	e745      	b.n	800bdee <__kernel_rem_pio2+0x27a>
 800bf62:	f1ca 0200 	rsb	r2, sl, #0
 800bf66:	4640      	mov	r0, r8
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f000 fc1d 	bl	800c7a8 <scalbn>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	4ba3      	ldr	r3, [pc, #652]	; (800c200 <__kernel_rem_pio2+0x68c>)
 800bf72:	4604      	mov	r4, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	f7f4 fd35 	bl	80009e4 <__aeabi_dcmpge>
 800bf7a:	b1f8      	cbz	r0, 800bfbc <__kernel_rem_pio2+0x448>
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4ba1      	ldr	r3, [pc, #644]	; (800c204 <__kernel_rem_pio2+0x690>)
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7f4 faa8 	bl	80004d8 <__aeabi_dmul>
 800bf88:	f7f4 fd56 	bl	8000a38 <__aeabi_d2iz>
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	f7f4 fa39 	bl	8000404 <__aeabi_i2d>
 800bf92:	2200      	movs	r2, #0
 800bf94:	4b9a      	ldr	r3, [pc, #616]	; (800c200 <__kernel_rem_pio2+0x68c>)
 800bf96:	f7f4 fa9f 	bl	80004d8 <__aeabi_dmul>
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f7f4 f8e1 	bl	8000168 <__aeabi_dsub>
 800bfa6:	f7f4 fd47 	bl	8000a38 <__aeabi_d2iz>
 800bfaa:	1c7c      	adds	r4, r7, #1
 800bfac:	ab0c      	add	r3, sp, #48	; 0x30
 800bfae:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bfb2:	f10a 0a18 	add.w	sl, sl, #24
 800bfb6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bfba:	e720      	b.n	800bdfe <__kernel_rem_pio2+0x28a>
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f4 fd3a 	bl	8000a38 <__aeabi_d2iz>
 800bfc4:	ab0c      	add	r3, sp, #48	; 0x30
 800bfc6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bfca:	463c      	mov	r4, r7
 800bfcc:	e717      	b.n	800bdfe <__kernel_rem_pio2+0x28a>
 800bfce:	ab0c      	add	r3, sp, #48	; 0x30
 800bfd0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfd4:	f7f4 fa16 	bl	8000404 <__aeabi_i2d>
 800bfd8:	4632      	mov	r2, r6
 800bfda:	463b      	mov	r3, r7
 800bfdc:	f7f4 fa7c 	bl	80004d8 <__aeabi_dmul>
 800bfe0:	4652      	mov	r2, sl
 800bfe2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bfe6:	465b      	mov	r3, fp
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fa74 	bl	80004d8 <__aeabi_dmul>
 800bff0:	3d01      	subs	r5, #1
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	e715      	b.n	800be24 <__kernel_rem_pio2+0x2b0>
 800bff8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800bffc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c000:	f7f4 fa6a 	bl	80004d8 <__aeabi_dmul>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4650      	mov	r0, sl
 800c00a:	4659      	mov	r1, fp
 800c00c:	f7f4 f8ae 	bl	800016c <__adddf3>
 800c010:	4682      	mov	sl, r0
 800c012:	468b      	mov	fp, r1
 800c014:	3701      	adds	r7, #1
 800c016:	9b02      	ldr	r3, [sp, #8]
 800c018:	429f      	cmp	r7, r3
 800c01a:	dc01      	bgt.n	800c020 <__kernel_rem_pio2+0x4ac>
 800c01c:	42bd      	cmp	r5, r7
 800c01e:	daeb      	bge.n	800bff8 <__kernel_rem_pio2+0x484>
 800c020:	ab48      	add	r3, sp, #288	; 0x120
 800c022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c026:	e9c3 ab00 	strd	sl, fp, [r3]
 800c02a:	3501      	adds	r5, #1
 800c02c:	e702      	b.n	800be34 <__kernel_rem_pio2+0x2c0>
 800c02e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c030:	2b03      	cmp	r3, #3
 800c032:	d86c      	bhi.n	800c10e <__kernel_rem_pio2+0x59a>
 800c034:	e8df f003 	tbb	[pc, r3]
 800c038:	022f2f59 	.word	0x022f2f59
 800c03c:	9a06      	ldr	r2, [sp, #24]
 800c03e:	ab48      	add	r3, sp, #288	; 0x120
 800c040:	189d      	adds	r5, r3, r2
 800c042:	46aa      	mov	sl, r5
 800c044:	46a3      	mov	fp, r4
 800c046:	f1bb 0f00 	cmp.w	fp, #0
 800c04a:	f300 8087 	bgt.w	800c15c <__kernel_rem_pio2+0x5e8>
 800c04e:	46a2      	mov	sl, r4
 800c050:	f1ba 0f01 	cmp.w	sl, #1
 800c054:	f300 809f 	bgt.w	800c196 <__kernel_rem_pio2+0x622>
 800c058:	2700      	movs	r7, #0
 800c05a:	463e      	mov	r6, r7
 800c05c:	9d06      	ldr	r5, [sp, #24]
 800c05e:	ab48      	add	r3, sp, #288	; 0x120
 800c060:	3508      	adds	r5, #8
 800c062:	441d      	add	r5, r3
 800c064:	2c01      	cmp	r4, #1
 800c066:	f300 80b3 	bgt.w	800c1d0 <__kernel_rem_pio2+0x65c>
 800c06a:	9b00      	ldr	r3, [sp, #0]
 800c06c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800c06e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c070:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800c072:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800c074:	2b00      	cmp	r3, #0
 800c076:	f040 80b5 	bne.w	800c1e4 <__kernel_rem_pio2+0x670>
 800c07a:	4603      	mov	r3, r0
 800c07c:	462a      	mov	r2, r5
 800c07e:	9804      	ldr	r0, [sp, #16]
 800c080:	e9c0 2300 	strd	r2, r3, [r0]
 800c084:	4622      	mov	r2, r4
 800c086:	460b      	mov	r3, r1
 800c088:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c08c:	463a      	mov	r2, r7
 800c08e:	4633      	mov	r3, r6
 800c090:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c094:	e03b      	b.n	800c10e <__kernel_rem_pio2+0x59a>
 800c096:	f04f 0c00 	mov.w	ip, #0
 800c09a:	4626      	mov	r6, r4
 800c09c:	4667      	mov	r7, ip
 800c09e:	9d06      	ldr	r5, [sp, #24]
 800c0a0:	ab48      	add	r3, sp, #288	; 0x120
 800c0a2:	3508      	adds	r5, #8
 800c0a4:	441d      	add	r5, r3
 800c0a6:	2e00      	cmp	r6, #0
 800c0a8:	da42      	bge.n	800c130 <__kernel_rem_pio2+0x5bc>
 800c0aa:	9b00      	ldr	r3, [sp, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d049      	beq.n	800c144 <__kernel_rem_pio2+0x5d0>
 800c0b0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800c0b4:	4662      	mov	r2, ip
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	9904      	ldr	r1, [sp, #16]
 800c0ba:	2601      	movs	r6, #1
 800c0bc:	e9c1 2300 	strd	r2, r3, [r1]
 800c0c0:	a948      	add	r1, sp, #288	; 0x120
 800c0c2:	463b      	mov	r3, r7
 800c0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c8:	f7f4 f84e 	bl	8000168 <__aeabi_dsub>
 800c0cc:	4684      	mov	ip, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	ad48      	add	r5, sp, #288	; 0x120
 800c0d2:	42b4      	cmp	r4, r6
 800c0d4:	da38      	bge.n	800c148 <__kernel_rem_pio2+0x5d4>
 800c0d6:	9b00      	ldr	r3, [sp, #0]
 800c0d8:	b10b      	cbz	r3, 800c0de <__kernel_rem_pio2+0x56a>
 800c0da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c0de:	4662      	mov	r2, ip
 800c0e0:	463b      	mov	r3, r7
 800c0e2:	9904      	ldr	r1, [sp, #16]
 800c0e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c0e8:	e011      	b.n	800c10e <__kernel_rem_pio2+0x59a>
 800c0ea:	2700      	movs	r7, #0
 800c0ec:	463d      	mov	r5, r7
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	aa98      	add	r2, sp, #608	; 0x260
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	da0f      	bge.n	800c11c <__kernel_rem_pio2+0x5a8>
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	b10b      	cbz	r3, 800c104 <__kernel_rem_pio2+0x590>
 800c100:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c104:	463a      	mov	r2, r7
 800c106:	462b      	mov	r3, r5
 800c108:	9904      	ldr	r1, [sp, #16]
 800c10a:	e9c1 2300 	strd	r2, r3, [r1]
 800c10e:	9b05      	ldr	r3, [sp, #20]
 800c110:	f003 0007 	and.w	r0, r3, #7
 800c114:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	4638      	mov	r0, r7
 800c11e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c122:	4629      	mov	r1, r5
 800c124:	f7f4 f822 	bl	800016c <__adddf3>
 800c128:	3c01      	subs	r4, #1
 800c12a:	4607      	mov	r7, r0
 800c12c:	460d      	mov	r5, r1
 800c12e:	e7e3      	b.n	800c0f8 <__kernel_rem_pio2+0x584>
 800c130:	4660      	mov	r0, ip
 800c132:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 f818 	bl	800016c <__adddf3>
 800c13c:	3e01      	subs	r6, #1
 800c13e:	4684      	mov	ip, r0
 800c140:	460f      	mov	r7, r1
 800c142:	e7b0      	b.n	800c0a6 <__kernel_rem_pio2+0x532>
 800c144:	4639      	mov	r1, r7
 800c146:	e7b5      	b.n	800c0b4 <__kernel_rem_pio2+0x540>
 800c148:	4660      	mov	r0, ip
 800c14a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c14e:	4639      	mov	r1, r7
 800c150:	f7f4 f80c 	bl	800016c <__adddf3>
 800c154:	3601      	adds	r6, #1
 800c156:	4684      	mov	ip, r0
 800c158:	460f      	mov	r7, r1
 800c15a:	e7ba      	b.n	800c0d2 <__kernel_rem_pio2+0x55e>
 800c15c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800c160:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800c164:	4640      	mov	r0, r8
 800c166:	4649      	mov	r1, r9
 800c168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c16c:	f7f3 fffe 	bl	800016c <__adddf3>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	4640      	mov	r0, r8
 800c17a:	4649      	mov	r1, r9
 800c17c:	f7f3 fff4 	bl	8000168 <__aeabi_dsub>
 800c180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c184:	f7f3 fff2 	bl	800016c <__adddf3>
 800c188:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c18c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c190:	e9ca 6700 	strd	r6, r7, [sl]
 800c194:	e757      	b.n	800c046 <__kernel_rem_pio2+0x4d2>
 800c196:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800c19a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1a6:	f7f3 ffe1 	bl	800016c <__adddf3>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4680      	mov	r8, r0
 800c1b0:	4689      	mov	r9, r1
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	f7f3 ffd7 	bl	8000168 <__aeabi_dsub>
 800c1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1be:	f7f3 ffd5 	bl	800016c <__adddf3>
 800c1c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c1ca:	e9c5 8900 	strd	r8, r9, [r5]
 800c1ce:	e73f      	b.n	800c050 <__kernel_rem_pio2+0x4dc>
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	f7f3 ffc8 	bl	800016c <__adddf3>
 800c1dc:	3c01      	subs	r4, #1
 800c1de:	4607      	mov	r7, r0
 800c1e0:	460e      	mov	r6, r1
 800c1e2:	e73f      	b.n	800c064 <__kernel_rem_pio2+0x4f0>
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c1ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c1ee:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c1f2:	601d      	str	r5, [r3, #0]
 800c1f4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c1f8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c1fc:	615e      	str	r6, [r3, #20]
 800c1fe:	e786      	b.n	800c10e <__kernel_rem_pio2+0x59a>
 800c200:	41700000 	.word	0x41700000
 800c204:	3e700000 	.word	0x3e700000

0800c208 <__kernel_sin>:
 800c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	b086      	sub	sp, #24
 800c20e:	e9cd 2300 	strd	r2, r3, [sp]
 800c212:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c216:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c21a:	4682      	mov	sl, r0
 800c21c:	460c      	mov	r4, r1
 800c21e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c220:	da03      	bge.n	800c22a <__kernel_sin+0x22>
 800c222:	f7f4 fc09 	bl	8000a38 <__aeabi_d2iz>
 800c226:	2800      	cmp	r0, #0
 800c228:	d050      	beq.n	800c2cc <__kernel_sin+0xc4>
 800c22a:	4652      	mov	r2, sl
 800c22c:	4623      	mov	r3, r4
 800c22e:	4650      	mov	r0, sl
 800c230:	4621      	mov	r1, r4
 800c232:	f7f4 f951 	bl	80004d8 <__aeabi_dmul>
 800c236:	4606      	mov	r6, r0
 800c238:	460f      	mov	r7, r1
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4650      	mov	r0, sl
 800c240:	4621      	mov	r1, r4
 800c242:	f7f4 f949 	bl	80004d8 <__aeabi_dmul>
 800c246:	a33e      	add	r3, pc, #248	; (adr r3, 800c340 <__kernel_sin+0x138>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	4680      	mov	r8, r0
 800c24e:	4689      	mov	r9, r1
 800c250:	4630      	mov	r0, r6
 800c252:	4639      	mov	r1, r7
 800c254:	f7f4 f940 	bl	80004d8 <__aeabi_dmul>
 800c258:	a33b      	add	r3, pc, #236	; (adr r3, 800c348 <__kernel_sin+0x140>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f3 ff83 	bl	8000168 <__aeabi_dsub>
 800c262:	4632      	mov	r2, r6
 800c264:	463b      	mov	r3, r7
 800c266:	f7f4 f937 	bl	80004d8 <__aeabi_dmul>
 800c26a:	a339      	add	r3, pc, #228	; (adr r3, 800c350 <__kernel_sin+0x148>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ff7c 	bl	800016c <__adddf3>
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	f7f4 f92e 	bl	80004d8 <__aeabi_dmul>
 800c27c:	a336      	add	r3, pc, #216	; (adr r3, 800c358 <__kernel_sin+0x150>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f3 ff71 	bl	8000168 <__aeabi_dsub>
 800c286:	4632      	mov	r2, r6
 800c288:	463b      	mov	r3, r7
 800c28a:	f7f4 f925 	bl	80004d8 <__aeabi_dmul>
 800c28e:	a334      	add	r3, pc, #208	; (adr r3, 800c360 <__kernel_sin+0x158>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f7f3 ff6a 	bl	800016c <__adddf3>
 800c298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c29c:	b9dd      	cbnz	r5, 800c2d6 <__kernel_sin+0xce>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	f7f4 f917 	bl	80004d8 <__aeabi_dmul>
 800c2aa:	a32f      	add	r3, pc, #188	; (adr r3, 800c368 <__kernel_sin+0x160>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f3 ff5a 	bl	8000168 <__aeabi_dsub>
 800c2b4:	4642      	mov	r2, r8
 800c2b6:	464b      	mov	r3, r9
 800c2b8:	f7f4 f90e 	bl	80004d8 <__aeabi_dmul>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7f3 ff52 	bl	800016c <__adddf3>
 800c2c8:	4682      	mov	sl, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	b006      	add	sp, #24
 800c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2dc:	4b24      	ldr	r3, [pc, #144]	; (800c370 <__kernel_sin+0x168>)
 800c2de:	f7f4 f8fb 	bl	80004d8 <__aeabi_dmul>
 800c2e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	f7f4 f8f3 	bl	80004d8 <__aeabi_dmul>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2fa:	f7f3 ff35 	bl	8000168 <__aeabi_dsub>
 800c2fe:	4632      	mov	r2, r6
 800c300:	463b      	mov	r3, r7
 800c302:	f7f4 f8e9 	bl	80004d8 <__aeabi_dmul>
 800c306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c30a:	f7f3 ff2d 	bl	8000168 <__aeabi_dsub>
 800c30e:	a316      	add	r3, pc, #88	; (adr r3, 800c368 <__kernel_sin+0x160>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	4606      	mov	r6, r0
 800c316:	460f      	mov	r7, r1
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f4 f8dc 	bl	80004d8 <__aeabi_dmul>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4630      	mov	r0, r6
 800c326:	4639      	mov	r1, r7
 800c328:	f7f3 ff20 	bl	800016c <__adddf3>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4650      	mov	r0, sl
 800c332:	4621      	mov	r1, r4
 800c334:	f7f3 ff18 	bl	8000168 <__aeabi_dsub>
 800c338:	e7c6      	b.n	800c2c8 <__kernel_sin+0xc0>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	5acfd57c 	.word	0x5acfd57c
 800c344:	3de5d93a 	.word	0x3de5d93a
 800c348:	8a2b9ceb 	.word	0x8a2b9ceb
 800c34c:	3e5ae5e6 	.word	0x3e5ae5e6
 800c350:	57b1fe7d 	.word	0x57b1fe7d
 800c354:	3ec71de3 	.word	0x3ec71de3
 800c358:	19c161d5 	.word	0x19c161d5
 800c35c:	3f2a01a0 	.word	0x3f2a01a0
 800c360:	1110f8a6 	.word	0x1110f8a6
 800c364:	3f811111 	.word	0x3f811111
 800c368:	55555549 	.word	0x55555549
 800c36c:	3fc55555 	.word	0x3fc55555
 800c370:	3fe00000 	.word	0x3fe00000
 800c374:	00000000 	.word	0x00000000

0800c378 <atan>:
 800c378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4bb6      	ldr	r3, [pc, #728]	; (800c658 <atan+0x2e0>)
 800c37e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c382:	429e      	cmp	r6, r3
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	468b      	mov	fp, r1
 800c38a:	dd17      	ble.n	800c3bc <atan+0x44>
 800c38c:	4bb3      	ldr	r3, [pc, #716]	; (800c65c <atan+0x2e4>)
 800c38e:	429e      	cmp	r6, r3
 800c390:	dc01      	bgt.n	800c396 <atan+0x1e>
 800c392:	d109      	bne.n	800c3a8 <atan+0x30>
 800c394:	b140      	cbz	r0, 800c3a8 <atan+0x30>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7f3 fee5 	bl	800016c <__adddf3>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	460d      	mov	r5, r1
 800c3a6:	e005      	b.n	800c3b4 <atan+0x3c>
 800c3a8:	f1bb 0f00 	cmp.w	fp, #0
 800c3ac:	4cac      	ldr	r4, [pc, #688]	; (800c660 <atan+0x2e8>)
 800c3ae:	f340 8121 	ble.w	800c5f4 <atan+0x27c>
 800c3b2:	4dac      	ldr	r5, [pc, #688]	; (800c664 <atan+0x2ec>)
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3bc:	4baa      	ldr	r3, [pc, #680]	; (800c668 <atan+0x2f0>)
 800c3be:	429e      	cmp	r6, r3
 800c3c0:	dc11      	bgt.n	800c3e6 <atan+0x6e>
 800c3c2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c3c6:	429e      	cmp	r6, r3
 800c3c8:	dc0a      	bgt.n	800c3e0 <atan+0x68>
 800c3ca:	a38b      	add	r3, pc, #556	; (adr r3, 800c5f8 <atan+0x280>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 fecc 	bl	800016c <__adddf3>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4ba5      	ldr	r3, [pc, #660]	; (800c66c <atan+0x2f4>)
 800c3d8:	f7f4 fb0e 	bl	80009f8 <__aeabi_dcmpgt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d1e9      	bne.n	800c3b4 <atan+0x3c>
 800c3e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c3e4:	e027      	b.n	800c436 <atan+0xbe>
 800c3e6:	f000 f951 	bl	800c68c <fabs>
 800c3ea:	4ba1      	ldr	r3, [pc, #644]	; (800c670 <atan+0x2f8>)
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	429e      	cmp	r6, r3
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	f300 80b8 	bgt.w	800c566 <atan+0x1ee>
 800c3f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c3fa:	429e      	cmp	r6, r3
 800c3fc:	f300 809c 	bgt.w	800c538 <atan+0x1c0>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	f7f3 feb2 	bl	800016c <__adddf3>
 800c408:	2200      	movs	r2, #0
 800c40a:	4b98      	ldr	r3, [pc, #608]	; (800c66c <atan+0x2f4>)
 800c40c:	f7f3 feac 	bl	8000168 <__aeabi_dsub>
 800c410:	2200      	movs	r2, #0
 800c412:	4606      	mov	r6, r0
 800c414:	460f      	mov	r7, r1
 800c416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f3 fea5 	bl	800016c <__adddf3>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4630      	mov	r0, r6
 800c428:	4639      	mov	r1, r7
 800c42a:	f7f4 f97f 	bl	800072c <__aeabi_ddiv>
 800c42e:	f04f 0a00 	mov.w	sl, #0
 800c432:	4604      	mov	r4, r0
 800c434:	460d      	mov	r5, r1
 800c436:	4622      	mov	r2, r4
 800c438:	462b      	mov	r3, r5
 800c43a:	4620      	mov	r0, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7f4 f84b 	bl	80004d8 <__aeabi_dmul>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4680      	mov	r8, r0
 800c448:	4689      	mov	r9, r1
 800c44a:	f7f4 f845 	bl	80004d8 <__aeabi_dmul>
 800c44e:	a36c      	add	r3, pc, #432	; (adr r3, 800c600 <atan+0x288>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	f7f4 f83e 	bl	80004d8 <__aeabi_dmul>
 800c45c:	a36a      	add	r3, pc, #424	; (adr r3, 800c608 <atan+0x290>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7f3 fe83 	bl	800016c <__adddf3>
 800c466:	4632      	mov	r2, r6
 800c468:	463b      	mov	r3, r7
 800c46a:	f7f4 f835 	bl	80004d8 <__aeabi_dmul>
 800c46e:	a368      	add	r3, pc, #416	; (adr r3, 800c610 <atan+0x298>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f7f3 fe7a 	bl	800016c <__adddf3>
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	f7f4 f82c 	bl	80004d8 <__aeabi_dmul>
 800c480:	a365      	add	r3, pc, #404	; (adr r3, 800c618 <atan+0x2a0>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f7f3 fe71 	bl	800016c <__adddf3>
 800c48a:	4632      	mov	r2, r6
 800c48c:	463b      	mov	r3, r7
 800c48e:	f7f4 f823 	bl	80004d8 <__aeabi_dmul>
 800c492:	a363      	add	r3, pc, #396	; (adr r3, 800c620 <atan+0x2a8>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fe68 	bl	800016c <__adddf3>
 800c49c:	4632      	mov	r2, r6
 800c49e:	463b      	mov	r3, r7
 800c4a0:	f7f4 f81a 	bl	80004d8 <__aeabi_dmul>
 800c4a4:	a360      	add	r3, pc, #384	; (adr r3, 800c628 <atan+0x2b0>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 fe5f 	bl	800016c <__adddf3>
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	464b      	mov	r3, r9
 800c4b2:	f7f4 f811 	bl	80004d8 <__aeabi_dmul>
 800c4b6:	a35e      	add	r3, pc, #376	; (adr r3, 800c630 <atan+0x2b8>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4689      	mov	r9, r1
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	4639      	mov	r1, r7
 800c4c4:	f7f4 f808 	bl	80004d8 <__aeabi_dmul>
 800c4c8:	a35b      	add	r3, pc, #364	; (adr r3, 800c638 <atan+0x2c0>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f3 fe4b 	bl	8000168 <__aeabi_dsub>
 800c4d2:	4632      	mov	r2, r6
 800c4d4:	463b      	mov	r3, r7
 800c4d6:	f7f3 ffff 	bl	80004d8 <__aeabi_dmul>
 800c4da:	a359      	add	r3, pc, #356	; (adr r3, 800c640 <atan+0x2c8>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f7f3 fe42 	bl	8000168 <__aeabi_dsub>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	463b      	mov	r3, r7
 800c4e8:	f7f3 fff6 	bl	80004d8 <__aeabi_dmul>
 800c4ec:	a356      	add	r3, pc, #344	; (adr r3, 800c648 <atan+0x2d0>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7f3 fe39 	bl	8000168 <__aeabi_dsub>
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	463b      	mov	r3, r7
 800c4fa:	f7f3 ffed 	bl	80004d8 <__aeabi_dmul>
 800c4fe:	a354      	add	r3, pc, #336	; (adr r3, 800c650 <atan+0x2d8>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fe30 	bl	8000168 <__aeabi_dsub>
 800c508:	4632      	mov	r2, r6
 800c50a:	463b      	mov	r3, r7
 800c50c:	f7f3 ffe4 	bl	80004d8 <__aeabi_dmul>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	4640      	mov	r0, r8
 800c516:	4649      	mov	r1, r9
 800c518:	f7f3 fe28 	bl	800016c <__adddf3>
 800c51c:	4622      	mov	r2, r4
 800c51e:	462b      	mov	r3, r5
 800c520:	f7f3 ffda 	bl	80004d8 <__aeabi_dmul>
 800c524:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	d144      	bne.n	800c5b8 <atan+0x240>
 800c52e:	4620      	mov	r0, r4
 800c530:	4629      	mov	r1, r5
 800c532:	f7f3 fe19 	bl	8000168 <__aeabi_dsub>
 800c536:	e734      	b.n	800c3a2 <atan+0x2a>
 800c538:	2200      	movs	r2, #0
 800c53a:	4b4c      	ldr	r3, [pc, #304]	; (800c66c <atan+0x2f4>)
 800c53c:	f7f3 fe14 	bl	8000168 <__aeabi_dsub>
 800c540:	2200      	movs	r2, #0
 800c542:	4606      	mov	r6, r0
 800c544:	460f      	mov	r7, r1
 800c546:	4b49      	ldr	r3, [pc, #292]	; (800c66c <atan+0x2f4>)
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe0e 	bl	800016c <__adddf3>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4630      	mov	r0, r6
 800c556:	4639      	mov	r1, r7
 800c558:	f7f4 f8e8 	bl	800072c <__aeabi_ddiv>
 800c55c:	f04f 0a01 	mov.w	sl, #1
 800c560:	4604      	mov	r4, r0
 800c562:	460d      	mov	r5, r1
 800c564:	e767      	b.n	800c436 <atan+0xbe>
 800c566:	4b43      	ldr	r3, [pc, #268]	; (800c674 <atan+0x2fc>)
 800c568:	429e      	cmp	r6, r3
 800c56a:	dc1a      	bgt.n	800c5a2 <atan+0x22a>
 800c56c:	2200      	movs	r2, #0
 800c56e:	4b42      	ldr	r3, [pc, #264]	; (800c678 <atan+0x300>)
 800c570:	f7f3 fdfa 	bl	8000168 <__aeabi_dsub>
 800c574:	2200      	movs	r2, #0
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	4b3f      	ldr	r3, [pc, #252]	; (800c678 <atan+0x300>)
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f3 ffaa 	bl	80004d8 <__aeabi_dmul>
 800c584:	2200      	movs	r2, #0
 800c586:	4b39      	ldr	r3, [pc, #228]	; (800c66c <atan+0x2f4>)
 800c588:	f7f3 fdf0 	bl	800016c <__adddf3>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4630      	mov	r0, r6
 800c592:	4639      	mov	r1, r7
 800c594:	f7f4 f8ca 	bl	800072c <__aeabi_ddiv>
 800c598:	f04f 0a02 	mov.w	sl, #2
 800c59c:	4604      	mov	r4, r0
 800c59e:	460d      	mov	r5, r1
 800c5a0:	e749      	b.n	800c436 <atan+0xbe>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	4934      	ldr	r1, [pc, #208]	; (800c67c <atan+0x304>)
 800c5aa:	f7f4 f8bf 	bl	800072c <__aeabi_ddiv>
 800c5ae:	f04f 0a03 	mov.w	sl, #3
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	e73e      	b.n	800c436 <atan+0xbe>
 800c5b8:	4b31      	ldr	r3, [pc, #196]	; (800c680 <atan+0x308>)
 800c5ba:	4e32      	ldr	r6, [pc, #200]	; (800c684 <atan+0x30c>)
 800c5bc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c5c0:	4456      	add	r6, sl
 800c5c2:	449a      	add	sl, r3
 800c5c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800c5c8:	f7f3 fdce 	bl	8000168 <__aeabi_dsub>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	f7f3 fdca 	bl	8000168 <__aeabi_dsub>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c5dc:	f7f3 fdc4 	bl	8000168 <__aeabi_dsub>
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	f6bf aee4 	bge.w	800c3b4 <atan+0x3c>
 800c5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5f0:	461d      	mov	r5, r3
 800c5f2:	e6df      	b.n	800c3b4 <atan+0x3c>
 800c5f4:	4d24      	ldr	r5, [pc, #144]	; (800c688 <atan+0x310>)
 800c5f6:	e6dd      	b.n	800c3b4 <atan+0x3c>
 800c5f8:	8800759c 	.word	0x8800759c
 800c5fc:	7e37e43c 	.word	0x7e37e43c
 800c600:	e322da11 	.word	0xe322da11
 800c604:	3f90ad3a 	.word	0x3f90ad3a
 800c608:	24760deb 	.word	0x24760deb
 800c60c:	3fa97b4b 	.word	0x3fa97b4b
 800c610:	a0d03d51 	.word	0xa0d03d51
 800c614:	3fb10d66 	.word	0x3fb10d66
 800c618:	c54c206e 	.word	0xc54c206e
 800c61c:	3fb745cd 	.word	0x3fb745cd
 800c620:	920083ff 	.word	0x920083ff
 800c624:	3fc24924 	.word	0x3fc24924
 800c628:	5555550d 	.word	0x5555550d
 800c62c:	3fd55555 	.word	0x3fd55555
 800c630:	2c6a6c2f 	.word	0x2c6a6c2f
 800c634:	bfa2b444 	.word	0xbfa2b444
 800c638:	52defd9a 	.word	0x52defd9a
 800c63c:	3fadde2d 	.word	0x3fadde2d
 800c640:	af749a6d 	.word	0xaf749a6d
 800c644:	3fb3b0f2 	.word	0x3fb3b0f2
 800c648:	fe231671 	.word	0xfe231671
 800c64c:	3fbc71c6 	.word	0x3fbc71c6
 800c650:	9998ebc4 	.word	0x9998ebc4
 800c654:	3fc99999 	.word	0x3fc99999
 800c658:	440fffff 	.word	0x440fffff
 800c65c:	7ff00000 	.word	0x7ff00000
 800c660:	54442d18 	.word	0x54442d18
 800c664:	3ff921fb 	.word	0x3ff921fb
 800c668:	3fdbffff 	.word	0x3fdbffff
 800c66c:	3ff00000 	.word	0x3ff00000
 800c670:	3ff2ffff 	.word	0x3ff2ffff
 800c674:	40037fff 	.word	0x40037fff
 800c678:	3ff80000 	.word	0x3ff80000
 800c67c:	bff00000 	.word	0xbff00000
 800c680:	0800cec0 	.word	0x0800cec0
 800c684:	0800cea0 	.word	0x0800cea0
 800c688:	bff921fb 	.word	0xbff921fb

0800c68c <fabs>:
 800c68c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c690:	4619      	mov	r1, r3
 800c692:	4770      	bx	lr
 800c694:	0000      	movs	r0, r0
	...

0800c698 <floor>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c6a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c6a4:	2e13      	cmp	r6, #19
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	dc35      	bgt.n	800c71c <floor+0x84>
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	da16      	bge.n	800c6e2 <floor+0x4a>
 800c6b4:	a336      	add	r3, pc, #216	; (adr r3, 800c790 <floor+0xf8>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fd57 	bl	800016c <__adddf3>
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f7f4 f999 	bl	80009f8 <__aeabi_dcmpgt>
 800c6c6:	b148      	cbz	r0, 800c6dc <floor+0x44>
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	da5b      	bge.n	800c784 <floor+0xec>
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c6d2:	4a31      	ldr	r2, [pc, #196]	; (800c798 <floor+0x100>)
 800c6d4:	433b      	orrs	r3, r7
 800c6d6:	42ab      	cmp	r3, r5
 800c6d8:	bf18      	it	ne
 800c6da:	4614      	movne	r4, r2
 800c6dc:	4623      	mov	r3, r4
 800c6de:	462f      	mov	r7, r5
 800c6e0:	e026      	b.n	800c730 <floor+0x98>
 800c6e2:	4a2e      	ldr	r2, [pc, #184]	; (800c79c <floor+0x104>)
 800c6e4:	fa42 f806 	asr.w	r8, r2, r6
 800c6e8:	ea01 0208 	and.w	r2, r1, r8
 800c6ec:	4302      	orrs	r2, r0
 800c6ee:	d01f      	beq.n	800c730 <floor+0x98>
 800c6f0:	a327      	add	r3, pc, #156	; (adr r3, 800c790 <floor+0xf8>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 fd39 	bl	800016c <__adddf3>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f7f4 f97b 	bl	80009f8 <__aeabi_dcmpgt>
 800c702:	2800      	cmp	r0, #0
 800c704:	d0ea      	beq.n	800c6dc <floor+0x44>
 800c706:	2c00      	cmp	r4, #0
 800c708:	bfbe      	ittt	lt
 800c70a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c70e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c712:	19a4      	addlt	r4, r4, r6
 800c714:	ea24 0408 	bic.w	r4, r4, r8
 800c718:	2500      	movs	r5, #0
 800c71a:	e7df      	b.n	800c6dc <floor+0x44>
 800c71c:	2e33      	cmp	r6, #51	; 0x33
 800c71e:	dd0b      	ble.n	800c738 <floor+0xa0>
 800c720:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c724:	d104      	bne.n	800c730 <floor+0x98>
 800c726:	4602      	mov	r2, r0
 800c728:	f7f3 fd20 	bl	800016c <__adddf3>
 800c72c:	4607      	mov	r7, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4638      	mov	r0, r7
 800c732:	4619      	mov	r1, r3
 800c734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c738:	f04f 32ff 	mov.w	r2, #4294967295
 800c73c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c740:	fa22 f808 	lsr.w	r8, r2, r8
 800c744:	ea18 0f00 	tst.w	r8, r0
 800c748:	d0f2      	beq.n	800c730 <floor+0x98>
 800c74a:	a311      	add	r3, pc, #68	; (adr r3, 800c790 <floor+0xf8>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f7f3 fd0c 	bl	800016c <__adddf3>
 800c754:	2200      	movs	r2, #0
 800c756:	2300      	movs	r3, #0
 800c758:	f7f4 f94e 	bl	80009f8 <__aeabi_dcmpgt>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d0bd      	beq.n	800c6dc <floor+0x44>
 800c760:	2c00      	cmp	r4, #0
 800c762:	da02      	bge.n	800c76a <floor+0xd2>
 800c764:	2e14      	cmp	r6, #20
 800c766:	d103      	bne.n	800c770 <floor+0xd8>
 800c768:	3401      	adds	r4, #1
 800c76a:	ea25 0508 	bic.w	r5, r5, r8
 800c76e:	e7b5      	b.n	800c6dc <floor+0x44>
 800c770:	2301      	movs	r3, #1
 800c772:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c776:	fa03 f606 	lsl.w	r6, r3, r6
 800c77a:	4435      	add	r5, r6
 800c77c:	42bd      	cmp	r5, r7
 800c77e:	bf38      	it	cc
 800c780:	18e4      	addcc	r4, r4, r3
 800c782:	e7f2      	b.n	800c76a <floor+0xd2>
 800c784:	2500      	movs	r5, #0
 800c786:	462c      	mov	r4, r5
 800c788:	e7a8      	b.n	800c6dc <floor+0x44>
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w
 800c790:	8800759c 	.word	0x8800759c
 800c794:	7e37e43c 	.word	0x7e37e43c
 800c798:	bff00000 	.word	0xbff00000
 800c79c:	000fffff 	.word	0x000fffff

0800c7a0 <matherr>:
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	4770      	bx	lr
 800c7a4:	0000      	movs	r0, r0
	...

0800c7a8 <scalbn>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	4616      	mov	r6, r2
 800c7ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	b982      	cbnz	r2, 800c7da <scalbn+0x32>
 800c7b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7bc:	4303      	orrs	r3, r0
 800c7be:	d034      	beq.n	800c82a <scalbn+0x82>
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <scalbn+0xd0>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f7f3 fe88 	bl	80004d8 <__aeabi_dmul>
 800c7c8:	4b2c      	ldr	r3, [pc, #176]	; (800c87c <scalbn+0xd4>)
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	429e      	cmp	r6, r3
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	da0d      	bge.n	800c7ee <scalbn+0x46>
 800c7d2:	a325      	add	r3, pc, #148	; (adr r3, 800c868 <scalbn+0xc0>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	e01c      	b.n	800c814 <scalbn+0x6c>
 800c7da:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c7de:	42ba      	cmp	r2, r7
 800c7e0:	d109      	bne.n	800c7f6 <scalbn+0x4e>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	f7f3 fcc2 	bl	800016c <__adddf3>
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	e01d      	b.n	800c82a <scalbn+0x82>
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7f4:	3a36      	subs	r2, #54	; 0x36
 800c7f6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c7fa:	4432      	add	r2, r6
 800c7fc:	428a      	cmp	r2, r1
 800c7fe:	dd0c      	ble.n	800c81a <scalbn+0x72>
 800c800:	4622      	mov	r2, r4
 800c802:	462b      	mov	r3, r5
 800c804:	a11a      	add	r1, pc, #104	; (adr r1, 800c870 <scalbn+0xc8>)
 800c806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c80a:	f000 f83b 	bl	800c884 <copysign>
 800c80e:	a318      	add	r3, pc, #96	; (adr r3, 800c870 <scalbn+0xc8>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f3 fe60 	bl	80004d8 <__aeabi_dmul>
 800c818:	e7e6      	b.n	800c7e8 <scalbn+0x40>
 800c81a:	2a00      	cmp	r2, #0
 800c81c:	dd08      	ble.n	800c830 <scalbn+0x88>
 800c81e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c822:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c826:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c82a:	4620      	mov	r0, r4
 800c82c:	4629      	mov	r1, r5
 800c82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c830:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c834:	da0b      	bge.n	800c84e <scalbn+0xa6>
 800c836:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c83a:	429e      	cmp	r6, r3
 800c83c:	4622      	mov	r2, r4
 800c83e:	462b      	mov	r3, r5
 800c840:	dce0      	bgt.n	800c804 <scalbn+0x5c>
 800c842:	a109      	add	r1, pc, #36	; (adr r1, 800c868 <scalbn+0xc0>)
 800c844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c848:	f000 f81c 	bl	800c884 <copysign>
 800c84c:	e7c1      	b.n	800c7d2 <scalbn+0x2a>
 800c84e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c852:	3236      	adds	r2, #54	; 0x36
 800c854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c858:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	2200      	movs	r2, #0
 800c862:	4b07      	ldr	r3, [pc, #28]	; (800c880 <scalbn+0xd8>)
 800c864:	e7d6      	b.n	800c814 <scalbn+0x6c>
 800c866:	bf00      	nop
 800c868:	c2f8f359 	.word	0xc2f8f359
 800c86c:	01a56e1f 	.word	0x01a56e1f
 800c870:	8800759c 	.word	0x8800759c
 800c874:	7e37e43c 	.word	0x7e37e43c
 800c878:	43500000 	.word	0x43500000
 800c87c:	ffff3cb0 	.word	0xffff3cb0
 800c880:	3c900000 	.word	0x3c900000

0800c884 <copysign>:
 800c884:	b530      	push	{r4, r5, lr}
 800c886:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c88a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c88e:	ea42 0503 	orr.w	r5, r2, r3
 800c892:	4629      	mov	r1, r5
 800c894:	bd30      	pop	{r4, r5, pc}
	...

0800c898 <_init>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	bf00      	nop
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr

0800c8a4 <_fini>:
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	bf00      	nop
 800c8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8aa:	bc08      	pop	{r3}
 800c8ac:	469e      	mov	lr, r3
 800c8ae:	4770      	bx	lr
