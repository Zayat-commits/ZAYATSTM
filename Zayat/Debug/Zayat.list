
Zayat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800a9c8  0800a9c8  0001a9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f8  0800b0f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0f8  0800b0f8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0f8  0800b0f8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ea4  200001e4  0800b2e4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004088  0800b2e4  00024088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7f2  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003233  00000000  00000000  0003a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  0003dc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001478  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015dee  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001160a  00000000  00000000  0005645e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ec27  00000000  00000000  00067a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e668f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a30  00000000  00000000  000e670c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9b0 	.word	0x0800a9b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a9b0 	.word	0x0800a9b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <ARM_Motors>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;
extern TIM_OC_InitTypeDef sConfigOCZayat;

void ARM_Motors(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	sConfigOCZayat.Pulse = 1.2 * ONE_MS;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <ARM_Motors+0x80>)
 8001116:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800111a:	605a      	str	r2, [r3, #4]
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 800111c:	2200      	movs	r2, #0
 800111e:	491c      	ldr	r1, [pc, #112]	; (8001190 <ARM_Motors+0x80>)
 8001120:	481c      	ldr	r0, [pc, #112]	; (8001194 <ARM_Motors+0x84>)
 8001122:	f002 ff35 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <ARM_Motors+0x20>
   {
	 Error_Handler();
 800112c:	f001 fada 	bl	80026e4 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 8001130:	2204      	movs	r2, #4
 8001132:	4917      	ldr	r1, [pc, #92]	; (8001190 <ARM_Motors+0x80>)
 8001134:	4817      	ldr	r0, [pc, #92]	; (8001194 <ARM_Motors+0x84>)
 8001136:	f002 ff2b 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <ARM_Motors+0x34>
   {
	 Error_Handler();
 8001140:	f001 fad0 	bl	80026e4 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 8001144:	2208      	movs	r2, #8
 8001146:	4912      	ldr	r1, [pc, #72]	; (8001190 <ARM_Motors+0x80>)
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <ARM_Motors+0x84>)
 800114a:	f002 ff21 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <ARM_Motors+0x48>
   {
	 Error_Handler();
 8001154:	f001 fac6 	bl	80026e4 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 8001158:	220c      	movs	r2, #12
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <ARM_Motors+0x80>)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <ARM_Motors+0x84>)
 800115e:	f002 ff17 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <ARM_Motors+0x5c>
   {
	 Error_Handler();
 8001168:	f001 fabc 	bl	80026e4 <Error_Handler>
   }
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <ARM_Motors+0x84>)
 8001170:	f002 fdd4 	bl	8003d1c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001174:	2108      	movs	r1, #8
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <ARM_Motors+0x84>)
 8001178:	f002 fdd0 	bl	8003d1c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800117c:	2104      	movs	r1, #4
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <ARM_Motors+0x84>)
 8001180:	f002 fdcc 	bl	8003d1c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001184:	210c      	movs	r1, #12
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <ARM_Motors+0x84>)
 8001188:	f002 fdc8 	bl	8003d1c <HAL_TIM_PWM_Start>

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000200 	.word	0x20000200
 8001194:	20003f80 	.word	0x20003f80

08001198 <PWM>:
	 * 		-Motor 4 = CHANNEL_1						 /  \
	 * 													3    4
	 *
	 */
void PWM(u16 dutyCycle, u8 motorNumber)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	717b      	strb	r3, [r7, #5]
	u16 temp = dutyCycle * ONE_MS / 100 + ONE_MS;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <PWM+0xd0>)
 80011b4:	fb82 1203 	smull	r1, r2, r2, r3
 80011b8:	1152      	asrs	r2, r2, #5
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80011c4:	81fb      	strh	r3, [r7, #14]

	switch(motorNumber)
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d846      	bhi.n	800125c <PWM+0xc4>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <PWM+0x3c>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	08001203 	.word	0x08001203
 80011dc:	08001221 	.word	0x08001221
 80011e0:	0800123f 	.word	0x0800123f
	{
	case 1:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 80011e4:	2200      	movs	r2, #0
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <PWM+0xd4>)
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <PWM+0xd8>)
 80011ea:	f002 fed1 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <PWM+0x60>
		   {
			 Error_Handler();
 80011f4:	f001 fa76 	bl	80026e4 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <PWM+0xd8>)
 80011fc:	f002 fd8e 	bl	8003d1c <HAL_TIM_PWM_Start>
		   break;
 8001200:	e02e      	b.n	8001260 <PWM+0xc8>
	case 2:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 8001202:	2204      	movs	r2, #4
 8001204:	4919      	ldr	r1, [pc, #100]	; (800126c <PWM+0xd4>)
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <PWM+0xd8>)
 8001208:	f002 fec2 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <PWM+0x7e>
		   {
			 Error_Handler();
 8001212:	f001 fa67 	bl	80026e4 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001216:	2104      	movs	r1, #4
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <PWM+0xd8>)
 800121a:	f002 fd7f 	bl	8003d1c <HAL_TIM_PWM_Start>
		   break;
 800121e:	e01f      	b.n	8001260 <PWM+0xc8>
	case 3:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 8001220:	2208      	movs	r2, #8
 8001222:	4912      	ldr	r1, [pc, #72]	; (800126c <PWM+0xd4>)
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <PWM+0xd8>)
 8001226:	f002 feb3 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <PWM+0x9c>
		   {
			 Error_Handler();
 8001230:	f001 fa58 	bl	80026e4 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001234:	2108      	movs	r1, #8
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <PWM+0xd8>)
 8001238:	f002 fd70 	bl	8003d1c <HAL_TIM_PWM_Start>
		   break;
 800123c:	e010      	b.n	8001260 <PWM+0xc8>
	case 4:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 800123e:	220c      	movs	r2, #12
 8001240:	490a      	ldr	r1, [pc, #40]	; (800126c <PWM+0xd4>)
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <PWM+0xd8>)
 8001244:	f002 fea4 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <PWM+0xba>
		   {
			 Error_Handler();
 800124e:	f001 fa49 	bl	80026e4 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001252:	210c      	movs	r1, #12
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <PWM+0xd8>)
 8001256:	f002 fd61 	bl	8003d1c <HAL_TIM_PWM_Start>
		   break;
 800125a:	e001      	b.n	8001260 <PWM+0xc8>
	default:
		ARM_Motors();
 800125c:	f7ff ff58 	bl	8001110 <ARM_Motors>
	}
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	51eb851f 	.word	0x51eb851f
 800126c:	20000200 	.word	0x20000200
 8001270:	20003f80 	.word	0x20003f80

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f001 fcb0 	bl	8002bdc <HAL_Init>

  /* USER CODE BEGIN Init */
  vInitPARAMETERS(&parameter);
 800127c:	483d      	ldr	r0, [pc, #244]	; (8001374 <main+0x100>)
 800127e:	f000 faaf 	bl	80017e0 <vInitPARAMETERS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f8b9 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f000 fa25 	bl	80016d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800128a:	f000 f8fd 	bl	8001488 <MX_I2C1_Init>
  MX_TIM2_Init();
 800128e:	f000 f929 	bl	80014e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001292:	f000 f9cb 	bl	800162c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001296:	f000 f9f3 	bl	8001680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800129a:	2100      	movs	r1, #0
 800129c:	4836      	ldr	r0, [pc, #216]	; (8001378 <main+0x104>)
 800129e:	f002 fd3d 	bl	8003d1c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012a2:	f003 fdc1 	bl	8004e28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BODY_RATES */
  BODY_RATESHandle = osThreadNew(BodyRate, (void*) p, &BODY_RATES_attributes);
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <main+0x108>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a35      	ldr	r2, [pc, #212]	; (8001380 <main+0x10c>)
 80012ac:	4619      	mov	r1, r3
 80012ae:	4835      	ldr	r0, [pc, #212]	; (8001384 <main+0x110>)
 80012b0:	f003 fe20 	bl	8004ef4 <osThreadNew>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x114>)
 80012b8:	601a      	str	r2, [r3, #0]

  /* creation of DRONE_START */
  DRONE_STARTHandle = osThreadNew(DroneStart, (void*) p, &DRONE_START_attributes);
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <main+0x108>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a33      	ldr	r2, [pc, #204]	; (800138c <main+0x118>)
 80012c0:	4619      	mov	r1, r3
 80012c2:	4833      	ldr	r0, [pc, #204]	; (8001390 <main+0x11c>)
 80012c4:	f003 fe16 	bl	8004ef4 <osThreadNew>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <main+0x120>)
 80012cc:	601a      	str	r2, [r3, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(MPU, (void*) p, &IMU_attributes);
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <main+0x108>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <main+0x124>)
 80012d4:	4619      	mov	r1, r3
 80012d6:	4831      	ldr	r0, [pc, #196]	; (800139c <main+0x128>)
 80012d8:	f003 fe0c 	bl	8004ef4 <osThreadNew>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <main+0x12c>)
 80012e0:	601a      	str	r2, [r3, #0]

  /* creation of PRINT_TTL */
  PRINT_TTLHandle = osThreadNew(PrintPARAMS, (void*) p, &PRINT_TTL_attributes);
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <main+0x108>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <main+0x130>)
 80012e8:	4619      	mov	r1, r3
 80012ea:	482f      	ldr	r0, [pc, #188]	; (80013a8 <main+0x134>)
 80012ec:	f003 fe02 	bl	8004ef4 <osThreadNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <main+0x138>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of INSERT_PARAMETE */
  INSERT_PARAMETEHandle = osThreadNew(insertPARAMS, (void*) p, &INSERT_PARAMETE_attributes);
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <main+0x108>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <main+0x13c>)
 80012fc:	4619      	mov	r1, r3
 80012fe:	482d      	ldr	r0, [pc, #180]	; (80013b4 <main+0x140>)
 8001300:	f003 fdf8 	bl	8004ef4 <osThreadNew>
 8001304:	4602      	mov	r2, r0
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <main+0x144>)
 8001308:	601a      	str	r2, [r3, #0]

  /* creation of OUTPUT_THRUST */
  OUTPUT_THRUSTHandle = osThreadNew(outputTHRUST, (void*) p, &OUTPUT_THRUST_attributes);
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <main+0x108>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <main+0x148>)
 8001310:	4619      	mov	r1, r3
 8001312:	482b      	ldr	r0, [pc, #172]	; (80013c0 <main+0x14c>)
 8001314:	f003 fdee 	bl	8004ef4 <osThreadNew>
 8001318:	4602      	mov	r2, r0
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <main+0x150>)
 800131c:	601a      	str	r2, [r3, #0]

  /* creation of ROLL_PITCH */
  ROLL_PITCHHandle = osThreadNew(RollPitch, (void*) p, &ROLL_PITCH_attributes);
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <main+0x108>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <main+0x154>)
 8001324:	4619      	mov	r1, r3
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <main+0x158>)
 8001328:	f003 fde4 	bl	8004ef4 <osThreadNew>
 800132c:	4602      	mov	r2, r0
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <main+0x15c>)
 8001330:	601a      	str	r2, [r3, #0]

  /* creation of YAW */
  YAWHandle = osThreadNew(YawCONTROLLER, (void*) p, &YAW_attributes);
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <main+0x108>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <main+0x160>)
 8001338:	4619      	mov	r1, r3
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <main+0x164>)
 800133c:	f003 fdda 	bl	8004ef4 <osThreadNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <main+0x168>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of ALTITUDE_CONTRO */
  ALTITUDE_CONTROHandle = osThreadNew(Altitude, (void*) p, &ALTITUDE_CONTRO_attributes);
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <main+0x108>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <main+0x16c>)
 800134c:	4619      	mov	r1, r3
 800134e:	4825      	ldr	r0, [pc, #148]	; (80013e4 <main+0x170>)
 8001350:	f003 fdd0 	bl	8004ef4 <osThreadNew>
 8001354:	4602      	mov	r2, r0
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <main+0x174>)
 8001358:	601a      	str	r2, [r3, #0]

  /* creation of LATERAL_CONTROL */
  LATERAL_CONTROLHandle = osThreadNew(lateral, (void*) p, &LATERAL_CONTROL_attributes);
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <main+0x108>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <main+0x178>)
 8001360:	4619      	mov	r1, r3
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <main+0x17c>)
 8001364:	f003 fdc6 	bl	8004ef4 <osThreadNew>
 8001368:	4602      	mov	r2, r0
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x180>)
 800136c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800136e:	f003 fd8d 	bl	8004e8c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001372:	e7fe      	b.n	8001372 <main+0xfe>
 8001374:	20003e1c 	.word	0x20003e1c
 8001378:	20003f80 	.word	0x20003f80
 800137c:	20000000 	.word	0x20000000
 8001380:	0800ab44 	.word	0x0800ab44
 8001384:	08001989 	.word	0x08001989
 8001388:	20003e14 	.word	0x20003e14
 800138c:	0800ab68 	.word	0x0800ab68
 8001390:	08001aa1 	.word	0x08001aa1
 8001394:	20003f78 	.word	0x20003f78
 8001398:	0800ab8c 	.word	0x0800ab8c
 800139c:	08001b01 	.word	0x08001b01
 80013a0:	20003f28 	.word	0x20003f28
 80013a4:	0800abb0 	.word	0x0800abb0
 80013a8:	08001b11 	.word	0x08001b11
 80013ac:	20003f6c 	.word	0x20003f6c
 80013b0:	0800abd4 	.word	0x0800abd4
 80013b4:	08001c21 	.word	0x08001c21
 80013b8:	20003f24 	.word	0x20003f24
 80013bc:	0800abf8 	.word	0x0800abf8
 80013c0:	08001f49 	.word	0x08001f49
 80013c4:	20003f74 	.word	0x20003f74
 80013c8:	0800ac1c 	.word	0x0800ac1c
 80013cc:	08002181 	.word	0x08002181
 80013d0:	20003f70 	.word	0x20003f70
 80013d4:	0800ac40 	.word	0x0800ac40
 80013d8:	080024b9 	.word	0x080024b9
 80013dc:	20003f7c 	.word	0x20003f7c
 80013e0:	0800ac64 	.word	0x0800ac64
 80013e4:	080024f9 	.word	0x080024f9
 80013e8:	20003e10 	.word	0x20003e10
 80013ec:	0800ac88 	.word	0x0800ac88
 80013f0:	08002611 	.word	0x08002611
 80013f4:	20003e18 	.word	0x20003e18

080013f8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	2228      	movs	r2, #40	; 0x28
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f006 f9e1 	bl	80077ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142c:	2302      	movs	r3, #2
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001436:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4618      	mov	r0, r3
 8001442:	f001 ff77 	bl	8003334 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800144c:	f001 f94a 	bl	80026e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2102      	movs	r1, #2
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f9e2 	bl	8003834 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001476:	f001 f935 	bl	80026e4 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800147a:	f002 fac5 	bl	8003a08 <HAL_RCC_EnableCSS>
}
 800147e:	bf00      	nop
 8001480:	3740      	adds	r7, #64	; 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x50>)
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <MX_I2C1_Init+0x54>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_I2C1_Init+0x50>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_I2C1_Init+0x58>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c6:	f001 fe0d 	bl	80030e4 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d0:	f001 f908 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20003ed0 	.word	0x20003ed0
 80014dc:	40005400 	.word	0x40005400
 80014e0:	000186a0 	.word	0x000186a0

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <MX_TIM2_Init+0x140>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60;
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <MX_TIM2_Init+0x140>)
 800151e:	223c      	movs	r2, #60	; 0x3c
 8001520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <MX_TIM2_Init+0x140>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <MX_TIM2_Init+0x140>)
 800152a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800152e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <MX_TIM2_Init+0x140>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <MX_TIM2_Init+0x140>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153c:	4839      	ldr	r0, [pc, #228]	; (8001624 <MX_TIM2_Init+0x140>)
 800153e:	f002 fb6b 	bl	8003c18 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001548:	f001 f8cc 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	4619      	mov	r1, r3
 8001558:	4832      	ldr	r0, [pc, #200]	; (8001624 <MX_TIM2_Init+0x140>)
 800155a:	f002 fddf 	bl	800411c <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001564:	f001 f8be 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001568:	482e      	ldr	r0, [pc, #184]	; (8001624 <MX_TIM2_Init+0x140>)
 800156a:	f002 fba3 	bl	8003cb4 <HAL_TIM_PWM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001574:	f001 f8b6 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4619      	mov	r1, r3
 8001586:	4827      	ldr	r0, [pc, #156]	; (8001624 <MX_TIM2_Init+0x140>)
 8001588:	f003 f948 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001592:	f001 f8a7 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	; 0x60
 8001598:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	4619      	mov	r1, r3
 80015ac:	481d      	ldr	r0, [pc, #116]	; (8001624 <MX_TIM2_Init+0x140>)
 80015ae:	f002 fcef 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015b8:	f001 f894 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015bc:	2304      	movs	r3, #4
 80015be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2204      	movs	r2, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4817      	ldr	r0, [pc, #92]	; (8001624 <MX_TIM2_Init+0x140>)
 80015c8:	f002 fce2 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80015d2:	f001 f887 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2208      	movs	r2, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_TIM2_Init+0x140>)
 80015de:	f002 fcd7 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80015e8:	f001 f87c 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	220c      	movs	r2, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM2_Init+0x140>)
 80015f4:	f002 fccc 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80015fe:	f001 f871 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOCZayat = sConfigOC;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_TIM2_Init+0x144>)
 8001604:	461d      	mov	r5, r3
 8001606:	1d3c      	adds	r4, r7, #4
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001610:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM2_Init+0x140>)
 8001616:	f001 f8fd 	bl	8002814 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	; 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	20003f80 	.word	0x20003f80
 8001628:	20000200 	.word	0x20000200

0800162c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_USART1_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART1_UART_Init+0x4c>)
 8001664:	f003 f930 	bl	80048c8 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f001 f839 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20003f2c 	.word	0x20003f2c
 800167c:	40013800 	.word	0x40013800

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f003 f906 	bl	80048c8 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f001 f80f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20003fc0 	.word	0x20003fc0
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <MX_GPIO_Init+0xa8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <MX_GPIO_Init+0xa8>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_GPIO_Init+0xa8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_GPIO_Init+0xa8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <MX_GPIO_Init+0xa8>)
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_GPIO_Init+0xa8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_GPIO_Init+0xa8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <MX_GPIO_Init+0xa8>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_GPIO_Init+0xa8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_GPIO_Init+0xa8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <MX_GPIO_Init+0xa8>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_GPIO_Init+0xa8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_GPIO_Init+0xac>)
 8001750:	f001 fcb0 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4619      	mov	r1, r3
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_GPIO_Init+0xac>)
 800176e:	f001 fb47 	bl	8002e00 <HAL_GPIO_Init>

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40011000 	.word	0x40011000

08001784 <string_receive>:

/* USER CODE BEGIN 4 */
void string_receive(s8* buffer)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(&huart1, &buffer[i], 1, HAL_MAX_DELAY);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	18d1      	adds	r1, r2, r3
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	2201      	movs	r2, #1
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <string_receive+0x58>)
 800179e:	f003 f979 	bl	8004a94 <HAL_UART_Receive>
	while(buffer[i]!='#')
 80017a2:	e00b      	b.n	80017bc <string_receive+0x38>
	{
		i++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive(&huart1, &buffer[i], 1, HAL_MAX_DELAY);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	18d1      	adds	r1, r2, r3
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	2201      	movs	r2, #1
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <string_receive+0x58>)
 80017b8:	f003 f96c 	bl	8004a94 <HAL_UART_Receive>
	while(buffer[i]!='#')
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	f993 3000 	ldrsb.w	r3, [r3]
 80017c6:	2b23      	cmp	r3, #35	; 0x23
 80017c8:	d1ec      	bne.n	80017a4 <string_receive+0x20>
	}
	buffer[i] = '\0';
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20003f2c 	.word	0x20003f2c

080017e0 <vInitPARAMETERS>:
void vInitPARAMETERS(parameters *ptr)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	/***********************************/
	/*TO INITIALIZE ALL PARAMETERS TO 0*/
	/***********************************/
	ptr->x = ptr->y = ptr->z = 0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
	ptr->x_dot = ptr->y_dot = ptr->z_dot = 0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
	ptr->x_dot_dot = ptr->y_dot_dot = ptr->z_dot_dot = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	61da      	str	r2, [r3, #28]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
	ptr->phi = ptr->theta = ptr->psi = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
	ptr->phi_dot = ptr->theta_dot = ptr->psi_dot = 0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
	ptr->p = ptr->q = ptr->r = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	651a      	str	r2, [r3, #80]	; 0x50
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	649a      	str	r2, [r3, #72]	; 0x48
	ptr->p_dot = ptr->q_dot = ptr->r_dot = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
	ptr->x_cmd = ptr->y_cmd = ptr->z_cmd = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	669a      	str	r2, [r3, #104]	; 0x68
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	665a      	str	r2, [r3, #100]	; 0x64
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	661a      	str	r2, [r3, #96]	; 0x60
	ptr->x_dot_cmd = ptr->y_dot_cmd = ptr->z_dot_cmd = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	675a      	str	r2, [r3, #116]	; 0x74
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	671a      	str	r2, [r3, #112]	; 0x70
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	66da      	str	r2, [r3, #108]	; 0x6c
	ptr->x_dot_dot_cmd = ptr->y_dot_dot_cmd = ptr->z_dot_dot_cmd = 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	67da      	str	r2, [r3, #124]	; 0x7c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->psi_cmd = ptr->p_cmd = ptr->q_cmd = ptr->r_cmd = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptr->u1 = ptr->u2 = ptr->u3 = ptr->u4 = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptr->cmd_thrust[0] = 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ptr-> phib=ptr-> thetab=ptr-> psib=0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	0000      	movs	r0, r0
 8001984:	0000      	movs	r0, r0
	...

08001988 <BodyRate>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_BodyRate */
void BodyRate(void *argument)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	parameters* ptr = argument;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	617b      	str	r3, [r7, #20]
  /* Infinite loop */

  for(;;)
  {
		f32 p_error,q_error,r_error;
		p_error = ptr->p_cmd - ptr->p;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7ff f8e5 	bl	8000b70 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]
		q_error = ptr->q_cmd - ptr->q;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff f8da 	bl	8000b70 <__aeabi_fsub>
 80019bc:	4603      	mov	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]
		r_error = ptr->r_cmd - ptr->r;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff f8cf 	bl	8000b70 <__aeabi_fsub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	60bb      	str	r3, [r7, #8]
		ptr->p_dot = kp_p * p_error;
 80019d6:	4930      	ldr	r1, [pc, #192]	; (8001a98 <BodyRate+0x110>)
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff f9d3 	bl	8000d84 <__aeabi_fmul>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
		ptr->q_dot = kp_q * q_error;
 80019e6:	492c      	ldr	r1, [pc, #176]	; (8001a98 <BodyRate+0x110>)
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff f9cb 	bl	8000d84 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58
		ptr->r_dot = kp_r * r_error;
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <BodyRate+0x114>)
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f7ff f9c3 	bl	8000d84 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c
		ptr->u2 = Ixx * ptr->p_dot;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd0c 	bl	8000428 <__aeabi_f2d>
 8001a10:	a31d      	add	r3, pc, #116	; (adr r3, 8001a88 <BodyRate+0x100>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fd5f 	bl	80004d8 <__aeabi_dmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	f7ff f851 	bl	8000ac8 <__aeabi_d2f>
 8001a26:	4602      	mov	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		ptr->u3 = Iyy * ptr->q_dot;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fcf8 	bl	8000428 <__aeabi_f2d>
 8001a38:	a313      	add	r3, pc, #76	; (adr r3, 8001a88 <BodyRate+0x100>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fd4b 	bl	80004d8 <__aeabi_dmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	f7ff f83d 	bl	8000ac8 <__aeabi_d2f>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		ptr->u4 = Izz * ptr->r_dot;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fce4 	bl	8000428 <__aeabi_f2d>
 8001a60:	a30b      	add	r3, pc, #44	; (adr r3, 8001a90 <BodyRate+0x108>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fd37 	bl	80004d8 <__aeabi_dmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f7ff f829 	bl	8000ac8 <__aeabi_d2f>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		osDelay(20);
 8001a7e:	2014      	movs	r0, #20
 8001a80:	f003 fae2 	bl	8005048 <osDelay>
  {
 8001a84:	e786      	b.n	8001994 <BodyRate+0xc>
 8001a86:	bf00      	nop
 8001a88:	47ae147b 	.word	0x47ae147b
 8001a8c:	3fb47ae1 	.word	0x3fb47ae1
 8001a90:	9142b303 	.word	0x9142b303
 8001a94:	3f44e7ee 	.word	0x3f44e7ee
 8001a98:	42a00000 	.word	0x42a00000
 8001a9c:	41700000 	.word	0x41700000

08001aa0 <DroneStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DroneStart */
void DroneStart(void *argument)
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DroneStart */

	/*TO CALIBRATE DRONE MOTOR OR START*/
	u8 buffer[20] = {"Calibrate = 0#\nDirect Start = 1#\n"};
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <DroneStart+0x58>)
 8001aaa:	f107 040c 	add.w	r4, r7, #12
 8001aae:	461d      	mov	r5, r3
 8001ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fb47 	bl	8000150 <strlen>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f107 010c 	add.w	r1, r7, #12
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <DroneStart+0x5c>)
 8001ad0:	f002 ff47 	bl	8004962 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fb39 	bl	8000150 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f107 010c 	add.w	r1, r7, #12
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <DroneStart+0x5c>)
 8001aec:	f002 ffd2 	bl	8004a94 <HAL_UART_Receive>
			break;
	default: vCalibrate_Motors();
		}
	vTaskDelete(NULL);
	*/
    osDelay(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f003 faa9 	bl	8005048 <osDelay>
 8001af6:	e7fb      	b.n	8001af0 <DroneStart+0x50>
 8001af8:	0800aa40 	.word	0x0800aa40
 8001afc:	20003f2c 	.word	0x20003f2c

08001b00 <MPU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU */
void MPU(void *argument)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f003 fa9d 	bl	8005048 <osDelay>
 8001b0e:	e7fb      	b.n	8001b08 <MPU+0x8>

08001b10 <PrintPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PrintPARAMS */
void PrintPARAMS(void *argument)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PrintPARAMS */
	s8 buffer[20];
	parameters *ptr = argument;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	61fb      	str	r3, [r7, #28]
  {
		/***********************************/
		/*TO READ FORCE VALS IN WORLD FRAME*/
		/***********************************/

sprintf(buffer, "Value of F1 = %f\t", ptr->cmd_thrust[0]);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fc80 	bl	8000428 <__aeabi_f2d>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	f107 0008 	add.w	r0, r7, #8
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <PrintPARAMS+0xfc>)
 8001b36:	f006 faa1 	bl	800807c <siprintf>
HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fb06 	bl	8000150 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f107 0108 	add.w	r1, r7, #8
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	482f      	ldr	r0, [pc, #188]	; (8001c10 <PrintPARAMS+0x100>)
 8001b52:	f002 ff06 	bl	8004962 <HAL_UART_Transmit>

sprintf(buffer, "Value of F2 = %f\t", ptr->cmd_thrust[1]);
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc63 	bl	8000428 <__aeabi_f2d>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	f107 0008 	add.w	r0, r7, #8
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	4929      	ldr	r1, [pc, #164]	; (8001c14 <PrintPARAMS+0x104>)
 8001b70:	f006 fa84 	bl	800807c <siprintf>
HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fae9 	bl	8000150 <strlen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f107 0108 	add.w	r1, r7, #8
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	4821      	ldr	r0, [pc, #132]	; (8001c10 <PrintPARAMS+0x100>)
 8001b8c:	f002 fee9 	bl	8004962 <HAL_UART_Transmit>

sprintf(buffer, "Value of F3 = %f\n", ptr->cmd_thrust[2]);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc46 	bl	8000428 <__aeabi_f2d>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	f107 0008 	add.w	r0, r7, #8
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	491b      	ldr	r1, [pc, #108]	; (8001c18 <PrintPARAMS+0x108>)
 8001baa:	f006 fa67 	bl	800807c <siprintf>
HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe facc 	bl	8000150 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	f107 0108 	add.w	r1, r7, #8
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <PrintPARAMS+0x100>)
 8001bc6:	f002 fecc 	bl	8004962 <HAL_UART_Transmit>

sprintf(buffer, "Value of F4 = %f\n", ptr->cmd_thrust[3]);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc29 	bl	8000428 <__aeabi_f2d>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	f107 0008 	add.w	r0, r7, #8
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	490e      	ldr	r1, [pc, #56]	; (8001c1c <PrintPARAMS+0x10c>)
 8001be4:	f006 fa4a 	bl	800807c <siprintf>
HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe faaf 	bl	8000150 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	f107 0108 	add.w	r1, r7, #8
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	4804      	ldr	r0, [pc, #16]	; (8001c10 <PrintPARAMS+0x100>)
 8001c00:	f002 feaf 	bl	8004962 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
//
//		dtostrf( ptr->z_dot_dot, 7, 5, float_ );
//		sprintf(buffer, "Value of zdotdot = %s\n", float_);
//		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
	osDelay(40);
 8001c04:	2028      	movs	r0, #40	; 0x28
 8001c06:	f003 fa1f 	bl	8005048 <osDelay>
  {
 8001c0a:	e787      	b.n	8001b1c <PrintPARAMS+0xc>
 8001c0c:	0800aa64 	.word	0x0800aa64
 8001c10:	20003f2c 	.word	0x20003f2c
 8001c14:	0800aa78 	.word	0x0800aa78
 8001c18:	0800aa8c 	.word	0x0800aa8c
 8001c1c:	0800aaa0 	.word	0x0800aaa0

08001c20 <insertPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_insertPARAMS */
void insertPARAMS(void *argument)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b08b      	sub	sp, #44	; 0x2c
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN insertPARAMS */
	parameters *ptr = argument;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	s8 buffer[20];
	s8 ok[] = {"ok"};
 8001c2c:	4abc      	ldr	r2, [pc, #752]	; (8001f20 <insertPARAMS+0x300>)
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	8019      	strh	r1, [r3, #0]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	0c12      	lsrs	r2, r2, #16
 8001c3c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		/*TO INSERT X Y Z TARGET TO PID BLK*/
	strcpy(buffer, "Insert x\n");
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4ab8      	ldr	r2, [pc, #736]	; (8001f24 <insertPARAMS+0x304>)
 8001c44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c46:	c303      	stmia	r3!, {r0, r1}
 8001c48:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fa7e 	bl	8000150 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	f107 0110 	add.w	r1, r7, #16
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	48b1      	ldr	r0, [pc, #708]	; (8001f28 <insertPARAMS+0x308>)
 8001c62:	f002 fe7e 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fd8a 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fa6b 	bl	8000150 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f107 010c 	add.w	r1, r7, #12
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	48a8      	ldr	r0, [pc, #672]	; (8001f28 <insertPARAMS+0x308>)
 8001c88:	f002 fe6b 	bl	8004962 <HAL_UART_Transmit>

	ptr->x_cmd = atoi(buffer);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4618      	mov	r0, r3
 8001c92:	f005 fd63 	bl	800775c <atoi>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f81f 	bl	8000cdc <__aeabi_i2f>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	661a      	str	r2, [r3, #96]	; 0x60
	strcpy(buffer, "Insert x dot\n");
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4aa0      	ldr	r2, [pc, #640]	; (8001f2c <insertPARAMS+0x30c>)
 8001caa:	461c      	mov	r4, r3
 8001cac:	4613      	mov	r3, r2
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	c407      	stmia	r4!, {r0, r1, r2}
 8001cb2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fa49 	bl	8000150 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	f107 0110 	add.w	r1, r7, #16
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	4897      	ldr	r0, [pc, #604]	; (8001f28 <insertPARAMS+0x308>)
 8001ccc:	f002 fe49 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fd55 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fa36 	bl	8000150 <strlen>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f107 010c 	add.w	r1, r7, #12
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	488d      	ldr	r0, [pc, #564]	; (8001f28 <insertPARAMS+0x308>)
 8001cf2:	f002 fe36 	bl	8004962 <HAL_UART_Transmit>

	ptr->x_dot_cmd = atoi(buffer);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fd2e 	bl	800775c <atoi>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe ffea 	bl	8000cdc <__aeabi_i2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	66da      	str	r2, [r3, #108]	; 0x6c
	strcpy(buffer, "Insert y\n");
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <insertPARAMS+0x310>)
 8001d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d16:	c303      	stmia	r3!, {r0, r1}
 8001d18:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fa16 	bl	8000150 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f107 0110 	add.w	r1, r7, #16
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	487d      	ldr	r0, [pc, #500]	; (8001f28 <insertPARAMS+0x308>)
 8001d32:	f002 fe16 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fd22 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fa03 	bl	8000150 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f107 010c 	add.w	r1, r7, #12
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	4874      	ldr	r0, [pc, #464]	; (8001f28 <insertPARAMS+0x308>)
 8001d58:	f002 fe03 	bl	8004962 <HAL_UART_Transmit>

	ptr->y_cmd = atoi(buffer);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 fcfb 	bl	800775c <atoi>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ffb7 	bl	8000cdc <__aeabi_i2f>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	665a      	str	r2, [r3, #100]	; 0x64
	strcpy(buffer, "Insert y dot\n");
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4a6e      	ldr	r2, [pc, #440]	; (8001f34 <insertPARAMS+0x314>)
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d80:	c407      	stmia	r4!, {r0, r1, r2}
 8001d82:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe f9e1 	bl	8000150 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f107 0110 	add.w	r1, r7, #16
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	4863      	ldr	r0, [pc, #396]	; (8001f28 <insertPARAMS+0x308>)
 8001d9c:	f002 fde1 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fced 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe f9ce 	bl	8000150 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f107 010c 	add.w	r1, r7, #12
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	4859      	ldr	r0, [pc, #356]	; (8001f28 <insertPARAMS+0x308>)
 8001dc2:	f002 fdce 	bl	8004962 <HAL_UART_Transmit>

	ptr->y_dot_cmd = atoi(buffer);
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fcc6 	bl	800775c <atoi>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff82 	bl	8000cdc <__aeabi_i2f>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	671a      	str	r2, [r3, #112]	; 0x70
	strcpy(buffer, "Insert z\n");
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <insertPARAMS+0x318>)
 8001de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de6:	c303      	stmia	r3!, {r0, r1}
 8001de8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe f9ae 	bl	8000150 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f107 0110 	add.w	r1, r7, #16
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	4849      	ldr	r0, [pc, #292]	; (8001f28 <insertPARAMS+0x308>)
 8001e02:	f002 fdae 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fcba 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f99b 	bl	8000150 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	f107 010c 	add.w	r1, r7, #12
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	4840      	ldr	r0, [pc, #256]	; (8001f28 <insertPARAMS+0x308>)
 8001e28:	f002 fd9b 	bl	8004962 <HAL_UART_Transmit>

	ptr->z_cmd = atoi(buffer);
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fc93 	bl	800775c <atoi>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff4f 	bl	8000cdc <__aeabi_i2f>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	669a      	str	r2, [r3, #104]	; 0x68
	strcpy(buffer, "Insert z dot\n");
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <insertPARAMS+0x31c>)
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e50:	c407      	stmia	r4!, {r0, r1, r2}
 8001e52:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe f979 	bl	8000150 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f107 0110 	add.w	r1, r7, #16
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	482f      	ldr	r0, [pc, #188]	; (8001f28 <insertPARAMS+0x308>)
 8001e6c:	f002 fd79 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fc85 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe f966 	bl	8000150 <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f107 010c 	add.w	r1, r7, #12
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	4825      	ldr	r0, [pc, #148]	; (8001f28 <insertPARAMS+0x308>)
 8001e92:	f002 fd66 	bl	8004962 <HAL_UART_Transmit>

	ptr->z_dot_cmd = atoi(buffer);
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fc5e 	bl	800775c <atoi>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe ff1a 	bl	8000cdc <__aeabi_i2f>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	675a      	str	r2, [r3, #116]	; 0x74
	strcpy(buffer, "Insert psi\n");
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <insertPARAMS+0x320>)
 8001eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f946 	bl	8000150 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f107 0110 	add.w	r1, r7, #16
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	4815      	ldr	r0, [pc, #84]	; (8001f28 <insertPARAMS+0x308>)
 8001ed2:	f002 fd46 	bl	8004962 <HAL_UART_Transmit>
	string_receive(buffer);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fc52 	bl	8001784 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe f933 	bl	8000150 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f107 010c 	add.w	r1, r7, #12
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	480c      	ldr	r0, [pc, #48]	; (8001f28 <insertPARAMS+0x308>)
 8001ef8:	f002 fd33 	bl	8004962 <HAL_UART_Transmit>

	ptr->psi_cmd = atoi(buffer);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 fc2b 	bl	800775c <atoi>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fee7 	bl	8000cdc <__aeabi_i2f>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	osDelay(60000);
 8001f16:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001f1a:	f003 f895 	bl	8005048 <osDelay>
  {
 8001f1e:	e68e      	b.n	8001c3e <insertPARAMS+0x1e>
 8001f20:	0800ab14 	.word	0x0800ab14
 8001f24:	0800aab4 	.word	0x0800aab4
 8001f28:	20003f2c 	.word	0x20003f2c
 8001f2c:	0800aac0 	.word	0x0800aac0
 8001f30:	0800aad0 	.word	0x0800aad0
 8001f34:	0800aadc 	.word	0x0800aadc
 8001f38:	0800aaec 	.word	0x0800aaec
 8001f3c:	0800aaf8 	.word	0x0800aaf8
 8001f40:	0800ab08 	.word	0x0800ab08
 8001f44:	00000000 	.word	0x00000000

08001f48 <outputTHRUST>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_outputTHRUST */
void outputTHRUST(void *argument)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08d      	sub	sp, #52	; 0x34
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN outputTHRUST */
	parameters *ptr = argument;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  for(;;)
  {

	f32 l = L/1.4142135623;
 8001f54:	4b86      	ldr	r3, [pc, #536]	; (8002170 <outputTHRUST+0x228>)
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
	f32 t1 = ptr->u2/ l;
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffc3 	bl	8000eec <__aeabi_fdiv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	623b      	str	r3, [r7, #32]
	f32 t2 = ptr->u3 / l;
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffba 	bl	8000eec <__aeabi_fdiv>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	61fb      	str	r3, [r7, #28]
	f32 t3 = - ptr->u4/ k_thrust;
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fa4e 	bl	8000428 <__aeabi_f2d>
 8001f8c:	a376      	add	r3, pc, #472	; (adr r3, 8002168 <outputTHRUST+0x220>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe fbcb 	bl	800072c <__aeabi_ddiv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f7fe fd93 	bl	8000ac8 <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
	f32 t4 = ptr->u1;
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	617b      	str	r3, [r7, #20]
	ptr->cmd_thrust[0] = (t1 + t2 + t3 + t4)/4.f; // front left
 8001fae:	69f9      	ldr	r1, [r7, #28]
 8001fb0:	6a38      	ldr	r0, [r7, #32]
 8001fb2:	f7fe fddf 	bl	8000b74 <__addsf3>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fdda 	bl	8000b74 <__addsf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fdd5 	bl	8000b74 <__addsf3>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe ff8b 	bl	8000eec <__aeabi_fdiv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = (-t1 + t2 - t3 + t4)/4.f; // front right
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	69f8      	ldr	r0, [r7, #28]
 8001fe4:	f7fe fdc4 	bl	8000b70 <__aeabi_fsub>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fdbf 	bl	8000b70 <__aeabi_fsub>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fdbc 	bl	8000b74 <__addsf3>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe ff72 	bl	8000eec <__aeabi_fdiv>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = (t1 - t2 - t3 + t4)/4.f ; // rear left
 8002012:	69f9      	ldr	r1, [r7, #28]
 8002014:	6a38      	ldr	r0, [r7, #32]
 8002016:	f7fe fdab 	bl	8000b70 <__aeabi_fsub>
 800201a:	4603      	mov	r3, r0
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fda6 	bl	8000b70 <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	6979      	ldr	r1, [r7, #20]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fda3 	bl	8000b74 <__addsf3>
 800202e:	4603      	mov	r3, r0
 8002030:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe ff59 	bl	8000eec <__aeabi_fdiv>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = (-t1 - t2 + t3 + t4)/4.f; // rear right
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd8f 	bl	8000b70 <__aeabi_fsub>
 8002052:	4603      	mov	r3, r0
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fd8c 	bl	8000b74 <__addsf3>
 800205c:	4603      	mov	r3, r0
 800205e:	6979      	ldr	r1, [r7, #20]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fd87 	bl	8000b74 <__addsf3>
 8002066:	4603      	mov	r3, r0
 8002068:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ff3d 	bl	8000eec <__aeabi_fdiv>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/*************/
	/*PWM MAPPING*/
	/*************/
	u8 i;
	u16 speed_pwm[4];
	for(i=0 ; i<4;i++)
 800207c:	2300      	movs	r3, #0
 800207e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002082:	e067      	b.n	8002154 <outputTHRUST+0x20c>
	{
		if (ptr->cmd_thrust[i] < F_min) ptr->cmd_thrust[i]=F_min;
 8002084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208a:	3328      	adds	r3, #40	; 0x28
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <outputTHRUST+0x22c>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f813 	bl	80010c0 <__aeabi_fcmplt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <outputTHRUST+0x168>
 80020a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a6:	3328      	adds	r3, #40	; 0x28
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	4a31      	ldr	r2, [pc, #196]	; (8002174 <outputTHRUST+0x22c>)
 80020ae:	605a      	str	r2, [r3, #4]
		if (ptr->cmd_thrust[i] > F_max) ptr->cmd_thrust[i]=F_max;
 80020b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b6:	3328      	adds	r3, #40	; 0x28
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	492e      	ldr	r1, [pc, #184]	; (8002178 <outputTHRUST+0x230>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f81b 	bl	80010fc <__aeabi_fcmpgt>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <outputTHRUST+0x194>
 80020cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d2:	3328      	adds	r3, #40	; 0x28
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <outputTHRUST+0x230>)
 80020da:	605a      	str	r2, [r3, #4]
		speed_pwm[i] = (1/(F_max-F_min))*ptr->cmd_thrust[i]*500.0;
 80020dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e2:	3328      	adds	r3, #40	; 0x28
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fe48 	bl	8000d84 <__aeabi_fmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f996 	bl	8000428 <__aeabi_f2d>
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <outputTHRUST+0x234>)
 8002102:	f7fe f9e9 	bl	80004d8 <__aeabi_dmul>
 8002106:	4603      	mov	r3, r0
 8002108:	460c      	mov	r4, r1
 800210a:	461a      	mov	r2, r3
 800210c:	4623      	mov	r3, r4
 800210e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fcb7 	bl	8000a88 <__aeabi_d2uiz>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	0063      	lsls	r3, r4, #1
 8002120:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002124:	440b      	add	r3, r1
 8002126:	f823 2c24 	strh.w	r2, [r3, #-36]
		PWM(speed_pwm[i],i+1);
 800212a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002134:	4413      	add	r3, r2
 8002136:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800213a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800213e:	3301      	adds	r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f7ff f827 	bl	8001198 <PWM>
	for(i=0 ; i<4;i++)
 800214a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800214e:	3301      	adds	r3, #1
 8002150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002158:	2b03      	cmp	r3, #3
 800215a:	d993      	bls.n	8002084 <outputTHRUST+0x13c>
	}
    osDelay(20);
 800215c:	2014      	movs	r0, #20
 800215e:	f002 ff73 	bl	8005048 <osDelay>
  {
 8002162:	e6f7      	b.n	8001f54 <outputTHRUST+0xc>
 8002164:	f3af 8000 	nop.w
 8002168:	d2f1a9fc 	.word	0xd2f1a9fc
 800216c:	3f90624d 	.word	0x3f90624d
 8002170:	3f3504f3 	.word	0x3f3504f3
 8002174:	c0400000 	.word	0xc0400000
 8002178:	44160000 	.word	0x44160000
 800217c:	407f4000 	.word	0x407f4000

08002180 <RollPitch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RollPitch */
void RollPitch(void *argument)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b092      	sub	sp, #72	; 0x48
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RollPitch */
	parameters* ptr = argument;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {
	f32 b_x_dot_cmd, b_y_dot_cmd, taw=1/kp_bank;
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
	f32 R11 = 1;
 8002192:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 R12 = sin(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 8002198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f943 	bl	8000428 <__aeabi_f2d>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	4618      	mov	r0, r3
 80021a8:	4621      	mov	r1, r4
 80021aa:	f007 fc15 	bl	80099d8 <sin>
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
 80021b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f936 	bl	8000428 <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f007 fc08 	bl	80099d8 <sin>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fe f982 	bl	80004d8 <__aeabi_dmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	4625      	mov	r5, r4
 80021da:	461c      	mov	r4, r3
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f921 	bl	8000428 <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f007 fbbd 	bl	800996c <cos>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe fa97 	bl	800072c <__aeabi_ddiv>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	4618      	mov	r0, r3
 8002204:	4621      	mov	r1, r4
 8002206:	f7fe fc5f 	bl	8000ac8 <__aeabi_d2f>
 800220a:	4603      	mov	r3, r0
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
	f32 R13= cos(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 800220e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f908 	bl	8000428 <__aeabi_f2d>
 8002218:	4603      	mov	r3, r0
 800221a:	460c      	mov	r4, r1
 800221c:	4618      	mov	r0, r3
 800221e:	4621      	mov	r1, r4
 8002220:	f007 fba4 	bl	800996c <cos>
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
 8002228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f8fb 	bl	8000428 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f007 fbcd 	bl	80099d8 <sin>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe f947 	bl	80004d8 <__aeabi_dmul>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	4625      	mov	r5, r4
 8002250:	461c      	mov	r4, r3
 8002252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f8e6 	bl	8000428 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f007 fb82 	bl	800996c <cos>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe fa5c 	bl	800072c <__aeabi_ddiv>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	f7fe fc24 	bl	8000ac8 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
	f32 R21 = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
	f32 R22 = cos(ptr->phi);
 800228a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f8ca 	bl	8000428 <__aeabi_f2d>
 8002294:	4603      	mov	r3, r0
 8002296:	460c      	mov	r4, r1
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	f007 fb66 	bl	800996c <cos>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4618      	mov	r0, r3
 80022a6:	4621      	mov	r1, r4
 80022a8:	f7fe fc0e 	bl	8000ac8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	f32 R23= -sin(ptr->phi);
 80022b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f8b7 	bl	8000428 <__aeabi_f2d>
 80022ba:	4603      	mov	r3, r0
 80022bc:	460c      	mov	r4, r1
 80022be:	4618      	mov	r0, r3
 80022c0:	4621      	mov	r1, r4
 80022c2:	f007 fb89 	bl	80099d8 <sin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	4618      	mov	r0, r3
 80022cc:	4621      	mov	r1, r4
 80022ce:	f7fe fbfb 	bl	8000ac8 <__aeabi_d2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 R31 = 0;
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
	f32 R32 = sin(ptr->phi) / cos(ptr->theta);
 80022e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f89f 	bl	8000428 <__aeabi_f2d>
 80022ea:	4603      	mov	r3, r0
 80022ec:	460c      	mov	r4, r1
 80022ee:	4618      	mov	r0, r3
 80022f0:	4621      	mov	r1, r4
 80022f2:	f007 fb71 	bl	80099d8 <sin>
 80022f6:	4604      	mov	r4, r0
 80022f8:	460d      	mov	r5, r1
 80022fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f892 	bl	8000428 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f007 fb2e 	bl	800996c <cos>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe fa08 	bl	800072c <__aeabi_ddiv>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4618      	mov	r0, r3
 8002322:	4621      	mov	r1, r4
 8002324:	f7fe fbd0 	bl	8000ac8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	623b      	str	r3, [r7, #32]
	f32 R33 = cos(ptr->phi) / cos(ptr->theta);
 800232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f879 	bl	8000428 <__aeabi_f2d>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	4618      	mov	r0, r3
 800233c:	4621      	mov	r1, r4
 800233e:	f007 fb15 	bl	800996c <cos>
 8002342:	4604      	mov	r4, r0
 8002344:	460d      	mov	r5, r1
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f86c 	bl	8000428 <__aeabi_f2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f007 fb08 	bl	800996c <cos>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fe f9e2 	bl	800072c <__aeabi_ddiv>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	4618      	mov	r0, r3
 800236e:	4621      	mov	r1, r4
 8002370:	f7fe fbaa 	bl	8000ac8 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	61fb      	str	r3, [r7, #28]
	f32 R13_cmd= ptr->x_dot_dot_cmd*m/ptr->u1;
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f853 	bl	8000428 <__aeabi_f2d>
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <RollPitch+0x334>)
 8002388:	f7fe f8a6 	bl	80004d8 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f844 	bl	8000428 <__aeabi_f2d>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fe f9c0 	bl	800072c <__aeabi_ddiv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	f7fe fb88 	bl	8000ac8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
	f32 R23_cmd= ptr->y_dot_dot_cmd*m/ptr->u1;
 80023bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f831 	bl	8000428 <__aeabi_f2d>
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <RollPitch+0x334>)
 80023cc:	f7fe f884 	bl	80004d8 <__aeabi_dmul>
 80023d0:	4603      	mov	r3, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	4625      	mov	r5, r4
 80023d6:	461c      	mov	r4, r3
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f822 	bl	8000428 <__aeabi_f2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fe f99e 	bl	800072c <__aeabi_ddiv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	4618      	mov	r0, r3
 80023f6:	4621      	mov	r1, r4
 80023f8:	f7fe fb66 	bl	8000ac8 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	617b      	str	r3, [r7, #20]
	b_x_dot_cmd= (R13-R13_cmd)/taw;
 8002400:	69b9      	ldr	r1, [r7, #24]
 8002402:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002404:	f7fe fbb4 	bl	8000b70 <__aeabi_fsub>
 8002408:	4603      	mov	r3, r0
 800240a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fd6d 	bl	8000eec <__aeabi_fdiv>
 8002412:	4603      	mov	r3, r0
 8002414:	613b      	str	r3, [r7, #16]
	b_y_dot_cmd= (R23-R23_cmd)/taw;
 8002416:	6979      	ldr	r1, [r7, #20]
 8002418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241a:	f7fe fba9 	bl	8000b70 <__aeabi_fsub>
 800241e:	4603      	mov	r3, r0
 8002420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fd62 	bl	8000eec <__aeabi_fdiv>
 8002428:	4603      	mov	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
	ptr->p_cmd = 1/R33 * (R21*b_x_dot_cmd - R11*b_y_dot_cmd);
 800242c:	69f9      	ldr	r1, [r7, #28]
 800242e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002432:	f7fe fd5b 	bl	8000eec <__aeabi_fdiv>
 8002436:	4603      	mov	r3, r0
 8002438:	461c      	mov	r4, r3
 800243a:	6939      	ldr	r1, [r7, #16]
 800243c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243e:	f7fe fca1 	bl	8000d84 <__aeabi_fmul>
 8002442:	4603      	mov	r3, r0
 8002444:	461d      	mov	r5, r3
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800244a:	f7fe fc9b 	bl	8000d84 <__aeabi_fmul>
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	4628      	mov	r0, r5
 8002454:	f7fe fb8c 	bl	8000b70 <__aeabi_fsub>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	4620      	mov	r0, r4
 800245e:	f7fe fc91 	bl	8000d84 <__aeabi_fmul>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ptr->q_cmd = 1/R33 * (R22*b_x_dot_cmd - R12*b_y_dot_cmd);
 800246c:	69f9      	ldr	r1, [r7, #28]
 800246e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002472:	f7fe fd3b 	bl	8000eec <__aeabi_fdiv>
 8002476:	4603      	mov	r3, r0
 8002478:	461c      	mov	r4, r3
 800247a:	6939      	ldr	r1, [r7, #16]
 800247c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800247e:	f7fe fc81 	bl	8000d84 <__aeabi_fmul>
 8002482:	4603      	mov	r3, r0
 8002484:	461d      	mov	r5, r3
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800248a:	f7fe fc7b 	bl	8000d84 <__aeabi_fmul>
 800248e:	4603      	mov	r3, r0
 8002490:	4619      	mov	r1, r3
 8002492:	4628      	mov	r0, r5
 8002494:	f7fe fb6c 	bl	8000b70 <__aeabi_fsub>
 8002498:	4603      	mov	r3, r0
 800249a:	4619      	mov	r1, r3
 800249c:	4620      	mov	r0, r4
 800249e:	f7fe fc71 	bl	8000d84 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	osDelay(20);
 80024ac:	2014      	movs	r0, #20
 80024ae:	f002 fdcb 	bl	8005048 <osDelay>
  {
 80024b2:	e66b      	b.n	800218c <RollPitch+0xc>
 80024b4:	3ff80000 	.word	0x3ff80000

080024b8 <YawCONTROLLER>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_YawCONTROLLER */
void YawCONTROLLER(void *argument)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YawCONTROLLER */
	parameters* ptr = argument;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f7fe fb4d 	bl	8000b70 <__aeabi_fsub>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4619      	mov	r1, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fb4a 	bl	8000b74 <__addsf3>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	osDelay(20);
 80024ea:	2014      	movs	r0, #20
 80024ec:	f002 fdac 	bl	8005048 <osDelay>
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 80024f0:	e7e8      	b.n	80024c4 <YawCONTROLLER+0xc>
 80024f2:	0000      	movs	r0, r0
 80024f4:	0000      	movs	r0, r0
	...

080024f8 <Altitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Altitude */
void Altitude(void *argument)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Altitude */
	parameters* ptr = argument;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	f32 R33 = cos(ptr->phi)/cos(ptr->theta);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd ff8d 	bl	8000428 <__aeabi_f2d>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4618      	mov	r0, r3
 8002514:	4621      	mov	r1, r4
 8002516:	f007 fa29 	bl	800996c <cos>
 800251a:	4604      	mov	r4, r0
 800251c:	460d      	mov	r5, r1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ff80 	bl	8000428 <__aeabi_f2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f007 fa1c 	bl	800996c <cos>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fe f8f6 	bl	800072c <__aeabi_ddiv>
 8002540:	4603      	mov	r3, r0
 8002542:	460c      	mov	r4, r1
 8002544:	4618      	mov	r0, r3
 8002546:	4621      	mov	r1, r4
 8002548:	f7fe fabe 	bl	8000ac8 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	60bb      	str	r3, [r7, #8]
	ptr->z_dot_dot_cmd= kp_z*(ptr->z_cmd- ptr->z) + kd_z*(ptr->z_dot_cmd-ptr->z_dot);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7fe fb08 	bl	8000b70 <__aeabi_fsub>
 8002560:	4603      	mov	r3, r0
 8002562:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc0c 	bl	8000d84 <__aeabi_fmul>
 800256c:	4603      	mov	r3, r0
 800256e:	461c      	mov	r4, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f7fe faf8 	bl	8000b70 <__aeabi_fsub>
 8002580:	4603      	mov	r3, r0
 8002582:	4921      	ldr	r1, [pc, #132]	; (8002608 <Altitude+0x110>)
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fbfd 	bl	8000d84 <__aeabi_fmul>
 800258a:	4603      	mov	r3, r0
 800258c:	4619      	mov	r1, r3
 800258e:	4620      	mov	r0, r4
 8002590:	f7fe faf0 	bl	8000b74 <__addsf3>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ptr->u1 = m * (ptr->z_dot_dot_cmd - g)/R33;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ff3f 	bl	8000428 <__aeabi_f2d>
 80025aa:	a315      	add	r3, pc, #84	; (adr r3, 8002600 <Altitude+0x108>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd fdda 	bl	8000168 <__aeabi_dsub>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	4618      	mov	r0, r3
 80025ba:	4621      	mov	r1, r4
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <Altitude+0x114>)
 80025c2:	f7fd ff89 	bl	80004d8 <__aeabi_dmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	4625      	mov	r5, r4
 80025cc:	461c      	mov	r4, r3
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f7fd ff2a 	bl	8000428 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fe f8a6 	bl	800072c <__aeabi_ddiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	4618      	mov	r0, r3
 80025e6:	4621      	mov	r1, r4
 80025e8:	f7fe fa6e 	bl	8000ac8 <__aeabi_d2f>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	osDelay(20);
 80025f4:	2014      	movs	r0, #20
 80025f6:	f002 fd27 	bl	8005048 <osDelay>
  {
 80025fa:	e783      	b.n	8002504 <Altitude+0xc>
 80025fc:	f3af 8000 	nop.w
 8002600:	76c8b439 	.word	0x76c8b439
 8002604:	40239fbe 	.word	0x40239fbe
 8002608:	41400000 	.word	0x41400000
 800260c:	3ff80000 	.word	0x3ff80000

08002610 <lateral>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lateral */
void lateral(void *argument)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lateral */
	parameters* ptr = argument;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f7fe faa2 	bl	8000b70 <__aeabi_fsub>
 800262c:	4603      	mov	r3, r0
 800262e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fba6 	bl	8000d84 <__aeabi_fmul>
 8002638:	4603      	mov	r3, r0
 800263a:	461c      	mov	r4, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f7fe fa92 	bl	8000b70 <__aeabi_fsub>
 800264c:	4603      	mov	r3, r0
 800264e:	491b      	ldr	r1, [pc, #108]	; (80026bc <lateral+0xac>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb97 	bl	8000d84 <__aeabi_fmul>
 8002656:	4603      	mov	r3, r0
 8002658:	4619      	mov	r1, r3
 800265a:	4620      	mov	r0, r4
 800265c:	f7fe fa8a 	bl	8000b74 <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->y_dot_dot_cmd= kp_xy*(ptr->y_cmd- ptr->z) + kd_xy*(ptr->y_dot_cmd-ptr->y_dot);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7fe fa7c 	bl	8000b70 <__aeabi_fsub>
 8002678:	4603      	mov	r3, r0
 800267a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb80 	bl	8000d84 <__aeabi_fmul>
 8002684:	4603      	mov	r3, r0
 8002686:	461c      	mov	r4, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f7fe fa6c 	bl	8000b70 <__aeabi_fsub>
 8002698:	4603      	mov	r3, r0
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <lateral+0xac>)
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb71 	bl	8000d84 <__aeabi_fmul>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7fe fa64 	bl	8000b74 <__addsf3>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	67da      	str	r2, [r3, #124]	; 0x7c

	osDelay(20);
 80026b4:	2014      	movs	r0, #20
 80026b6:	f002 fcc7 	bl	8005048 <osDelay>
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 80026ba:	e7af      	b.n	800261c <lateral+0xc>
 80026bc:	41400000 	.word	0x41400000

080026c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026d2:	f000 fa99 	bl	8002c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40000800 	.word	0x40000800

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_MspInit+0x68>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_MspInit+0x68>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6193      	str	r3, [r2, #24]
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_MspInit+0x68>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_MspInit+0x68>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_MspInit+0x68>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_MspInit+0x68>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	210f      	movs	r1, #15
 800272a:	f06f 0001 	mvn.w	r0, #1
 800272e:	f000 fb3c 	bl	8002daa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_MspInit+0x6c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_MspInit+0x6c>)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000

08002760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_I2C_MspInit+0x70>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d123      	bne.n	80027c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	4619      	mov	r1, r3
 80027aa:	480b      	ldr	r0, [pc, #44]	; (80027d8 <HAL_I2C_MspInit+0x78>)
 80027ac:	f000 fb28 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 80027b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ba:	61d3      	str	r3, [r2, #28]
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_I2C_MspInit+0x74>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40005400 	.word	0x40005400
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010c00 	.word	0x40010c00

080027dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10b      	bne.n	8002806 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_TIM_Base_MspInit+0x34>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_TIM_Base_MspInit+0x34>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_TIM_Base_MspInit+0x34>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d142      	bne.n	80028ba <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002864:	2303      	movs	r3, #3
 8002866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2302      	movs	r3, #2
 800286e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	4814      	ldr	r0, [pc, #80]	; (80028c8 <HAL_TIM_MspPostInit+0xb4>)
 8002878:	f000 fac2 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800287c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	480e      	ldr	r0, [pc, #56]	; (80028cc <HAL_TIM_MspPostInit+0xb8>)
 8002892:	f000 fab5 	bl	8002e00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_TIM_MspPostInit+0xbc>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <HAL_TIM_MspPostInit+0xbc>)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010800 	.word	0x40010800
 80028cc:	40010c00 	.word	0x40010c00
 80028d0:	40010000 	.word	0x40010000

080028d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0318 	add.w	r3, r7, #24
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a37      	ldr	r2, [pc, #220]	; (80029cc <HAL_UART_MspInit+0xf8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d132      	bne.n	800295a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a35      	ldr	r2, [pc, #212]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	4619      	mov	r1, r3
 8002938:	4826      	ldr	r0, [pc, #152]	; (80029d4 <HAL_UART_MspInit+0x100>)
 800293a:	f000 fa61 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4619      	mov	r1, r3
 8002952:	4820      	ldr	r0, [pc, #128]	; (80029d4 <HAL_UART_MspInit+0x100>)
 8002954:	f000 fa54 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002958:	e034      	b.n	80029c4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_UART_MspInit+0x104>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12f      	bne.n	80029c4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296e:	61d3      	str	r3, [r2, #28]
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_UART_MspInit+0xfc>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002994:	2304      	movs	r3, #4
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0318 	add.w	r3, r7, #24
 80029a4:	4619      	mov	r1, r3
 80029a6:	480b      	ldr	r0, [pc, #44]	; (80029d4 <HAL_UART_MspInit+0x100>)
 80029a8:	f000 fa2a 	bl	8002e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ac:	2308      	movs	r3, #8
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 0318 	add.w	r3, r7, #24
 80029bc:	4619      	mov	r1, r3
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_UART_MspInit+0x100>)
 80029c0:	f000 fa1e 	bl	8002e00 <HAL_GPIO_Init>
}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010800 	.word	0x40010800
 80029d8:	40004400 	.word	0x40004400

080029dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	201e      	movs	r0, #30
 80029f2:	f000 f9da 	bl	8002daa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80029f6:	201e      	movs	r0, #30
 80029f8:	f000 f9f3 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_InitTick+0xa0>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <HAL_InitTick+0xa0>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_InitTick+0xa0>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a14:	f107 0210 	add.w	r2, r7, #16
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 f892 	bl	8003b48 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a24:	f001 f868 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_InitTick+0xa4>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0c9b      	lsrs	r3, r3, #18
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_InitTick+0xac>)
 8002a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a48:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a5e:	f001 f8db 	bl	8003c18 <HAL_TIM_Base_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <HAL_InitTick+0xa8>)
 8002a6a:	f001 f900 	bl	8003c6e <HAL_TIM_Base_Start_IT>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	20004000 	.word	0x20004000
 8002a88:	40000800 	.word	0x40000800

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002a90:	f001 f88a 	bl	8003ba8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <HardFault_Handler+0x4>

08002a9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <MemManage_Handler+0x4>

08002aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <BusFault_Handler+0x4>

08002aaa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <UsageFault_Handler+0x4>

08002ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <TIM4_IRQHandler+0x10>)
 8002ac2:	f001 f95d 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20004000 	.word	0x20004000

08002ad0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <_sbrk+0x50>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x16>
		heap_end = &end;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <_sbrk+0x50>)
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <_sbrk+0x54>)
 8002ae4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <_sbrk+0x50>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <_sbrk+0x50>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	466a      	mov	r2, sp
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d907      	bls.n	8002b0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002afa:	f004 fe33 	bl	8007764 <__errno>
 8002afe:	4602      	mov	r2, r0
 8002b00:	230c      	movs	r3, #12
 8002b02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	e006      	b.n	8002b18 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <_sbrk+0x50>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <_sbrk+0x50>)
 8002b14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000021c 	.word	0x2000021c
 8002b24:	20004088 	.word	0x20004088

08002b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <SystemInit+0x5c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <SystemInit+0x5c>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <SystemInit+0x5c>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4911      	ldr	r1, [pc, #68]	; (8002b84 <SystemInit+0x5c>)
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <SystemInit+0x60>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <SystemInit+0x5c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <SystemInit+0x5c>)
 8002b4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <SystemInit+0x5c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SystemInit+0x5c>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <SystemInit+0x5c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <SystemInit+0x5c>)
 8002b66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SystemInit+0x5c>)
 8002b6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SystemInit+0x64>)
 8002b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40021000 	.word	0x40021000
 8002b88:	f8ff0000 	.word	0xf8ff0000
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b92:	e003      	b.n	8002b9c <LoopCopyDataInit>

08002b94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b9a:	3104      	adds	r1, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b9c:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ba0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ba2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ba4:	d3f6      	bcc.n	8002b94 <CopyDataInit>
  ldr r2, =_sbss
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ba8:	e002      	b.n	8002bb0 <LoopFillZerobss>

08002baa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bac:	f842 3b04 	str.w	r3, [r2], #4

08002bb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bb4:	d3f9      	bcc.n	8002baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb6:	f7ff ffb7 	bl	8002b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f004 fdd9 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bbe:	f7fe fb59 	bl	8001274 <main>
  bx lr
 8002bc2:	4770      	bx	lr
  ldr r3, =_sidata
 8002bc4:	0800b100 	.word	0x0800b100
  ldr r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bcc:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002bd0:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002bd4:	20004088 	.word	0x20004088

08002bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC1_2_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_Init+0x28>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_Init+0x28>)
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 f8d1 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff fef2 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf8:	f7ff fd7a 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000

08002c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_IncTick+0x1c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_IncTick+0x20>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <HAL_IncTick+0x20>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	2000000c 	.word	0x2000000c
 8002c28:	20004040 	.word	0x20004040

08002c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_GetTick+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20004040 	.word	0x20004040

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <__NVIC_EnableIRQ+0x34>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff4f 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbc:	f7ff ff64 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f7ff ffb2 	bl	8002d30 <NVIC_EncodePriority>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff81 	bl	8002cdc <__NVIC_SetPriority>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff57 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b08b      	sub	sp, #44	; 0x2c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e12:	e127      	b.n	8003064 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e14:	2201      	movs	r2, #1
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8116 	bne.w	800305e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d034      	beq.n	8002ea4 <HAL_GPIO_Init+0xa4>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d80d      	bhi.n	8002e5a <HAL_GPIO_Init+0x5a>
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d02b      	beq.n	8002e9a <HAL_GPIO_Init+0x9a>
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d804      	bhi.n	8002e50 <HAL_GPIO_Init+0x50>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d031      	beq.n	8002eae <HAL_GPIO_Init+0xae>
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d01c      	beq.n	8002e88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e4e:	e048      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d043      	beq.n	8002edc <HAL_GPIO_Init+0xdc>
 8002e54:	2b11      	cmp	r3, #17
 8002e56:	d01b      	beq.n	8002e90 <HAL_GPIO_Init+0x90>
          break;
 8002e58:	e043      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e5a:	4a89      	ldr	r2, [pc, #548]	; (8003080 <HAL_GPIO_Init+0x280>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d026      	beq.n	8002eae <HAL_GPIO_Init+0xae>
 8002e60:	4a87      	ldr	r2, [pc, #540]	; (8003080 <HAL_GPIO_Init+0x280>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d806      	bhi.n	8002e74 <HAL_GPIO_Init+0x74>
 8002e66:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_GPIO_Init+0x284>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d020      	beq.n	8002eae <HAL_GPIO_Init+0xae>
 8002e6c:	4a86      	ldr	r2, [pc, #536]	; (8003088 <HAL_GPIO_Init+0x288>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_GPIO_Init+0xae>
          break;
 8002e72:	e036      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e74:	4a85      	ldr	r2, [pc, #532]	; (800308c <HAL_GPIO_Init+0x28c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0xae>
 8002e7a:	4a85      	ldr	r2, [pc, #532]	; (8003090 <HAL_GPIO_Init+0x290>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d016      	beq.n	8002eae <HAL_GPIO_Init+0xae>
 8002e80:	4a84      	ldr	r2, [pc, #528]	; (8003094 <HAL_GPIO_Init+0x294>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0xae>
          break;
 8002e86:	e02c      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e028      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	3304      	adds	r3, #4
 8002e96:	623b      	str	r3, [r7, #32]
          break;
 8002e98:	e023      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	623b      	str	r3, [r7, #32]
          break;
 8002ea2:	e01e      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	623b      	str	r3, [r7, #32]
          break;
 8002eac:	e019      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e012      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	611a      	str	r2, [r3, #16]
          break;
 8002ece:	e008      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	615a      	str	r2, [r3, #20]
          break;
 8002eda:	e002      	b.n	8002ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2bff      	cmp	r3, #255	; 0xff
 8002ee6:	d801      	bhi.n	8002eec <HAL_GPIO_Init+0xec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e001      	b.n	8002ef0 <HAL_GPIO_Init+0xf0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2bff      	cmp	r3, #255	; 0xff
 8002ef6:	d802      	bhi.n	8002efe <HAL_GPIO_Init+0xfe>
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x104>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	3b08      	subs	r3, #8
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	401a      	ands	r2, r3
 8002f16:	6a39      	ldr	r1, [r7, #32]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8096 	beq.w	800305e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_GPIO_Init+0x298>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_GPIO_Init+0x298>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6193      	str	r3, [r2, #24]
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <HAL_GPIO_Init+0x298>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f4a:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_GPIO_Init+0x29c>)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <HAL_GPIO_Init+0x2a0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0x19e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4a      	ldr	r2, [pc, #296]	; (80030a4 <HAL_GPIO_Init+0x2a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_Init+0x19a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a49      	ldr	r2, [pc, #292]	; (80030a8 <HAL_GPIO_Init+0x2a8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x196>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a48      	ldr	r2, [pc, #288]	; (80030ac <HAL_GPIO_Init+0x2ac>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_Init+0x192>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x1a0>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e004      	b.n	8002fa0 <HAL_GPIO_Init+0x1a0>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_Init+0x1a0>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_GPIO_Init+0x1a0>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	f002 0203 	and.w	r2, r2, #3
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fb0:	493a      	ldr	r1, [pc, #232]	; (800309c <HAL_GPIO_Init+0x29c>)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4938      	ldr	r1, [pc, #224]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
 8002fd6:	e006      	b.n	8002fe6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4933      	ldr	r1, [pc, #204]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	492e      	ldr	r1, [pc, #184]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
 8002ffe:	e006      	b.n	800300e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	43db      	mvns	r3, r3
 8003008:	4929      	ldr	r1, [pc, #164]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 800300a:	4013      	ands	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	4924      	ldr	r1, [pc, #144]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	43db      	mvns	r3, r3
 8003030:	491f      	ldr	r1, [pc, #124]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003032:	4013      	ands	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	491a      	ldr	r1, [pc, #104]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	43db      	mvns	r3, r3
 8003058:	4915      	ldr	r1, [pc, #84]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 800305a:	4013      	ands	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	f47f aed0 	bne.w	8002e14 <HAL_GPIO_Init+0x14>
  }
}
 8003074:	bf00      	nop
 8003076:	372c      	adds	r7, #44	; 0x2c
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	10210000 	.word	0x10210000
 8003084:	10110000 	.word	0x10110000
 8003088:	10120000 	.word	0x10120000
 800308c:	10310000 	.word	0x10310000
 8003090:	10320000 	.word	0x10320000
 8003094:	10220000 	.word	0x10220000
 8003098:	40021000 	.word	0x40021000
 800309c:	40010000 	.word	0x40010000
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	40010400 	.word	0x40010400

080030b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030d0:	e003      	b.n	80030da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e10f      	b.n	8003316 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fb28 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f000 fce6 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a7b      	ldr	r2, [pc, #492]	; (8003320 <HAL_I2C_Init+0x23c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x64>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <HAL_I2C_Init+0x240>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x72>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a77      	ldr	r2, [pc, #476]	; (8003328 <HAL_I2C_Init+0x244>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0db      	b.n	8003316 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a72      	ldr	r2, [pc, #456]	; (800332c <HAL_I2C_Init+0x248>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a64      	ldr	r2, [pc, #400]	; (8003320 <HAL_I2C_Init+0x23c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xb4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xc8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a63      	ldr	r2, [pc, #396]	; (8003330 <HAL_I2C_Init+0x24c>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4956      	ldr	r1, [pc, #344]	; (8003320 <HAL_I2C_Init+0x23c>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d80d      	bhi.n	80031e8 <HAL_I2C_Init+0x104>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	bf38      	it	cc
 80031e4:	2304      	movcc	r3, #4
 80031e6:	e04f      	b.n	8003288 <HAL_I2C_Init+0x1a4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <HAL_I2C_Init+0x130>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e012      	b.n	800323a <HAL_I2C_Init+0x156>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Init+0x15e>
 800323e:	2301      	movs	r3, #1
 8003240:	e022      	b.n	8003288 <HAL_I2C_Init+0x1a4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <HAL_I2C_Init+0x184>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e58      	subs	r0, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	440b      	add	r3, r1
 8003258:	fbb0 f3f3 	udiv	r3, r0, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003266:	e00f      	b.n	8003288 <HAL_I2C_Init+0x1a4>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	6809      	ldr	r1, [r1, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6911      	ldr	r1, [r2, #16]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	000186a0 	.word	0x000186a0
 8003324:	001e847f 	.word	0x001e847f
 8003328:	003d08ff 	.word	0x003d08ff
 800332c:	431bde83 	.word	0x431bde83
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e26c      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8087 	beq.w	8003462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00c      	beq.n	800337a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003360:	4b8f      	ldr	r3, [pc, #572]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d112      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d10b      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337a:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d06c      	beq.n	8003460 <HAL_RCC_OscConfig+0x12c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d168      	bne.n	8003460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e246      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x76>
 800339c:	4b80      	ldr	r3, [pc, #512]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7f      	ldr	r2, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e02e      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b7b      	ldr	r3, [pc, #492]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0xbc>
 80033d6:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a71      	ldr	r2, [pc, #452]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6a      	ldr	r2, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7ff fc0c 	bl	8002c2c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7ff fc08 	bl	8002c2c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1fa      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xe4>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff fbf8 	bl	8002c2c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff fbf4 	bl	8002c2c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1e6      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x10c>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
 8003486:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1ba      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4939      	ldr	r1, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7ff fbad 	bl	8002c2c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7ff fba9 	bl	8002c2c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e19b      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2d      	ldr	r3, [pc, #180]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4927      	ldr	r1, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fb8c 	bl	8002c2c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7ff fb88 	bl	8002c2c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e17a      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03a      	beq.n	80035b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d019      	beq.n	800357e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7ff fb6c 	bl	8002c2c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7ff fb68 	bl	8002c2c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e15a      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003576:	2001      	movs	r0, #1
 8003578:	f000 fb2a 	bl	8003bd0 <RCC_Delay>
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7ff fb52 	bl	8002c2c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358a:	e00f      	b.n	80035ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7ff fb4e 	bl	8002c2c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d908      	bls.n	80035ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e140      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	42420000 	.word	0x42420000
 80035a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b9e      	ldr	r3, [pc, #632]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e9      	bne.n	800358c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a6 	beq.w	8003712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b97      	ldr	r3, [pc, #604]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b94      	ldr	r3, [pc, #592]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a93      	ldr	r2, [pc, #588]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b8e      	ldr	r3, [pc, #568]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fe:	4b8b      	ldr	r3, [pc, #556]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a8a      	ldr	r2, [pc, #552]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7ff fb0f 	bl	8002c2c <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7ff fb0b 	bl	8002c2c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b64      	cmp	r3, #100	; 0x64
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0fd      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x312>
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	e02d      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x334>
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a72      	ldr	r2, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	e01c      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x356>
 8003670:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7ff fabf 	bl	8002c2c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7ff fabb 	bl	8002c2c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0ab      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b57      	ldr	r3, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCC_OscConfig+0x37e>
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7ff faa9 	bl	8002c2c <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7ff faa5 	bl	8002c2c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e095      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a47      	ldr	r2, [pc, #284]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8081 	beq.w	800381e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d061      	beq.n	80037ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d146      	bne.n	80037be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7ff fa79 	bl	8002c2c <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7ff fa75 	bl	8002c2c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e067      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d108      	bne.n	8003778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	492d      	ldr	r1, [pc, #180]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a19      	ldr	r1, [r3, #32]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	430b      	orrs	r3, r1
 800378a:	4927      	ldr	r1, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7ff fa49 	bl	8002c2c <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7ff fa45 	bl	8002c2c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e037      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x46a>
 80037bc:	e02f      	b.n	800381e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7ff fa32 	bl	8002c2c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7ff fa2e 	bl	8002c2c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e020      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x498>
 80037ea:	e018      	b.n	800381e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e013      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420060 	.word	0x42420060

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7ff f982 	bl	8002c2c <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7ff f97e 	bl	8002c2c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f82d 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	fa21 f303 	lsr.w	r3, r1, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fffa 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800acac 	.word	0x0800acac
 8003a00:	20000004 	.word	0x20000004
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_EnableCSS+0x14>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	4242004c 	.word	0x4242004c

08003a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b490      	push	{r4, r7}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a28:	1d3c      	adds	r4, r7, #4
 8003a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x46>
 8003a5e:	e02d      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a62:	623b      	str	r3, [r7, #32]
      break;
 8003a64:	e02d      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a72:	4413      	add	r3, r2
 8003a74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c5b      	lsrs	r3, r3, #17
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a92:	4413      	add	r3, r2
 8003a94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a9e:	fb02 f203 	mul.w	r2, r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	623b      	str	r3, [r7, #32]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003abe:	623b      	str	r3, [r7, #32]
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc90      	pop	{r4, r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	0800ab18 	.word	0x0800ab18
 8003ad4:	0800ab28 	.word	0x0800ab28
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	003d0900 	.word	0x003d0900

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	20000004 	.word	0x20000004

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff2 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	0800acbc 	.word	0x0800acbc

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffde 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b28:	4601      	mov	r1, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	0adb      	lsrs	r3, r3, #11
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	0800acbc 	.word	0x0800acbc

08003b48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	220f      	movs	r2, #15
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_RCC_GetClockConfig+0x58>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0203 	and.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_GetClockConfig+0x58>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetClockConfig+0x58>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_RCC_GetClockConfig+0x58>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40022000 	.word	0x40022000

08003ba8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d104      	bne.n	8003bc2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003bb8:	f000 f828 	bl	8003c0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_NMI_IRQHandler+0x24>)
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	701a      	strb	r2, [r3, #0]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	4002100a 	.word	0x4002100a

08003bd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCC_Delay+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <RCC_Delay+0x38>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0a5b      	lsrs	r3, r3, #9
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bec:	bf00      	nop
  }
  while (Delay --);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f9      	bne.n	8003bec <RCC_Delay+0x1c>
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000004 	.word	0x20000004
 8003c08:	10624dd3 	.word	0x10624dd3

08003c0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e01d      	b.n	8003c66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe fdcc 	bl	80027dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fb3c 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d007      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e01d      	b.n	8003d02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f815 	bl	8003d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 faee 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fd50 	bl	80047d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_TIM_PWM_Start+0x60>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40012c00 	.word	0x40012c00

08003d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0202 	mvn.w	r2, #2
 8003dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa6a 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa5d 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fa6c 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0204 	mvn.w	r2, #4
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa40 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa33 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa42 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0208 	mvn.w	r2, #8
 8003e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa16 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa09 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fa18 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0210 	mvn.w	r2, #16
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2208      	movs	r2, #8
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9ec 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9df 	bl	800428a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9ee 	bl	80042ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0201 	mvn.w	r2, #1
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fbde 	bl	80026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fcc3 	bl	80048b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9b2 	bl	80042c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d10e      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d107      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0220 	mvn.w	r2, #32
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fc8e 	bl	80048a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0b4      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	f200 809f 	bhi.w	8004100 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	08004101 	.word	0x08004101
 8003fd0:	08004101 	.word	0x08004101
 8003fd4:	08004101 	.word	0x08004101
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	08004101 	.word	0x08004101
 8003fe0:	08004101 	.word	0x08004101
 8003fe4:	08004101 	.word	0x08004101
 8003fe8:	0800407f 	.word	0x0800407f
 8003fec:	08004101 	.word	0x08004101
 8003ff0:	08004101 	.word	0x08004101
 8003ff4:	08004101 	.word	0x08004101
 8003ff8:	080040bf 	.word	0x080040bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f9c8 	bl	8004398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
      break;
 800403a:	e062      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fa0e 	bl	8004464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	619a      	str	r2, [r3, #24]
      break;
 800407c:	e041      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fa57 	bl	8004538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e021      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 faa1 	bl	800460c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69d9      	ldr	r1, [r3, #28]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	61da      	str	r2, [r3, #28]
      break;
 80040fe:	e000      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004100:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e0a6      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x166>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d067      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x120>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d80b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x6c>
 8004170:	2b10      	cmp	r3, #16
 8004172:	d073      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
 8004174:	2b10      	cmp	r3, #16
 8004176:	d802      	bhi.n	800417e <HAL_TIM_ConfigClockSource+0x62>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d06f      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800417c:	e078      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800417e:	2b20      	cmp	r3, #32
 8004180:	d06c      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d06a      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004186:	e073      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d00d      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x8c>
 800418c:	2b70      	cmp	r3, #112	; 0x70
 800418e:	d804      	bhi.n	800419a <HAL_TIM_ConfigClockSource+0x7e>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d033      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xe0>
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d041      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004198:	e06a      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	d066      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x152>
 80041a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a4:	d017      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041a6:	e063      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6899      	ldr	r1, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f000 faed 	bl	8004796 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
      break;
 80041d4:	e04c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f000 fad6 	bl	8004796 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e039      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	461a      	mov	r2, r3
 800420a:	f000 fa4d 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2150      	movs	r1, #80	; 0x50
 8004214:	4618      	mov	r0, r3
 8004216:	f000 faa4 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800421a:	e029      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	461a      	mov	r2, r3
 800422a:	f000 fa6b 	bl	8004704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2160      	movs	r1, #96	; 0x60
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fa94 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800423a:	e019      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	461a      	mov	r2, r3
 800424a:	f000 fa2d 	bl	80046a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa84 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800425a:	e009      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 fa7b 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800426c:	e000      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800426e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <TIM_Base_SetConfig+0xb8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a26      	ldr	r2, [pc, #152]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a25      	ldr	r2, [pc, #148]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <TIM_Base_SetConfig+0xb8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d007      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_Base_SetConfig+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <TIM_Base_SetConfig+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d103      	bne.n	800437c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	615a      	str	r2, [r3, #20]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800

08004398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 0302 	bic.w	r3, r3, #2
 80043e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <TIM_OC1_SetConfig+0xc8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <TIM_OC1_SetConfig+0xc8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00

08004464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0320 	bic.w	r3, r3, #32
 80044ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM_OC2_SetConfig+0xd0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d113      	bne.n	8004510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00

08004538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <TIM_OC3_SetConfig+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC3_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <TIM_OC4_SetConfig+0x98>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 030a 	bic.w	r3, r3, #10
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 0210 	bic.w	r2, r3, #16
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004740:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	f043 0307 	orr.w	r3, r3, #7
 8004784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004796:	b480      	push	{r7}
 8004798:	b087      	sub	sp, #28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	2201      	movs	r2, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e032      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e03f      	b.n	800495a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd fff0 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800490a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9b1 	bl	8004c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_UART_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af02      	add	r7, sp, #8
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b20      	cmp	r3, #32
 8004980:	f040 8083 	bne.w	8004a8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Transmit+0x2e>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e07b      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Transmit+0x40>
 800499e:	2302      	movs	r3, #2
 80049a0:	e074      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2221      	movs	r2, #33	; 0x21
 80049b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049b8:	f7fe f938 	bl	8002c2c <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049ca:	e042      	b.n	8004a52 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d122      	bne.n	8004a2a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f8f6 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e046      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	e017      	b.n	8004a52 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	e013      	b.n	8004a52 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f8d3 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e023      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	60ba      	str	r2, [r7, #8]
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1b7      	bne.n	80049cc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f8ba 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00a      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f040 8090 	bne.w	8004bd6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_Receive+0x2e>
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e088      	b.n	8004bd8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Receive+0x40>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e081      	b.n	8004bd8 <HAL_UART_Receive+0x144>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2222      	movs	r2, #34	; 0x22
 8004ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004aea:	f7fe f89f 	bl	8002c2c <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004afc:	e05c      	b.n	8004bb8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d12b      	bne.n	8004b6e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2120      	movs	r1, #32
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f85d 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e053      	b.n	8004bd8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3302      	adds	r3, #2
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	e030      	b.n	8004bb8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	e024      	b.n	8004bb8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2120      	movs	r1, #32
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f831 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e027      	b.n	8004bd8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d108      	bne.n	8004ba2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	60ba      	str	r2, [r7, #8]
 8004b9c:	b2ca      	uxtb	r2, r1
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e00a      	b.n	8004bb8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d19d      	bne.n	8004afe <HAL_UART_Receive+0x6a>
        }
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	e02c      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d028      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c00:	f7fe f814 	bl	8002c2c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d21d      	bcs.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e00f      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d0c3      	beq.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cae:	f023 030c 	bic.w	r3, r3, #12
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <UART_SetConfig+0x1ac>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d14e      	bne.n	8004d7a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cdc:	f7fe ff20 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8004ce0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009a      	lsls	r2, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	0119      	lsls	r1, r3, #4
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009a      	lsls	r2, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d18:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2064      	movs	r0, #100	; 0x64
 8004d22:	fb00 f303 	mul.w	r3, r0, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	3332      	adds	r3, #50	; 0x32
 8004d2c:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d38:	4419      	add	r1, r3
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009a      	lsls	r2, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d50:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004d52:	fba3 0302 	umull	r0, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2064      	movs	r0, #100	; 0x64
 8004d5a:	fb00 f303 	mul.w	r3, r0, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	3332      	adds	r3, #50	; 0x32
 8004d64:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	440a      	add	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004d78:	e04d      	b.n	8004e16 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d7a:	f7fe febd 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8004d7e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009a      	lsls	r2, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	0119      	lsls	r1, r3, #4
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009a      	lsls	r2, r3, #2
 8004daa:	441a      	add	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004db8:	fba3 0302 	umull	r0, r3, r3, r2
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	2064      	movs	r0, #100	; 0x64
 8004dc0:	fb00 f303 	mul.w	r3, r0, r3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	3332      	adds	r3, #50	; 0x32
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd6:	4419      	add	r1, r3
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004df0:	fba3 0302 	umull	r0, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2064      	movs	r0, #100	; 0x64
 8004df8:	fb00 f303 	mul.w	r3, r0, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <UART_SetConfig+0x1b0>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	440a      	add	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40013800 	.word	0x40013800
 8004e24:	51eb851f 	.word	0x51eb851f

08004e28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e2e:	f3ef 8305 	mrs	r3, IPSR
 8004e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <osKernelInitialize+0x32>
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <osKernelInitialize+0x60>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d109      	bne.n	8004e62 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	603b      	str	r3, [r7, #0]
  return(result);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e5a:	f06f 0305 	mvn.w	r3, #5
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e00c      	b.n	8004e7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <osKernelInitialize+0x60>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d105      	bne.n	8004e76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <osKernelInitialize+0x60>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e002      	b.n	8004e7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	20000220 	.word	0x20000220

08004e8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e92:	f3ef 8305 	mrs	r3, IPSR
 8004e96:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10f      	bne.n	8004ebe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <osKernelStart+0x32>
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <osKernelStart+0x64>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d109      	bne.n	8004ec6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ebe:	f06f 0305 	mvn.w	r3, #5
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e00e      	b.n	8004ee4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <osKernelStart+0x64>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <osKernelStart+0x64>)
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ed4:	f001 f864 	bl	8005fa0 <vTaskStartScheduler>
      stat = osOK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e002      	b.n	8004ee4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000220 	.word	0x20000220

08004ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b092      	sub	sp, #72	; 0x48
 8004ef8:	af04      	add	r7, sp, #16
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f04:	f3ef 8305 	mrs	r3, IPSR
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f040 8094 	bne.w	800503a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f12:	f3ef 8310 	mrs	r3, PRIMASK
 8004f16:	623b      	str	r3, [r7, #32]
  return(result);
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 808d 	bne.w	800503a <osThreadNew+0x146>
 8004f20:	4b48      	ldr	r3, [pc, #288]	; (8005044 <osThreadNew+0x150>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d106      	bne.n	8004f36 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f28:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f040 8082 	bne.w	800503a <osThreadNew+0x146>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d07e      	beq.n	800503a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f40:	2318      	movs	r3, #24
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004f44:	2300      	movs	r3, #0
 8004f46:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f48:	f107 031b 	add.w	r3, r7, #27
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d045      	beq.n	8004fe6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <osThreadNew+0x74>
        name = attr->name;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <osThreadNew+0x9a>
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b38      	cmp	r3, #56	; 0x38
 8004f80:	d805      	bhi.n	8004f8e <osThreadNew+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <osThreadNew+0x9e>
        return (NULL);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e054      	b.n	800503c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <osThreadNew+0xd4>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b5b      	cmp	r3, #91	; 0x5b
 8004fb0:	d90a      	bls.n	8004fc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <osThreadNew+0xd4>
        mem = 1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc6:	e010      	b.n	8004fea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10c      	bne.n	8004fea <osThreadNew+0xf6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <osThreadNew+0xf6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <osThreadNew+0xf6>
          mem = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe4:	e001      	b.n	8004fea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d110      	bne.n	8005012 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ff8:	9202      	str	r2, [sp, #8]
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005004:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fe02 	bl	8005c10 <xTaskCreateStatic>
 800500c:	4603      	mov	r3, r0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e013      	b.n	800503a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d110      	bne.n	800503a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	b29a      	uxth	r2, r3
 800501c:	f107 0314 	add.w	r3, r7, #20
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fe49 	bl	8005cc2 <xTaskCreate>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d001      	beq.n	800503a <osThreadNew+0x146>
          hTask = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800503a:	697b      	ldr	r3, [r7, #20]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3738      	adds	r7, #56	; 0x38
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000220 	.word	0x20000220

08005048 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	613b      	str	r3, [r7, #16]
  return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505c:	f3ef 8310 	mrs	r3, PRIMASK
 8005060:	60fb      	str	r3, [r7, #12]
  return(result);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <osDelay+0x34>
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <osDelay+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d109      	bne.n	8005084 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005070:	f3ef 8311 	mrs	r3, BASEPRI
 8005074:	60bb      	str	r3, [r7, #8]
  return(result);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <osDelay+0x3c>
    stat = osErrorISR;
 800507c:	f06f 0305 	mvn.w	r3, #5
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e007      	b.n	8005094 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <osDelay+0x4c>
      vTaskDelay(ticks);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 ff52 	bl	8005f38 <vTaskDelay>
    }
  }

  return (stat);
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000220 	.word	0x20000220

080050a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a06      	ldr	r2, [pc, #24]	; (80050cc <vApplicationGetIdleTaskMemory+0x28>)
 80050b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80050ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	20000224 	.word	0x20000224
 80050d0:	20000280 	.word	0x20000280

080050d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <vApplicationGetTimerTaskMemory+0x2c>)
 80050e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <vApplicationGetTimerTaskMemory+0x30>)
 80050ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000480 	.word	0x20000480
 8005104:	200004dc 	.word	0x200004dc

08005108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f04f 32ff 	mov.w	r2, #4294967295
 8005120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f103 0208 	add.w	r2, r3, #8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f103 0208 	add.w	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d103      	bne.n	80051c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	e00c      	b.n	80051de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3308      	adds	r3, #8
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e002      	b.n	80051d2 <vListInsert+0x2e>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d2f6      	bcs.n	80051cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6892      	ldr	r2, [r2, #8]
 800522a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6852      	ldr	r2, [r2, #4]
 8005234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d103      	bne.n	8005248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr
	...

08005268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	e7fe      	b.n	800528e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005290:	f001 ff9a 	bl	80071c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	3b01      	subs	r3, #1
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	441a      	add	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	22ff      	movs	r2, #255	; 0xff
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	22ff      	movs	r2, #255	; 0xff
 80052dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01a      	beq.n	8005324 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3310      	adds	r3, #16
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 f8d8 	bl	80064a8 <xTaskRemoveFromEventList>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <xQueueGenericReset+0xcc>)
 8005300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	e009      	b.n	8005324 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3310      	adds	r3, #16
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fef7 	bl	8005108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fef2 	bl	8005108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005324:	f001 ff7e 	bl	8007224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005328:	2301      	movs	r3, #1
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08e      	sub	sp, #56	; 0x38
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <xQueueGenericCreateStatic+0x28>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
 800535e:	e7fe      	b.n	800535e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <xQueueGenericCreateStatic+0x42>
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
 8005378:	e7fe      	b.n	8005378 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <xQueueGenericCreateStatic+0x4e>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <xQueueGenericCreateStatic+0x52>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueGenericCreateStatic+0x54>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <xQueueGenericCreateStatic+0x6c>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	e7fe      	b.n	80053a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <xQueueGenericCreateStatic+0x78>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericCreateStatic+0x7c>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericCreateStatic+0x7e>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <xQueueGenericCreateStatic+0x96>
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053ce:	2350      	movs	r3, #80	; 0x50
 80053d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d009      	beq.n	80053ec <xQueueGenericCreateStatic+0xb4>
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e7fe      	b.n	80053ea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f805 	bl	800541c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e002      	b.n	800543e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800544a:	2101      	movs	r1, #1
 800544c:	69b8      	ldr	r0, [r7, #24]
 800544e:	f7ff ff0b 	bl	8005268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <xQueueGenericSend+0x30>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
 8005492:	e7fe      	b.n	8005492 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <xQueueGenericSend+0x3e>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <xQueueGenericSend+0x42>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <xQueueGenericSend+0x44>
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <xQueueGenericSend+0x5c>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
 80054be:	e7fe      	b.n	80054be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d103      	bne.n	80054ce <xQueueGenericSend+0x6a>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <xQueueGenericSend+0x6e>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericSend+0x70>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <xQueueGenericSend+0x88>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ec:	f001 f996 	bl	800681c <xTaskGetSchedulerState>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xQueueGenericSend+0x98>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <xQueueGenericSend+0x9c>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <xQueueGenericSend+0x9e>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <xQueueGenericSend+0xb6>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e7fe      	b.n	8005518 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800551a:	f001 fe55 	bl	80071c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <xQueueGenericSend+0xcc>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d129      	bne.n	8005584 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005536:	f000 f9ff 	bl	8005938 <prvCopyDataToQueue>
 800553a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	3324      	adds	r3, #36	; 0x24
 8005548:	4618      	mov	r0, r3
 800554a:	f000 ffad 	bl	80064a8 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <xQueueGenericSend+0x1f0>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e00a      	b.n	800557c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800556c:	4b39      	ldr	r3, [pc, #228]	; (8005654 <xQueueGenericSend+0x1f0>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800557c:	f001 fe52 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	e063      	b.n	800564c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800558a:	f001 fe4b 	bl	8007224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800558e:	2300      	movs	r3, #0
 8005590:	e05c      	b.n	800564c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f000 ffe5 	bl	800656c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a6:	f001 fe3d 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055aa:	f000 fd5d 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ae:	f001 fe0b 	bl	80071c8 <vPortEnterCritical>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <xQueueGenericSend+0x164>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x17a>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055de:	f001 fe21 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e2:	1d3a      	adds	r2, r7, #4
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 ffd4 	bl	8006598 <xTaskCheckForTimeOut>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d124      	bne.n	8005640 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f8:	f000 fa96 	bl	8005b28 <prvIsQueueFull>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	3310      	adds	r3, #16
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fefe 	bl	800640c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005612:	f000 fa21 	bl	8005a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005616:	f000 fd35 	bl	8006084 <xTaskResumeAll>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f47f af7c 	bne.w	800551a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <xQueueGenericSend+0x1f0>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e772      	b.n	800551a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005636:	f000 fa0f 	bl	8005a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563a:	f000 fd23 	bl	8006084 <xTaskResumeAll>
 800563e:	e76c      	b.n	800551a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 fa09 	bl	8005a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005646:	f000 fd1d 	bl	8006084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800564a:	2300      	movs	r3, #0
		}
	}
}
 800564c:	4618      	mov	r0, r3
 800564e:	3738      	adds	r7, #56	; 0x38
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <xQueueGenericSendFromISR+0x2c>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e7fe      	b.n	8005682 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d103      	bne.n	8005692 <xQueueGenericSendFromISR+0x3a>
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <xQueueGenericSendFromISR+0x3e>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <xQueueGenericSendFromISR+0x40>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <xQueueGenericSendFromISR+0x58>
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	e7fe      	b.n	80056ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d103      	bne.n	80056be <xQueueGenericSendFromISR+0x66>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <xQueueGenericSendFromISR+0x6a>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <xQueueGenericSendFromISR+0x6c>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <xQueueGenericSendFromISR+0x84>
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e7fe      	b.n	80056da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056dc:	f001 fe2e 	bl	800733c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056e0:	f3ef 8211 	mrs	r2, BASEPRI
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	61ba      	str	r2, [r7, #24]
 80056f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <xQueueGenericSendFromISR+0xb6>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d12c      	bne.n	8005768 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571e:	f000 f90b 	bl	8005938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005722:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d112      	bne.n	8005752 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d016      	beq.n	8005762 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	4618      	mov	r0, r3
 800573a:	f000 feb5 	bl	80064a8 <xTaskRemoveFromEventList>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00e      	beq.n	8005762 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e007      	b.n	8005762 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005756:	3301      	adds	r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	b25a      	sxtb	r2, r3
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005766:	e001      	b.n	800576c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005768:	2300      	movs	r3, #0
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005778:	4618      	mov	r0, r3
 800577a:	3738      	adds	r7, #56	; 0x38
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08c      	sub	sp, #48	; 0x30
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800578c:	2300      	movs	r3, #0
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <xQueueReceive+0x2e>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	e7fe      	b.n	80057ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <xQueueReceive+0x3c>
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <xQueueReceive+0x40>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <xQueueReceive+0x42>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <xQueueReceive+0x5a>
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e7fe      	b.n	80057d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057da:	f001 f81f 	bl	800681c <xTaskGetSchedulerState>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <xQueueReceive+0x6a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <xQueueReceive+0x6e>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueReceive+0x70>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <xQueueReceive+0x88>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e7fe      	b.n	8005806 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005808:	f001 fcde 	bl	80071c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01f      	beq.n	8005858 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581c:	f000 f8f6 	bl	8005a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1e5a      	subs	r2, r3, #1
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00f      	beq.n	8005850 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	3310      	adds	r3, #16
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fe37 	bl	80064a8 <xTaskRemoveFromEventList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005840:	4b3c      	ldr	r3, [pc, #240]	; (8005934 <xQueueReceive+0x1b4>)
 8005842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005850:	f001 fce8 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005854:	2301      	movs	r3, #1
 8005856:	e069      	b.n	800592c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800585e:	f001 fce1 	bl	8007224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005862:	2300      	movs	r3, #0
 8005864:	e062      	b.n	800592c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fe7b 	bl	800656c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800587a:	f001 fcd3 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800587e:	f000 fbf3 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005882:	f001 fca1 	bl	80071c8 <vPortEnterCritical>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800588c:	b25b      	sxtb	r3, r3
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d103      	bne.n	800589c <xQueueReceive+0x11c>
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a2:	b25b      	sxtb	r3, r3
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d103      	bne.n	80058b2 <xQueueReceive+0x132>
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b2:	f001 fcb7 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b6:	1d3a      	adds	r2, r7, #4
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fe6a 	bl	8006598 <xTaskCheckForTimeOut>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d123      	bne.n	8005912 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058cc:	f000 f916 	bl	8005afc <prvIsQueueEmpty>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	3324      	adds	r3, #36	; 0x24
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fd94 	bl	800640c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e6:	f000 f8b7 	bl	8005a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058ea:	f000 fbcb 	bl	8006084 <xTaskResumeAll>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d189      	bne.n	8005808 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <xQueueReceive+0x1b4>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	e780      	b.n	8005808 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005908:	f000 f8a6 	bl	8005a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800590c:	f000 fbba 	bl	8006084 <xTaskResumeAll>
 8005910:	e77a      	b.n	8005808 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005914:	f000 f8a0 	bl	8005a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005918:	f000 fbb4 	bl	8006084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800591c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591e:	f000 f8ed 	bl	8005afc <prvIsQueueEmpty>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f43f af6f 	beq.w	8005808 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800592a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800592c:	4618      	mov	r0, r3
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d14d      	bne.n	80059fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ff78 	bl	8006858 <xTaskPriorityDisinherit>
 8005968:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	e043      	b.n	80059fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d119      	bne.n	80059ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6898      	ldr	r0, [r3, #8]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	461a      	mov	r2, r3
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	f001 ff18 	bl	80077b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d32b      	bcc.n	80059fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	609a      	str	r2, [r3, #8]
 80059aa:	e026      	b.n	80059fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68d8      	ldr	r0, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	461a      	mov	r2, r3
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	f001 fefe 	bl	80077b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	425b      	negs	r3, r3
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d207      	bcs.n	80059e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	425b      	negs	r3, r3
 80059e2:	441a      	add	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d105      	bne.n	80059fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a02:	697b      	ldr	r3, [r7, #20]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	441a      	add	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d303      	bcc.n	8005a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68d9      	ldr	r1, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f001 feb4 	bl	80077b8 <memcpy>
	}
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a60:	f001 fbb2 	bl	80071c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a6c:	e011      	b.n	8005a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d012      	beq.n	8005a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3324      	adds	r3, #36	; 0x24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fd14 	bl	80064a8 <xTaskRemoveFromEventList>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a86:	f000 fde7 	bl	8006658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dce9      	bgt.n	8005a6e <prvUnlockQueue+0x16>
 8005a9a:	e000      	b.n	8005a9e <prvUnlockQueue+0x46>
					break;
 8005a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005aa6:	f001 fbbd 	bl	8007224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aaa:	f001 fb8d 	bl	80071c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab6:	e011      	b.n	8005adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fcef 	bl	80064a8 <xTaskRemoveFromEventList>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad0:	f000 fdc2 	bl	8006658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dce9      	bgt.n	8005ab8 <prvUnlockQueue+0x60>
 8005ae4:	e000      	b.n	8005ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	22ff      	movs	r2, #255	; 0xff
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005af0:	f001 fb98 	bl	8007224 <vPortExitCritical>
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b04:	f001 fb60 	bl	80071c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e001      	b.n	8005b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1a:	f001 fb83 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b30:	f001 fb4a 	bl	80071c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d102      	bne.n	8005b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e001      	b.n	8005b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4a:	f001 fb6b 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e014      	b.n	8005b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <vQueueAddToRegistry+0x4c>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b74:	490b      	ldr	r1, [pc, #44]	; (8005ba4 <vQueueAddToRegistry+0x4c>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <vQueueAddToRegistry+0x4c>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b8a:	e005      	b.n	8005b98 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b07      	cmp	r3, #7
 8005b96:	d9e7      	bls.n	8005b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20004044 	.word	0x20004044

08005ba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bb8:	f001 fb06 	bl	80071c8 <vPortEnterCritical>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d103      	bne.n	8005bd2 <vQueueWaitForMessageRestricted+0x2a>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd8:	b25b      	sxtb	r3, r3
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d103      	bne.n	8005be8 <vQueueWaitForMessageRestricted+0x40>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be8:	f001 fb1c 	bl	8007224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fc29 	bl	8006454 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff28 	bl	8005a58 <prvUnlockQueue>
	}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	; 0x38
 8005c14:	af04      	add	r7, sp, #16
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <xTaskCreateStatic+0x28>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	e7fe      	b.n	8005c36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <xTaskCreateStatic+0x42>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e7fe      	b.n	8005c50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c52:	235c      	movs	r3, #92	; 0x5c
 8005c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b5c      	cmp	r3, #92	; 0x5c
 8005c5a:	d009      	beq.n	8005c70 <xTaskCreateStatic+0x60>
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e7fe      	b.n	8005c6e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01e      	beq.n	8005cb4 <xTaskCreateStatic+0xa4>
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	f107 0314 	add.w	r3, r7, #20
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f850 	bl	8005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cae:	f000 f8d3 	bl	8005e58 <prvAddNewTaskToReadyList>
 8005cb2:	e001      	b.n	8005cb8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cb8:	697b      	ldr	r3, [r7, #20]
	}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3728      	adds	r7, #40	; 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b08c      	sub	sp, #48	; 0x30
 8005cc6:	af04      	add	r7, sp, #16
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	603b      	str	r3, [r7, #0]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fb6c 	bl	80073b4 <pvPortMalloc>
 8005cdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ce4:	205c      	movs	r0, #92	; 0x5c
 8005ce6:	f001 fb65 	bl	80073b4 <pvPortMalloc>
 8005cea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf8:	e005      	b.n	8005d06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f001 fc1c 	bl	8007538 <vPortFree>
 8005d00:	e001      	b.n	8005d06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f80e 	bl	8005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d30:	69f8      	ldr	r0, [r7, #28]
 8005d32:	f000 f891 	bl	8005e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d36:	2301      	movs	r3, #1
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e002      	b.n	8005d42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d42:	69bb      	ldr	r3, [r7, #24]
	}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	461a      	mov	r2, r3
 8005d64:	21a5      	movs	r1, #165	; 0xa5
 8005d66:	f001 fd32 	bl	80077ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	3b01      	subs	r3, #1
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <prvInitialiseNewTask+0x56>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e7fe      	b.n	8005da0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	e012      	b.n	8005dce <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	7819      	ldrb	r1, [r3, #0]
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	3334      	adds	r3, #52	; 0x34
 8005db8:	460a      	mov	r2, r1
 8005dba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d9e9      	bls.n	8005da8 <prvInitialiseNewTask+0x5c>
 8005dd4:	e000      	b.n	8005dd8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005dd6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b37      	cmp	r3, #55	; 0x37
 8005de4:	d901      	bls.n	8005dea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005de6:	2337      	movs	r3, #55	; 0x37
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2200      	movs	r2, #0
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff f9a0 	bl	8005146 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	3318      	adds	r3, #24
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff f99b 	bl	8005146 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	2200      	movs	r2, #0
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	69b8      	ldr	r0, [r7, #24]
 8005e3a:	f001 f8d7 	bl	8006fec <pxPortInitialiseStack>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e50:	bf00      	nop
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e60:	f001 f9b2 	bl	80071c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e64:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <prvAddNewTaskToReadyList+0xc4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <prvAddNewTaskToReadyList+0xc4>)
 8005e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <prvAddNewTaskToReadyList+0xc8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <prvAddNewTaskToReadyList+0xc8>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <prvAddNewTaskToReadyList+0xc4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d110      	bne.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e84:	f000 fc0c 	bl	80066a0 <prvInitialiseTaskLists>
 8005e88:	e00d      	b.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e8a:	4b26      	ldr	r3, [pc, #152]	; (8005f24 <prvAddNewTaskToReadyList+0xcc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <prvAddNewTaskToReadyList+0xc8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d802      	bhi.n	8005ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <prvAddNewTaskToReadyList+0xc8>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <prvAddNewTaskToReadyList+0xd0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a1e      	ldr	r2, [pc, #120]	; (8005f28 <prvAddNewTaskToReadyList+0xd0>)
 8005eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <prvAddNewTaskToReadyList+0xd0>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <prvAddNewTaskToReadyList+0xd4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d903      	bls.n	8005ecc <prvAddNewTaskToReadyList+0x74>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <prvAddNewTaskToReadyList+0xd4>)
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <prvAddNewTaskToReadyList+0xd8>)
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7ff f93b 	bl	800515e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ee8:	f001 f99c 	bl	8007224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eec:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <prvAddNewTaskToReadyList+0xcc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00e      	beq.n	8005f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvAddNewTaskToReadyList+0xc8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d207      	bcs.n	8005f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <prvAddNewTaskToReadyList+0xdc>)
 8005f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000db0 	.word	0x20000db0
 8005f20:	200008dc 	.word	0x200008dc
 8005f24:	20000dbc 	.word	0x20000dbc
 8005f28:	20000dcc 	.word	0x20000dcc
 8005f2c:	20000db8 	.word	0x20000db8
 8005f30:	200008e0 	.word	0x200008e0
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <vTaskDelay+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <vTaskDelay+0x2e>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	e7fe      	b.n	8005f64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005f66:	f000 f87f 	bl	8006068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fcdf 	bl	8006930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f72:	f000 f887 	bl	8006084 <xTaskResumeAll>
 8005f76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <vTaskDelay+0x64>)
 8005f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000dd8 	.word	0x20000dd8
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fae:	463a      	mov	r2, r7
 8005fb0:	1d39      	adds	r1, r7, #4
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff f874 	bl	80050a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	9202      	str	r2, [sp, #8]
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	460a      	mov	r2, r1
 8005fce:	4920      	ldr	r1, [pc, #128]	; (8006050 <vTaskStartScheduler+0xb0>)
 8005fd0:	4820      	ldr	r0, [pc, #128]	; (8006054 <vTaskStartScheduler+0xb4>)
 8005fd2:	f7ff fe1d 	bl	8005c10 <xTaskCreateStatic>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <vTaskStartScheduler+0xb8>)
 8005fda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <vTaskStartScheduler+0xb8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e001      	b.n	8005fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d102      	bne.n	8005ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ff4:	f000 fcf0 	bl	80069d8 <xTimerCreateTimerTask>
 8005ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d115      	bne.n	800602c <vTaskStartScheduler+0x8c>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <vTaskStartScheduler+0xbc>)
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <vTaskStartScheduler+0xc0>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006020:	4b10      	ldr	r3, [pc, #64]	; (8006064 <vTaskStartScheduler+0xc4>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006026:	f001 f85f 	bl	80070e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800602a:	e00d      	b.n	8006048 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d109      	bne.n	8006048 <vTaskStartScheduler+0xa8>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e7fe      	b.n	8006046 <vTaskStartScheduler+0xa6>
}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	0800ab2c 	.word	0x0800ab2c
 8006054:	08006671 	.word	0x08006671
 8006058:	20000dd4 	.word	0x20000dd4
 800605c:	20000dd0 	.word	0x20000dd0
 8006060:	20000dbc 	.word	0x20000dbc
 8006064:	20000db4 	.word	0x20000db4

08006068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <vTaskSuspendAll+0x18>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a03      	ldr	r2, [pc, #12]	; (8006080 <vTaskSuspendAll+0x18>)
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000dd8 	.word	0x20000dd8

08006084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <xTaskResumeAll+0x114>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <xTaskResumeAll+0x2a>
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	e7fe      	b.n	80060ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060ae:	f001 f88b 	bl	80071c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <xTaskResumeAll+0x114>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <xTaskResumeAll+0x114>)
 80060ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <xTaskResumeAll+0x114>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d162      	bne.n	800618a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <xTaskResumeAll+0x118>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05e      	beq.n	800618a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060cc:	e02f      	b.n	800612e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060ce:	4b34      	ldr	r3, [pc, #208]	; (80061a0 <xTaskResumeAll+0x11c>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3318      	adds	r3, #24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff f89a 	bl	8005214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff f895 	bl	8005214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <xTaskResumeAll+0x120>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <xTaskResumeAll+0x7a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <xTaskResumeAll+0x120>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <xTaskResumeAll+0x124>)
 800610c:	441a      	add	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f7ff f822 	bl	800515e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <xTaskResumeAll+0x128>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <xTaskResumeAll+0x12c>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800612e:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <xTaskResumeAll+0x11c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1cb      	bne.n	80060ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800613c:	f000 fb4a 	bl	80067d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006140:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xTaskResumeAll+0x130>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d010      	beq.n	800616e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800614c:	f000 f844 	bl	80061d8 <xTaskIncrementTick>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <xTaskResumeAll+0x12c>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3b01      	subs	r3, #1
 8006160:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f1      	bne.n	800614c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006168:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <xTaskResumeAll+0x130>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800616e:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <xTaskResumeAll+0x12c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <xTaskResumeAll+0x134>)
 800617c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800618a:	f001 f84b 	bl	8007224 <vPortExitCritical>

	return xAlreadyYielded;
 800618e:	68bb      	ldr	r3, [r7, #8]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000dd8 	.word	0x20000dd8
 800619c:	20000db0 	.word	0x20000db0
 80061a0:	20000d70 	.word	0x20000d70
 80061a4:	20000db8 	.word	0x20000db8
 80061a8:	200008e0 	.word	0x200008e0
 80061ac:	200008dc 	.word	0x200008dc
 80061b0:	20000dc4 	.word	0x20000dc4
 80061b4:	20000dc0 	.word	0x20000dc0
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <xTaskGetTickCount+0x18>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061c8:	687b      	ldr	r3, [r7, #4]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr
 80061d4:	20000db4 	.word	0x20000db4

080061d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e2:	4b51      	ldr	r3, [pc, #324]	; (8006328 <xTaskIncrementTick+0x150>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 808d 	bne.w	8006306 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061ec:	4b4f      	ldr	r3, [pc, #316]	; (800632c <xTaskIncrementTick+0x154>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061f4:	4a4d      	ldr	r2, [pc, #308]	; (800632c <xTaskIncrementTick+0x154>)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11f      	bne.n	8006240 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <xTaskIncrementTick+0x158>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <xTaskIncrementTick+0x46>
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	e7fe      	b.n	800621c <xTaskIncrementTick+0x44>
 800621e:	4b44      	ldr	r3, [pc, #272]	; (8006330 <xTaskIncrementTick+0x158>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <xTaskIncrementTick+0x15c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a41      	ldr	r2, [pc, #260]	; (8006330 <xTaskIncrementTick+0x158>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4a41      	ldr	r2, [pc, #260]	; (8006334 <xTaskIncrementTick+0x15c>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b41      	ldr	r3, [pc, #260]	; (8006338 <xTaskIncrementTick+0x160>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <xTaskIncrementTick+0x160>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	f000 faca 	bl	80067d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006240:	4b3e      	ldr	r3, [pc, #248]	; (800633c <xTaskIncrementTick+0x164>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d34e      	bcc.n	80062e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b39      	ldr	r3, [pc, #228]	; (8006330 <xTaskIncrementTick+0x158>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <xTaskIncrementTick+0x80>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <xTaskIncrementTick+0x82>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <xTaskIncrementTick+0x164>)
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	601a      	str	r2, [r3, #0]
					break;
 8006266:	e03f      	b.n	80062e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006268:	4b31      	ldr	r3, [pc, #196]	; (8006330 <xTaskIncrementTick+0x158>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d203      	bcs.n	8006288 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006280:	4a2e      	ldr	r2, [pc, #184]	; (800633c <xTaskIncrementTick+0x164>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6013      	str	r3, [r2, #0]
						break;
 8006286:	e02f      	b.n	80062e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	3304      	adds	r3, #4
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe ffc1 	bl	8005214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	3318      	adds	r3, #24
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe ffb8 	bl	8005214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <xTaskIncrementTick+0x168>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d903      	bls.n	80062b8 <xTaskIncrementTick+0xe0>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a22      	ldr	r2, [pc, #136]	; (8006340 <xTaskIncrementTick+0x168>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <xTaskIncrementTick+0x16c>)
 80062c6:	441a      	add	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fe ff45 	bl	800515e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <xTaskIncrementTick+0x170>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3b3      	bcc.n	800624a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e6:	e7b0      	b.n	800624a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <xTaskIncrementTick+0x170>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ee:	4915      	ldr	r1, [pc, #84]	; (8006344 <xTaskIncrementTick+0x16c>)
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d907      	bls.n	8006310 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e004      	b.n	8006310 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <xTaskIncrementTick+0x174>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a0f      	ldr	r2, [pc, #60]	; (800634c <xTaskIncrementTick+0x174>)
 800630e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <xTaskIncrementTick+0x178>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800631c:	697b      	ldr	r3, [r7, #20]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000dd8 	.word	0x20000dd8
 800632c:	20000db4 	.word	0x20000db4
 8006330:	20000d68 	.word	0x20000d68
 8006334:	20000d6c 	.word	0x20000d6c
 8006338:	20000dc8 	.word	0x20000dc8
 800633c:	20000dd0 	.word	0x20000dd0
 8006340:	20000db8 	.word	0x20000db8
 8006344:	200008e0 	.word	0x200008e0
 8006348:	200008dc 	.word	0x200008dc
 800634c:	20000dc0 	.word	0x20000dc0
 8006350:	20000dc4 	.word	0x20000dc4

08006354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <vTaskSwitchContext+0xa4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006362:	4b26      	ldr	r3, [pc, #152]	; (80063fc <vTaskSwitchContext+0xa8>)
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006368:	e040      	b.n	80063ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <vTaskSwitchContext+0xa8>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <vTaskSwitchContext+0xac>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e00f      	b.n	8006398 <vTaskSwitchContext+0x44>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <vTaskSwitchContext+0x3e>
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e7fe      	b.n	8006390 <vTaskSwitchContext+0x3c>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b01      	subs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	491a      	ldr	r1, [pc, #104]	; (8006404 <vTaskSwitchContext+0xb0>)
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0e5      	beq.n	8006378 <vTaskSwitchContext+0x24>
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <vTaskSwitchContext+0xb0>)
 80063b8:	4413      	add	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3308      	adds	r3, #8
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d104      	bne.n	80063dc <vTaskSwitchContext+0x88>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4a09      	ldr	r2, [pc, #36]	; (8006408 <vTaskSwitchContext+0xb4>)
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4a06      	ldr	r2, [pc, #24]	; (8006400 <vTaskSwitchContext+0xac>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6013      	str	r3, [r2, #0]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000dd8 	.word	0x20000dd8
 80063fc:	20000dc4 	.word	0x20000dc4
 8006400:	20000db8 	.word	0x20000db8
 8006404:	200008e0 	.word	0x200008e0
 8006408:	200008dc 	.word	0x200008dc

0800640c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <vTaskPlaceOnEventList+0x24>
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e7fe      	b.n	800642e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <vTaskPlaceOnEventList+0x44>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3318      	adds	r3, #24
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fe feb3 	bl	80051a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800643e:	2101      	movs	r1, #1
 8006440:	6838      	ldr	r0, [r7, #0]
 8006442:	f000 fa75 	bl	8006930 <prvAddCurrentTaskToDelayedList>
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200008dc 	.word	0x200008dc

08006454 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <vTaskPlaceOnEventListRestricted+0x26>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e7fe      	b.n	8006478 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3318      	adds	r3, #24
 8006480:	4619      	mov	r1, r3
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7fe fe6b 	bl	800515e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f000 fa4a 	bl	8006930 <prvAddCurrentTaskToDelayedList>
	}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200008dc 	.word	0x200008dc

080064a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <xTaskRemoveFromEventList+0x2a>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e7fe      	b.n	80064d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3318      	adds	r3, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fe9c 	bl	8005214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064dc:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <xTaskRemoveFromEventList+0xac>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11d      	bne.n	8006520 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fe93 	bl	8005214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4b19      	ldr	r3, [pc, #100]	; (8006558 <xTaskRemoveFromEventList+0xb0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d903      	bls.n	8006502 <xTaskRemoveFromEventList+0x5a>
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a16      	ldr	r2, [pc, #88]	; (8006558 <xTaskRemoveFromEventList+0xb0>)
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <xTaskRemoveFromEventList+0xb4>)
 8006510:	441a      	add	r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe fe20 	bl	800515e <vListInsertEnd>
 800651e:	e005      	b.n	800652c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3318      	adds	r3, #24
 8006524:	4619      	mov	r1, r3
 8006526:	480e      	ldr	r0, [pc, #56]	; (8006560 <xTaskRemoveFromEventList+0xb8>)
 8006528:	f7fe fe19 	bl	800515e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <xTaskRemoveFromEventList+0xbc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d905      	bls.n	8006546 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <xTaskRemoveFromEventList+0xc0>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e001      	b.n	800654a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000dd8 	.word	0x20000dd8
 8006558:	20000db8 	.word	0x20000db8
 800655c:	200008e0 	.word	0x200008e0
 8006560:	20000d70 	.word	0x20000d70
 8006564:	200008dc 	.word	0x200008dc
 8006568:	20000dc4 	.word	0x20000dc4

0800656c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <vTaskInternalSetTimeOutState+0x24>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <vTaskInternalSetTimeOutState+0x28>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000dc8 	.word	0x20000dc8
 8006594:	20000db4 	.word	0x20000db4

08006598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <xTaskCheckForTimeOut+0x24>
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e7fe      	b.n	80065ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <xTaskCheckForTimeOut+0x3e>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e7fe      	b.n	80065d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80065d6:	f000 fdf7 	bl	80071c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <xTaskCheckForTimeOut+0xb8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d102      	bne.n	80065fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	e023      	b.n	8006642 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <xTaskCheckForTimeOut+0xbc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d007      	beq.n	8006616 <xTaskCheckForTimeOut+0x7e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	429a      	cmp	r2, r3
 800660e:	d302      	bcc.n	8006616 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e015      	b.n	8006642 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	429a      	cmp	r2, r3
 800661e:	d20b      	bcs.n	8006638 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff9d 	bl	800656c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	e004      	b.n	8006642 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006642:	f000 fdef 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8006646:	69fb      	ldr	r3, [r7, #28]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000db4 	.word	0x20000db4
 8006654:	20000dc8 	.word	0x20000dc8

08006658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <vTaskMissedYield+0x14>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000dc4 	.word	0x20000dc4

08006670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006678:	f000 f852 	bl	8006720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <prvIdleTask+0x28>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d9f9      	bls.n	8006678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <prvIdleTask+0x2c>)
 8006686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006694:	e7f0      	b.n	8006678 <prvIdleTask+0x8>
 8006696:	bf00      	nop
 8006698:	200008e0 	.word	0x200008e0
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	e00c      	b.n	80066c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <prvInitialiseTaskLists+0x60>)
 80066b8:	4413      	add	r3, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fd24 	bl	8005108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b37      	cmp	r3, #55	; 0x37
 80066ca:	d9ef      	bls.n	80066ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066cc:	480d      	ldr	r0, [pc, #52]	; (8006704 <prvInitialiseTaskLists+0x64>)
 80066ce:	f7fe fd1b 	bl	8005108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066d2:	480d      	ldr	r0, [pc, #52]	; (8006708 <prvInitialiseTaskLists+0x68>)
 80066d4:	f7fe fd18 	bl	8005108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066d8:	480c      	ldr	r0, [pc, #48]	; (800670c <prvInitialiseTaskLists+0x6c>)
 80066da:	f7fe fd15 	bl	8005108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066de:	480c      	ldr	r0, [pc, #48]	; (8006710 <prvInitialiseTaskLists+0x70>)
 80066e0:	f7fe fd12 	bl	8005108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066e4:	480b      	ldr	r0, [pc, #44]	; (8006714 <prvInitialiseTaskLists+0x74>)
 80066e6:	f7fe fd0f 	bl	8005108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <prvInitialiseTaskLists+0x78>)
 80066ec:	4a05      	ldr	r2, [pc, #20]	; (8006704 <prvInitialiseTaskLists+0x64>)
 80066ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <prvInitialiseTaskLists+0x7c>)
 80066f2:	4a05      	ldr	r2, [pc, #20]	; (8006708 <prvInitialiseTaskLists+0x68>)
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200008e0 	.word	0x200008e0
 8006704:	20000d40 	.word	0x20000d40
 8006708:	20000d54 	.word	0x20000d54
 800670c:	20000d70 	.word	0x20000d70
 8006710:	20000d84 	.word	0x20000d84
 8006714:	20000d9c 	.word	0x20000d9c
 8006718:	20000d68 	.word	0x20000d68
 800671c:	20000d6c 	.word	0x20000d6c

08006720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006726:	e019      	b.n	800675c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006728:	f000 fd4e 	bl	80071c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <prvCheckTasksWaitingTermination+0x4c>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fd6b 	bl	8005214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <prvCheckTasksWaitingTermination+0x50>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3b01      	subs	r3, #1
 8006744:	4a0a      	ldr	r2, [pc, #40]	; (8006770 <prvCheckTasksWaitingTermination+0x50>)
 8006746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <prvCheckTasksWaitingTermination+0x54>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <prvCheckTasksWaitingTermination+0x54>)
 8006750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006752:	f000 fd67 	bl	8007224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f80e 	bl	8006778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <prvCheckTasksWaitingTermination+0x54>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e1      	bne.n	8006728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000d84 	.word	0x20000d84
 8006770:	20000db0 	.word	0x20000db0
 8006774:	20000d98 	.word	0x20000d98

08006778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fed2 	bl	8007538 <vPortFree>
				vPortFree( pxTCB );
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fecf 	bl	8007538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800679a:	e017      	b.n	80067cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d103      	bne.n	80067ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fec6 	bl	8007538 <vPortFree>
	}
 80067ac:	e00e      	b.n	80067cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d009      	beq.n	80067cc <prvDeleteTCB+0x54>
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e7fe      	b.n	80067ca <prvDeleteTCB+0x52>
	}
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <prvResetNextTaskUnblockTime+0x40>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <prvResetNextTaskUnblockTime+0x14>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <prvResetNextTaskUnblockTime+0x16>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <prvResetNextTaskUnblockTime+0x44>)
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067f6:	e008      	b.n	800680a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <prvResetNextTaskUnblockTime+0x40>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4a04      	ldr	r2, [pc, #16]	; (8006818 <prvResetNextTaskUnblockTime+0x44>)
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	20000d68 	.word	0x20000d68
 8006818:	20000dd0 	.word	0x20000dd0

0800681c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <xTaskGetSchedulerState+0x34>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800682a:	2301      	movs	r3, #1
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	e008      	b.n	8006842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <xTaskGetSchedulerState+0x38>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006838:	2302      	movs	r3, #2
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	e001      	b.n	8006842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006842:	687b      	ldr	r3, [r7, #4]
	}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000dbc 	.word	0x20000dbc
 8006854:	20000dd8 	.word	0x20000dd8

08006858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d054      	beq.n	8006918 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800686e:	4b2d      	ldr	r3, [pc, #180]	; (8006924 <xTaskPriorityDisinherit+0xcc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d009      	beq.n	800688c <xTaskPriorityDisinherit+0x34>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e7fe      	b.n	800688a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <xTaskPriorityDisinherit+0x50>
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	e7fe      	b.n	80068a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	1e5a      	subs	r2, r3, #1
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d02c      	beq.n	8006918 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d128      	bne.n	8006918 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fca2 	bl	8005214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xTaskPriorityDisinherit+0xd0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d903      	bls.n	80068f8 <xTaskPriorityDisinherit+0xa0>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <xTaskPriorityDisinherit+0xd0>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a09      	ldr	r2, [pc, #36]	; (800692c <xTaskPriorityDisinherit+0xd4>)
 8006906:	441a      	add	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7fe fc25 	bl	800515e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006918:	697b      	ldr	r3, [r7, #20]
	}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200008dc 	.word	0x200008dc
 8006928:	20000db8 	.word	0x20000db8
 800692c:	200008e0 	.word	0x200008e0

08006930 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800693a:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3304      	adds	r3, #4
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fc64 	bl	8005214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d10a      	bne.n	800696a <prvAddCurrentTaskToDelayedList+0x3a>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4819      	ldr	r0, [pc, #100]	; (80069c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006964:	f7fe fbfb 	bl	800515e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006968:	e026      	b.n	80069b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4413      	add	r3, r2
 8006970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006972:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	429a      	cmp	r2, r3
 8006980:	d209      	bcs.n	8006996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fe fc08 	bl	80051a4 <vListInsert>
}
 8006994:	e010      	b.n	80069b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fbfe 	bl	80051a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d202      	bcs.n	80069b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069b2:	4a08      	ldr	r2, [pc, #32]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6013      	str	r3, [r2, #0]
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000db4 	.word	0x20000db4
 80069c4:	200008dc 	.word	0x200008dc
 80069c8:	20000d9c 	.word	0x20000d9c
 80069cc:	20000d6c 	.word	0x20000d6c
 80069d0:	20000d68 	.word	0x20000d68
 80069d4:	20000dd0 	.word	0x20000dd0

080069d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069e2:	f000 fac3 	bl	8006f6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069e6:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <xTimerCreateTimerTask+0x80>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d021      	beq.n	8006a32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069f6:	1d3a      	adds	r2, r7, #4
 80069f8:	f107 0108 	add.w	r1, r7, #8
 80069fc:	f107 030c 	add.w	r3, r7, #12
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fb67 	bl	80050d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	2302      	movs	r3, #2
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	460a      	mov	r2, r1
 8006a18:	4910      	ldr	r1, [pc, #64]	; (8006a5c <xTimerCreateTimerTask+0x84>)
 8006a1a:	4811      	ldr	r0, [pc, #68]	; (8006a60 <xTimerCreateTimerTask+0x88>)
 8006a1c:	f7ff f8f8 	bl	8005c10 <xTaskCreateStatic>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <xTimerCreateTimerTask+0x8c>)
 8006a24:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a26:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <xTimerCreateTimerTask+0x8c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <xTimerCreateTimerTask+0x74>
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e7fe      	b.n	8006a4a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006a4c:	697b      	ldr	r3, [r7, #20]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000e0c 	.word	0x20000e0c
 8006a5c:	0800ab34 	.word	0x0800ab34
 8006a60:	08006b81 	.word	0x08006b81
 8006a64:	20000e10 	.word	0x20000e10

08006a68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <xTimerGenericCommand+0x2c>
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	e7fe      	b.n	8006a92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a94:	4b19      	ldr	r3, [pc, #100]	; (8006afc <xTimerGenericCommand+0x94>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02a      	beq.n	8006af2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	dc18      	bgt.n	8006ae0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aae:	f7ff feb5 	bl	800681c <xTaskGetSchedulerState>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d109      	bne.n	8006acc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <xTimerGenericCommand+0x94>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	f107 0110 	add.w	r1, r7, #16
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac4:	f7fe fcce 	bl	8005464 <xQueueGenericSend>
 8006ac8:	6278      	str	r0, [r7, #36]	; 0x24
 8006aca:	e012      	b.n	8006af2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <xTimerGenericCommand+0x94>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	f107 0110 	add.w	r1, r7, #16
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f7fe fcc4 	bl	8005464 <xQueueGenericSend>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24
 8006ade:	e008      	b.n	8006af2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <xTimerGenericCommand+0x94>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	f107 0110 	add.w	r1, r7, #16
 8006ae8:	2300      	movs	r3, #0
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	f7fe fdb4 	bl	8005658 <xQueueGenericSendFromISR>
 8006af0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	; 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000e0c 	.word	0x20000e0c

08006b00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <prvProcessExpiredTimer+0x7c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fb7b 	bl	8005214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d121      	bne.n	8006b6a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	18d1      	adds	r1, r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f000 f8c8 	bl	8006cc8 <prvInsertTimerInActiveList>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d015      	beq.n	8006b6a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	2100      	movs	r1, #0
 8006b48:	6978      	ldr	r0, [r7, #20]
 8006b4a:	f7ff ff8d 	bl	8006a68 <xTimerGenericCommand>
 8006b4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <prvProcessExpiredTimer+0x6a>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e7fe      	b.n	8006b68 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	6978      	ldr	r0, [r7, #20]
 8006b70:	4798      	blx	r3
}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000e04 	.word	0x20000e04

08006b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b88:	f107 0308 	add.w	r3, r7, #8
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f857 	bl	8006c40 <prvGetNextExpireTime>
 8006b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f803 	bl	8006ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b9e:	f000 f8d5 	bl	8006d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba2:	e7f1      	b.n	8006b88 <prvTimerTask+0x8>

08006ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bae:	f7ff fa5b 	bl	8006068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f866 	bl	8006c88 <prvSampleTimeNow>
 8006bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d130      	bne.n	8006c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <prvProcessTimerOrBlockTask+0x3c>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d806      	bhi.n	8006be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bd2:	f7ff fa57 	bl	8006084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ff91 	bl	8006b00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bde:	e024      	b.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <prvProcessTimerOrBlockTask+0x90>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <prvProcessTimerOrBlockTask+0x94>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7fe ffcf 	bl	8005ba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c0a:	f7ff fa3b 	bl	8006084 <xTaskResumeAll>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <prvProcessTimerOrBlockTask+0x98>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
}
 8006c24:	e001      	b.n	8006c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c26:	f7ff fa2d 	bl	8006084 <xTaskResumeAll>
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000e08 	.word	0x20000e08
 8006c38:	20000e0c 	.word	0x20000e0c
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvGetNextExpireTime+0x44>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <prvGetNextExpireTime+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	e001      	b.n	8006c76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000e04 	.word	0x20000e04

08006c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c90:	f7ff fa94 	bl	80061bc <xTaskGetTickCount>
 8006c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <prvSampleTimeNow+0x3c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d205      	bcs.n	8006cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ca0:	f000 f904 	bl	8006eac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cb2:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <prvSampleTimeNow+0x3c>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000e14 	.word	0x20000e14

08006cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d812      	bhi.n	8006d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	1ad2      	subs	r2, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e01b      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <prvInsertTimerInActiveList+0x7c>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f7fe fa49 	bl	80051a4 <vListInsert>
 8006d12:	e012      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d206      	bcs.n	8006d2a <prvInsertTimerInActiveList+0x62>
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e007      	b.n	8006d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d2a:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <prvInsertTimerInActiveList+0x80>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f7fe fa35 	bl	80051a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000e08 	.word	0x20000e08
 8006d48:	20000e04 	.word	0x20000e04

08006d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	; 0x38
 8006d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d52:	e099      	b.n	8006e88 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da17      	bge.n	8006d8a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <prvProcessReceivedCommands+0x2e>
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e7fe      	b.n	8006d78 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d80:	6850      	ldr	r0, [r2, #4]
 8006d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	db7a      	blt.n	8006e86 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fa37 	bl	8005214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006da6:	463b      	mov	r3, r7
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ff6d 	bl	8006c88 <prvSampleTimeNow>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b09      	cmp	r3, #9
 8006db4:	d868      	bhi.n	8006e88 <prvProcessReceivedCommands+0x13c>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <prvProcessReceivedCommands+0x70>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006de5 	.word	0x08006de5
 8006dc8:	08006e89 	.word	0x08006e89
 8006dcc:	08006e3f 	.word	0x08006e3f
 8006dd0:	08006e75 	.word	0x08006e75
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006de5 	.word	0x08006de5
 8006ddc:	08006e89 	.word	0x08006e89
 8006de0:	08006e3f 	.word	0x08006e3f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	18d1      	adds	r1, r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df2:	f7ff ff69 	bl	8006cc8 <prvInsertTimerInActiveList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d045      	beq.n	8006e88 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e02:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d13d      	bne.n	8006e88 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	441a      	add	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1e:	f7ff fe23 	bl	8006a68 <xTimerGenericCommand>
 8006e22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d12e      	bne.n	8006e88 <prvProcessReceivedCommands+0x13c>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e7fe      	b.n	8006e3c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <prvProcessReceivedCommands+0x114>
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e7fe      	b.n	8006e5e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	18d1      	adds	r1, r2, r3
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6e:	f7ff ff2b 	bl	8006cc8 <prvInsertTimerInActiveList>
					break;
 8006e72:	e009      	b.n	8006e88 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e80:	f000 fb5a 	bl	8007538 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e84:	e000      	b.n	8006e88 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e86:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <prvProcessReceivedCommands+0x15c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	1d39      	adds	r1, r7, #4
 8006e8e:	2200      	movs	r2, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fc75 	bl	8005780 <xQueueReceive>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f af5b 	bne.w	8006d54 <prvProcessReceivedCommands+0x8>
	}
}
 8006e9e:	bf00      	nop
 8006ea0:	3730      	adds	r7, #48	; 0x30
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000e0c 	.word	0x20000e0c

08006eac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eb2:	e044      	b.n	8006f3e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe f9a1 	bl	8005214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d12d      	bne.n	8006f3e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4413      	add	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d90e      	bls.n	8006f12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f00:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe f94a 	bl	80051a4 <vListInsert>
 8006f10:	e015      	b.n	8006f3e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f12:	2300      	movs	r3, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	2300      	movs	r3, #0
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff fda3 	bl	8006a68 <xTimerGenericCommand>
 8006f22:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <prvSwitchTimerLists+0x92>
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	e7fe      	b.n	8006f3c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1b5      	bne.n	8006eb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <prvSwitchTimerLists+0xbc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <prvSwitchTimerLists+0xb8>)
 8006f54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f56:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <prvSwitchTimerLists+0xbc>)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000e04 	.word	0x20000e04
 8006f68:	20000e08 	.word	0x20000e08

08006f6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f72:	f000 f929 	bl	80071c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <prvCheckForValidListAndQueue+0x60>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d120      	bne.n	8006fc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f7e:	4814      	ldr	r0, [pc, #80]	; (8006fd0 <prvCheckForValidListAndQueue+0x64>)
 8006f80:	f7fe f8c2 	bl	8005108 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f84:	4813      	ldr	r0, [pc, #76]	; (8006fd4 <prvCheckForValidListAndQueue+0x68>)
 8006f86:	f7fe f8bf 	bl	8005108 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <prvCheckForValidListAndQueue+0x6c>)
 8006f8c:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <prvCheckForValidListAndQueue+0x64>)
 8006f8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <prvCheckForValidListAndQueue+0x70>)
 8006f92:	4a10      	ldr	r2, [pc, #64]	; (8006fd4 <prvCheckForValidListAndQueue+0x68>)
 8006f94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f96:	2300      	movs	r3, #0
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <prvCheckForValidListAndQueue+0x74>)
 8006f9c:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <prvCheckForValidListAndQueue+0x78>)
 8006f9e:	2110      	movs	r1, #16
 8006fa0:	200a      	movs	r0, #10
 8006fa2:	f7fe f9c9 	bl	8005338 <xQueueGenericCreateStatic>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <prvCheckForValidListAndQueue+0x60>)
 8006faa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fac:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <prvCheckForValidListAndQueue+0x60>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <prvCheckForValidListAndQueue+0x60>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	490b      	ldr	r1, [pc, #44]	; (8006fe8 <prvCheckForValidListAndQueue+0x7c>)
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fdcc 	bl	8005b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fc0:	f000 f930 	bl	8007224 <vPortExitCritical>
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000e0c 	.word	0x20000e0c
 8006fd0:	20000ddc 	.word	0x20000ddc
 8006fd4:	20000df0 	.word	0x20000df0
 8006fd8:	20000e04 	.word	0x20000e04
 8006fdc:	20000e08 	.word	0x20000e08
 8006fe0:	20000eb8 	.word	0x20000eb8
 8006fe4:	20000e18 	.word	0x20000e18
 8006fe8:	0800ab3c 	.word	0x0800ab3c

08006fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b04      	subs	r3, #4
 8006ffc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b04      	subs	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b04      	subs	r3, #4
 800701a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <pxPortInitialiseStack+0x54>)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3b14      	subs	r3, #20
 8007026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3b20      	subs	r3, #32
 8007032:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr
 8007040:	08007045 	.word	0x08007045

08007044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <prvTaskExitError+0x4c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d009      	beq.n	800706c <prvTaskExitError+0x28>
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e7fe      	b.n	800706a <prvTaskExitError+0x26>
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800707e:	bf00      	nop
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0fc      	beq.n	8007080 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr
 8007090:	20000010 	.word	0x20000010
	...

080070a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <pxCurrentTCBConst2>)
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070aa:	f380 8809 	msr	PSP, r0
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80070be:	4770      	bx	lr

080070c0 <pxCurrentTCBConst2>:
 80070c0:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80070c8:	4806      	ldr	r0, [pc, #24]	; (80070e4 <prvPortStartFirstTask+0x1c>)
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f380 8808 	msr	MSP, r0
 80070d2:	b662      	cpsie	i
 80070d4:	b661      	cpsie	f
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	df00      	svc	0
 80070e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070e2:	bf00      	nop
 80070e4:	e000ed08 	.word	0xe000ed08

080070e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <xPortStartScheduler+0xcc>)
 80070f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007110:	b2da      	uxtb	r2, r3
 8007112:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <xPortStartScheduler+0xd0>)
 8007114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <xPortStartScheduler+0xd4>)
 8007118:	2207      	movs	r2, #7
 800711a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711c:	e009      	b.n	8007132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800711e:	4b27      	ldr	r3, [pc, #156]	; (80071bc <xPortStartScheduler+0xd4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3b01      	subs	r3, #1
 8007124:	4a25      	ldr	r2, [pc, #148]	; (80071bc <xPortStartScheduler+0xd4>)
 8007126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d0ef      	beq.n	800711e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <xPortStartScheduler+0xd4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1c3 0307 	rsb	r3, r3, #7
 8007146:	2b04      	cmp	r3, #4
 8007148:	d009      	beq.n	800715e <xPortStartScheduler+0x76>
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	60bb      	str	r3, [r7, #8]
 800715c:	e7fe      	b.n	800715c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800715e:	4b17      	ldr	r3, [pc, #92]	; (80071bc <xPortStartScheduler+0xd4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <xPortStartScheduler+0xd4>)
 8007166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007168:	4b14      	ldr	r3, [pc, #80]	; (80071bc <xPortStartScheduler+0xd4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007170:	4a12      	ldr	r2, [pc, #72]	; (80071bc <xPortStartScheduler+0xd4>)
 8007172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <xPortStartScheduler+0xd8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0f      	ldr	r2, [pc, #60]	; (80071c0 <xPortStartScheduler+0xd8>)
 8007182:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <xPortStartScheduler+0xd8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <xPortStartScheduler+0xd8>)
 800718e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007194:	f000 f8b0 	bl	80072f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <xPortStartScheduler+0xdc>)
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800719e:	f7ff ff93 	bl	80070c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071a2:	f7ff f8d7 	bl	8006354 <vTaskSwitchContext>
	prvTaskExitError();
 80071a6:	f7ff ff4d 	bl	8007044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000e400 	.word	0xe000e400
 80071b8:	20000f08 	.word	0x20000f08
 80071bc:	20000f0c 	.word	0x20000f0c
 80071c0:	e000ed20 	.word	0xe000ed20
 80071c4:	20000010 	.word	0x20000010

080071c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <vPortEnterCritical+0x54>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	4a0d      	ldr	r2, [pc, #52]	; (800721c <vPortEnterCritical+0x54>)
 80071e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071ea:	4b0c      	ldr	r3, [pc, #48]	; (800721c <vPortEnterCritical+0x54>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10e      	bne.n	8007210 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <vPortEnterCritical+0x58>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <vPortEnterCritical+0x48>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	e7fe      	b.n	800720e <vPortEnterCritical+0x46>
	}
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000010 	.word	0x20000010
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800722a:	4b10      	ldr	r3, [pc, #64]	; (800726c <vPortExitCritical+0x48>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <vPortExitCritical+0x22>
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	e7fe      	b.n	8007244 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <vPortExitCritical+0x48>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3b01      	subs	r3, #1
 800724c:	4a07      	ldr	r2, [pc, #28]	; (800726c <vPortExitCritical+0x48>)
 800724e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <vPortExitCritical+0x48>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <vPortExitCritical+0x3e>
 8007258:	2300      	movs	r3, #0
 800725a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr
 800726c:	20000010 	.word	0x20000010

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <pxCurrentTCBConst>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007280:	6010      	str	r0, [r2, #0]
 8007282:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007286:	f04f 0050 	mov.w	r0, #80	; 0x50
 800728a:	f380 8811 	msr	BASEPRI, r0
 800728e:	f7ff f861 	bl	8006354 <vTaskSwitchContext>
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	6808      	ldr	r0, [r1, #0]
 80072a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072a6:	f380 8809 	msr	PSP, r0
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	4770      	bx	lr

080072b0 <pxCurrentTCBConst>:
 80072b0:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072d0:	f7fe ff82 	bl	80061d8 <xTaskIncrementTick>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <SysTick_Handler+0x3c>)
 80072dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	2300      	movs	r3, #0
 80072e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vPortSetupTimerInterrupt+0x30>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <vPortSetupTimerInterrupt+0x34>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007308:	4b09      	ldr	r3, [pc, #36]	; (8007330 <vPortSetupTimerInterrupt+0x38>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a09      	ldr	r2, [pc, #36]	; (8007334 <vPortSetupTimerInterrupt+0x3c>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	099b      	lsrs	r3, r3, #6
 8007314:	4a08      	ldr	r2, [pc, #32]	; (8007338 <vPortSetupTimerInterrupt+0x40>)
 8007316:	3b01      	subs	r3, #1
 8007318:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800731a:	4b03      	ldr	r3, [pc, #12]	; (8007328 <vPortSetupTimerInterrupt+0x30>)
 800731c:	2207      	movs	r2, #7
 800731e:	601a      	str	r2, [r3, #0]
}
 8007320:	bf00      	nop
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	e000e010 	.word	0xe000e010
 800732c:	e000e018 	.word	0xe000e018
 8007330:	20000004 	.word	0x20000004
 8007334:	10624dd3 	.word	0x10624dd3
 8007338:	e000e014 	.word	0xe000e014

0800733c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007342:	f3ef 8305 	mrs	r3, IPSR
 8007346:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d913      	bls.n	8007376 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <vPortValidateInterruptPriority+0x68>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007358:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <vPortValidateInterruptPriority+0x6c>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	7afa      	ldrb	r2, [r7, #11]
 800735e:	429a      	cmp	r2, r3
 8007360:	d209      	bcs.n	8007376 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	e7fe      	b.n	8007374 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007376:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <vPortValidateInterruptPriority+0x70>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <vPortValidateInterruptPriority+0x74>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d909      	bls.n	800739a <vPortValidateInterruptPriority+0x5e>
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	e7fe      	b.n	8007398 <vPortValidateInterruptPriority+0x5c>
	}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	e000e3f0 	.word	0xe000e3f0
 80073a8:	20000f08 	.word	0x20000f08
 80073ac:	e000ed0c 	.word	0xe000ed0c
 80073b0:	20000f0c 	.word	0x20000f0c

080073b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073c0:	f7fe fe52 	bl	8006068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c4:	4b57      	ldr	r3, [pc, #348]	; (8007524 <pvPortMalloc+0x170>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073cc:	f000 f90c 	bl	80075e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073d0:	4b55      	ldr	r3, [pc, #340]	; (8007528 <pvPortMalloc+0x174>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 808c 	bne.w	80074f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01c      	beq.n	800741e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80073e4:	2208      	movs	r2, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4413      	add	r3, r2
 80073ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	3308      	adds	r3, #8
 80073fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <pvPortMalloc+0x6a>
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e7fe      	b.n	800741c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d068      	beq.n	80074f6 <pvPortMalloc+0x142>
 8007424:	4b41      	ldr	r3, [pc, #260]	; (800752c <pvPortMalloc+0x178>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	429a      	cmp	r2, r3
 800742c:	d863      	bhi.n	80074f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800742e:	4b40      	ldr	r3, [pc, #256]	; (8007530 <pvPortMalloc+0x17c>)
 8007430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007432:	4b3f      	ldr	r3, [pc, #252]	; (8007530 <pvPortMalloc+0x17c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007438:	e004      	b.n	8007444 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d903      	bls.n	8007456 <pvPortMalloc+0xa2>
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f1      	bne.n	800743a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007456:	4b33      	ldr	r3, [pc, #204]	; (8007524 <pvPortMalloc+0x170>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745c:	429a      	cmp	r2, r3
 800745e:	d04a      	beq.n	80074f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2208      	movs	r2, #8
 8007466:	4413      	add	r3, r2
 8007468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	1ad2      	subs	r2, r2, r3
 800747a:	2308      	movs	r3, #8
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	d91e      	bls.n	80074c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4413      	add	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <pvPortMalloc+0xf4>
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	e7fe      	b.n	80074a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074ba:	69b8      	ldr	r0, [r7, #24]
 80074bc:	f000 f8f6 	bl	80076ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074c0:	4b1a      	ldr	r3, [pc, #104]	; (800752c <pvPortMalloc+0x178>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	4a18      	ldr	r2, [pc, #96]	; (800752c <pvPortMalloc+0x178>)
 80074cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074ce:	4b17      	ldr	r3, [pc, #92]	; (800752c <pvPortMalloc+0x178>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b18      	ldr	r3, [pc, #96]	; (8007534 <pvPortMalloc+0x180>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d203      	bcs.n	80074e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <pvPortMalloc+0x178>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <pvPortMalloc+0x180>)
 80074e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <pvPortMalloc+0x174>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074f6:	f7fe fdc5 	bl	8006084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <pvPortMalloc+0x164>
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e7fe      	b.n	8007516 <pvPortMalloc+0x162>
	return pvReturn;
 8007518:	69fb      	ldr	r3, [r7, #28]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3728      	adds	r7, #40	; 0x28
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20003df8 	.word	0x20003df8
 8007528:	20003e04 	.word	0x20003e04
 800752c:	20003dfc 	.word	0x20003dfc
 8007530:	20003df0 	.word	0x20003df0
 8007534:	20003e00 	.word	0x20003e00

08007538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d046      	beq.n	80075d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800754a:	2308      	movs	r3, #8
 800754c:	425b      	negs	r3, r3
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4413      	add	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <vPortFree+0xa8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <vPortFree+0x42>
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e7fe      	b.n	8007578 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <vPortFree+0x5e>
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
 8007594:	e7fe      	b.n	8007594 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <vPortFree+0xa8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d019      	beq.n	80075d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d115      	bne.n	80075d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <vPortFree+0xa8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	43db      	mvns	r3, r3
 80075b6:	401a      	ands	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075bc:	f7fe fd54 	bl	8006068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <vPortFree+0xac>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	4a06      	ldr	r2, [pc, #24]	; (80075e4 <vPortFree+0xac>)
 80075cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ce:	6938      	ldr	r0, [r7, #16]
 80075d0:	f000 f86c 	bl	80076ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075d4:	f7fe fd56 	bl	8006084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075d8:	bf00      	nop
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20003e04 	.word	0x20003e04
 80075e4:	20003dfc 	.word	0x20003dfc

080075e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ee:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80075f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075f4:	4b27      	ldr	r3, [pc, #156]	; (8007694 <prvHeapInit+0xac>)
 80075f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3307      	adds	r3, #7
 8007606:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <prvHeapInit+0xac>)
 8007618:	4413      	add	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007620:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <prvHeapInit+0xb0>)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007626:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <prvHeapInit+0xb0>)
 8007628:	2200      	movs	r2, #0
 800762a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4413      	add	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007634:	2208      	movs	r2, #8
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0307 	bic.w	r3, r3, #7
 8007642:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4a15      	ldr	r2, [pc, #84]	; (800769c <prvHeapInit+0xb4>)
 8007648:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <prvHeapInit+0xb4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <prvHeapInit+0xb4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <prvHeapInit+0xb4>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4a0a      	ldr	r2, [pc, #40]	; (80076a0 <prvHeapInit+0xb8>)
 8007676:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <prvHeapInit+0xbc>)
 800767e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007680:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <prvHeapInit+0xc0>)
 8007682:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007686:	601a      	str	r2, [r3, #0]
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000f10 	.word	0x20000f10
 8007698:	20003df0 	.word	0x20003df0
 800769c:	20003df8 	.word	0x20003df8
 80076a0:	20003e00 	.word	0x20003e00
 80076a4:	20003dfc 	.word	0x20003dfc
 80076a8:	20003e04 	.word	0x20003e04

080076ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076b4:	4b27      	ldr	r3, [pc, #156]	; (8007754 <prvInsertBlockIntoFreeList+0xa8>)
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e002      	b.n	80076c0 <prvInsertBlockIntoFreeList+0x14>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d8f7      	bhi.n	80076ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	4413      	add	r3, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d108      	bne.n	80076ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	441a      	add	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d118      	bne.n	8007734 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <prvInsertBlockIntoFreeList+0xac>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d00d      	beq.n	800772a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	441a      	add	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e008      	b.n	800773c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <prvInsertBlockIntoFreeList+0xac>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e003      	b.n	800773c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d002      	beq.n	800774a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr
 8007754:	20003df0 	.word	0x20003df0
 8007758:	20003df8 	.word	0x20003df8

0800775c <atoi>:
 800775c:	220a      	movs	r2, #10
 800775e:	2100      	movs	r1, #0
 8007760:	f000 bd28 	b.w	80081b4 <strtol>

08007764 <__errno>:
 8007764:	4b01      	ldr	r3, [pc, #4]	; (800776c <__errno+0x8>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000014 	.word	0x20000014

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	2500      	movs	r5, #0
 8007774:	4e0c      	ldr	r6, [pc, #48]	; (80077a8 <__libc_init_array+0x38>)
 8007776:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007778:	1ba4      	subs	r4, r4, r6
 800777a:	10a4      	asrs	r4, r4, #2
 800777c:	42a5      	cmp	r5, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	f003 f916 	bl	800a9b0 <_init>
 8007784:	2500      	movs	r5, #0
 8007786:	4e0a      	ldr	r6, [pc, #40]	; (80077b0 <__libc_init_array+0x40>)
 8007788:	4c0a      	ldr	r4, [pc, #40]	; (80077b4 <__libc_init_array+0x44>)
 800778a:	1ba4      	subs	r4, r4, r6
 800778c:	10a4      	asrs	r4, r4, #2
 800778e:	42a5      	cmp	r5, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007798:	4798      	blx	r3
 800779a:	3501      	adds	r5, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a2:	4798      	blx	r3
 80077a4:	3501      	adds	r5, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	0800b0f8 	.word	0x0800b0f8
 80077ac:	0800b0f8 	.word	0x0800b0f8
 80077b0:	0800b0f8 	.word	0x0800b0f8
 80077b4:	0800b0fc 	.word	0x0800b0fc

080077b8 <memcpy>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	1e43      	subs	r3, r0, #1
 80077bc:	440a      	add	r2, r1
 80077be:	4291      	cmp	r1, r2
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	bd10      	pop	{r4, pc}
 80077c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077cc:	e7f7      	b.n	80077be <memcpy+0x6>

080077ce <memset>:
 80077ce:	4603      	mov	r3, r0
 80077d0:	4402      	add	r2, r0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <memset+0xa>
 80077d6:	4770      	bx	lr
 80077d8:	f803 1b01 	strb.w	r1, [r3], #1
 80077dc:	e7f9      	b.n	80077d2 <memset+0x4>

080077de <__cvt>:
 80077de:	2b00      	cmp	r3, #0
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	461e      	mov	r6, r3
 80077e6:	bfbb      	ittet	lt
 80077e8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	461e      	movlt	r6, r3
 80077ee:	2300      	movge	r3, #0
 80077f0:	232d      	movlt	r3, #45	; 0x2d
 80077f2:	b088      	sub	sp, #32
 80077f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077f6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80077fa:	f027 0720 	bic.w	r7, r7, #32
 80077fe:	2f46      	cmp	r7, #70	; 0x46
 8007800:	4614      	mov	r4, r2
 8007802:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007804:	700b      	strb	r3, [r1, #0]
 8007806:	d004      	beq.n	8007812 <__cvt+0x34>
 8007808:	2f45      	cmp	r7, #69	; 0x45
 800780a:	d100      	bne.n	800780e <__cvt+0x30>
 800780c:	3501      	adds	r5, #1
 800780e:	2302      	movs	r3, #2
 8007810:	e000      	b.n	8007814 <__cvt+0x36>
 8007812:	2303      	movs	r3, #3
 8007814:	aa07      	add	r2, sp, #28
 8007816:	9204      	str	r2, [sp, #16]
 8007818:	aa06      	add	r2, sp, #24
 800781a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800781e:	e9cd 3500 	strd	r3, r5, [sp]
 8007822:	4622      	mov	r2, r4
 8007824:	4633      	mov	r3, r6
 8007826:	f000 fd6b 	bl	8008300 <_dtoa_r>
 800782a:	2f47      	cmp	r7, #71	; 0x47
 800782c:	4680      	mov	r8, r0
 800782e:	d102      	bne.n	8007836 <__cvt+0x58>
 8007830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	d526      	bpl.n	8007884 <__cvt+0xa6>
 8007836:	2f46      	cmp	r7, #70	; 0x46
 8007838:	eb08 0905 	add.w	r9, r8, r5
 800783c:	d111      	bne.n	8007862 <__cvt+0x84>
 800783e:	f898 3000 	ldrb.w	r3, [r8]
 8007842:	2b30      	cmp	r3, #48	; 0x30
 8007844:	d10a      	bne.n	800785c <__cvt+0x7e>
 8007846:	2200      	movs	r2, #0
 8007848:	2300      	movs	r3, #0
 800784a:	4620      	mov	r0, r4
 800784c:	4631      	mov	r1, r6
 800784e:	f7f9 f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8007852:	b918      	cbnz	r0, 800785c <__cvt+0x7e>
 8007854:	f1c5 0501 	rsb	r5, r5, #1
 8007858:	f8ca 5000 	str.w	r5, [sl]
 800785c:	f8da 3000 	ldr.w	r3, [sl]
 8007860:	4499      	add	r9, r3
 8007862:	2200      	movs	r2, #0
 8007864:	2300      	movs	r3, #0
 8007866:	4620      	mov	r0, r4
 8007868:	4631      	mov	r1, r6
 800786a:	f7f9 f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800786e:	b938      	cbnz	r0, 8007880 <__cvt+0xa2>
 8007870:	2230      	movs	r2, #48	; 0x30
 8007872:	9b07      	ldr	r3, [sp, #28]
 8007874:	454b      	cmp	r3, r9
 8007876:	d205      	bcs.n	8007884 <__cvt+0xa6>
 8007878:	1c59      	adds	r1, r3, #1
 800787a:	9107      	str	r1, [sp, #28]
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e7f8      	b.n	8007872 <__cvt+0x94>
 8007880:	f8cd 901c 	str.w	r9, [sp, #28]
 8007884:	4640      	mov	r0, r8
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800788a:	eba3 0308 	sub.w	r3, r3, r8
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	b008      	add	sp, #32
 8007892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007896 <__exponent>:
 8007896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007898:	2900      	cmp	r1, #0
 800789a:	bfb4      	ite	lt
 800789c:	232d      	movlt	r3, #45	; 0x2d
 800789e:	232b      	movge	r3, #43	; 0x2b
 80078a0:	4604      	mov	r4, r0
 80078a2:	bfb8      	it	lt
 80078a4:	4249      	neglt	r1, r1
 80078a6:	2909      	cmp	r1, #9
 80078a8:	f804 2b02 	strb.w	r2, [r4], #2
 80078ac:	7043      	strb	r3, [r0, #1]
 80078ae:	dd21      	ble.n	80078f4 <__exponent+0x5e>
 80078b0:	f10d 0307 	add.w	r3, sp, #7
 80078b4:	461f      	mov	r7, r3
 80078b6:	260a      	movs	r6, #10
 80078b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80078bc:	fb06 1115 	mls	r1, r6, r5, r1
 80078c0:	2d09      	cmp	r5, #9
 80078c2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80078c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80078ce:	4629      	mov	r1, r5
 80078d0:	dc09      	bgt.n	80078e6 <__exponent+0x50>
 80078d2:	3130      	adds	r1, #48	; 0x30
 80078d4:	3b02      	subs	r3, #2
 80078d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078da:	42bb      	cmp	r3, r7
 80078dc:	4622      	mov	r2, r4
 80078de:	d304      	bcc.n	80078ea <__exponent+0x54>
 80078e0:	1a10      	subs	r0, r2, r0
 80078e2:	b003      	add	sp, #12
 80078e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e6:	4613      	mov	r3, r2
 80078e8:	e7e6      	b.n	80078b8 <__exponent+0x22>
 80078ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ee:	f804 2b01 	strb.w	r2, [r4], #1
 80078f2:	e7f2      	b.n	80078da <__exponent+0x44>
 80078f4:	2330      	movs	r3, #48	; 0x30
 80078f6:	4419      	add	r1, r3
 80078f8:	7083      	strb	r3, [r0, #2]
 80078fa:	1d02      	adds	r2, r0, #4
 80078fc:	70c1      	strb	r1, [r0, #3]
 80078fe:	e7ef      	b.n	80078e0 <__exponent+0x4a>

08007900 <_printf_float>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	b091      	sub	sp, #68	; 0x44
 8007906:	460c      	mov	r4, r1
 8007908:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800790a:	4693      	mov	fp, r2
 800790c:	461e      	mov	r6, r3
 800790e:	4605      	mov	r5, r0
 8007910:	f001 faae 	bl	8008e70 <_localeconv_r>
 8007914:	6803      	ldr	r3, [r0, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	9309      	str	r3, [sp, #36]	; 0x24
 800791a:	f7f8 fc19 	bl	8000150 <strlen>
 800791e:	2300      	movs	r3, #0
 8007920:	930e      	str	r3, [sp, #56]	; 0x38
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	900a      	str	r0, [sp, #40]	; 0x28
 8007926:	3307      	adds	r3, #7
 8007928:	f023 0307 	bic.w	r3, r3, #7
 800792c:	f103 0208 	add.w	r2, r3, #8
 8007930:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007934:	f8d4 a000 	ldr.w	sl, [r4]
 8007938:	603a      	str	r2, [r7, #0]
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007942:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800794a:	930b      	str	r3, [sp, #44]	; 0x2c
 800794c:	f04f 32ff 	mov.w	r2, #4294967295
 8007950:	4ba6      	ldr	r3, [pc, #664]	; (8007bec <_printf_float+0x2ec>)
 8007952:	4638      	mov	r0, r7
 8007954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007956:	f7f9 f859 	bl	8000a0c <__aeabi_dcmpun>
 800795a:	bb68      	cbnz	r0, 80079b8 <_printf_float+0xb8>
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	4ba2      	ldr	r3, [pc, #648]	; (8007bec <_printf_float+0x2ec>)
 8007962:	4638      	mov	r0, r7
 8007964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007966:	f7f9 f833 	bl	80009d0 <__aeabi_dcmple>
 800796a:	bb28      	cbnz	r0, 80079b8 <_printf_float+0xb8>
 800796c:	2200      	movs	r2, #0
 800796e:	2300      	movs	r3, #0
 8007970:	4638      	mov	r0, r7
 8007972:	4649      	mov	r1, r9
 8007974:	f7f9 f822 	bl	80009bc <__aeabi_dcmplt>
 8007978:	b110      	cbz	r0, 8007980 <_printf_float+0x80>
 800797a:	232d      	movs	r3, #45	; 0x2d
 800797c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007980:	4f9b      	ldr	r7, [pc, #620]	; (8007bf0 <_printf_float+0x2f0>)
 8007982:	4b9c      	ldr	r3, [pc, #624]	; (8007bf4 <_printf_float+0x2f4>)
 8007984:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007988:	bf98      	it	ls
 800798a:	461f      	movls	r7, r3
 800798c:	2303      	movs	r3, #3
 800798e:	f04f 0900 	mov.w	r9, #0
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	f02a 0304 	bic.w	r3, sl, #4
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	9600      	str	r6, [sp, #0]
 800799c:	465b      	mov	r3, fp
 800799e:	aa0f      	add	r2, sp, #60	; 0x3c
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f9e2 	bl	8007d6c <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	f040 8090 	bne.w	8007ace <_printf_float+0x1ce>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	b011      	add	sp, #68	; 0x44
 80079b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b8:	463a      	mov	r2, r7
 80079ba:	464b      	mov	r3, r9
 80079bc:	4638      	mov	r0, r7
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f824 	bl	8000a0c <__aeabi_dcmpun>
 80079c4:	b110      	cbz	r0, 80079cc <_printf_float+0xcc>
 80079c6:	4f8c      	ldr	r7, [pc, #560]	; (8007bf8 <_printf_float+0x2f8>)
 80079c8:	4b8c      	ldr	r3, [pc, #560]	; (8007bfc <_printf_float+0x2fc>)
 80079ca:	e7db      	b.n	8007984 <_printf_float+0x84>
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	a80d      	add	r0, sp, #52	; 0x34
 80079d6:	a90e      	add	r1, sp, #56	; 0x38
 80079d8:	d140      	bne.n	8007a5c <_printf_float+0x15c>
 80079da:	2306      	movs	r3, #6
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	f04f 0c00 	mov.w	ip, #0
 80079e2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80079e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	463a      	mov	r2, r7
 80079f6:	464b      	mov	r3, r9
 80079f8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80079fc:	4628      	mov	r0, r5
 80079fe:	f7ff feee 	bl	80077de <__cvt>
 8007a02:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007a06:	2b47      	cmp	r3, #71	; 0x47
 8007a08:	4607      	mov	r7, r0
 8007a0a:	d109      	bne.n	8007a20 <_printf_float+0x120>
 8007a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0e:	1cd8      	adds	r0, r3, #3
 8007a10:	db02      	blt.n	8007a18 <_printf_float+0x118>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	dd47      	ble.n	8007aa8 <_printf_float+0x1a8>
 8007a18:	f1a8 0802 	sub.w	r8, r8, #2
 8007a1c:	fa5f f888 	uxtb.w	r8, r8
 8007a20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007a24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a26:	d824      	bhi.n	8007a72 <_printf_float+0x172>
 8007a28:	3901      	subs	r1, #1
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a30:	910d      	str	r1, [sp, #52]	; 0x34
 8007a32:	f7ff ff30 	bl	8007896 <__exponent>
 8007a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a38:	4681      	mov	r9, r0
 8007a3a:	1813      	adds	r3, r2, r0
 8007a3c:	2a01      	cmp	r2, #1
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	dc02      	bgt.n	8007a48 <_printf_float+0x148>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	07d1      	lsls	r1, r2, #31
 8007a46:	d501      	bpl.n	8007a4c <_printf_float+0x14c>
 8007a48:	3301      	adds	r3, #1
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0a2      	beq.n	800799a <_printf_float+0x9a>
 8007a54:	232d      	movs	r3, #45	; 0x2d
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5a:	e79e      	b.n	800799a <_printf_float+0x9a>
 8007a5c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007a60:	f000 816e 	beq.w	8007d40 <_printf_float+0x440>
 8007a64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a68:	d1b9      	bne.n	80079de <_printf_float+0xde>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1b7      	bne.n	80079de <_printf_float+0xde>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e7b4      	b.n	80079dc <_printf_float+0xdc>
 8007a72:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007a76:	d119      	bne.n	8007aac <_printf_float+0x1ac>
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	6863      	ldr	r3, [r4, #4]
 8007a7c:	dd0c      	ble.n	8007a98 <_printf_float+0x198>
 8007a7e:	6121      	str	r1, [r4, #16]
 8007a80:	b913      	cbnz	r3, 8007a88 <_printf_float+0x188>
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	07d2      	lsls	r2, r2, #31
 8007a86:	d502      	bpl.n	8007a8e <_printf_float+0x18e>
 8007a88:	3301      	adds	r3, #1
 8007a8a:	440b      	add	r3, r1
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a90:	f04f 0900 	mov.w	r9, #0
 8007a94:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a96:	e7d9      	b.n	8007a4c <_printf_float+0x14c>
 8007a98:	b913      	cbnz	r3, 8007aa0 <_printf_float+0x1a0>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	07d0      	lsls	r0, r2, #31
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_float+0x1a4>
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	e7f3      	b.n	8007a8c <_printf_float+0x18c>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e7f1      	b.n	8007a8c <_printf_float+0x18c>
 8007aa8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007aac:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	db05      	blt.n	8007ac0 <_printf_float+0x1c0>
 8007ab4:	6822      	ldr	r2, [r4, #0]
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	07d1      	lsls	r1, r2, #31
 8007aba:	d5e8      	bpl.n	8007a8e <_printf_float+0x18e>
 8007abc:	3301      	adds	r3, #1
 8007abe:	e7e5      	b.n	8007a8c <_printf_float+0x18c>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bfcc      	ite	gt
 8007ac4:	2301      	movgt	r3, #1
 8007ac6:	f1c3 0302 	rsble	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	e7de      	b.n	8007a8c <_printf_float+0x18c>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	055a      	lsls	r2, r3, #21
 8007ad2:	d407      	bmi.n	8007ae4 <_printf_float+0x1e4>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4659      	mov	r1, fp
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b0      	blx	r6
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d129      	bne.n	8007b36 <_printf_float+0x236>
 8007ae2:	e764      	b.n	80079ae <_printf_float+0xae>
 8007ae4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007ae8:	f240 80d7 	bls.w	8007c9a <_printf_float+0x39a>
 8007aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007af0:	2200      	movs	r2, #0
 8007af2:	2300      	movs	r3, #0
 8007af4:	f7f8 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8007af8:	b388      	cbz	r0, 8007b5e <_printf_float+0x25e>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4a40      	ldr	r2, [pc, #256]	; (8007c00 <_printf_float+0x300>)
 8007afe:	4659      	mov	r1, fp
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b0      	blx	r6
 8007b04:	3001      	adds	r0, #1
 8007b06:	f43f af52 	beq.w	80079ae <_printf_float+0xae>
 8007b0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	db02      	blt.n	8007b18 <_printf_float+0x218>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07d8      	lsls	r0, r3, #31
 8007b16:	d50e      	bpl.n	8007b36 <_printf_float+0x236>
 8007b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b0      	blx	r6
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af43 	beq.w	80079ae <_printf_float+0xae>
 8007b28:	2700      	movs	r7, #0
 8007b2a:	f104 081a 	add.w	r8, r4, #26
 8007b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b30:	3b01      	subs	r3, #1
 8007b32:	42bb      	cmp	r3, r7
 8007b34:	dc09      	bgt.n	8007b4a <_printf_float+0x24a>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	079f      	lsls	r7, r3, #30
 8007b3a:	f100 80fd 	bmi.w	8007d38 <_printf_float+0x438>
 8007b3e:	68e0      	ldr	r0, [r4, #12]
 8007b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b42:	4298      	cmp	r0, r3
 8007b44:	bfb8      	it	lt
 8007b46:	4618      	movlt	r0, r3
 8007b48:	e733      	b.n	80079b2 <_printf_float+0xb2>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4659      	mov	r1, fp
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b0      	blx	r6
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f af2a 	beq.w	80079ae <_printf_float+0xae>
 8007b5a:	3701      	adds	r7, #1
 8007b5c:	e7e7      	b.n	8007b2e <_printf_float+0x22e>
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dc2b      	bgt.n	8007bbc <_printf_float+0x2bc>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <_printf_float+0x300>)
 8007b68:	4659      	mov	r1, fp
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b0      	blx	r6
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f af1d 	beq.w	80079ae <_printf_float+0xae>
 8007b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b76:	b923      	cbnz	r3, 8007b82 <_printf_float+0x282>
 8007b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b7a:	b913      	cbnz	r3, 8007b82 <_printf_float+0x282>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d5d9      	bpl.n	8007b36 <_printf_float+0x236>
 8007b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b86:	4659      	mov	r1, fp
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b0      	blx	r6
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f af0e 	beq.w	80079ae <_printf_float+0xae>
 8007b92:	f04f 0800 	mov.w	r8, #0
 8007b96:	f104 091a 	add.w	r9, r4, #26
 8007b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	4543      	cmp	r3, r8
 8007ba0:	dc01      	bgt.n	8007ba6 <_printf_float+0x2a6>
 8007ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba4:	e797      	b.n	8007ad6 <_printf_float+0x1d6>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	464a      	mov	r2, r9
 8007baa:	4659      	mov	r1, fp
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b0      	blx	r6
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f aefc 	beq.w	80079ae <_printf_float+0xae>
 8007bb6:	f108 0801 	add.w	r8, r8, #1
 8007bba:	e7ee      	b.n	8007b9a <_printf_float+0x29a>
 8007bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	bfa8      	it	ge
 8007bc4:	461a      	movge	r2, r3
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	4690      	mov	r8, r2
 8007bca:	dd07      	ble.n	8007bdc <_printf_float+0x2dc>
 8007bcc:	4613      	mov	r3, r2
 8007bce:	4659      	mov	r1, fp
 8007bd0:	463a      	mov	r2, r7
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b0      	blx	r6
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f aee9 	beq.w	80079ae <_printf_float+0xae>
 8007bdc:	f104 031a 	add.w	r3, r4, #26
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bea:	e015      	b.n	8007c18 <_printf_float+0x318>
 8007bec:	7fefffff 	.word	0x7fefffff
 8007bf0:	0800acc8 	.word	0x0800acc8
 8007bf4:	0800acc4 	.word	0x0800acc4
 8007bf8:	0800acd0 	.word	0x0800acd0
 8007bfc:	0800accc 	.word	0x0800accc
 8007c00:	0800acd4 	.word	0x0800acd4
 8007c04:	2301      	movs	r3, #1
 8007c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c08:	4659      	mov	r1, fp
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b0      	blx	r6
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f aecd 	beq.w	80079ae <_printf_float+0xae>
 8007c14:	f10a 0a01 	add.w	sl, sl, #1
 8007c18:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007c1c:	eba9 0308 	sub.w	r3, r9, r8
 8007c20:	4553      	cmp	r3, sl
 8007c22:	dcef      	bgt.n	8007c04 <_printf_float+0x304>
 8007c24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	444f      	add	r7, r9
 8007c2c:	db14      	blt.n	8007c58 <_printf_float+0x358>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	07da      	lsls	r2, r3, #31
 8007c32:	d411      	bmi.n	8007c58 <_printf_float+0x358>
 8007c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c38:	eba3 0209 	sub.w	r2, r3, r9
 8007c3c:	eba3 0901 	sub.w	r9, r3, r1
 8007c40:	4591      	cmp	r9, r2
 8007c42:	bfa8      	it	ge
 8007c44:	4691      	movge	r9, r2
 8007c46:	f1b9 0f00 	cmp.w	r9, #0
 8007c4a:	dc0d      	bgt.n	8007c68 <_printf_float+0x368>
 8007c4c:	2700      	movs	r7, #0
 8007c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c52:	f104 081a 	add.w	r8, r4, #26
 8007c56:	e018      	b.n	8007c8a <_printf_float+0x38a>
 8007c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5c:	4659      	mov	r1, fp
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b0      	blx	r6
 8007c62:	3001      	adds	r0, #1
 8007c64:	d1e6      	bne.n	8007c34 <_printf_float+0x334>
 8007c66:	e6a2      	b.n	80079ae <_printf_float+0xae>
 8007c68:	464b      	mov	r3, r9
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b0      	blx	r6
 8007c72:	3001      	adds	r0, #1
 8007c74:	d1ea      	bne.n	8007c4c <_printf_float+0x34c>
 8007c76:	e69a      	b.n	80079ae <_printf_float+0xae>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4642      	mov	r2, r8
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b0      	blx	r6
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f ae93 	beq.w	80079ae <_printf_float+0xae>
 8007c88:	3701      	adds	r7, #1
 8007c8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	eba3 0309 	sub.w	r3, r3, r9
 8007c94:	42bb      	cmp	r3, r7
 8007c96:	dcef      	bgt.n	8007c78 <_printf_float+0x378>
 8007c98:	e74d      	b.n	8007b36 <_printf_float+0x236>
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9c:	2a01      	cmp	r2, #1
 8007c9e:	dc01      	bgt.n	8007ca4 <_printf_float+0x3a4>
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d538      	bpl.n	8007d16 <_printf_float+0x416>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	4659      	mov	r1, fp
 8007caa:	4628      	mov	r0, r5
 8007cac:	47b0      	blx	r6
 8007cae:	3001      	adds	r0, #1
 8007cb0:	f43f ae7d 	beq.w	80079ae <_printf_float+0xae>
 8007cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb8:	4659      	mov	r1, fp
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b0      	blx	r6
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f107 0701 	add.w	r7, r7, #1
 8007cc4:	f43f ae73 	beq.w	80079ae <_printf_float+0xae>
 8007cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f7f8 fe67 	bl	80009a8 <__aeabi_dcmpeq>
 8007cda:	b9c0      	cbnz	r0, 8007d0e <_printf_float+0x40e>
 8007cdc:	4643      	mov	r3, r8
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4659      	mov	r1, fp
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b0      	blx	r6
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d10d      	bne.n	8007d06 <_printf_float+0x406>
 8007cea:	e660      	b.n	80079ae <_printf_float+0xae>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4642      	mov	r2, r8
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b0      	blx	r6
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	f43f ae59 	beq.w	80079ae <_printf_float+0xae>
 8007cfc:	3701      	adds	r7, #1
 8007cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d00:	3b01      	subs	r3, #1
 8007d02:	42bb      	cmp	r3, r7
 8007d04:	dcf2      	bgt.n	8007cec <_printf_float+0x3ec>
 8007d06:	464b      	mov	r3, r9
 8007d08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d0c:	e6e4      	b.n	8007ad8 <_printf_float+0x1d8>
 8007d0e:	2700      	movs	r7, #0
 8007d10:	f104 081a 	add.w	r8, r4, #26
 8007d14:	e7f3      	b.n	8007cfe <_printf_float+0x3fe>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e7e1      	b.n	8007cde <_printf_float+0x3de>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	4659      	mov	r1, fp
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae42 	beq.w	80079ae <_printf_float+0xae>
 8007d2a:	3701      	adds	r7, #1
 8007d2c:	68e3      	ldr	r3, [r4, #12]
 8007d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	42bb      	cmp	r3, r7
 8007d34:	dcf1      	bgt.n	8007d1a <_printf_float+0x41a>
 8007d36:	e702      	b.n	8007b3e <_printf_float+0x23e>
 8007d38:	2700      	movs	r7, #0
 8007d3a:	f104 0819 	add.w	r8, r4, #25
 8007d3e:	e7f5      	b.n	8007d2c <_printf_float+0x42c>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f43f ae94 	beq.w	8007a6e <_printf_float+0x16e>
 8007d46:	f04f 0c00 	mov.w	ip, #0
 8007d4a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007d4e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007d58:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	463a      	mov	r2, r7
 8007d60:	464b      	mov	r3, r9
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7ff fd3b 	bl	80077de <__cvt>
 8007d68:	4607      	mov	r7, r0
 8007d6a:	e64f      	b.n	8007a0c <_printf_float+0x10c>

08007d6c <_printf_common>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	4691      	mov	r9, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	688a      	ldr	r2, [r1, #8]
 8007d76:	690b      	ldr	r3, [r1, #16]
 8007d78:	4606      	mov	r6, r0
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	bfb8      	it	lt
 8007d7e:	4613      	movlt	r3, r2
 8007d80:	f8c9 3000 	str.w	r3, [r9]
 8007d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d88:	460c      	mov	r4, r1
 8007d8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d8e:	b112      	cbz	r2, 8007d96 <_printf_common+0x2a>
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c9 3000 	str.w	r3, [r9]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	0699      	lsls	r1, r3, #26
 8007d9a:	bf42      	ittt	mi
 8007d9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007da0:	3302      	addmi	r3, #2
 8007da2:	f8c9 3000 	strmi.w	r3, [r9]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d107      	bne.n	8007dbe <_printf_common+0x52>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	f8d9 2000 	ldr.w	r2, [r9]
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	dc29      	bgt.n	8007e12 <_printf_common+0xa6>
 8007dbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	3300      	adds	r3, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	0692      	lsls	r2, r2, #26
 8007dcc:	d42e      	bmi.n	8007e2c <_printf_common+0xc0>
 8007dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	47c0      	blx	r8
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d021      	beq.n	8007e20 <_printf_common+0xb4>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	68e5      	ldr	r5, [r4, #12]
 8007de0:	f003 0306 	and.w	r3, r3, #6
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	bf18      	it	ne
 8007de8:	2500      	movne	r5, #0
 8007dea:	f8d9 2000 	ldr.w	r2, [r9]
 8007dee:	f04f 0900 	mov.w	r9, #0
 8007df2:	bf08      	it	eq
 8007df4:	1aad      	subeq	r5, r5, r2
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	bf08      	it	eq
 8007dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bfc4      	itt	gt
 8007e04:	1a9b      	subgt	r3, r3, r2
 8007e06:	18ed      	addgt	r5, r5, r3
 8007e08:	341a      	adds	r4, #26
 8007e0a:	454d      	cmp	r5, r9
 8007e0c:	d11a      	bne.n	8007e44 <_printf_common+0xd8>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e008      	b.n	8007e24 <_printf_common+0xb8>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4652      	mov	r2, sl
 8007e16:	4639      	mov	r1, r7
 8007e18:	4630      	mov	r0, r6
 8007e1a:	47c0      	blx	r8
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d103      	bne.n	8007e28 <_printf_common+0xbc>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	3501      	adds	r5, #1
 8007e2a:	e7c2      	b.n	8007db2 <_printf_common+0x46>
 8007e2c:	2030      	movs	r0, #48	; 0x30
 8007e2e:	18e1      	adds	r1, r4, r3
 8007e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3a:	4422      	add	r2, r4
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e42:	e7c4      	b.n	8007dce <_printf_common+0x62>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4622      	mov	r2, r4
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	47c0      	blx	r8
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d0e6      	beq.n	8007e20 <_printf_common+0xb4>
 8007e52:	f109 0901 	add.w	r9, r9, #1
 8007e56:	e7d8      	b.n	8007e0a <_printf_common+0x9e>

08007e58 <_printf_i>:
 8007e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e60:	460c      	mov	r4, r1
 8007e62:	7e09      	ldrb	r1, [r1, #24]
 8007e64:	b085      	sub	sp, #20
 8007e66:	296e      	cmp	r1, #110	; 0x6e
 8007e68:	4617      	mov	r7, r2
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	4698      	mov	r8, r3
 8007e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e70:	f000 80b3 	beq.w	8007fda <_printf_i+0x182>
 8007e74:	d822      	bhi.n	8007ebc <_printf_i+0x64>
 8007e76:	2963      	cmp	r1, #99	; 0x63
 8007e78:	d036      	beq.n	8007ee8 <_printf_i+0x90>
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x3a>
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	f000 80b9 	beq.w	8007ff4 <_printf_i+0x19c>
 8007e82:	2958      	cmp	r1, #88	; 0x58
 8007e84:	f000 8083 	beq.w	8007f8e <_printf_i+0x136>
 8007e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e90:	e032      	b.n	8007ef8 <_printf_i+0xa0>
 8007e92:	2964      	cmp	r1, #100	; 0x64
 8007e94:	d001      	beq.n	8007e9a <_printf_i+0x42>
 8007e96:	2969      	cmp	r1, #105	; 0x69
 8007e98:	d1f6      	bne.n	8007e88 <_printf_i+0x30>
 8007e9a:	6820      	ldr	r0, [r4, #0]
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	0605      	lsls	r5, r0, #24
 8007ea0:	f103 0104 	add.w	r1, r3, #4
 8007ea4:	d52a      	bpl.n	8007efc <_printf_i+0xa4>
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da03      	bge.n	8007eb6 <_printf_i+0x5e>
 8007eae:	222d      	movs	r2, #45	; 0x2d
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eb6:	486f      	ldr	r0, [pc, #444]	; (8008074 <_printf_i+0x21c>)
 8007eb8:	220a      	movs	r2, #10
 8007eba:	e039      	b.n	8007f30 <_printf_i+0xd8>
 8007ebc:	2973      	cmp	r1, #115	; 0x73
 8007ebe:	f000 809d 	beq.w	8007ffc <_printf_i+0x1a4>
 8007ec2:	d808      	bhi.n	8007ed6 <_printf_i+0x7e>
 8007ec4:	296f      	cmp	r1, #111	; 0x6f
 8007ec6:	d020      	beq.n	8007f0a <_printf_i+0xb2>
 8007ec8:	2970      	cmp	r1, #112	; 0x70
 8007eca:	d1dd      	bne.n	8007e88 <_printf_i+0x30>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	f043 0320 	orr.w	r3, r3, #32
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	e003      	b.n	8007ede <_printf_i+0x86>
 8007ed6:	2975      	cmp	r1, #117	; 0x75
 8007ed8:	d017      	beq.n	8007f0a <_printf_i+0xb2>
 8007eda:	2978      	cmp	r1, #120	; 0x78
 8007edc:	d1d4      	bne.n	8007e88 <_printf_i+0x30>
 8007ede:	2378      	movs	r3, #120	; 0x78
 8007ee0:	4865      	ldr	r0, [pc, #404]	; (8008078 <_printf_i+0x220>)
 8007ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee6:	e055      	b.n	8007f94 <_printf_i+0x13c>
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eee:	1d19      	adds	r1, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6011      	str	r1, [r2, #0]
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e08c      	b.n	8008016 <_printf_i+0x1be>
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f02:	6011      	str	r1, [r2, #0]
 8007f04:	bf18      	it	ne
 8007f06:	b21b      	sxthne	r3, r3
 8007f08:	e7cf      	b.n	8007eaa <_printf_i+0x52>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	0628      	lsls	r0, r5, #24
 8007f14:	d501      	bpl.n	8007f1a <_printf_i+0xc2>
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	e002      	b.n	8007f20 <_printf_i+0xc8>
 8007f1a:	0668      	lsls	r0, r5, #25
 8007f1c:	d5fb      	bpl.n	8007f16 <_printf_i+0xbe>
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	296f      	cmp	r1, #111	; 0x6f
 8007f22:	bf14      	ite	ne
 8007f24:	220a      	movne	r2, #10
 8007f26:	2208      	moveq	r2, #8
 8007f28:	4852      	ldr	r0, [pc, #328]	; (8008074 <_printf_i+0x21c>)
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f30:	6865      	ldr	r5, [r4, #4]
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	60a5      	str	r5, [r4, #8]
 8007f36:	f2c0 8095 	blt.w	8008064 <_printf_i+0x20c>
 8007f3a:	6821      	ldr	r1, [r4, #0]
 8007f3c:	f021 0104 	bic.w	r1, r1, #4
 8007f40:	6021      	str	r1, [r4, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d13d      	bne.n	8007fc2 <_printf_i+0x16a>
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	f040 808e 	bne.w	8008068 <_printf_i+0x210>
 8007f4c:	4665      	mov	r5, ip
 8007f4e:	2a08      	cmp	r2, #8
 8007f50:	d10b      	bne.n	8007f6a <_printf_i+0x112>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	07db      	lsls	r3, r3, #31
 8007f56:	d508      	bpl.n	8007f6a <_printf_i+0x112>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bfde      	ittt	le
 8007f60:	2330      	movle	r3, #48	; 0x30
 8007f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f6a:	ebac 0305 	sub.w	r3, ip, r5
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	f8cd 8000 	str.w	r8, [sp]
 8007f74:	463b      	mov	r3, r7
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff fef6 	bl	8007d6c <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14d      	bne.n	8008020 <_printf_i+0x1c8>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b005      	add	sp, #20
 8007f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	4839      	ldr	r0, [pc, #228]	; (8008074 <_printf_i+0x21c>)
 8007f90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1d1d      	adds	r5, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6015      	str	r5, [r2, #0]
 8007f9e:	060a      	lsls	r2, r1, #24
 8007fa0:	d50b      	bpl.n	8007fba <_printf_i+0x162>
 8007fa2:	07ca      	lsls	r2, r1, #31
 8007fa4:	bf44      	itt	mi
 8007fa6:	f041 0120 	orrmi.w	r1, r1, #32
 8007faa:	6021      	strmi	r1, [r4, #0]
 8007fac:	b91b      	cbnz	r3, 8007fb6 <_printf_i+0x15e>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	f022 0220 	bic.w	r2, r2, #32
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	e7b7      	b.n	8007f2a <_printf_i+0xd2>
 8007fba:	064d      	lsls	r5, r1, #25
 8007fbc:	bf48      	it	mi
 8007fbe:	b29b      	uxthmi	r3, r3
 8007fc0:	e7ef      	b.n	8007fa2 <_printf_i+0x14a>
 8007fc2:	4665      	mov	r5, ip
 8007fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc8:	fb02 3311 	mls	r3, r2, r1, r3
 8007fcc:	5cc3      	ldrb	r3, [r0, r3]
 8007fce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d1f5      	bne.n	8007fc4 <_printf_i+0x16c>
 8007fd8:	e7b9      	b.n	8007f4e <_printf_i+0xf6>
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	1d18      	adds	r0, r3, #4
 8007fe0:	6961      	ldr	r1, [r4, #20]
 8007fe2:	6010      	str	r0, [r2, #0]
 8007fe4:	0628      	lsls	r0, r5, #24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	d501      	bpl.n	8007fee <_printf_i+0x196>
 8007fea:	6019      	str	r1, [r3, #0]
 8007fec:	e002      	b.n	8007ff4 <_printf_i+0x19c>
 8007fee:	066a      	lsls	r2, r5, #25
 8007ff0:	d5fb      	bpl.n	8007fea <_printf_i+0x192>
 8007ff2:	8019      	strh	r1, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4665      	mov	r5, ip
 8007ff8:	6123      	str	r3, [r4, #16]
 8007ffa:	e7b9      	b.n	8007f70 <_printf_i+0x118>
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	1d19      	adds	r1, r3, #4
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	681d      	ldr	r5, [r3, #0]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	2100      	movs	r1, #0
 8008008:	4628      	mov	r0, r5
 800800a:	f000 ff59 	bl	8008ec0 <memchr>
 800800e:	b108      	cbz	r0, 8008014 <_printf_i+0x1bc>
 8008010:	1b40      	subs	r0, r0, r5
 8008012:	6060      	str	r0, [r4, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	2300      	movs	r3, #0
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	e7a7      	b.n	8007f70 <_printf_i+0x118>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	462a      	mov	r2, r5
 8008024:	4639      	mov	r1, r7
 8008026:	4630      	mov	r0, r6
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0aa      	beq.n	8007f84 <_printf_i+0x12c>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	079b      	lsls	r3, r3, #30
 8008032:	d413      	bmi.n	800805c <_printf_i+0x204>
 8008034:	68e0      	ldr	r0, [r4, #12]
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	4298      	cmp	r0, r3
 800803a:	bfb8      	it	lt
 800803c:	4618      	movlt	r0, r3
 800803e:	e7a3      	b.n	8007f88 <_printf_i+0x130>
 8008040:	2301      	movs	r3, #1
 8008042:	464a      	mov	r2, r9
 8008044:	4639      	mov	r1, r7
 8008046:	4630      	mov	r0, r6
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d09a      	beq.n	8007f84 <_printf_i+0x12c>
 800804e:	3501      	adds	r5, #1
 8008050:	68e3      	ldr	r3, [r4, #12]
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	42ab      	cmp	r3, r5
 8008058:	dcf2      	bgt.n	8008040 <_printf_i+0x1e8>
 800805a:	e7eb      	b.n	8008034 <_printf_i+0x1dc>
 800805c:	2500      	movs	r5, #0
 800805e:	f104 0919 	add.w	r9, r4, #25
 8008062:	e7f5      	b.n	8008050 <_printf_i+0x1f8>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ac      	bne.n	8007fc2 <_printf_i+0x16a>
 8008068:	7803      	ldrb	r3, [r0, #0]
 800806a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800806e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008072:	e76c      	b.n	8007f4e <_printf_i+0xf6>
 8008074:	0800acd6 	.word	0x0800acd6
 8008078:	0800ace7 	.word	0x0800ace7

0800807c <siprintf>:
 800807c:	b40e      	push	{r1, r2, r3}
 800807e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008082:	b500      	push	{lr}
 8008084:	b09c      	sub	sp, #112	; 0x70
 8008086:	ab1d      	add	r3, sp, #116	; 0x74
 8008088:	9002      	str	r0, [sp, #8]
 800808a:	9006      	str	r0, [sp, #24]
 800808c:	9107      	str	r1, [sp, #28]
 800808e:	9104      	str	r1, [sp, #16]
 8008090:	4808      	ldr	r0, [pc, #32]	; (80080b4 <siprintf+0x38>)
 8008092:	4909      	ldr	r1, [pc, #36]	; (80080b8 <siprintf+0x3c>)
 8008094:	f853 2b04 	ldr.w	r2, [r3], #4
 8008098:	9105      	str	r1, [sp, #20]
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	a902      	add	r1, sp, #8
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	f001 fb06 	bl	80096b0 <_svfiprintf_r>
 80080a4:	2200      	movs	r2, #0
 80080a6:	9b02      	ldr	r3, [sp, #8]
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	b01c      	add	sp, #112	; 0x70
 80080ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b0:	b003      	add	sp, #12
 80080b2:	4770      	bx	lr
 80080b4:	20000014 	.word	0x20000014
 80080b8:	ffff0208 	.word	0xffff0208

080080bc <_strtol_l.isra.0>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4680      	mov	r8, r0
 80080c2:	4689      	mov	r9, r1
 80080c4:	4692      	mov	sl, r2
 80080c6:	461e      	mov	r6, r3
 80080c8:	460f      	mov	r7, r1
 80080ca:	463d      	mov	r5, r7
 80080cc:	9808      	ldr	r0, [sp, #32]
 80080ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080d2:	f000 fec9 	bl	8008e68 <__locale_ctype_ptr_l>
 80080d6:	4420      	add	r0, r4
 80080d8:	7843      	ldrb	r3, [r0, #1]
 80080da:	f013 0308 	ands.w	r3, r3, #8
 80080de:	d132      	bne.n	8008146 <_strtol_l.isra.0+0x8a>
 80080e0:	2c2d      	cmp	r4, #45	; 0x2d
 80080e2:	d132      	bne.n	800814a <_strtol_l.isra.0+0x8e>
 80080e4:	2201      	movs	r2, #1
 80080e6:	787c      	ldrb	r4, [r7, #1]
 80080e8:	1cbd      	adds	r5, r7, #2
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d05d      	beq.n	80081aa <_strtol_l.isra.0+0xee>
 80080ee:	2e10      	cmp	r6, #16
 80080f0:	d109      	bne.n	8008106 <_strtol_l.isra.0+0x4a>
 80080f2:	2c30      	cmp	r4, #48	; 0x30
 80080f4:	d107      	bne.n	8008106 <_strtol_l.isra.0+0x4a>
 80080f6:	782b      	ldrb	r3, [r5, #0]
 80080f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080fc:	2b58      	cmp	r3, #88	; 0x58
 80080fe:	d14f      	bne.n	80081a0 <_strtol_l.isra.0+0xe4>
 8008100:	2610      	movs	r6, #16
 8008102:	786c      	ldrb	r4, [r5, #1]
 8008104:	3502      	adds	r5, #2
 8008106:	2a00      	cmp	r2, #0
 8008108:	bf14      	ite	ne
 800810a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800810e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008112:	2700      	movs	r7, #0
 8008114:	fbb1 fcf6 	udiv	ip, r1, r6
 8008118:	4638      	mov	r0, r7
 800811a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800811e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008122:	2b09      	cmp	r3, #9
 8008124:	d817      	bhi.n	8008156 <_strtol_l.isra.0+0x9a>
 8008126:	461c      	mov	r4, r3
 8008128:	42a6      	cmp	r6, r4
 800812a:	dd23      	ble.n	8008174 <_strtol_l.isra.0+0xb8>
 800812c:	1c7b      	adds	r3, r7, #1
 800812e:	d007      	beq.n	8008140 <_strtol_l.isra.0+0x84>
 8008130:	4584      	cmp	ip, r0
 8008132:	d31c      	bcc.n	800816e <_strtol_l.isra.0+0xb2>
 8008134:	d101      	bne.n	800813a <_strtol_l.isra.0+0x7e>
 8008136:	45a6      	cmp	lr, r4
 8008138:	db19      	blt.n	800816e <_strtol_l.isra.0+0xb2>
 800813a:	2701      	movs	r7, #1
 800813c:	fb00 4006 	mla	r0, r0, r6, r4
 8008140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008144:	e7eb      	b.n	800811e <_strtol_l.isra.0+0x62>
 8008146:	462f      	mov	r7, r5
 8008148:	e7bf      	b.n	80080ca <_strtol_l.isra.0+0xe>
 800814a:	2c2b      	cmp	r4, #43	; 0x2b
 800814c:	bf04      	itt	eq
 800814e:	1cbd      	addeq	r5, r7, #2
 8008150:	787c      	ldrbeq	r4, [r7, #1]
 8008152:	461a      	mov	r2, r3
 8008154:	e7c9      	b.n	80080ea <_strtol_l.isra.0+0x2e>
 8008156:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800815a:	2b19      	cmp	r3, #25
 800815c:	d801      	bhi.n	8008162 <_strtol_l.isra.0+0xa6>
 800815e:	3c37      	subs	r4, #55	; 0x37
 8008160:	e7e2      	b.n	8008128 <_strtol_l.isra.0+0x6c>
 8008162:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008166:	2b19      	cmp	r3, #25
 8008168:	d804      	bhi.n	8008174 <_strtol_l.isra.0+0xb8>
 800816a:	3c57      	subs	r4, #87	; 0x57
 800816c:	e7dc      	b.n	8008128 <_strtol_l.isra.0+0x6c>
 800816e:	f04f 37ff 	mov.w	r7, #4294967295
 8008172:	e7e5      	b.n	8008140 <_strtol_l.isra.0+0x84>
 8008174:	1c7b      	adds	r3, r7, #1
 8008176:	d108      	bne.n	800818a <_strtol_l.isra.0+0xce>
 8008178:	2322      	movs	r3, #34	; 0x22
 800817a:	4608      	mov	r0, r1
 800817c:	f8c8 3000 	str.w	r3, [r8]
 8008180:	f1ba 0f00 	cmp.w	sl, #0
 8008184:	d107      	bne.n	8008196 <_strtol_l.isra.0+0xda>
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	b102      	cbz	r2, 800818e <_strtol_l.isra.0+0xd2>
 800818c:	4240      	negs	r0, r0
 800818e:	f1ba 0f00 	cmp.w	sl, #0
 8008192:	d0f8      	beq.n	8008186 <_strtol_l.isra.0+0xca>
 8008194:	b10f      	cbz	r7, 800819a <_strtol_l.isra.0+0xde>
 8008196:	f105 39ff 	add.w	r9, r5, #4294967295
 800819a:	f8ca 9000 	str.w	r9, [sl]
 800819e:	e7f2      	b.n	8008186 <_strtol_l.isra.0+0xca>
 80081a0:	2430      	movs	r4, #48	; 0x30
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	d1af      	bne.n	8008106 <_strtol_l.isra.0+0x4a>
 80081a6:	2608      	movs	r6, #8
 80081a8:	e7ad      	b.n	8008106 <_strtol_l.isra.0+0x4a>
 80081aa:	2c30      	cmp	r4, #48	; 0x30
 80081ac:	d0a3      	beq.n	80080f6 <_strtol_l.isra.0+0x3a>
 80081ae:	260a      	movs	r6, #10
 80081b0:	e7a9      	b.n	8008106 <_strtol_l.isra.0+0x4a>
	...

080081b4 <strtol>:
 80081b4:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <strtol+0x24>)
 80081b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b8:	681c      	ldr	r4, [r3, #0]
 80081ba:	4d08      	ldr	r5, [pc, #32]	; (80081dc <strtol+0x28>)
 80081bc:	6a23      	ldr	r3, [r4, #32]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bf08      	it	eq
 80081c2:	462b      	moveq	r3, r5
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	460a      	mov	r2, r1
 80081ca:	4601      	mov	r1, r0
 80081cc:	4620      	mov	r0, r4
 80081ce:	f7ff ff75 	bl	80080bc <_strtol_l.isra.0>
 80081d2:	b003      	add	sp, #12
 80081d4:	bd30      	pop	{r4, r5, pc}
 80081d6:	bf00      	nop
 80081d8:	20000014 	.word	0x20000014
 80081dc:	20000078 	.word	0x20000078

080081e0 <quorem>:
 80081e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	6903      	ldr	r3, [r0, #16]
 80081e6:	690c      	ldr	r4, [r1, #16]
 80081e8:	4680      	mov	r8, r0
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	f2c0 8084 	blt.w	80082f8 <quorem+0x118>
 80081f0:	3c01      	subs	r4, #1
 80081f2:	f101 0714 	add.w	r7, r1, #20
 80081f6:	f100 0614 	add.w	r6, r0, #20
 80081fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008202:	3501      	adds	r5, #1
 8008204:	fbb0 f5f5 	udiv	r5, r0, r5
 8008208:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800820c:	eb06 030c 	add.w	r3, r6, ip
 8008210:	eb07 090c 	add.w	r9, r7, ip
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	b39d      	cbz	r5, 8008280 <quorem+0xa0>
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	4638      	mov	r0, r7
 800821e:	46b6      	mov	lr, r6
 8008220:	46d3      	mov	fp, sl
 8008222:	f850 2b04 	ldr.w	r2, [r0], #4
 8008226:	b293      	uxth	r3, r2
 8008228:	fb05 a303 	mla	r3, r5, r3, sl
 800822c:	0c12      	lsrs	r2, r2, #16
 800822e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008232:	fb05 a202 	mla	r2, r5, r2, sl
 8008236:	b29b      	uxth	r3, r3
 8008238:	ebab 0303 	sub.w	r3, fp, r3
 800823c:	f8de b000 	ldr.w	fp, [lr]
 8008240:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008244:	fa1f fb8b 	uxth.w	fp, fp
 8008248:	445b      	add	r3, fp
 800824a:	fa1f fb82 	uxth.w	fp, r2
 800824e:	f8de 2000 	ldr.w	r2, [lr]
 8008252:	4581      	cmp	r9, r0
 8008254:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800825c:	b29b      	uxth	r3, r3
 800825e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008262:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008266:	f84e 3b04 	str.w	r3, [lr], #4
 800826a:	d2da      	bcs.n	8008222 <quorem+0x42>
 800826c:	f856 300c 	ldr.w	r3, [r6, ip]
 8008270:	b933      	cbnz	r3, 8008280 <quorem+0xa0>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	3b04      	subs	r3, #4
 8008276:	429e      	cmp	r6, r3
 8008278:	461a      	mov	r2, r3
 800827a:	d331      	bcc.n	80082e0 <quorem+0x100>
 800827c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008280:	4640      	mov	r0, r8
 8008282:	f001 f83f 	bl	8009304 <__mcmp>
 8008286:	2800      	cmp	r0, #0
 8008288:	db26      	blt.n	80082d8 <quorem+0xf8>
 800828a:	4630      	mov	r0, r6
 800828c:	f04f 0c00 	mov.w	ip, #0
 8008290:	3501      	adds	r5, #1
 8008292:	f857 1b04 	ldr.w	r1, [r7], #4
 8008296:	f8d0 e000 	ldr.w	lr, [r0]
 800829a:	b28b      	uxth	r3, r1
 800829c:	ebac 0303 	sub.w	r3, ip, r3
 80082a0:	fa1f f28e 	uxth.w	r2, lr
 80082a4:	4413      	add	r3, r2
 80082a6:	0c0a      	lsrs	r2, r1, #16
 80082a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b6:	45b9      	cmp	r9, r7
 80082b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082bc:	f840 3b04 	str.w	r3, [r0], #4
 80082c0:	d2e7      	bcs.n	8008292 <quorem+0xb2>
 80082c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80082c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80082ca:	b92a      	cbnz	r2, 80082d8 <quorem+0xf8>
 80082cc:	3b04      	subs	r3, #4
 80082ce:	429e      	cmp	r6, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	d30b      	bcc.n	80082ec <quorem+0x10c>
 80082d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80082d8:	4628      	mov	r0, r5
 80082da:	b003      	add	sp, #12
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	3b04      	subs	r3, #4
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	d1c9      	bne.n	800827c <quorem+0x9c>
 80082e8:	3c01      	subs	r4, #1
 80082ea:	e7c4      	b.n	8008276 <quorem+0x96>
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	3b04      	subs	r3, #4
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d1ef      	bne.n	80082d4 <quorem+0xf4>
 80082f4:	3c01      	subs	r4, #1
 80082f6:	e7ea      	b.n	80082ce <quorem+0xee>
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7ee      	b.n	80082da <quorem+0xfa>
 80082fc:	0000      	movs	r0, r0
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4616      	mov	r6, r2
 8008306:	461f      	mov	r7, r3
 8008308:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800830a:	b095      	sub	sp, #84	; 0x54
 800830c:	4604      	mov	r4, r0
 800830e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008312:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008316:	b93d      	cbnz	r5, 8008328 <_dtoa_r+0x28>
 8008318:	2010      	movs	r0, #16
 800831a:	f000 fdb7 	bl	8008e8c <malloc>
 800831e:	6260      	str	r0, [r4, #36]	; 0x24
 8008320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008324:	6005      	str	r5, [r0, #0]
 8008326:	60c5      	str	r5, [r0, #12]
 8008328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832a:	6819      	ldr	r1, [r3, #0]
 800832c:	b151      	cbz	r1, 8008344 <_dtoa_r+0x44>
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	2301      	movs	r3, #1
 8008332:	4093      	lsls	r3, r2
 8008334:	604a      	str	r2, [r1, #4]
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fe03 	bl	8008f44 <_Bfree>
 800833e:	2200      	movs	r2, #0
 8008340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	1e3b      	subs	r3, r7, #0
 8008346:	bfaf      	iteee	ge
 8008348:	2300      	movge	r3, #0
 800834a:	2201      	movlt	r2, #1
 800834c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008350:	9303      	strlt	r3, [sp, #12]
 8008352:	bfac      	ite	ge
 8008354:	f8c8 3000 	strge.w	r3, [r8]
 8008358:	f8c8 2000 	strlt.w	r2, [r8]
 800835c:	4bae      	ldr	r3, [pc, #696]	; (8008618 <_dtoa_r+0x318>)
 800835e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008362:	ea33 0308 	bics.w	r3, r3, r8
 8008366:	d11b      	bne.n	80083a0 <_dtoa_r+0xa0>
 8008368:	f242 730f 	movw	r3, #9999	; 0x270f
 800836c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9b02      	ldr	r3, [sp, #8]
 8008372:	b923      	cbnz	r3, 800837e <_dtoa_r+0x7e>
 8008374:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008378:	2800      	cmp	r0, #0
 800837a:	f000 8545 	beq.w	8008e08 <_dtoa_r+0xb08>
 800837e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008380:	b953      	cbnz	r3, 8008398 <_dtoa_r+0x98>
 8008382:	4ba6      	ldr	r3, [pc, #664]	; (800861c <_dtoa_r+0x31c>)
 8008384:	e021      	b.n	80083ca <_dtoa_r+0xca>
 8008386:	4ba6      	ldr	r3, [pc, #664]	; (8008620 <_dtoa_r+0x320>)
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	3308      	adds	r3, #8
 800838c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	9806      	ldr	r0, [sp, #24]
 8008392:	b015      	add	sp, #84	; 0x54
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4ba0      	ldr	r3, [pc, #640]	; (800861c <_dtoa_r+0x31c>)
 800839a:	9306      	str	r3, [sp, #24]
 800839c:	3303      	adds	r3, #3
 800839e:	e7f5      	b.n	800838c <_dtoa_r+0x8c>
 80083a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80083b0:	4682      	mov	sl, r0
 80083b2:	b160      	cbz	r0, 80083ce <_dtoa_r+0xce>
 80083b4:	2301      	movs	r3, #1
 80083b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8520 	beq.w	8008e02 <_dtoa_r+0xb02>
 80083c2:	4b98      	ldr	r3, [pc, #608]	; (8008624 <_dtoa_r+0x324>)
 80083c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	9306      	str	r3, [sp, #24]
 80083cc:	e7e0      	b.n	8008390 <_dtoa_r+0x90>
 80083ce:	ab12      	add	r3, sp, #72	; 0x48
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	ab13      	add	r3, sp, #76	; 0x4c
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4632      	mov	r2, r6
 80083d8:	463b      	mov	r3, r7
 80083da:	4620      	mov	r0, r4
 80083dc:	f001 f80a 	bl	80093f4 <__d2b>
 80083e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083e4:	4683      	mov	fp, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	d07d      	beq.n	80084e6 <_dtoa_r+0x1e6>
 80083ea:	46b0      	mov	r8, r6
 80083ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80083f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80083f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008400:	2200      	movs	r2, #0
 8008402:	4b89      	ldr	r3, [pc, #548]	; (8008628 <_dtoa_r+0x328>)
 8008404:	4640      	mov	r0, r8
 8008406:	4649      	mov	r1, r9
 8008408:	f7f7 feae 	bl	8000168 <__aeabi_dsub>
 800840c:	a37c      	add	r3, pc, #496	; (adr r3, 8008600 <_dtoa_r+0x300>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f7f8 f861 	bl	80004d8 <__aeabi_dmul>
 8008416:	a37c      	add	r3, pc, #496	; (adr r3, 8008608 <_dtoa_r+0x308>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 fea6 	bl	800016c <__adddf3>
 8008420:	4606      	mov	r6, r0
 8008422:	4628      	mov	r0, r5
 8008424:	460f      	mov	r7, r1
 8008426:	f7f7 ffed 	bl	8000404 <__aeabi_i2d>
 800842a:	a379      	add	r3, pc, #484	; (adr r3, 8008610 <_dtoa_r+0x310>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f7f8 f852 	bl	80004d8 <__aeabi_dmul>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4630      	mov	r0, r6
 800843a:	4639      	mov	r1, r7
 800843c:	f7f7 fe96 	bl	800016c <__adddf3>
 8008440:	4606      	mov	r6, r0
 8008442:	460f      	mov	r7, r1
 8008444:	f7f8 faf8 	bl	8000a38 <__aeabi_d2iz>
 8008448:	2200      	movs	r2, #0
 800844a:	4682      	mov	sl, r0
 800844c:	2300      	movs	r3, #0
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fab3 	bl	80009bc <__aeabi_dcmplt>
 8008456:	b148      	cbz	r0, 800846c <_dtoa_r+0x16c>
 8008458:	4650      	mov	r0, sl
 800845a:	f7f7 ffd3 	bl	8000404 <__aeabi_i2d>
 800845e:	4632      	mov	r2, r6
 8008460:	463b      	mov	r3, r7
 8008462:	f7f8 faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8008466:	b908      	cbnz	r0, 800846c <_dtoa_r+0x16c>
 8008468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800846c:	f1ba 0f16 	cmp.w	sl, #22
 8008470:	d85a      	bhi.n	8008528 <_dtoa_r+0x228>
 8008472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008476:	496d      	ldr	r1, [pc, #436]	; (800862c <_dtoa_r+0x32c>)
 8008478:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800847c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008480:	f7f8 faba 	bl	80009f8 <__aeabi_dcmpgt>
 8008484:	2800      	cmp	r0, #0
 8008486:	d051      	beq.n	800852c <_dtoa_r+0x22c>
 8008488:	2300      	movs	r3, #0
 800848a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800848e:	930d      	str	r3, [sp, #52]	; 0x34
 8008490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008492:	1b5d      	subs	r5, r3, r5
 8008494:	1e6b      	subs	r3, r5, #1
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	bf43      	ittte	mi
 800849a:	2300      	movmi	r3, #0
 800849c:	f1c5 0901 	rsbmi	r9, r5, #1
 80084a0:	9307      	strmi	r3, [sp, #28]
 80084a2:	f04f 0900 	movpl.w	r9, #0
 80084a6:	f1ba 0f00 	cmp.w	sl, #0
 80084aa:	db41      	blt.n	8008530 <_dtoa_r+0x230>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80084b2:	4453      	add	r3, sl
 80084b4:	9307      	str	r3, [sp, #28]
 80084b6:	2300      	movs	r3, #0
 80084b8:	9308      	str	r3, [sp, #32]
 80084ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084bc:	2b09      	cmp	r3, #9
 80084be:	f200 808f 	bhi.w	80085e0 <_dtoa_r+0x2e0>
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	bfc4      	itt	gt
 80084c6:	3b04      	subgt	r3, #4
 80084c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80084ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084cc:	bfc8      	it	gt
 80084ce:	2500      	movgt	r5, #0
 80084d0:	f1a3 0302 	sub.w	r3, r3, #2
 80084d4:	bfd8      	it	le
 80084d6:	2501      	movle	r5, #1
 80084d8:	2b03      	cmp	r3, #3
 80084da:	f200 808d 	bhi.w	80085f8 <_dtoa_r+0x2f8>
 80084de:	e8df f003 	tbb	[pc, r3]
 80084e2:	7d7b      	.short	0x7d7b
 80084e4:	6f2f      	.short	0x6f2f
 80084e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80084ea:	441d      	add	r5, r3
 80084ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80084f0:	2820      	cmp	r0, #32
 80084f2:	dd13      	ble.n	800851c <_dtoa_r+0x21c>
 80084f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	fa08 f800 	lsl.w	r8, r8, r0
 80084fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008502:	fa23 f000 	lsr.w	r0, r3, r0
 8008506:	ea48 0000 	orr.w	r0, r8, r0
 800850a:	f7f7 ff6b 	bl	80003e4 <__aeabi_ui2d>
 800850e:	2301      	movs	r3, #1
 8008510:	4680      	mov	r8, r0
 8008512:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008516:	3d01      	subs	r5, #1
 8008518:	9310      	str	r3, [sp, #64]	; 0x40
 800851a:	e771      	b.n	8008400 <_dtoa_r+0x100>
 800851c:	9b02      	ldr	r3, [sp, #8]
 800851e:	f1c0 0020 	rsb	r0, r0, #32
 8008522:	fa03 f000 	lsl.w	r0, r3, r0
 8008526:	e7f0      	b.n	800850a <_dtoa_r+0x20a>
 8008528:	2301      	movs	r3, #1
 800852a:	e7b0      	b.n	800848e <_dtoa_r+0x18e>
 800852c:	900d      	str	r0, [sp, #52]	; 0x34
 800852e:	e7af      	b.n	8008490 <_dtoa_r+0x190>
 8008530:	f1ca 0300 	rsb	r3, sl, #0
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	2300      	movs	r3, #0
 8008538:	eba9 090a 	sub.w	r9, r9, sl
 800853c:	930c      	str	r3, [sp, #48]	; 0x30
 800853e:	e7bc      	b.n	80084ba <_dtoa_r+0x1ba>
 8008540:	2301      	movs	r3, #1
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd74      	ble.n	8008634 <_dtoa_r+0x334>
 800854a:	4698      	mov	r8, r3
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	2200      	movs	r2, #0
 8008550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008552:	6072      	str	r2, [r6, #4]
 8008554:	2204      	movs	r2, #4
 8008556:	f102 0014 	add.w	r0, r2, #20
 800855a:	4298      	cmp	r0, r3
 800855c:	6871      	ldr	r1, [r6, #4]
 800855e:	d96e      	bls.n	800863e <_dtoa_r+0x33e>
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fcbb 	bl	8008edc <_Balloc>
 8008566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008568:	6030      	str	r0, [r6, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f1b8 0f0e 	cmp.w	r8, #14
 8008570:	9306      	str	r3, [sp, #24]
 8008572:	f200 80ed 	bhi.w	8008750 <_dtoa_r+0x450>
 8008576:	2d00      	cmp	r5, #0
 8008578:	f000 80ea 	beq.w	8008750 <_dtoa_r+0x450>
 800857c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008588:	dd77      	ble.n	800867a <_dtoa_r+0x37a>
 800858a:	4a28      	ldr	r2, [pc, #160]	; (800862c <_dtoa_r+0x32c>)
 800858c:	f00a 030f 	and.w	r3, sl, #15
 8008590:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008594:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008598:	06f0      	lsls	r0, r6, #27
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085a2:	d568      	bpl.n	8008676 <_dtoa_r+0x376>
 80085a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085a8:	4b21      	ldr	r3, [pc, #132]	; (8008630 <_dtoa_r+0x330>)
 80085aa:	2503      	movs	r5, #3
 80085ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085b0:	f7f8 f8bc 	bl	800072c <__aeabi_ddiv>
 80085b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b8:	f006 060f 	and.w	r6, r6, #15
 80085bc:	4f1c      	ldr	r7, [pc, #112]	; (8008630 <_dtoa_r+0x330>)
 80085be:	e04f      	b.n	8008660 <_dtoa_r+0x360>
 80085c0:	2301      	movs	r3, #1
 80085c2:	9309      	str	r3, [sp, #36]	; 0x24
 80085c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085c6:	4453      	add	r3, sl
 80085c8:	f103 0801 	add.w	r8, r3, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	4643      	mov	r3, r8
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	bfb8      	it	lt
 80085d4:	2301      	movlt	r3, #1
 80085d6:	e7ba      	b.n	800854e <_dtoa_r+0x24e>
 80085d8:	2300      	movs	r3, #0
 80085da:	e7b2      	b.n	8008542 <_dtoa_r+0x242>
 80085dc:	2300      	movs	r3, #0
 80085de:	e7f0      	b.n	80085c2 <_dtoa_r+0x2c2>
 80085e0:	2501      	movs	r5, #1
 80085e2:	2300      	movs	r3, #0
 80085e4:	9509      	str	r5, [sp, #36]	; 0x24
 80085e6:	931e      	str	r3, [sp, #120]	; 0x78
 80085e8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ec:	2200      	movs	r2, #0
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	4698      	mov	r8, r3
 80085f2:	2312      	movs	r3, #18
 80085f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80085f6:	e7aa      	b.n	800854e <_dtoa_r+0x24e>
 80085f8:	2301      	movs	r3, #1
 80085fa:	9309      	str	r3, [sp, #36]	; 0x24
 80085fc:	e7f4      	b.n	80085e8 <_dtoa_r+0x2e8>
 80085fe:	bf00      	nop
 8008600:	636f4361 	.word	0x636f4361
 8008604:	3fd287a7 	.word	0x3fd287a7
 8008608:	8b60c8b3 	.word	0x8b60c8b3
 800860c:	3fc68a28 	.word	0x3fc68a28
 8008610:	509f79fb 	.word	0x509f79fb
 8008614:	3fd34413 	.word	0x3fd34413
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	0800ad01 	.word	0x0800ad01
 8008620:	0800acf8 	.word	0x0800acf8
 8008624:	0800acd5 	.word	0x0800acd5
 8008628:	3ff80000 	.word	0x3ff80000
 800862c:	0800ad38 	.word	0x0800ad38
 8008630:	0800ad10 	.word	0x0800ad10
 8008634:	2301      	movs	r3, #1
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	4698      	mov	r8, r3
 800863a:	461a      	mov	r2, r3
 800863c:	e7da      	b.n	80085f4 <_dtoa_r+0x2f4>
 800863e:	3101      	adds	r1, #1
 8008640:	6071      	str	r1, [r6, #4]
 8008642:	0052      	lsls	r2, r2, #1
 8008644:	e787      	b.n	8008556 <_dtoa_r+0x256>
 8008646:	07f1      	lsls	r1, r6, #31
 8008648:	d508      	bpl.n	800865c <_dtoa_r+0x35c>
 800864a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800864e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008652:	f7f7 ff41 	bl	80004d8 <__aeabi_dmul>
 8008656:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800865a:	3501      	adds	r5, #1
 800865c:	1076      	asrs	r6, r6, #1
 800865e:	3708      	adds	r7, #8
 8008660:	2e00      	cmp	r6, #0
 8008662:	d1f0      	bne.n	8008646 <_dtoa_r+0x346>
 8008664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866c:	f7f8 f85e 	bl	800072c <__aeabi_ddiv>
 8008670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008674:	e01b      	b.n	80086ae <_dtoa_r+0x3ae>
 8008676:	2502      	movs	r5, #2
 8008678:	e7a0      	b.n	80085bc <_dtoa_r+0x2bc>
 800867a:	f000 80a4 	beq.w	80087c6 <_dtoa_r+0x4c6>
 800867e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008682:	f1ca 0600 	rsb	r6, sl, #0
 8008686:	4ba0      	ldr	r3, [pc, #640]	; (8008908 <_dtoa_r+0x608>)
 8008688:	f006 020f 	and.w	r2, r6, #15
 800868c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 ff20 	bl	80004d8 <__aeabi_dmul>
 8008698:	2502      	movs	r5, #2
 800869a:	2300      	movs	r3, #0
 800869c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a0:	4f9a      	ldr	r7, [pc, #616]	; (800890c <_dtoa_r+0x60c>)
 80086a2:	1136      	asrs	r6, r6, #4
 80086a4:	2e00      	cmp	r6, #0
 80086a6:	f040 8083 	bne.w	80087b0 <_dtoa_r+0x4b0>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e0      	bne.n	8008670 <_dtoa_r+0x370>
 80086ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 808a 	beq.w	80087ca <_dtoa_r+0x4ca>
 80086b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086c2:	2200      	movs	r2, #0
 80086c4:	4b92      	ldr	r3, [pc, #584]	; (8008910 <_dtoa_r+0x610>)
 80086c6:	f7f8 f979 	bl	80009bc <__aeabi_dcmplt>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d07d      	beq.n	80087ca <_dtoa_r+0x4ca>
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	d07a      	beq.n	80087ca <_dtoa_r+0x4ca>
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	dd36      	ble.n	8008748 <_dtoa_r+0x448>
 80086da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086de:	2200      	movs	r2, #0
 80086e0:	4b8c      	ldr	r3, [pc, #560]	; (8008914 <_dtoa_r+0x614>)
 80086e2:	f7f7 fef9 	bl	80004d8 <__aeabi_dmul>
 80086e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ea:	9e04      	ldr	r6, [sp, #16]
 80086ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 80086f0:	3501      	adds	r5, #1
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7f7 fe86 	bl	8000404 <__aeabi_i2d>
 80086f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086fc:	f7f7 feec 	bl	80004d8 <__aeabi_dmul>
 8008700:	2200      	movs	r2, #0
 8008702:	4b85      	ldr	r3, [pc, #532]	; (8008918 <_dtoa_r+0x618>)
 8008704:	f7f7 fd32 	bl	800016c <__adddf3>
 8008708:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800870c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008710:	950b      	str	r5, [sp, #44]	; 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d15c      	bne.n	80087d0 <_dtoa_r+0x4d0>
 8008716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	4b7f      	ldr	r3, [pc, #508]	; (800891c <_dtoa_r+0x61c>)
 800871e:	f7f7 fd23 	bl	8000168 <__aeabi_dsub>
 8008722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008724:	462b      	mov	r3, r5
 8008726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800872a:	f7f8 f965 	bl	80009f8 <__aeabi_dcmpgt>
 800872e:	2800      	cmp	r0, #0
 8008730:	f040 8281 	bne.w	8008c36 <_dtoa_r+0x936>
 8008734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800873a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800873e:	f7f8 f93d 	bl	80009bc <__aeabi_dcmplt>
 8008742:	2800      	cmp	r0, #0
 8008744:	f040 8275 	bne.w	8008c32 <_dtoa_r+0x932>
 8008748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800874c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008752:	2b00      	cmp	r3, #0
 8008754:	f2c0 814b 	blt.w	80089ee <_dtoa_r+0x6ee>
 8008758:	f1ba 0f0e 	cmp.w	sl, #14
 800875c:	f300 8147 	bgt.w	80089ee <_dtoa_r+0x6ee>
 8008760:	4b69      	ldr	r3, [pc, #420]	; (8008908 <_dtoa_r+0x608>)
 8008762:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800876e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008770:	2b00      	cmp	r3, #0
 8008772:	f280 80d7 	bge.w	8008924 <_dtoa_r+0x624>
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	f300 80d3 	bgt.w	8008924 <_dtoa_r+0x624>
 800877e:	f040 8257 	bne.w	8008c30 <_dtoa_r+0x930>
 8008782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008786:	2200      	movs	r2, #0
 8008788:	4b64      	ldr	r3, [pc, #400]	; (800891c <_dtoa_r+0x61c>)
 800878a:	f7f7 fea5 	bl	80004d8 <__aeabi_dmul>
 800878e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008792:	f7f8 f927 	bl	80009e4 <__aeabi_dcmpge>
 8008796:	4646      	mov	r6, r8
 8008798:	4647      	mov	r7, r8
 800879a:	2800      	cmp	r0, #0
 800879c:	f040 822d 	bne.w	8008bfa <_dtoa_r+0x8fa>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	1c5d      	adds	r5, r3, #1
 80087a6:	2331      	movs	r3, #49	; 0x31
 80087a8:	f10a 0a01 	add.w	sl, sl, #1
 80087ac:	7013      	strb	r3, [r2, #0]
 80087ae:	e228      	b.n	8008c02 <_dtoa_r+0x902>
 80087b0:	07f2      	lsls	r2, r6, #31
 80087b2:	d505      	bpl.n	80087c0 <_dtoa_r+0x4c0>
 80087b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b8:	f7f7 fe8e 	bl	80004d8 <__aeabi_dmul>
 80087bc:	2301      	movs	r3, #1
 80087be:	3501      	adds	r5, #1
 80087c0:	1076      	asrs	r6, r6, #1
 80087c2:	3708      	adds	r7, #8
 80087c4:	e76e      	b.n	80086a4 <_dtoa_r+0x3a4>
 80087c6:	2502      	movs	r5, #2
 80087c8:	e771      	b.n	80086ae <_dtoa_r+0x3ae>
 80087ca:	4657      	mov	r7, sl
 80087cc:	4646      	mov	r6, r8
 80087ce:	e790      	b.n	80086f2 <_dtoa_r+0x3f2>
 80087d0:	4b4d      	ldr	r3, [pc, #308]	; (8008908 <_dtoa_r+0x608>)
 80087d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d048      	beq.n	8008872 <_dtoa_r+0x572>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	2000      	movs	r0, #0
 80087e6:	494e      	ldr	r1, [pc, #312]	; (8008920 <_dtoa_r+0x620>)
 80087e8:	f7f7 ffa0 	bl	800072c <__aeabi_ddiv>
 80087ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087f0:	f7f7 fcba 	bl	8000168 <__aeabi_dsub>
 80087f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087f8:	9d06      	ldr	r5, [sp, #24]
 80087fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fe:	f7f8 f91b 	bl	8000a38 <__aeabi_d2iz>
 8008802:	9011      	str	r0, [sp, #68]	; 0x44
 8008804:	f7f7 fdfe 	bl	8000404 <__aeabi_i2d>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008810:	f7f7 fcaa 	bl	8000168 <__aeabi_dsub>
 8008814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800881a:	3330      	adds	r3, #48	; 0x30
 800881c:	f805 3b01 	strb.w	r3, [r5], #1
 8008820:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008824:	f7f8 f8ca 	bl	80009bc <__aeabi_dcmplt>
 8008828:	2800      	cmp	r0, #0
 800882a:	d163      	bne.n	80088f4 <_dtoa_r+0x5f4>
 800882c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008830:	2000      	movs	r0, #0
 8008832:	4937      	ldr	r1, [pc, #220]	; (8008910 <_dtoa_r+0x610>)
 8008834:	f7f7 fc98 	bl	8000168 <__aeabi_dsub>
 8008838:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800883c:	f7f8 f8be 	bl	80009bc <__aeabi_dcmplt>
 8008840:	2800      	cmp	r0, #0
 8008842:	f040 80b5 	bne.w	80089b0 <_dtoa_r+0x6b0>
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	1aeb      	subs	r3, r5, r3
 800884a:	429e      	cmp	r6, r3
 800884c:	f77f af7c 	ble.w	8008748 <_dtoa_r+0x448>
 8008850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008854:	2200      	movs	r2, #0
 8008856:	4b2f      	ldr	r3, [pc, #188]	; (8008914 <_dtoa_r+0x614>)
 8008858:	f7f7 fe3e 	bl	80004d8 <__aeabi_dmul>
 800885c:	2200      	movs	r2, #0
 800885e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008866:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <_dtoa_r+0x614>)
 8008868:	f7f7 fe36 	bl	80004d8 <__aeabi_dmul>
 800886c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008870:	e7c3      	b.n	80087fa <_dtoa_r+0x4fa>
 8008872:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008876:	f7f7 fe2f 	bl	80004d8 <__aeabi_dmul>
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008880:	199d      	adds	r5, r3, r6
 8008882:	461e      	mov	r6, r3
 8008884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008888:	f7f8 f8d6 	bl	8000a38 <__aeabi_d2iz>
 800888c:	9011      	str	r0, [sp, #68]	; 0x44
 800888e:	f7f7 fdb9 	bl	8000404 <__aeabi_i2d>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889a:	f7f7 fc65 	bl	8000168 <__aeabi_dsub>
 800889e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a4:	3330      	adds	r3, #48	; 0x30
 80088a6:	f806 3b01 	strb.w	r3, [r6], #1
 80088aa:	42ae      	cmp	r6, r5
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	d124      	bne.n	80088fc <_dtoa_r+0x5fc>
 80088b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088b6:	4b1a      	ldr	r3, [pc, #104]	; (8008920 <_dtoa_r+0x620>)
 80088b8:	f7f7 fc58 	bl	800016c <__adddf3>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c4:	f7f8 f898 	bl	80009f8 <__aeabi_dcmpgt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d171      	bne.n	80089b0 <_dtoa_r+0x6b0>
 80088cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80088d0:	2000      	movs	r0, #0
 80088d2:	4913      	ldr	r1, [pc, #76]	; (8008920 <_dtoa_r+0x620>)
 80088d4:	f7f7 fc48 	bl	8000168 <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e0:	f7f8 f86c 	bl	80009bc <__aeabi_dcmplt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f af2f 	beq.w	8008748 <_dtoa_r+0x448>
 80088ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088ee:	1e6a      	subs	r2, r5, #1
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d001      	beq.n	80088f8 <_dtoa_r+0x5f8>
 80088f4:	46ba      	mov	sl, r7
 80088f6:	e04a      	b.n	800898e <_dtoa_r+0x68e>
 80088f8:	4615      	mov	r5, r2
 80088fa:	e7f6      	b.n	80088ea <_dtoa_r+0x5ea>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <_dtoa_r+0x614>)
 80088fe:	f7f7 fdeb 	bl	80004d8 <__aeabi_dmul>
 8008902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008906:	e7bd      	b.n	8008884 <_dtoa_r+0x584>
 8008908:	0800ad38 	.word	0x0800ad38
 800890c:	0800ad10 	.word	0x0800ad10
 8008910:	3ff00000 	.word	0x3ff00000
 8008914:	40240000 	.word	0x40240000
 8008918:	401c0000 	.word	0x401c0000
 800891c:	40140000 	.word	0x40140000
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	9d06      	ldr	r5, [sp, #24]
 8008926:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800892a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 fefb 	bl	800072c <__aeabi_ddiv>
 8008936:	f7f8 f87f 	bl	8000a38 <__aeabi_d2iz>
 800893a:	4681      	mov	r9, r0
 800893c:	f7f7 fd62 	bl	8000404 <__aeabi_i2d>
 8008940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008944:	f7f7 fdc8 	bl	80004d8 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f7 fc0a 	bl	8000168 <__aeabi_dsub>
 8008954:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008958:	f805 6b01 	strb.w	r6, [r5], #1
 800895c:	9e06      	ldr	r6, [sp, #24]
 800895e:	4602      	mov	r2, r0
 8008960:	1bae      	subs	r6, r5, r6
 8008962:	45b0      	cmp	r8, r6
 8008964:	460b      	mov	r3, r1
 8008966:	d135      	bne.n	80089d4 <_dtoa_r+0x6d4>
 8008968:	f7f7 fc00 	bl	800016c <__adddf3>
 800896c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008970:	4606      	mov	r6, r0
 8008972:	460f      	mov	r7, r1
 8008974:	f7f8 f840 	bl	80009f8 <__aeabi_dcmpgt>
 8008978:	b9c8      	cbnz	r0, 80089ae <_dtoa_r+0x6ae>
 800897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f8 f811 	bl	80009a8 <__aeabi_dcmpeq>
 8008986:	b110      	cbz	r0, 800898e <_dtoa_r+0x68e>
 8008988:	f019 0f01 	tst.w	r9, #1
 800898c:	d10f      	bne.n	80089ae <_dtoa_r+0x6ae>
 800898e:	4659      	mov	r1, fp
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fad7 	bl	8008f44 <_Bfree>
 8008996:	2300      	movs	r3, #0
 8008998:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800899a:	702b      	strb	r3, [r5, #0]
 800899c:	f10a 0301 	add.w	r3, sl, #1
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f43f acf3 	beq.w	8008390 <_dtoa_r+0x90>
 80089aa:	601d      	str	r5, [r3, #0]
 80089ac:	e4f0      	b.n	8008390 <_dtoa_r+0x90>
 80089ae:	4657      	mov	r7, sl
 80089b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089b4:	1e6b      	subs	r3, r5, #1
 80089b6:	2a39      	cmp	r2, #57	; 0x39
 80089b8:	d106      	bne.n	80089c8 <_dtoa_r+0x6c8>
 80089ba:	9a06      	ldr	r2, [sp, #24]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d107      	bne.n	80089d0 <_dtoa_r+0x6d0>
 80089c0:	2330      	movs	r3, #48	; 0x30
 80089c2:	7013      	strb	r3, [r2, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	3701      	adds	r7, #1
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	3201      	adds	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e791      	b.n	80088f4 <_dtoa_r+0x5f4>
 80089d0:	461d      	mov	r5, r3
 80089d2:	e7ed      	b.n	80089b0 <_dtoa_r+0x6b0>
 80089d4:	2200      	movs	r2, #0
 80089d6:	4b99      	ldr	r3, [pc, #612]	; (8008c3c <_dtoa_r+0x93c>)
 80089d8:	f7f7 fd7e 	bl	80004d8 <__aeabi_dmul>
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1
 80089e4:	f7f7 ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d09e      	beq.n	800892a <_dtoa_r+0x62a>
 80089ec:	e7cf      	b.n	800898e <_dtoa_r+0x68e>
 80089ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f0:	2a00      	cmp	r2, #0
 80089f2:	f000 8088 	beq.w	8008b06 <_dtoa_r+0x806>
 80089f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089f8:	2a01      	cmp	r2, #1
 80089fa:	dc6d      	bgt.n	8008ad8 <_dtoa_r+0x7d8>
 80089fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d066      	beq.n	8008ad0 <_dtoa_r+0x7d0>
 8008a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a06:	464d      	mov	r5, r9
 8008a08:	9e08      	ldr	r6, [sp, #32]
 8008a0a:	9a07      	ldr	r2, [sp, #28]
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	441a      	add	r2, r3
 8008a10:	4620      	mov	r0, r4
 8008a12:	4499      	add	r9, r3
 8008a14:	9207      	str	r2, [sp, #28]
 8008a16:	f000 fb35 	bl	8009084 <__i2b>
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	dd0b      	ble.n	8008a38 <_dtoa_r+0x738>
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd08      	ble.n	8008a38 <_dtoa_r+0x738>
 8008a26:	42ab      	cmp	r3, r5
 8008a28:	bfa8      	it	ge
 8008a2a:	462b      	movge	r3, r5
 8008a2c:	9a07      	ldr	r2, [sp, #28]
 8008a2e:	eba9 0903 	sub.w	r9, r9, r3
 8008a32:	1aed      	subs	r5, r5, r3
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	b1eb      	cbz	r3, 8008a78 <_dtoa_r+0x778>
 8008a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d065      	beq.n	8008b0e <_dtoa_r+0x80e>
 8008a42:	b18e      	cbz	r6, 8008a68 <_dtoa_r+0x768>
 8008a44:	4639      	mov	r1, r7
 8008a46:	4632      	mov	r2, r6
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fbb9 	bl	80091c0 <__pow5mult>
 8008a4e:	465a      	mov	r2, fp
 8008a50:	4601      	mov	r1, r0
 8008a52:	4607      	mov	r7, r0
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fb1e 	bl	8009096 <__multiply>
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fa70 	bl	8008f44 <_Bfree>
 8008a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a66:	469b      	mov	fp, r3
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	1b9a      	subs	r2, r3, r6
 8008a6c:	d004      	beq.n	8008a78 <_dtoa_r+0x778>
 8008a6e:	4659      	mov	r1, fp
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fba5 	bl	80091c0 <__pow5mult>
 8008a76:	4683      	mov	fp, r0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fb02 	bl	8009084 <__i2b>
 8008a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a82:	4606      	mov	r6, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 81c6 	beq.w	8008e16 <_dtoa_r+0xb16>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fb96 	bl	80091c0 <__pow5mult>
 8008a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a96:	4606      	mov	r6, r0
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	dc3e      	bgt.n	8008b1a <_dtoa_r+0x81a>
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d137      	bne.n	8008b12 <_dtoa_r+0x812>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d134      	bne.n	8008b16 <_dtoa_r+0x816>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab2:	0d1b      	lsrs	r3, r3, #20
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	b12b      	cbz	r3, 8008ac4 <_dtoa_r+0x7c4>
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	f109 0901 	add.w	r9, r9, #1
 8008abe:	3301      	adds	r3, #1
 8008ac0:	9307      	str	r3, [sp, #28]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	9308      	str	r3, [sp, #32]
 8008ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d128      	bne.n	8008b1e <_dtoa_r+0x81e>
 8008acc:	2001      	movs	r0, #1
 8008ace:	e02e      	b.n	8008b2e <_dtoa_r+0x82e>
 8008ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ad2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ad6:	e796      	b.n	8008a06 <_dtoa_r+0x706>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	f108 36ff 	add.w	r6, r8, #4294967295
 8008ade:	42b3      	cmp	r3, r6
 8008ae0:	bfb7      	itett	lt
 8008ae2:	9b08      	ldrlt	r3, [sp, #32]
 8008ae4:	1b9e      	subge	r6, r3, r6
 8008ae6:	1af2      	sublt	r2, r6, r3
 8008ae8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008aea:	bfbf      	itttt	lt
 8008aec:	9608      	strlt	r6, [sp, #32]
 8008aee:	189b      	addlt	r3, r3, r2
 8008af0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008af2:	2600      	movlt	r6, #0
 8008af4:	f1b8 0f00 	cmp.w	r8, #0
 8008af8:	bfb9      	ittee	lt
 8008afa:	eba9 0508 	sublt.w	r5, r9, r8
 8008afe:	2300      	movlt	r3, #0
 8008b00:	464d      	movge	r5, r9
 8008b02:	4643      	movge	r3, r8
 8008b04:	e781      	b.n	8008a0a <_dtoa_r+0x70a>
 8008b06:	9e08      	ldr	r6, [sp, #32]
 8008b08:	464d      	mov	r5, r9
 8008b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b0c:	e786      	b.n	8008a1c <_dtoa_r+0x71c>
 8008b0e:	9a08      	ldr	r2, [sp, #32]
 8008b10:	e7ad      	b.n	8008a6e <_dtoa_r+0x76e>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e7d6      	b.n	8008ac4 <_dtoa_r+0x7c4>
 8008b16:	9b02      	ldr	r3, [sp, #8]
 8008b18:	e7d4      	b.n	8008ac4 <_dtoa_r+0x7c4>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9308      	str	r3, [sp, #32]
 8008b1e:	6933      	ldr	r3, [r6, #16]
 8008b20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b24:	6918      	ldr	r0, [r3, #16]
 8008b26:	f000 fa5f 	bl	8008fe8 <__hi0bits>
 8008b2a:	f1c0 0020 	rsb	r0, r0, #32
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	4418      	add	r0, r3
 8008b32:	f010 001f 	ands.w	r0, r0, #31
 8008b36:	d047      	beq.n	8008bc8 <_dtoa_r+0x8c8>
 8008b38:	f1c0 0320 	rsb	r3, r0, #32
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	dd3b      	ble.n	8008bb8 <_dtoa_r+0x8b8>
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	f1c0 001c 	rsb	r0, r0, #28
 8008b46:	4481      	add	r9, r0
 8008b48:	4405      	add	r5, r0
 8008b4a:	4403      	add	r3, r0
 8008b4c:	9307      	str	r3, [sp, #28]
 8008b4e:	f1b9 0f00 	cmp.w	r9, #0
 8008b52:	dd05      	ble.n	8008b60 <_dtoa_r+0x860>
 8008b54:	4659      	mov	r1, fp
 8008b56:	464a      	mov	r2, r9
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fb7f 	bl	800925c <__lshift>
 8008b5e:	4683      	mov	fp, r0
 8008b60:	9b07      	ldr	r3, [sp, #28]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd05      	ble.n	8008b72 <_dtoa_r+0x872>
 8008b66:	4631      	mov	r1, r6
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fb76 	bl	800925c <__lshift>
 8008b70:	4606      	mov	r6, r0
 8008b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b74:	b353      	cbz	r3, 8008bcc <_dtoa_r+0x8cc>
 8008b76:	4631      	mov	r1, r6
 8008b78:	4658      	mov	r0, fp
 8008b7a:	f000 fbc3 	bl	8009304 <__mcmp>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	da24      	bge.n	8008bcc <_dtoa_r+0x8cc>
 8008b82:	2300      	movs	r3, #0
 8008b84:	4659      	mov	r1, fp
 8008b86:	220a      	movs	r2, #10
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 f9f2 	bl	8008f72 <__multadd>
 8008b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b94:	4683      	mov	fp, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 8144 	beq.w	8008e24 <_dtoa_r+0xb24>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	220a      	movs	r2, #10
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f9e5 	bl	8008f72 <__multadd>
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	4607      	mov	r7, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dc4d      	bgt.n	8008c4c <_dtoa_r+0x94c>
 8008bb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	dd4a      	ble.n	8008c4c <_dtoa_r+0x94c>
 8008bb6:	e011      	b.n	8008bdc <_dtoa_r+0x8dc>
 8008bb8:	d0c9      	beq.n	8008b4e <_dtoa_r+0x84e>
 8008bba:	9a07      	ldr	r2, [sp, #28]
 8008bbc:	331c      	adds	r3, #28
 8008bbe:	441a      	add	r2, r3
 8008bc0:	4499      	add	r9, r3
 8008bc2:	441d      	add	r5, r3
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	e7c1      	b.n	8008b4c <_dtoa_r+0x84c>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	e7f6      	b.n	8008bba <_dtoa_r+0x8ba>
 8008bcc:	f1b8 0f00 	cmp.w	r8, #0
 8008bd0:	dc36      	bgt.n	8008c40 <_dtoa_r+0x940>
 8008bd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	dd33      	ble.n	8008c40 <_dtoa_r+0x940>
 8008bd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	b963      	cbnz	r3, 8008bfa <_dtoa_r+0x8fa>
 8008be0:	4631      	mov	r1, r6
 8008be2:	2205      	movs	r2, #5
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f9c4 	bl	8008f72 <__multadd>
 8008bea:	4601      	mov	r1, r0
 8008bec:	4606      	mov	r6, r0
 8008bee:	4658      	mov	r0, fp
 8008bf0:	f000 fb88 	bl	8009304 <__mcmp>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f73f add3 	bgt.w	80087a0 <_dtoa_r+0x4a0>
 8008bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bfc:	9d06      	ldr	r5, [sp, #24]
 8008bfe:	ea6f 0a03 	mvn.w	sl, r3
 8008c02:	f04f 0900 	mov.w	r9, #0
 8008c06:	4631      	mov	r1, r6
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 f99b 	bl	8008f44 <_Bfree>
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	f43f aebd 	beq.w	800898e <_dtoa_r+0x68e>
 8008c14:	f1b9 0f00 	cmp.w	r9, #0
 8008c18:	d005      	beq.n	8008c26 <_dtoa_r+0x926>
 8008c1a:	45b9      	cmp	r9, r7
 8008c1c:	d003      	beq.n	8008c26 <_dtoa_r+0x926>
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 f98f 	bl	8008f44 <_Bfree>
 8008c26:	4639      	mov	r1, r7
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 f98b 	bl	8008f44 <_Bfree>
 8008c2e:	e6ae      	b.n	800898e <_dtoa_r+0x68e>
 8008c30:	2600      	movs	r6, #0
 8008c32:	4637      	mov	r7, r6
 8008c34:	e7e1      	b.n	8008bfa <_dtoa_r+0x8fa>
 8008c36:	46ba      	mov	sl, r7
 8008c38:	4637      	mov	r7, r6
 8008c3a:	e5b1      	b.n	80087a0 <_dtoa_r+0x4a0>
 8008c3c:	40240000 	.word	0x40240000
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	f8cd 8010 	str.w	r8, [sp, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80f3 	beq.w	8008e32 <_dtoa_r+0xb32>
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	dd05      	ble.n	8008c5c <_dtoa_r+0x95c>
 8008c50:	4639      	mov	r1, r7
 8008c52:	462a      	mov	r2, r5
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fb01 	bl	800925c <__lshift>
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d04c      	beq.n	8008cfc <_dtoa_r+0x9fc>
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 f939 	bl	8008edc <_Balloc>
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	f107 010c 	add.w	r1, r7, #12
 8008c72:	3202      	adds	r2, #2
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	300c      	adds	r0, #12
 8008c78:	f7fe fd9e 	bl	80077b8 <memcpy>
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 faeb 	bl	800925c <__lshift>
 8008c86:	46b9      	mov	r9, r7
 8008c88:	4607      	mov	r7, r0
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	9307      	str	r3, [sp, #28]
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	9308      	str	r3, [sp, #32]
 8008c96:	4631      	mov	r1, r6
 8008c98:	4658      	mov	r0, fp
 8008c9a:	f7ff faa1 	bl	80081e0 <quorem>
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ca6:	4658      	mov	r0, fp
 8008ca8:	f000 fb2c 	bl	8009304 <__mcmp>
 8008cac:	463a      	mov	r2, r7
 8008cae:	9002      	str	r0, [sp, #8]
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fb40 	bl	8009338 <__mdiff>
 8008cb8:	68c3      	ldr	r3, [r0, #12]
 8008cba:	4602      	mov	r2, r0
 8008cbc:	bb03      	cbnz	r3, 8008d00 <_dtoa_r+0xa00>
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	9009      	str	r0, [sp, #36]	; 0x24
 8008cc2:	4658      	mov	r0, fp
 8008cc4:	f000 fb1e 	bl	8009304 <__mcmp>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4620      	mov	r0, r4
 8008cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd2:	f000 f937 	bl	8008f44 <_Bfree>
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	b9a3      	cbnz	r3, 8008d04 <_dtoa_r+0xa04>
 8008cda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008cdc:	b992      	cbnz	r2, 8008d04 <_dtoa_r+0xa04>
 8008cde:	9a08      	ldr	r2, [sp, #32]
 8008ce0:	b982      	cbnz	r2, 8008d04 <_dtoa_r+0xa04>
 8008ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ce6:	d029      	beq.n	8008d3c <_dtoa_r+0xa3c>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd01      	ble.n	8008cf2 <_dtoa_r+0x9f2>
 8008cee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008cf2:	9b07      	ldr	r3, [sp, #28]
 8008cf4:	1c5d      	adds	r5, r3, #1
 8008cf6:	f883 8000 	strb.w	r8, [r3]
 8008cfa:	e784      	b.n	8008c06 <_dtoa_r+0x906>
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	e7c2      	b.n	8008c86 <_dtoa_r+0x986>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e7e3      	b.n	8008ccc <_dtoa_r+0x9cc>
 8008d04:	9a02      	ldr	r2, [sp, #8]
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	db04      	blt.n	8008d14 <_dtoa_r+0xa14>
 8008d0a:	d123      	bne.n	8008d54 <_dtoa_r+0xa54>
 8008d0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008d0e:	bb0a      	cbnz	r2, 8008d54 <_dtoa_r+0xa54>
 8008d10:	9a08      	ldr	r2, [sp, #32]
 8008d12:	b9fa      	cbnz	r2, 8008d54 <_dtoa_r+0xa54>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	ddec      	ble.n	8008cf2 <_dtoa_r+0x9f2>
 8008d18:	4659      	mov	r1, fp
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fa9d 	bl	800925c <__lshift>
 8008d22:	4631      	mov	r1, r6
 8008d24:	4683      	mov	fp, r0
 8008d26:	f000 faed 	bl	8009304 <__mcmp>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	dc03      	bgt.n	8008d36 <_dtoa_r+0xa36>
 8008d2e:	d1e0      	bne.n	8008cf2 <_dtoa_r+0x9f2>
 8008d30:	f018 0f01 	tst.w	r8, #1
 8008d34:	d0dd      	beq.n	8008cf2 <_dtoa_r+0x9f2>
 8008d36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d3a:	d1d8      	bne.n	8008cee <_dtoa_r+0x9ee>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	9a07      	ldr	r2, [sp, #28]
 8008d40:	1c5d      	adds	r5, r3, #1
 8008d42:	2339      	movs	r3, #57	; 0x39
 8008d44:	7013      	strb	r3, [r2, #0]
 8008d46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d4a:	1e6a      	subs	r2, r5, #1
 8008d4c:	2b39      	cmp	r3, #57	; 0x39
 8008d4e:	d04d      	beq.n	8008dec <_dtoa_r+0xaec>
 8008d50:	3301      	adds	r3, #1
 8008d52:	e052      	b.n	8008dfa <_dtoa_r+0xafa>
 8008d54:	9a07      	ldr	r2, [sp, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f102 0501 	add.w	r5, r2, #1
 8008d5c:	dd06      	ble.n	8008d6c <_dtoa_r+0xa6c>
 8008d5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d62:	d0eb      	beq.n	8008d3c <_dtoa_r+0xa3c>
 8008d64:	f108 0801 	add.w	r8, r8, #1
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	e7c4      	b.n	8008cf6 <_dtoa_r+0x9f6>
 8008d6c:	9b06      	ldr	r3, [sp, #24]
 8008d6e:	9a04      	ldr	r2, [sp, #16]
 8008d70:	1aeb      	subs	r3, r5, r3
 8008d72:	4293      	cmp	r3, r2
 8008d74:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008d78:	d021      	beq.n	8008dbe <_dtoa_r+0xabe>
 8008d7a:	4659      	mov	r1, fp
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	220a      	movs	r2, #10
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 f8f6 	bl	8008f72 <__multadd>
 8008d86:	45b9      	cmp	r9, r7
 8008d88:	4683      	mov	fp, r0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	f04f 020a 	mov.w	r2, #10
 8008d92:	4649      	mov	r1, r9
 8008d94:	4620      	mov	r0, r4
 8008d96:	d105      	bne.n	8008da4 <_dtoa_r+0xaa4>
 8008d98:	f000 f8eb 	bl	8008f72 <__multadd>
 8008d9c:	4681      	mov	r9, r0
 8008d9e:	4607      	mov	r7, r0
 8008da0:	9507      	str	r5, [sp, #28]
 8008da2:	e778      	b.n	8008c96 <_dtoa_r+0x996>
 8008da4:	f000 f8e5 	bl	8008f72 <__multadd>
 8008da8:	4639      	mov	r1, r7
 8008daa:	4681      	mov	r9, r0
 8008dac:	2300      	movs	r3, #0
 8008dae:	220a      	movs	r2, #10
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f8de 	bl	8008f72 <__multadd>
 8008db6:	4607      	mov	r7, r0
 8008db8:	e7f2      	b.n	8008da0 <_dtoa_r+0xaa0>
 8008dba:	f04f 0900 	mov.w	r9, #0
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fa4a 	bl	800925c <__lshift>
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4683      	mov	fp, r0
 8008dcc:	f000 fa9a 	bl	8009304 <__mcmp>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dcb8      	bgt.n	8008d46 <_dtoa_r+0xa46>
 8008dd4:	d102      	bne.n	8008ddc <_dtoa_r+0xadc>
 8008dd6:	f018 0f01 	tst.w	r8, #1
 8008dda:	d1b4      	bne.n	8008d46 <_dtoa_r+0xa46>
 8008ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008de0:	1e6a      	subs	r2, r5, #1
 8008de2:	2b30      	cmp	r3, #48	; 0x30
 8008de4:	f47f af0f 	bne.w	8008c06 <_dtoa_r+0x906>
 8008de8:	4615      	mov	r5, r2
 8008dea:	e7f7      	b.n	8008ddc <_dtoa_r+0xadc>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d105      	bne.n	8008dfe <_dtoa_r+0xafe>
 8008df2:	2331      	movs	r3, #49	; 0x31
 8008df4:	9a06      	ldr	r2, [sp, #24]
 8008df6:	f10a 0a01 	add.w	sl, sl, #1
 8008dfa:	7013      	strb	r3, [r2, #0]
 8008dfc:	e703      	b.n	8008c06 <_dtoa_r+0x906>
 8008dfe:	4615      	mov	r5, r2
 8008e00:	e7a1      	b.n	8008d46 <_dtoa_r+0xa46>
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <_dtoa_r+0xb60>)
 8008e04:	f7ff bae1 	b.w	80083ca <_dtoa_r+0xca>
 8008e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aabb 	bne.w	8008386 <_dtoa_r+0x86>
 8008e10:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <_dtoa_r+0xb64>)
 8008e12:	f7ff bada 	b.w	80083ca <_dtoa_r+0xca>
 8008e16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	f77f ae3f 	ble.w	8008a9c <_dtoa_r+0x79c>
 8008e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e20:	9308      	str	r3, [sp, #32]
 8008e22:	e653      	b.n	8008acc <_dtoa_r+0x7cc>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	dc03      	bgt.n	8008e32 <_dtoa_r+0xb32>
 8008e2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	f73f aed5 	bgt.w	8008bdc <_dtoa_r+0x8dc>
 8008e32:	9d06      	ldr	r5, [sp, #24]
 8008e34:	4631      	mov	r1, r6
 8008e36:	4658      	mov	r0, fp
 8008e38:	f7ff f9d2 	bl	80081e0 <quorem>
 8008e3c:	9b06      	ldr	r3, [sp, #24]
 8008e3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e42:	f805 8b01 	strb.w	r8, [r5], #1
 8008e46:	9a04      	ldr	r2, [sp, #16]
 8008e48:	1aeb      	subs	r3, r5, r3
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	ddb5      	ble.n	8008dba <_dtoa_r+0xaba>
 8008e4e:	4659      	mov	r1, fp
 8008e50:	2300      	movs	r3, #0
 8008e52:	220a      	movs	r2, #10
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 f88c 	bl	8008f72 <__multadd>
 8008e5a:	4683      	mov	fp, r0
 8008e5c:	e7ea      	b.n	8008e34 <_dtoa_r+0xb34>
 8008e5e:	bf00      	nop
 8008e60:	0800acd4 	.word	0x0800acd4
 8008e64:	0800acf8 	.word	0x0800acf8

08008e68 <__locale_ctype_ptr_l>:
 8008e68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008e6c:	4770      	bx	lr
	...

08008e70 <_localeconv_r>:
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <_localeconv_r+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6a18      	ldr	r0, [r3, #32]
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <_localeconv_r+0x18>)
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	bf08      	it	eq
 8008e7c:	4618      	moveq	r0, r3
 8008e7e:	30f0      	adds	r0, #240	; 0xf0
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000014 	.word	0x20000014
 8008e88:	20000078 	.word	0x20000078

08008e8c <malloc>:
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <malloc+0xc>)
 8008e8e:	4601      	mov	r1, r0
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f000 bb59 	b.w	8009548 <_malloc_r>
 8008e96:	bf00      	nop
 8008e98:	20000014 	.word	0x20000014

08008e9c <__ascii_mbtowc>:
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	b901      	cbnz	r1, 8008ea2 <__ascii_mbtowc+0x6>
 8008ea0:	a901      	add	r1, sp, #4
 8008ea2:	b142      	cbz	r2, 8008eb6 <__ascii_mbtowc+0x1a>
 8008ea4:	b14b      	cbz	r3, 8008eba <__ascii_mbtowc+0x1e>
 8008ea6:	7813      	ldrb	r3, [r2, #0]
 8008ea8:	600b      	str	r3, [r1, #0]
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	1c10      	adds	r0, r2, #0
 8008eae:	bf18      	it	ne
 8008eb0:	2001      	movne	r0, #1
 8008eb2:	b002      	add	sp, #8
 8008eb4:	4770      	bx	lr
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	e7fb      	b.n	8008eb2 <__ascii_mbtowc+0x16>
 8008eba:	f06f 0001 	mvn.w	r0, #1
 8008ebe:	e7f8      	b.n	8008eb2 <__ascii_mbtowc+0x16>

08008ec0 <memchr>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	b2c9      	uxtb	r1, r1
 8008ec4:	4402      	add	r2, r0
 8008ec6:	4290      	cmp	r0, r2
 8008ec8:	4603      	mov	r3, r0
 8008eca:	d101      	bne.n	8008ed0 <memchr+0x10>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e003      	b.n	8008ed8 <memchr+0x18>
 8008ed0:	781c      	ldrb	r4, [r3, #0]
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	428c      	cmp	r4, r1
 8008ed6:	d1f6      	bne.n	8008ec6 <memchr+0x6>
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd10      	pop	{r4, pc}

08008edc <_Balloc>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460e      	mov	r6, r1
 8008ee4:	b93d      	cbnz	r5, 8008ef6 <_Balloc+0x1a>
 8008ee6:	2010      	movs	r0, #16
 8008ee8:	f7ff ffd0 	bl	8008e8c <malloc>
 8008eec:	6260      	str	r0, [r4, #36]	; 0x24
 8008eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ef2:	6005      	str	r5, [r0, #0]
 8008ef4:	60c5      	str	r5, [r0, #12]
 8008ef6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ef8:	68eb      	ldr	r3, [r5, #12]
 8008efa:	b183      	cbz	r3, 8008f1e <_Balloc+0x42>
 8008efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f04:	b9b8      	cbnz	r0, 8008f36 <_Balloc+0x5a>
 8008f06:	2101      	movs	r1, #1
 8008f08:	fa01 f506 	lsl.w	r5, r1, r6
 8008f0c:	1d6a      	adds	r2, r5, #5
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fabe 	bl	8009492 <_calloc_r>
 8008f16:	b160      	cbz	r0, 8008f32 <_Balloc+0x56>
 8008f18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f1c:	e00e      	b.n	8008f3c <_Balloc+0x60>
 8008f1e:	2221      	movs	r2, #33	; 0x21
 8008f20:	2104      	movs	r1, #4
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fab5 	bl	8009492 <_calloc_r>
 8008f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2a:	60e8      	str	r0, [r5, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e4      	bne.n	8008efc <_Balloc+0x20>
 8008f32:	2000      	movs	r0, #0
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	6802      	ldr	r2, [r0, #0]
 8008f38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f42:	e7f7      	b.n	8008f34 <_Balloc+0x58>

08008f44 <_Bfree>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	b93c      	cbnz	r4, 8008f5e <_Bfree+0x1a>
 8008f4e:	2010      	movs	r0, #16
 8008f50:	f7ff ff9c 	bl	8008e8c <malloc>
 8008f54:	6270      	str	r0, [r6, #36]	; 0x24
 8008f56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f5a:	6004      	str	r4, [r0, #0]
 8008f5c:	60c4      	str	r4, [r0, #12]
 8008f5e:	b13d      	cbz	r5, 8008f70 <_Bfree+0x2c>
 8008f60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f62:	686a      	ldr	r2, [r5, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f6a:	6029      	str	r1, [r5, #0]
 8008f6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f70:	bd70      	pop	{r4, r5, r6, pc}

08008f72 <__multadd>:
 8008f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f76:	461f      	mov	r7, r3
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	690d      	ldr	r5, [r1, #16]
 8008f80:	f101 0c14 	add.w	ip, r1, #20
 8008f84:	f8dc 0000 	ldr.w	r0, [ip]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	b281      	uxth	r1, r0
 8008f8c:	fb02 7101 	mla	r1, r2, r1, r7
 8008f90:	0c00      	lsrs	r0, r0, #16
 8008f92:	0c0f      	lsrs	r7, r1, #16
 8008f94:	fb02 7000 	mla	r0, r2, r0, r7
 8008f98:	b289      	uxth	r1, r1
 8008f9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f9e:	429d      	cmp	r5, r3
 8008fa0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008fa4:	f84c 1b04 	str.w	r1, [ip], #4
 8008fa8:	dcec      	bgt.n	8008f84 <__multadd+0x12>
 8008faa:	b1d7      	cbz	r7, 8008fe2 <__multadd+0x70>
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	42ab      	cmp	r3, r5
 8008fb0:	dc12      	bgt.n	8008fd8 <__multadd+0x66>
 8008fb2:	6861      	ldr	r1, [r4, #4]
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	3101      	adds	r1, #1
 8008fb8:	f7ff ff90 	bl	8008edc <_Balloc>
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	6922      	ldr	r2, [r4, #16]
 8008fc0:	f104 010c 	add.w	r1, r4, #12
 8008fc4:	3202      	adds	r2, #2
 8008fc6:	0092      	lsls	r2, r2, #2
 8008fc8:	300c      	adds	r0, #12
 8008fca:	f7fe fbf5 	bl	80077b8 <memcpy>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f7ff ffb7 	bl	8008f44 <_Bfree>
 8008fd6:	4644      	mov	r4, r8
 8008fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fdc:	3501      	adds	r5, #1
 8008fde:	615f      	str	r7, [r3, #20]
 8008fe0:	6125      	str	r5, [r4, #16]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fe8 <__hi0bits>:
 8008fe8:	0c02      	lsrs	r2, r0, #16
 8008fea:	0412      	lsls	r2, r2, #16
 8008fec:	4603      	mov	r3, r0
 8008fee:	b9b2      	cbnz	r2, 800901e <__hi0bits+0x36>
 8008ff0:	0403      	lsls	r3, r0, #16
 8008ff2:	2010      	movs	r0, #16
 8008ff4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ff8:	bf04      	itt	eq
 8008ffa:	021b      	lsleq	r3, r3, #8
 8008ffc:	3008      	addeq	r0, #8
 8008ffe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009002:	bf04      	itt	eq
 8009004:	011b      	lsleq	r3, r3, #4
 8009006:	3004      	addeq	r0, #4
 8009008:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800900c:	bf04      	itt	eq
 800900e:	009b      	lsleq	r3, r3, #2
 8009010:	3002      	addeq	r0, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	db06      	blt.n	8009024 <__hi0bits+0x3c>
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	d503      	bpl.n	8009022 <__hi0bits+0x3a>
 800901a:	3001      	adds	r0, #1
 800901c:	4770      	bx	lr
 800901e:	2000      	movs	r0, #0
 8009020:	e7e8      	b.n	8008ff4 <__hi0bits+0xc>
 8009022:	2020      	movs	r0, #32
 8009024:	4770      	bx	lr

08009026 <__lo0bits>:
 8009026:	6803      	ldr	r3, [r0, #0]
 8009028:	4601      	mov	r1, r0
 800902a:	f013 0207 	ands.w	r2, r3, #7
 800902e:	d00b      	beq.n	8009048 <__lo0bits+0x22>
 8009030:	07da      	lsls	r2, r3, #31
 8009032:	d423      	bmi.n	800907c <__lo0bits+0x56>
 8009034:	0798      	lsls	r0, r3, #30
 8009036:	bf49      	itett	mi
 8009038:	085b      	lsrmi	r3, r3, #1
 800903a:	089b      	lsrpl	r3, r3, #2
 800903c:	2001      	movmi	r0, #1
 800903e:	600b      	strmi	r3, [r1, #0]
 8009040:	bf5c      	itt	pl
 8009042:	600b      	strpl	r3, [r1, #0]
 8009044:	2002      	movpl	r0, #2
 8009046:	4770      	bx	lr
 8009048:	b298      	uxth	r0, r3
 800904a:	b9a8      	cbnz	r0, 8009078 <__lo0bits+0x52>
 800904c:	2010      	movs	r0, #16
 800904e:	0c1b      	lsrs	r3, r3, #16
 8009050:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009054:	bf04      	itt	eq
 8009056:	0a1b      	lsreq	r3, r3, #8
 8009058:	3008      	addeq	r0, #8
 800905a:	071a      	lsls	r2, r3, #28
 800905c:	bf04      	itt	eq
 800905e:	091b      	lsreq	r3, r3, #4
 8009060:	3004      	addeq	r0, #4
 8009062:	079a      	lsls	r2, r3, #30
 8009064:	bf04      	itt	eq
 8009066:	089b      	lsreq	r3, r3, #2
 8009068:	3002      	addeq	r0, #2
 800906a:	07da      	lsls	r2, r3, #31
 800906c:	d402      	bmi.n	8009074 <__lo0bits+0x4e>
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	d006      	beq.n	8009080 <__lo0bits+0x5a>
 8009072:	3001      	adds	r0, #1
 8009074:	600b      	str	r3, [r1, #0]
 8009076:	4770      	bx	lr
 8009078:	4610      	mov	r0, r2
 800907a:	e7e9      	b.n	8009050 <__lo0bits+0x2a>
 800907c:	2000      	movs	r0, #0
 800907e:	4770      	bx	lr
 8009080:	2020      	movs	r0, #32
 8009082:	4770      	bx	lr

08009084 <__i2b>:
 8009084:	b510      	push	{r4, lr}
 8009086:	460c      	mov	r4, r1
 8009088:	2101      	movs	r1, #1
 800908a:	f7ff ff27 	bl	8008edc <_Balloc>
 800908e:	2201      	movs	r2, #1
 8009090:	6144      	str	r4, [r0, #20]
 8009092:	6102      	str	r2, [r0, #16]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__multiply>:
 8009096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	4614      	mov	r4, r2
 800909c:	690a      	ldr	r2, [r1, #16]
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	4688      	mov	r8, r1
 80090a2:	429a      	cmp	r2, r3
 80090a4:	bfbe      	ittt	lt
 80090a6:	460b      	movlt	r3, r1
 80090a8:	46a0      	movlt	r8, r4
 80090aa:	461c      	movlt	r4, r3
 80090ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090bc:	eb07 0609 	add.w	r6, r7, r9
 80090c0:	42b3      	cmp	r3, r6
 80090c2:	bfb8      	it	lt
 80090c4:	3101      	addlt	r1, #1
 80090c6:	f7ff ff09 	bl	8008edc <_Balloc>
 80090ca:	f100 0514 	add.w	r5, r0, #20
 80090ce:	462b      	mov	r3, r5
 80090d0:	2200      	movs	r2, #0
 80090d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80090d6:	4573      	cmp	r3, lr
 80090d8:	d316      	bcc.n	8009108 <__multiply+0x72>
 80090da:	f104 0214 	add.w	r2, r4, #20
 80090de:	f108 0114 	add.w	r1, r8, #20
 80090e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80090e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	9b00      	ldr	r3, [sp, #0]
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d80c      	bhi.n	800910e <__multiply+0x78>
 80090f4:	2e00      	cmp	r6, #0
 80090f6:	dd03      	ble.n	8009100 <__multiply+0x6a>
 80090f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d05d      	beq.n	80091bc <__multiply+0x126>
 8009100:	6106      	str	r6, [r0, #16]
 8009102:	b003      	add	sp, #12
 8009104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	f843 2b04 	str.w	r2, [r3], #4
 800910c:	e7e3      	b.n	80090d6 <__multiply+0x40>
 800910e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009112:	f1bb 0f00 	cmp.w	fp, #0
 8009116:	d023      	beq.n	8009160 <__multiply+0xca>
 8009118:	4689      	mov	r9, r1
 800911a:	46ac      	mov	ip, r5
 800911c:	f04f 0800 	mov.w	r8, #0
 8009120:	f859 4b04 	ldr.w	r4, [r9], #4
 8009124:	f8dc a000 	ldr.w	sl, [ip]
 8009128:	b2a3      	uxth	r3, r4
 800912a:	fa1f fa8a 	uxth.w	sl, sl
 800912e:	fb0b a303 	mla	r3, fp, r3, sl
 8009132:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009136:	f8dc 4000 	ldr.w	r4, [ip]
 800913a:	4443      	add	r3, r8
 800913c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009140:	fb0b 840a 	mla	r4, fp, sl, r8
 8009144:	46e2      	mov	sl, ip
 8009146:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009150:	454f      	cmp	r7, r9
 8009152:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009156:	f84a 3b04 	str.w	r3, [sl], #4
 800915a:	d82b      	bhi.n	80091b4 <__multiply+0x11e>
 800915c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	3204      	adds	r2, #4
 8009164:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009168:	f1ba 0f00 	cmp.w	sl, #0
 800916c:	d020      	beq.n	80091b0 <__multiply+0x11a>
 800916e:	4689      	mov	r9, r1
 8009170:	46a8      	mov	r8, r5
 8009172:	f04f 0b00 	mov.w	fp, #0
 8009176:	682b      	ldr	r3, [r5, #0]
 8009178:	f8b9 c000 	ldrh.w	ip, [r9]
 800917c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009180:	b29b      	uxth	r3, r3
 8009182:	fb0a 440c 	mla	r4, sl, ip, r4
 8009186:	46c4      	mov	ip, r8
 8009188:	445c      	add	r4, fp
 800918a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800918e:	f84c 3b04 	str.w	r3, [ip], #4
 8009192:	f859 3b04 	ldr.w	r3, [r9], #4
 8009196:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800919a:	0c1b      	lsrs	r3, r3, #16
 800919c:	fb0a b303 	mla	r3, sl, r3, fp
 80091a0:	454f      	cmp	r7, r9
 80091a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80091a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80091aa:	d805      	bhi.n	80091b8 <__multiply+0x122>
 80091ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80091b0:	3504      	adds	r5, #4
 80091b2:	e79b      	b.n	80090ec <__multiply+0x56>
 80091b4:	46d4      	mov	ip, sl
 80091b6:	e7b3      	b.n	8009120 <__multiply+0x8a>
 80091b8:	46e0      	mov	r8, ip
 80091ba:	e7dd      	b.n	8009178 <__multiply+0xe2>
 80091bc:	3e01      	subs	r6, #1
 80091be:	e799      	b.n	80090f4 <__multiply+0x5e>

080091c0 <__pow5mult>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4615      	mov	r5, r2
 80091c6:	f012 0203 	ands.w	r2, r2, #3
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	d007      	beq.n	80091e0 <__pow5mult+0x20>
 80091d0:	4c21      	ldr	r4, [pc, #132]	; (8009258 <__pow5mult+0x98>)
 80091d2:	3a01      	subs	r2, #1
 80091d4:	2300      	movs	r3, #0
 80091d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091da:	f7ff feca 	bl	8008f72 <__multadd>
 80091de:	4607      	mov	r7, r0
 80091e0:	10ad      	asrs	r5, r5, #2
 80091e2:	d035      	beq.n	8009250 <__pow5mult+0x90>
 80091e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091e6:	b93c      	cbnz	r4, 80091f8 <__pow5mult+0x38>
 80091e8:	2010      	movs	r0, #16
 80091ea:	f7ff fe4f 	bl	8008e8c <malloc>
 80091ee:	6270      	str	r0, [r6, #36]	; 0x24
 80091f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091f4:	6004      	str	r4, [r0, #0]
 80091f6:	60c4      	str	r4, [r0, #12]
 80091f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009200:	b94c      	cbnz	r4, 8009216 <__pow5mult+0x56>
 8009202:	f240 2171 	movw	r1, #625	; 0x271
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ff3c 	bl	8009084 <__i2b>
 800920c:	2300      	movs	r3, #0
 800920e:	4604      	mov	r4, r0
 8009210:	f8c8 0008 	str.w	r0, [r8, #8]
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	07eb      	lsls	r3, r5, #31
 800921c:	d50a      	bpl.n	8009234 <__pow5mult+0x74>
 800921e:	4639      	mov	r1, r7
 8009220:	4622      	mov	r2, r4
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ff37 	bl	8009096 <__multiply>
 8009228:	4681      	mov	r9, r0
 800922a:	4639      	mov	r1, r7
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff fe89 	bl	8008f44 <_Bfree>
 8009232:	464f      	mov	r7, r9
 8009234:	106d      	asrs	r5, r5, #1
 8009236:	d00b      	beq.n	8009250 <__pow5mult+0x90>
 8009238:	6820      	ldr	r0, [r4, #0]
 800923a:	b938      	cbnz	r0, 800924c <__pow5mult+0x8c>
 800923c:	4622      	mov	r2, r4
 800923e:	4621      	mov	r1, r4
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff ff28 	bl	8009096 <__multiply>
 8009246:	6020      	str	r0, [r4, #0]
 8009248:	f8c0 8000 	str.w	r8, [r0]
 800924c:	4604      	mov	r4, r0
 800924e:	e7e4      	b.n	800921a <__pow5mult+0x5a>
 8009250:	4638      	mov	r0, r7
 8009252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009256:	bf00      	nop
 8009258:	0800ae00 	.word	0x0800ae00

0800925c <__lshift>:
 800925c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009260:	460c      	mov	r4, r1
 8009262:	4607      	mov	r7, r0
 8009264:	4616      	mov	r6, r2
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800926c:	eb0a 0903 	add.w	r9, sl, r3
 8009270:	6849      	ldr	r1, [r1, #4]
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	f109 0501 	add.w	r5, r9, #1
 8009278:	42ab      	cmp	r3, r5
 800927a:	db32      	blt.n	80092e2 <__lshift+0x86>
 800927c:	4638      	mov	r0, r7
 800927e:	f7ff fe2d 	bl	8008edc <_Balloc>
 8009282:	2300      	movs	r3, #0
 8009284:	4680      	mov	r8, r0
 8009286:	461a      	mov	r2, r3
 8009288:	f100 0114 	add.w	r1, r0, #20
 800928c:	4553      	cmp	r3, sl
 800928e:	db2b      	blt.n	80092e8 <__lshift+0x8c>
 8009290:	6920      	ldr	r0, [r4, #16]
 8009292:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009296:	f104 0314 	add.w	r3, r4, #20
 800929a:	f016 021f 	ands.w	r2, r6, #31
 800929e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092a6:	d025      	beq.n	80092f4 <__lshift+0x98>
 80092a8:	2000      	movs	r0, #0
 80092aa:	f1c2 0e20 	rsb	lr, r2, #32
 80092ae:	468a      	mov	sl, r1
 80092b0:	681e      	ldr	r6, [r3, #0]
 80092b2:	4096      	lsls	r6, r2
 80092b4:	4330      	orrs	r0, r6
 80092b6:	f84a 0b04 	str.w	r0, [sl], #4
 80092ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80092be:	459c      	cmp	ip, r3
 80092c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80092c4:	d814      	bhi.n	80092f0 <__lshift+0x94>
 80092c6:	6048      	str	r0, [r1, #4]
 80092c8:	b108      	cbz	r0, 80092ce <__lshift+0x72>
 80092ca:	f109 0502 	add.w	r5, r9, #2
 80092ce:	3d01      	subs	r5, #1
 80092d0:	4638      	mov	r0, r7
 80092d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80092d6:	4621      	mov	r1, r4
 80092d8:	f7ff fe34 	bl	8008f44 <_Bfree>
 80092dc:	4640      	mov	r0, r8
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	3101      	adds	r1, #1
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	e7c7      	b.n	8009278 <__lshift+0x1c>
 80092e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80092ec:	3301      	adds	r3, #1
 80092ee:	e7cd      	b.n	800928c <__lshift+0x30>
 80092f0:	4651      	mov	r1, sl
 80092f2:	e7dc      	b.n	80092ae <__lshift+0x52>
 80092f4:	3904      	subs	r1, #4
 80092f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fa:	459c      	cmp	ip, r3
 80092fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009300:	d8f9      	bhi.n	80092f6 <__lshift+0x9a>
 8009302:	e7e4      	b.n	80092ce <__lshift+0x72>

08009304 <__mcmp>:
 8009304:	6903      	ldr	r3, [r0, #16]
 8009306:	690a      	ldr	r2, [r1, #16]
 8009308:	b530      	push	{r4, r5, lr}
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	d10c      	bne.n	8009328 <__mcmp+0x24>
 800930e:	0092      	lsls	r2, r2, #2
 8009310:	3014      	adds	r0, #20
 8009312:	3114      	adds	r1, #20
 8009314:	1884      	adds	r4, r0, r2
 8009316:	4411      	add	r1, r2
 8009318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800931c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009320:	4295      	cmp	r5, r2
 8009322:	d003      	beq.n	800932c <__mcmp+0x28>
 8009324:	d305      	bcc.n	8009332 <__mcmp+0x2e>
 8009326:	2301      	movs	r3, #1
 8009328:	4618      	mov	r0, r3
 800932a:	bd30      	pop	{r4, r5, pc}
 800932c:	42a0      	cmp	r0, r4
 800932e:	d3f3      	bcc.n	8009318 <__mcmp+0x14>
 8009330:	e7fa      	b.n	8009328 <__mcmp+0x24>
 8009332:	f04f 33ff 	mov.w	r3, #4294967295
 8009336:	e7f7      	b.n	8009328 <__mcmp+0x24>

08009338 <__mdiff>:
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	460d      	mov	r5, r1
 800933e:	4607      	mov	r7, r0
 8009340:	4611      	mov	r1, r2
 8009342:	4628      	mov	r0, r5
 8009344:	4614      	mov	r4, r2
 8009346:	f7ff ffdd 	bl	8009304 <__mcmp>
 800934a:	1e06      	subs	r6, r0, #0
 800934c:	d108      	bne.n	8009360 <__mdiff+0x28>
 800934e:	4631      	mov	r1, r6
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff fdc3 	bl	8008edc <_Balloc>
 8009356:	2301      	movs	r3, #1
 8009358:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	bfa4      	itt	ge
 8009362:	4623      	movge	r3, r4
 8009364:	462c      	movge	r4, r5
 8009366:	4638      	mov	r0, r7
 8009368:	6861      	ldr	r1, [r4, #4]
 800936a:	bfa6      	itte	ge
 800936c:	461d      	movge	r5, r3
 800936e:	2600      	movge	r6, #0
 8009370:	2601      	movlt	r6, #1
 8009372:	f7ff fdb3 	bl	8008edc <_Balloc>
 8009376:	f04f 0e00 	mov.w	lr, #0
 800937a:	60c6      	str	r6, [r0, #12]
 800937c:	692b      	ldr	r3, [r5, #16]
 800937e:	6926      	ldr	r6, [r4, #16]
 8009380:	f104 0214 	add.w	r2, r4, #20
 8009384:	f105 0914 	add.w	r9, r5, #20
 8009388:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800938c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009390:	f100 0114 	add.w	r1, r0, #20
 8009394:	f852 ab04 	ldr.w	sl, [r2], #4
 8009398:	f859 5b04 	ldr.w	r5, [r9], #4
 800939c:	fa1f f38a 	uxth.w	r3, sl
 80093a0:	4473      	add	r3, lr
 80093a2:	b2ac      	uxth	r4, r5
 80093a4:	1b1b      	subs	r3, r3, r4
 80093a6:	0c2c      	lsrs	r4, r5, #16
 80093a8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80093ac:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80093b6:	45c8      	cmp	r8, r9
 80093b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80093bc:	4694      	mov	ip, r2
 80093be:	f841 4b04 	str.w	r4, [r1], #4
 80093c2:	d8e7      	bhi.n	8009394 <__mdiff+0x5c>
 80093c4:	45bc      	cmp	ip, r7
 80093c6:	d304      	bcc.n	80093d2 <__mdiff+0x9a>
 80093c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80093cc:	b183      	cbz	r3, 80093f0 <__mdiff+0xb8>
 80093ce:	6106      	str	r6, [r0, #16]
 80093d0:	e7c4      	b.n	800935c <__mdiff+0x24>
 80093d2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80093d6:	b2a2      	uxth	r2, r4
 80093d8:	4472      	add	r2, lr
 80093da:	1413      	asrs	r3, r2, #16
 80093dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80093e0:	b292      	uxth	r2, r2
 80093e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093e6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80093ea:	f841 2b04 	str.w	r2, [r1], #4
 80093ee:	e7e9      	b.n	80093c4 <__mdiff+0x8c>
 80093f0:	3e01      	subs	r6, #1
 80093f2:	e7e9      	b.n	80093c8 <__mdiff+0x90>

080093f4 <__d2b>:
 80093f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093f8:	461c      	mov	r4, r3
 80093fa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80093fe:	2101      	movs	r1, #1
 8009400:	4690      	mov	r8, r2
 8009402:	f7ff fd6b 	bl	8008edc <_Balloc>
 8009406:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800940a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800940e:	4607      	mov	r7, r0
 8009410:	bb34      	cbnz	r4, 8009460 <__d2b+0x6c>
 8009412:	9201      	str	r2, [sp, #4]
 8009414:	f1b8 0200 	subs.w	r2, r8, #0
 8009418:	d027      	beq.n	800946a <__d2b+0x76>
 800941a:	a802      	add	r0, sp, #8
 800941c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009420:	f7ff fe01 	bl	8009026 <__lo0bits>
 8009424:	9900      	ldr	r1, [sp, #0]
 8009426:	b1f0      	cbz	r0, 8009466 <__d2b+0x72>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	f1c0 0320 	rsb	r3, r0, #32
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	430b      	orrs	r3, r1
 8009434:	40c2      	lsrs	r2, r0
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf14      	ite	ne
 8009440:	2102      	movne	r1, #2
 8009442:	2101      	moveq	r1, #1
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	6139      	str	r1, [r7, #16]
 8009448:	b1c4      	cbz	r4, 800947c <__d2b+0x88>
 800944a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800944e:	4404      	add	r4, r0
 8009450:	6034      	str	r4, [r6, #0]
 8009452:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009456:	6028      	str	r0, [r5, #0]
 8009458:	4638      	mov	r0, r7
 800945a:	b002      	add	sp, #8
 800945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009460:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009464:	e7d5      	b.n	8009412 <__d2b+0x1e>
 8009466:	6179      	str	r1, [r7, #20]
 8009468:	e7e7      	b.n	800943a <__d2b+0x46>
 800946a:	a801      	add	r0, sp, #4
 800946c:	f7ff fddb 	bl	8009026 <__lo0bits>
 8009470:	2101      	movs	r1, #1
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	6139      	str	r1, [r7, #16]
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	3020      	adds	r0, #32
 800947a:	e7e5      	b.n	8009448 <__d2b+0x54>
 800947c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009480:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	6918      	ldr	r0, [r3, #16]
 8009488:	f7ff fdae 	bl	8008fe8 <__hi0bits>
 800948c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009490:	e7e1      	b.n	8009456 <__d2b+0x62>

08009492 <_calloc_r>:
 8009492:	b538      	push	{r3, r4, r5, lr}
 8009494:	fb02 f401 	mul.w	r4, r2, r1
 8009498:	4621      	mov	r1, r4
 800949a:	f000 f855 	bl	8009548 <_malloc_r>
 800949e:	4605      	mov	r5, r0
 80094a0:	b118      	cbz	r0, 80094aa <_calloc_r+0x18>
 80094a2:	4622      	mov	r2, r4
 80094a4:	2100      	movs	r1, #0
 80094a6:	f7fe f992 	bl	80077ce <memset>
 80094aa:	4628      	mov	r0, r5
 80094ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080094b0 <_free_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4605      	mov	r5, r0
 80094b4:	2900      	cmp	r1, #0
 80094b6:	d043      	beq.n	8009540 <_free_r+0x90>
 80094b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094bc:	1f0c      	subs	r4, r1, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfb8      	it	lt
 80094c2:	18e4      	addlt	r4, r4, r3
 80094c4:	f000 fa22 	bl	800990c <__malloc_lock>
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <_free_r+0x94>)
 80094ca:	6813      	ldr	r3, [r2, #0]
 80094cc:	4610      	mov	r0, r2
 80094ce:	b933      	cbnz	r3, 80094de <_free_r+0x2e>
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	6014      	str	r4, [r2, #0]
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094da:	f000 ba18 	b.w	800990e <__malloc_unlock>
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d90b      	bls.n	80094fa <_free_r+0x4a>
 80094e2:	6821      	ldr	r1, [r4, #0]
 80094e4:	1862      	adds	r2, r4, r1
 80094e6:	4293      	cmp	r3, r2
 80094e8:	bf01      	itttt	eq
 80094ea:	681a      	ldreq	r2, [r3, #0]
 80094ec:	685b      	ldreq	r3, [r3, #4]
 80094ee:	1852      	addeq	r2, r2, r1
 80094f0:	6022      	streq	r2, [r4, #0]
 80094f2:	6063      	str	r3, [r4, #4]
 80094f4:	6004      	str	r4, [r0, #0]
 80094f6:	e7ed      	b.n	80094d4 <_free_r+0x24>
 80094f8:	4613      	mov	r3, r2
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	b10a      	cbz	r2, 8009502 <_free_r+0x52>
 80094fe:	42a2      	cmp	r2, r4
 8009500:	d9fa      	bls.n	80094f8 <_free_r+0x48>
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	1858      	adds	r0, r3, r1
 8009506:	42a0      	cmp	r0, r4
 8009508:	d10b      	bne.n	8009522 <_free_r+0x72>
 800950a:	6820      	ldr	r0, [r4, #0]
 800950c:	4401      	add	r1, r0
 800950e:	1858      	adds	r0, r3, r1
 8009510:	4282      	cmp	r2, r0
 8009512:	6019      	str	r1, [r3, #0]
 8009514:	d1de      	bne.n	80094d4 <_free_r+0x24>
 8009516:	6810      	ldr	r0, [r2, #0]
 8009518:	6852      	ldr	r2, [r2, #4]
 800951a:	4401      	add	r1, r0
 800951c:	6019      	str	r1, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
 8009520:	e7d8      	b.n	80094d4 <_free_r+0x24>
 8009522:	d902      	bls.n	800952a <_free_r+0x7a>
 8009524:	230c      	movs	r3, #12
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	e7d4      	b.n	80094d4 <_free_r+0x24>
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	1821      	adds	r1, r4, r0
 800952e:	428a      	cmp	r2, r1
 8009530:	bf01      	itttt	eq
 8009532:	6811      	ldreq	r1, [r2, #0]
 8009534:	6852      	ldreq	r2, [r2, #4]
 8009536:	1809      	addeq	r1, r1, r0
 8009538:	6021      	streq	r1, [r4, #0]
 800953a:	6062      	str	r2, [r4, #4]
 800953c:	605c      	str	r4, [r3, #4]
 800953e:	e7c9      	b.n	80094d4 <_free_r+0x24>
 8009540:	bd38      	pop	{r3, r4, r5, pc}
 8009542:	bf00      	nop
 8009544:	20003e08 	.word	0x20003e08

08009548 <_malloc_r>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	1ccd      	adds	r5, r1, #3
 800954c:	f025 0503 	bic.w	r5, r5, #3
 8009550:	3508      	adds	r5, #8
 8009552:	2d0c      	cmp	r5, #12
 8009554:	bf38      	it	cc
 8009556:	250c      	movcc	r5, #12
 8009558:	2d00      	cmp	r5, #0
 800955a:	4606      	mov	r6, r0
 800955c:	db01      	blt.n	8009562 <_malloc_r+0x1a>
 800955e:	42a9      	cmp	r1, r5
 8009560:	d903      	bls.n	800956a <_malloc_r+0x22>
 8009562:	230c      	movs	r3, #12
 8009564:	6033      	str	r3, [r6, #0]
 8009566:	2000      	movs	r0, #0
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	f000 f9cf 	bl	800990c <__malloc_lock>
 800956e:	4a21      	ldr	r2, [pc, #132]	; (80095f4 <_malloc_r+0xac>)
 8009570:	6814      	ldr	r4, [r2, #0]
 8009572:	4621      	mov	r1, r4
 8009574:	b991      	cbnz	r1, 800959c <_malloc_r+0x54>
 8009576:	4c20      	ldr	r4, [pc, #128]	; (80095f8 <_malloc_r+0xb0>)
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	b91b      	cbnz	r3, 8009584 <_malloc_r+0x3c>
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f98f 	bl	80098a0 <_sbrk_r>
 8009582:	6020      	str	r0, [r4, #0]
 8009584:	4629      	mov	r1, r5
 8009586:	4630      	mov	r0, r6
 8009588:	f000 f98a 	bl	80098a0 <_sbrk_r>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d124      	bne.n	80095da <_malloc_r+0x92>
 8009590:	230c      	movs	r3, #12
 8009592:	4630      	mov	r0, r6
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	f000 f9ba 	bl	800990e <__malloc_unlock>
 800959a:	e7e4      	b.n	8009566 <_malloc_r+0x1e>
 800959c:	680b      	ldr	r3, [r1, #0]
 800959e:	1b5b      	subs	r3, r3, r5
 80095a0:	d418      	bmi.n	80095d4 <_malloc_r+0x8c>
 80095a2:	2b0b      	cmp	r3, #11
 80095a4:	d90f      	bls.n	80095c6 <_malloc_r+0x7e>
 80095a6:	600b      	str	r3, [r1, #0]
 80095a8:	18cc      	adds	r4, r1, r3
 80095aa:	50cd      	str	r5, [r1, r3]
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 f9ae 	bl	800990e <__malloc_unlock>
 80095b2:	f104 000b 	add.w	r0, r4, #11
 80095b6:	1d23      	adds	r3, r4, #4
 80095b8:	f020 0007 	bic.w	r0, r0, #7
 80095bc:	1ac3      	subs	r3, r0, r3
 80095be:	d0d3      	beq.n	8009568 <_malloc_r+0x20>
 80095c0:	425a      	negs	r2, r3
 80095c2:	50e2      	str	r2, [r4, r3]
 80095c4:	e7d0      	b.n	8009568 <_malloc_r+0x20>
 80095c6:	684b      	ldr	r3, [r1, #4]
 80095c8:	428c      	cmp	r4, r1
 80095ca:	bf16      	itet	ne
 80095cc:	6063      	strne	r3, [r4, #4]
 80095ce:	6013      	streq	r3, [r2, #0]
 80095d0:	460c      	movne	r4, r1
 80095d2:	e7eb      	b.n	80095ac <_malloc_r+0x64>
 80095d4:	460c      	mov	r4, r1
 80095d6:	6849      	ldr	r1, [r1, #4]
 80095d8:	e7cc      	b.n	8009574 <_malloc_r+0x2c>
 80095da:	1cc4      	adds	r4, r0, #3
 80095dc:	f024 0403 	bic.w	r4, r4, #3
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d005      	beq.n	80095f0 <_malloc_r+0xa8>
 80095e4:	1a21      	subs	r1, r4, r0
 80095e6:	4630      	mov	r0, r6
 80095e8:	f000 f95a 	bl	80098a0 <_sbrk_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d0cf      	beq.n	8009590 <_malloc_r+0x48>
 80095f0:	6025      	str	r5, [r4, #0]
 80095f2:	e7db      	b.n	80095ac <_malloc_r+0x64>
 80095f4:	20003e08 	.word	0x20003e08
 80095f8:	20003e0c 	.word	0x20003e0c

080095fc <__ssputs_r>:
 80095fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	688e      	ldr	r6, [r1, #8]
 8009602:	4682      	mov	sl, r0
 8009604:	429e      	cmp	r6, r3
 8009606:	460c      	mov	r4, r1
 8009608:	4690      	mov	r8, r2
 800960a:	4699      	mov	r9, r3
 800960c:	d837      	bhi.n	800967e <__ssputs_r+0x82>
 800960e:	898a      	ldrh	r2, [r1, #12]
 8009610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009614:	d031      	beq.n	800967a <__ssputs_r+0x7e>
 8009616:	2302      	movs	r3, #2
 8009618:	6825      	ldr	r5, [r4, #0]
 800961a:	6909      	ldr	r1, [r1, #16]
 800961c:	1a6f      	subs	r7, r5, r1
 800961e:	6965      	ldr	r5, [r4, #20]
 8009620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009624:	fb95 f5f3 	sdiv	r5, r5, r3
 8009628:	f109 0301 	add.w	r3, r9, #1
 800962c:	443b      	add	r3, r7
 800962e:	429d      	cmp	r5, r3
 8009630:	bf38      	it	cc
 8009632:	461d      	movcc	r5, r3
 8009634:	0553      	lsls	r3, r2, #21
 8009636:	d530      	bpl.n	800969a <__ssputs_r+0x9e>
 8009638:	4629      	mov	r1, r5
 800963a:	f7ff ff85 	bl	8009548 <_malloc_r>
 800963e:	4606      	mov	r6, r0
 8009640:	b950      	cbnz	r0, 8009658 <__ssputs_r+0x5c>
 8009642:	230c      	movs	r3, #12
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	f8ca 3000 	str.w	r3, [sl]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009658:	463a      	mov	r2, r7
 800965a:	6921      	ldr	r1, [r4, #16]
 800965c:	f7fe f8ac 	bl	80077b8 <memcpy>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	6126      	str	r6, [r4, #16]
 800966e:	443e      	add	r6, r7
 8009670:	6026      	str	r6, [r4, #0]
 8009672:	464e      	mov	r6, r9
 8009674:	6165      	str	r5, [r4, #20]
 8009676:	1bed      	subs	r5, r5, r7
 8009678:	60a5      	str	r5, [r4, #8]
 800967a:	454e      	cmp	r6, r9
 800967c:	d900      	bls.n	8009680 <__ssputs_r+0x84>
 800967e:	464e      	mov	r6, r9
 8009680:	4632      	mov	r2, r6
 8009682:	4641      	mov	r1, r8
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	f000 f928 	bl	80098da <memmove>
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	2000      	movs	r0, #0
 800968e:	1b9b      	subs	r3, r3, r6
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	441e      	add	r6, r3
 8009696:	6026      	str	r6, [r4, #0]
 8009698:	e7dc      	b.n	8009654 <__ssputs_r+0x58>
 800969a:	462a      	mov	r2, r5
 800969c:	f000 f938 	bl	8009910 <_realloc_r>
 80096a0:	4606      	mov	r6, r0
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1e2      	bne.n	800966c <__ssputs_r+0x70>
 80096a6:	6921      	ldr	r1, [r4, #16]
 80096a8:	4650      	mov	r0, sl
 80096aa:	f7ff ff01 	bl	80094b0 <_free_r>
 80096ae:	e7c8      	b.n	8009642 <__ssputs_r+0x46>

080096b0 <_svfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	461d      	mov	r5, r3
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	b09d      	sub	sp, #116	; 0x74
 80096ba:	061f      	lsls	r7, r3, #24
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	4616      	mov	r6, r2
 80096c2:	d50f      	bpl.n	80096e4 <_svfiprintf_r+0x34>
 80096c4:	690b      	ldr	r3, [r1, #16]
 80096c6:	b96b      	cbnz	r3, 80096e4 <_svfiprintf_r+0x34>
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	f7ff ff3d 	bl	8009548 <_malloc_r>
 80096ce:	6020      	str	r0, [r4, #0]
 80096d0:	6120      	str	r0, [r4, #16]
 80096d2:	b928      	cbnz	r0, 80096e0 <_svfiprintf_r+0x30>
 80096d4:	230c      	movs	r3, #12
 80096d6:	f8c8 3000 	str.w	r3, [r8]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	e0c8      	b.n	8009872 <_svfiprintf_r+0x1c2>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	6163      	str	r3, [r4, #20]
 80096e4:	2300      	movs	r3, #0
 80096e6:	9309      	str	r3, [sp, #36]	; 0x24
 80096e8:	2320      	movs	r3, #32
 80096ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ee:	2330      	movs	r3, #48	; 0x30
 80096f0:	f04f 0b01 	mov.w	fp, #1
 80096f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f8:	9503      	str	r5, [sp, #12]
 80096fa:	4637      	mov	r7, r6
 80096fc:	463d      	mov	r5, r7
 80096fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009702:	b10b      	cbz	r3, 8009708 <_svfiprintf_r+0x58>
 8009704:	2b25      	cmp	r3, #37	; 0x25
 8009706:	d13e      	bne.n	8009786 <_svfiprintf_r+0xd6>
 8009708:	ebb7 0a06 	subs.w	sl, r7, r6
 800970c:	d00b      	beq.n	8009726 <_svfiprintf_r+0x76>
 800970e:	4653      	mov	r3, sl
 8009710:	4632      	mov	r2, r6
 8009712:	4621      	mov	r1, r4
 8009714:	4640      	mov	r0, r8
 8009716:	f7ff ff71 	bl	80095fc <__ssputs_r>
 800971a:	3001      	adds	r0, #1
 800971c:	f000 80a4 	beq.w	8009868 <_svfiprintf_r+0x1b8>
 8009720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009722:	4453      	add	r3, sl
 8009724:	9309      	str	r3, [sp, #36]	; 0x24
 8009726:	783b      	ldrb	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 809d 	beq.w	8009868 <_svfiprintf_r+0x1b8>
 800972e:	2300      	movs	r3, #0
 8009730:	f04f 32ff 	mov.w	r2, #4294967295
 8009734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	9307      	str	r3, [sp, #28]
 800973c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009740:	931a      	str	r3, [sp, #104]	; 0x68
 8009742:	462f      	mov	r7, r5
 8009744:	2205      	movs	r2, #5
 8009746:	f817 1b01 	ldrb.w	r1, [r7], #1
 800974a:	4850      	ldr	r0, [pc, #320]	; (800988c <_svfiprintf_r+0x1dc>)
 800974c:	f7ff fbb8 	bl	8008ec0 <memchr>
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	b9d0      	cbnz	r0, 800978a <_svfiprintf_r+0xda>
 8009754:	06d9      	lsls	r1, r3, #27
 8009756:	bf44      	itt	mi
 8009758:	2220      	movmi	r2, #32
 800975a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800975e:	071a      	lsls	r2, r3, #28
 8009760:	bf44      	itt	mi
 8009762:	222b      	movmi	r2, #43	; 0x2b
 8009764:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009768:	782a      	ldrb	r2, [r5, #0]
 800976a:	2a2a      	cmp	r2, #42	; 0x2a
 800976c:	d015      	beq.n	800979a <_svfiprintf_r+0xea>
 800976e:	462f      	mov	r7, r5
 8009770:	2000      	movs	r0, #0
 8009772:	250a      	movs	r5, #10
 8009774:	9a07      	ldr	r2, [sp, #28]
 8009776:	4639      	mov	r1, r7
 8009778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800977c:	3b30      	subs	r3, #48	; 0x30
 800977e:	2b09      	cmp	r3, #9
 8009780:	d94d      	bls.n	800981e <_svfiprintf_r+0x16e>
 8009782:	b1b8      	cbz	r0, 80097b4 <_svfiprintf_r+0x104>
 8009784:	e00f      	b.n	80097a6 <_svfiprintf_r+0xf6>
 8009786:	462f      	mov	r7, r5
 8009788:	e7b8      	b.n	80096fc <_svfiprintf_r+0x4c>
 800978a:	4a40      	ldr	r2, [pc, #256]	; (800988c <_svfiprintf_r+0x1dc>)
 800978c:	463d      	mov	r5, r7
 800978e:	1a80      	subs	r0, r0, r2
 8009790:	fa0b f000 	lsl.w	r0, fp, r0
 8009794:	4318      	orrs	r0, r3
 8009796:	9004      	str	r0, [sp, #16]
 8009798:	e7d3      	b.n	8009742 <_svfiprintf_r+0x92>
 800979a:	9a03      	ldr	r2, [sp, #12]
 800979c:	1d11      	adds	r1, r2, #4
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	9103      	str	r1, [sp, #12]
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	db01      	blt.n	80097aa <_svfiprintf_r+0xfa>
 80097a6:	9207      	str	r2, [sp, #28]
 80097a8:	e004      	b.n	80097b4 <_svfiprintf_r+0x104>
 80097aa:	4252      	negs	r2, r2
 80097ac:	f043 0302 	orr.w	r3, r3, #2
 80097b0:	9207      	str	r2, [sp, #28]
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	783b      	ldrb	r3, [r7, #0]
 80097b6:	2b2e      	cmp	r3, #46	; 0x2e
 80097b8:	d10c      	bne.n	80097d4 <_svfiprintf_r+0x124>
 80097ba:	787b      	ldrb	r3, [r7, #1]
 80097bc:	2b2a      	cmp	r3, #42	; 0x2a
 80097be:	d133      	bne.n	8009828 <_svfiprintf_r+0x178>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3702      	adds	r7, #2
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfb8      	it	lt
 80097ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	4d2e      	ldr	r5, [pc, #184]	; (8009890 <_svfiprintf_r+0x1e0>)
 80097d6:	2203      	movs	r2, #3
 80097d8:	7839      	ldrb	r1, [r7, #0]
 80097da:	4628      	mov	r0, r5
 80097dc:	f7ff fb70 	bl	8008ec0 <memchr>
 80097e0:	b138      	cbz	r0, 80097f2 <_svfiprintf_r+0x142>
 80097e2:	2340      	movs	r3, #64	; 0x40
 80097e4:	1b40      	subs	r0, r0, r5
 80097e6:	fa03 f000 	lsl.w	r0, r3, r0
 80097ea:	9b04      	ldr	r3, [sp, #16]
 80097ec:	3701      	adds	r7, #1
 80097ee:	4303      	orrs	r3, r0
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	7839      	ldrb	r1, [r7, #0]
 80097f4:	2206      	movs	r2, #6
 80097f6:	4827      	ldr	r0, [pc, #156]	; (8009894 <_svfiprintf_r+0x1e4>)
 80097f8:	1c7e      	adds	r6, r7, #1
 80097fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097fe:	f7ff fb5f 	bl	8008ec0 <memchr>
 8009802:	2800      	cmp	r0, #0
 8009804:	d038      	beq.n	8009878 <_svfiprintf_r+0x1c8>
 8009806:	4b24      	ldr	r3, [pc, #144]	; (8009898 <_svfiprintf_r+0x1e8>)
 8009808:	bb13      	cbnz	r3, 8009850 <_svfiprintf_r+0x1a0>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	3307      	adds	r3, #7
 800980e:	f023 0307 	bic.w	r3, r3, #7
 8009812:	3308      	adds	r3, #8
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	444b      	add	r3, r9
 800981a:	9309      	str	r3, [sp, #36]	; 0x24
 800981c:	e76d      	b.n	80096fa <_svfiprintf_r+0x4a>
 800981e:	fb05 3202 	mla	r2, r5, r2, r3
 8009822:	2001      	movs	r0, #1
 8009824:	460f      	mov	r7, r1
 8009826:	e7a6      	b.n	8009776 <_svfiprintf_r+0xc6>
 8009828:	2300      	movs	r3, #0
 800982a:	250a      	movs	r5, #10
 800982c:	4619      	mov	r1, r3
 800982e:	3701      	adds	r7, #1
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	4638      	mov	r0, r7
 8009834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009838:	3a30      	subs	r2, #48	; 0x30
 800983a:	2a09      	cmp	r2, #9
 800983c:	d903      	bls.n	8009846 <_svfiprintf_r+0x196>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0c8      	beq.n	80097d4 <_svfiprintf_r+0x124>
 8009842:	9105      	str	r1, [sp, #20]
 8009844:	e7c6      	b.n	80097d4 <_svfiprintf_r+0x124>
 8009846:	fb05 2101 	mla	r1, r5, r1, r2
 800984a:	2301      	movs	r3, #1
 800984c:	4607      	mov	r7, r0
 800984e:	e7f0      	b.n	8009832 <_svfiprintf_r+0x182>
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4622      	mov	r2, r4
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <_svfiprintf_r+0x1ec>)
 8009858:	a904      	add	r1, sp, #16
 800985a:	4640      	mov	r0, r8
 800985c:	f7fe f850 	bl	8007900 <_printf_float>
 8009860:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009864:	4681      	mov	r9, r0
 8009866:	d1d6      	bne.n	8009816 <_svfiprintf_r+0x166>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	065b      	lsls	r3, r3, #25
 800986c:	f53f af35 	bmi.w	80096da <_svfiprintf_r+0x2a>
 8009870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009872:	b01d      	add	sp, #116	; 0x74
 8009874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4622      	mov	r2, r4
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <_svfiprintf_r+0x1ec>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	4640      	mov	r0, r8
 8009884:	f7fe fae8 	bl	8007e58 <_printf_i>
 8009888:	e7ea      	b.n	8009860 <_svfiprintf_r+0x1b0>
 800988a:	bf00      	nop
 800988c:	0800ae0c 	.word	0x0800ae0c
 8009890:	0800ae12 	.word	0x0800ae12
 8009894:	0800ae16 	.word	0x0800ae16
 8009898:	08007901 	.word	0x08007901
 800989c:	080095fd 	.word	0x080095fd

080098a0 <_sbrk_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2300      	movs	r3, #0
 80098a4:	4c05      	ldr	r4, [pc, #20]	; (80098bc <_sbrk_r+0x1c>)
 80098a6:	4605      	mov	r5, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	f7f9 f910 	bl	8002ad0 <_sbrk>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_sbrk_r+0x1a>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_sbrk_r+0x1a>
 80098b8:	602b      	str	r3, [r5, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20004084 	.word	0x20004084

080098c0 <__ascii_wctomb>:
 80098c0:	b149      	cbz	r1, 80098d6 <__ascii_wctomb+0x16>
 80098c2:	2aff      	cmp	r2, #255	; 0xff
 80098c4:	bf8b      	itete	hi
 80098c6:	238a      	movhi	r3, #138	; 0x8a
 80098c8:	700a      	strbls	r2, [r1, #0]
 80098ca:	6003      	strhi	r3, [r0, #0]
 80098cc:	2001      	movls	r0, #1
 80098ce:	bf88      	it	hi
 80098d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098d4:	4770      	bx	lr
 80098d6:	4608      	mov	r0, r1
 80098d8:	4770      	bx	lr

080098da <memmove>:
 80098da:	4288      	cmp	r0, r1
 80098dc:	b510      	push	{r4, lr}
 80098de:	eb01 0302 	add.w	r3, r1, r2
 80098e2:	d807      	bhi.n	80098f4 <memmove+0x1a>
 80098e4:	1e42      	subs	r2, r0, #1
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d00a      	beq.n	8009900 <memmove+0x26>
 80098ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80098f2:	e7f8      	b.n	80098e6 <memmove+0xc>
 80098f4:	4283      	cmp	r3, r0
 80098f6:	d9f5      	bls.n	80098e4 <memmove+0xa>
 80098f8:	1881      	adds	r1, r0, r2
 80098fa:	1ad2      	subs	r2, r2, r3
 80098fc:	42d3      	cmn	r3, r2
 80098fe:	d100      	bne.n	8009902 <memmove+0x28>
 8009900:	bd10      	pop	{r4, pc}
 8009902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009906:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800990a:	e7f7      	b.n	80098fc <memmove+0x22>

0800990c <__malloc_lock>:
 800990c:	4770      	bx	lr

0800990e <__malloc_unlock>:
 800990e:	4770      	bx	lr

08009910 <_realloc_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4607      	mov	r7, r0
 8009914:	4614      	mov	r4, r2
 8009916:	460e      	mov	r6, r1
 8009918:	b921      	cbnz	r1, 8009924 <_realloc_r+0x14>
 800991a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800991e:	4611      	mov	r1, r2
 8009920:	f7ff be12 	b.w	8009548 <_malloc_r>
 8009924:	b922      	cbnz	r2, 8009930 <_realloc_r+0x20>
 8009926:	f7ff fdc3 	bl	80094b0 <_free_r>
 800992a:	4625      	mov	r5, r4
 800992c:	4628      	mov	r0, r5
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	f000 f814 	bl	800995c <_malloc_usable_size_r>
 8009934:	42a0      	cmp	r0, r4
 8009936:	d20f      	bcs.n	8009958 <_realloc_r+0x48>
 8009938:	4621      	mov	r1, r4
 800993a:	4638      	mov	r0, r7
 800993c:	f7ff fe04 	bl	8009548 <_malloc_r>
 8009940:	4605      	mov	r5, r0
 8009942:	2800      	cmp	r0, #0
 8009944:	d0f2      	beq.n	800992c <_realloc_r+0x1c>
 8009946:	4631      	mov	r1, r6
 8009948:	4622      	mov	r2, r4
 800994a:	f7fd ff35 	bl	80077b8 <memcpy>
 800994e:	4631      	mov	r1, r6
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff fdad 	bl	80094b0 <_free_r>
 8009956:	e7e9      	b.n	800992c <_realloc_r+0x1c>
 8009958:	4635      	mov	r5, r6
 800995a:	e7e7      	b.n	800992c <_realloc_r+0x1c>

0800995c <_malloc_usable_size_r>:
 800995c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009960:	1f18      	subs	r0, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfbc      	itt	lt
 8009966:	580b      	ldrlt	r3, [r1, r0]
 8009968:	18c0      	addlt	r0, r0, r3
 800996a:	4770      	bx	lr

0800996c <cos>:
 800996c:	b530      	push	{r4, r5, lr}
 800996e:	4a18      	ldr	r2, [pc, #96]	; (80099d0 <cos+0x64>)
 8009970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009974:	4293      	cmp	r3, r2
 8009976:	b087      	sub	sp, #28
 8009978:	dc04      	bgt.n	8009984 <cos+0x18>
 800997a:	2200      	movs	r2, #0
 800997c:	2300      	movs	r3, #0
 800997e:	f000 fa57 	bl	8009e30 <__kernel_cos>
 8009982:	e006      	b.n	8009992 <cos+0x26>
 8009984:	4a13      	ldr	r2, [pc, #76]	; (80099d4 <cos+0x68>)
 8009986:	4293      	cmp	r3, r2
 8009988:	dd05      	ble.n	8009996 <cos+0x2a>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	f7f6 fbeb 	bl	8000168 <__aeabi_dsub>
 8009992:	b007      	add	sp, #28
 8009994:	bd30      	pop	{r4, r5, pc}
 8009996:	aa02      	add	r2, sp, #8
 8009998:	f000 f85a 	bl	8009a50 <__ieee754_rem_pio2>
 800999c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a0:	f000 0403 	and.w	r4, r0, #3
 80099a4:	2c01      	cmp	r4, #1
 80099a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099aa:	d008      	beq.n	80099be <cos+0x52>
 80099ac:	2c02      	cmp	r4, #2
 80099ae:	d00c      	beq.n	80099ca <cos+0x5e>
 80099b0:	2c00      	cmp	r4, #0
 80099b2:	d0e4      	beq.n	800997e <cos+0x12>
 80099b4:	2401      	movs	r4, #1
 80099b6:	9400      	str	r4, [sp, #0]
 80099b8:	f000 fe42 	bl	800a640 <__kernel_sin>
 80099bc:	e7e9      	b.n	8009992 <cos+0x26>
 80099be:	9400      	str	r4, [sp, #0]
 80099c0:	f000 fe3e 	bl	800a640 <__kernel_sin>
 80099c4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80099c8:	e7e3      	b.n	8009992 <cos+0x26>
 80099ca:	f000 fa31 	bl	8009e30 <__kernel_cos>
 80099ce:	e7f9      	b.n	80099c4 <cos+0x58>
 80099d0:	3fe921fb 	.word	0x3fe921fb
 80099d4:	7fefffff 	.word	0x7fefffff

080099d8 <sin>:
 80099d8:	b530      	push	{r4, r5, lr}
 80099da:	4a1a      	ldr	r2, [pc, #104]	; (8009a44 <sin+0x6c>)
 80099dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099e0:	4293      	cmp	r3, r2
 80099e2:	b087      	sub	sp, #28
 80099e4:	dc06      	bgt.n	80099f4 <sin+0x1c>
 80099e6:	2300      	movs	r3, #0
 80099e8:	2200      	movs	r2, #0
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2300      	movs	r3, #0
 80099ee:	f000 fe27 	bl	800a640 <__kernel_sin>
 80099f2:	e006      	b.n	8009a02 <sin+0x2a>
 80099f4:	4a14      	ldr	r2, [pc, #80]	; (8009a48 <sin+0x70>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	dd05      	ble.n	8009a06 <sin+0x2e>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	f7f6 fbb3 	bl	8000168 <__aeabi_dsub>
 8009a02:	b007      	add	sp, #28
 8009a04:	bd30      	pop	{r4, r5, pc}
 8009a06:	aa02      	add	r2, sp, #8
 8009a08:	f000 f822 	bl	8009a50 <__ieee754_rem_pio2>
 8009a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a10:	f000 0403 	and.w	r4, r0, #3
 8009a14:	2c01      	cmp	r4, #1
 8009a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1a:	d005      	beq.n	8009a28 <sin+0x50>
 8009a1c:	2c02      	cmp	r4, #2
 8009a1e:	d006      	beq.n	8009a2e <sin+0x56>
 8009a20:	b964      	cbnz	r4, 8009a3c <sin+0x64>
 8009a22:	2401      	movs	r4, #1
 8009a24:	9400      	str	r4, [sp, #0]
 8009a26:	e7e2      	b.n	80099ee <sin+0x16>
 8009a28:	f000 fa02 	bl	8009e30 <__kernel_cos>
 8009a2c:	e7e9      	b.n	8009a02 <sin+0x2a>
 8009a2e:	2401      	movs	r4, #1
 8009a30:	9400      	str	r4, [sp, #0]
 8009a32:	f000 fe05 	bl	800a640 <__kernel_sin>
 8009a36:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a3a:	e7e2      	b.n	8009a02 <sin+0x2a>
 8009a3c:	f000 f9f8 	bl	8009e30 <__kernel_cos>
 8009a40:	e7f9      	b.n	8009a36 <sin+0x5e>
 8009a42:	bf00      	nop
 8009a44:	3fe921fb 	.word	0x3fe921fb
 8009a48:	7fefffff 	.word	0x7fefffff
 8009a4c:	00000000 	.word	0x00000000

08009a50 <__ieee754_rem_pio2>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	4614      	mov	r4, r2
 8009a56:	4ac2      	ldr	r2, [pc, #776]	; (8009d60 <__ieee754_rem_pio2+0x310>)
 8009a58:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009a5c:	4592      	cmp	sl, r2
 8009a5e:	b08d      	sub	sp, #52	; 0x34
 8009a60:	468b      	mov	fp, r1
 8009a62:	dc07      	bgt.n	8009a74 <__ieee754_rem_pio2+0x24>
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	e9c4 0100 	strd	r0, r1, [r4]
 8009a6c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009a70:	2500      	movs	r5, #0
 8009a72:	e023      	b.n	8009abc <__ieee754_rem_pio2+0x6c>
 8009a74:	4abb      	ldr	r2, [pc, #748]	; (8009d64 <__ieee754_rem_pio2+0x314>)
 8009a76:	4592      	cmp	sl, r2
 8009a78:	dc71      	bgt.n	8009b5e <__ieee754_rem_pio2+0x10e>
 8009a7a:	a3ab      	add	r3, pc, #684	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2d8>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	2900      	cmp	r1, #0
 8009a82:	4db9      	ldr	r5, [pc, #740]	; (8009d68 <__ieee754_rem_pio2+0x318>)
 8009a84:	dd36      	ble.n	8009af4 <__ieee754_rem_pio2+0xa4>
 8009a86:	f7f6 fb6f 	bl	8000168 <__aeabi_dsub>
 8009a8a:	45aa      	cmp	sl, r5
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	460f      	mov	r7, r1
 8009a90:	d018      	beq.n	8009ac4 <__ieee754_rem_pio2+0x74>
 8009a92:	a3a7      	add	r3, pc, #668	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2e0>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fb66 	bl	8000168 <__aeabi_dsub>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	e9c4 2300 	strd	r2, r3, [r4]
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	f7f6 fb5e 	bl	8000168 <__aeabi_dsub>
 8009aac:	a3a0      	add	r3, pc, #640	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2e0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fb59 	bl	8000168 <__aeabi_dsub>
 8009ab6:	2501      	movs	r5, #1
 8009ab8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009abc:	4628      	mov	r0, r5
 8009abe:	b00d      	add	sp, #52	; 0x34
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	a39c      	add	r3, pc, #624	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2e8>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fb4d 	bl	8000168 <__aeabi_dsub>
 8009ace:	a39c      	add	r3, pc, #624	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x2f0>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	460f      	mov	r7, r1
 8009ad8:	f7f6 fb46 	bl	8000168 <__aeabi_dsub>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	e9c4 2300 	strd	r2, r3, [r4]
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fb3e 	bl	8000168 <__aeabi_dsub>
 8009aec:	a394      	add	r3, pc, #592	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x2f0>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	e7de      	b.n	8009ab2 <__ieee754_rem_pio2+0x62>
 8009af4:	f7f6 fb3a 	bl	800016c <__adddf3>
 8009af8:	45aa      	cmp	sl, r5
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	d016      	beq.n	8009b2e <__ieee754_rem_pio2+0xde>
 8009b00:	a38b      	add	r3, pc, #556	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2e0>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fb31 	bl	800016c <__adddf3>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4630      	mov	r0, r6
 8009b10:	e9c4 2300 	strd	r2, r3, [r4]
 8009b14:	4639      	mov	r1, r7
 8009b16:	f7f6 fb27 	bl	8000168 <__aeabi_dsub>
 8009b1a:	a385      	add	r3, pc, #532	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2e0>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fb24 	bl	800016c <__adddf3>
 8009b24:	f04f 35ff 	mov.w	r5, #4294967295
 8009b28:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b2c:	e7c6      	b.n	8009abc <__ieee754_rem_pio2+0x6c>
 8009b2e:	a382      	add	r3, pc, #520	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2e8>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f7f6 fb1a 	bl	800016c <__adddf3>
 8009b38:	a381      	add	r3, pc, #516	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x2f0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	f7f6 fb13 	bl	800016c <__adddf3>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	e9c4 2300 	strd	r2, r3, [r4]
 8009b50:	4639      	mov	r1, r7
 8009b52:	f7f6 fb09 	bl	8000168 <__aeabi_dsub>
 8009b56:	a37a      	add	r3, pc, #488	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x2f0>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	e7e0      	b.n	8009b20 <__ieee754_rem_pio2+0xd0>
 8009b5e:	4a83      	ldr	r2, [pc, #524]	; (8009d6c <__ieee754_rem_pio2+0x31c>)
 8009b60:	4592      	cmp	sl, r2
 8009b62:	f300 80d2 	bgt.w	8009d0a <__ieee754_rem_pio2+0x2ba>
 8009b66:	f000 fe21 	bl	800a7ac <fabs>
 8009b6a:	a377      	add	r3, pc, #476	; (adr r3, 8009d48 <__ieee754_rem_pio2+0x2f8>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	4606      	mov	r6, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	f7f6 fcb0 	bl	80004d8 <__aeabi_dmul>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4b7d      	ldr	r3, [pc, #500]	; (8009d70 <__ieee754_rem_pio2+0x320>)
 8009b7c:	f7f6 faf6 	bl	800016c <__adddf3>
 8009b80:	f7f6 ff5a 	bl	8000a38 <__aeabi_d2iz>
 8009b84:	4605      	mov	r5, r0
 8009b86:	f7f6 fc3d 	bl	8000404 <__aeabi_i2d>
 8009b8a:	a367      	add	r3, pc, #412	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2d8>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b94:	f7f6 fca0 	bl	80004d8 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 fae2 	bl	8000168 <__aeabi_dsub>
 8009ba4:	a362      	add	r3, pc, #392	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2e0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb2:	f7f6 fc91 	bl	80004d8 <__aeabi_dmul>
 8009bb6:	2d1f      	cmp	r5, #31
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4689      	mov	r9, r1
 8009bbc:	dc0e      	bgt.n	8009bdc <__ieee754_rem_pio2+0x18c>
 8009bbe:	4b6d      	ldr	r3, [pc, #436]	; (8009d74 <__ieee754_rem_pio2+0x324>)
 8009bc0:	1e6a      	subs	r2, r5, #1
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	4553      	cmp	r3, sl
 8009bc8:	d008      	beq.n	8009bdc <__ieee754_rem_pio2+0x18c>
 8009bca:	4642      	mov	r2, r8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 fac9 	bl	8000168 <__aeabi_dsub>
 8009bd6:	e9c4 0100 	strd	r0, r1, [r4]
 8009bda:	e011      	b.n	8009c00 <__ieee754_rem_pio2+0x1b0>
 8009bdc:	464b      	mov	r3, r9
 8009bde:	4642      	mov	r2, r8
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fac0 	bl	8000168 <__aeabi_dsub>
 8009be8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009bec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	dc1f      	bgt.n	8009c38 <__ieee754_rem_pio2+0x1e8>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	e9c4 2300 	strd	r2, r3, [r4]
 8009c00:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009c04:	4630      	mov	r0, r6
 8009c06:	4653      	mov	r3, sl
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7f6 faad 	bl	8000168 <__aeabi_dsub>
 8009c0e:	4642      	mov	r2, r8
 8009c10:	464b      	mov	r3, r9
 8009c12:	f7f6 faa9 	bl	8000168 <__aeabi_dsub>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	f1bb 0f00 	cmp.w	fp, #0
 8009c1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009c22:	f6bf af4b 	bge.w	8009abc <__ieee754_rem_pio2+0x6c>
 8009c26:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009c2a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8009c2e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009c32:	60e1      	str	r1, [r4, #12]
 8009c34:	426d      	negs	r5, r5
 8009c36:	e741      	b.n	8009abc <__ieee754_rem_pio2+0x6c>
 8009c38:	a33f      	add	r3, pc, #252	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2e8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	f7f6 fc49 	bl	80004d8 <__aeabi_dmul>
 8009c46:	4680      	mov	r8, r0
 8009c48:	4689      	mov	r9, r1
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fa89 	bl	8000168 <__aeabi_dsub>
 8009c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	f7f6 fa81 	bl	8000168 <__aeabi_dsub>
 8009c66:	4642      	mov	r2, r8
 8009c68:	464b      	mov	r3, r9
 8009c6a:	f7f6 fa7d 	bl	8000168 <__aeabi_dsub>
 8009c6e:	a334      	add	r3, pc, #208	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x2f0>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7c:	f7f6 fc2c 	bl	80004d8 <__aeabi_dmul>
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	f7f6 fa70 	bl	8000168 <__aeabi_dsub>
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	4689      	mov	r9, r1
 8009c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c94:	f7f6 fa68 	bl	8000168 <__aeabi_dsub>
 8009c98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c9c:	ebaa 0a03 	sub.w	sl, sl, r3
 8009ca0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8009ca4:	dc06      	bgt.n	8009cb4 <__ieee754_rem_pio2+0x264>
 8009ca6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	e9c4 2300 	strd	r2, r3, [r4]
 8009cb2:	e7a5      	b.n	8009c00 <__ieee754_rem_pio2+0x1b0>
 8009cb4:	a326      	add	r3, pc, #152	; (adr r3, 8009d50 <__ieee754_rem_pio2+0x300>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cbe:	f7f6 fc0b 	bl	80004d8 <__aeabi_dmul>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cce:	f7f6 fa4b 	bl	8000168 <__aeabi_dsub>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460f      	mov	r7, r1
 8009cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cde:	f7f6 fa43 	bl	8000168 <__aeabi_dsub>
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	f7f6 fa3f 	bl	8000168 <__aeabi_dsub>
 8009cea:	a31b      	add	r3, pc, #108	; (adr r3, 8009d58 <__ieee754_rem_pio2+0x308>)
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf8:	f7f6 fbee 	bl	80004d8 <__aeabi_dmul>
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	464b      	mov	r3, r9
 8009d00:	f7f6 fa32 	bl	8000168 <__aeabi_dsub>
 8009d04:	4680      	mov	r8, r0
 8009d06:	4689      	mov	r9, r1
 8009d08:	e75f      	b.n	8009bca <__ieee754_rem_pio2+0x17a>
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	; (8009d78 <__ieee754_rem_pio2+0x328>)
 8009d0c:	4592      	cmp	sl, r2
 8009d0e:	dd35      	ble.n	8009d7c <__ieee754_rem_pio2+0x32c>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	f7f6 fa28 	bl	8000168 <__aeabi_dsub>
 8009d18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d1c:	e9c4 0100 	strd	r0, r1, [r4]
 8009d20:	e6a6      	b.n	8009a70 <__ieee754_rem_pio2+0x20>
 8009d22:	bf00      	nop
 8009d24:	f3af 8000 	nop.w
 8009d28:	54400000 	.word	0x54400000
 8009d2c:	3ff921fb 	.word	0x3ff921fb
 8009d30:	1a626331 	.word	0x1a626331
 8009d34:	3dd0b461 	.word	0x3dd0b461
 8009d38:	1a600000 	.word	0x1a600000
 8009d3c:	3dd0b461 	.word	0x3dd0b461
 8009d40:	2e037073 	.word	0x2e037073
 8009d44:	3ba3198a 	.word	0x3ba3198a
 8009d48:	6dc9c883 	.word	0x6dc9c883
 8009d4c:	3fe45f30 	.word	0x3fe45f30
 8009d50:	2e000000 	.word	0x2e000000
 8009d54:	3ba3198a 	.word	0x3ba3198a
 8009d58:	252049c1 	.word	0x252049c1
 8009d5c:	397b839a 	.word	0x397b839a
 8009d60:	3fe921fb 	.word	0x3fe921fb
 8009d64:	4002d97b 	.word	0x4002d97b
 8009d68:	3ff921fb 	.word	0x3ff921fb
 8009d6c:	413921fb 	.word	0x413921fb
 8009d70:	3fe00000 	.word	0x3fe00000
 8009d74:	0800af20 	.word	0x0800af20
 8009d78:	7fefffff 	.word	0x7fefffff
 8009d7c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009d80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009d84:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009d88:	460f      	mov	r7, r1
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	f7f6 fe54 	bl	8000a38 <__aeabi_d2iz>
 8009d90:	f7f6 fb38 	bl	8000404 <__aeabi_i2d>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009da0:	f7f6 f9e2 	bl	8000168 <__aeabi_dsub>
 8009da4:	2200      	movs	r2, #0
 8009da6:	4b20      	ldr	r3, [pc, #128]	; (8009e28 <__ieee754_rem_pio2+0x3d8>)
 8009da8:	f7f6 fb96 	bl	80004d8 <__aeabi_dmul>
 8009dac:	460f      	mov	r7, r1
 8009dae:	4606      	mov	r6, r0
 8009db0:	f7f6 fe42 	bl	8000a38 <__aeabi_d2iz>
 8009db4:	f7f6 fb26 	bl	8000404 <__aeabi_i2d>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dc4:	f7f6 f9d0 	bl	8000168 <__aeabi_dsub>
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4b17      	ldr	r3, [pc, #92]	; (8009e28 <__ieee754_rem_pio2+0x3d8>)
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	f04f 0803 	mov.w	r8, #3
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	2700      	movs	r7, #0
 8009dd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ddc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009de0:	4632      	mov	r2, r6
 8009de2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009de6:	463b      	mov	r3, r7
 8009de8:	f108 3aff 	add.w	sl, r8, #4294967295
 8009dec:	f7f6 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8009df0:	b9b8      	cbnz	r0, 8009e22 <__ieee754_rem_pio2+0x3d2>
 8009df2:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <__ieee754_rem_pio2+0x3dc>)
 8009df4:	462a      	mov	r2, r5
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	2302      	movs	r3, #2
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	a806      	add	r0, sp, #24
 8009e00:	4643      	mov	r3, r8
 8009e02:	f000 f8d3 	bl	8009fac <__kernel_rem_pio2>
 8009e06:	f1bb 0f00 	cmp.w	fp, #0
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	f6bf ae56 	bge.w	8009abc <__ieee754_rem_pio2+0x6c>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e16:	6063      	str	r3, [r4, #4]
 8009e18:	68e3      	ldr	r3, [r4, #12]
 8009e1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e1e:	60e3      	str	r3, [r4, #12]
 8009e20:	e708      	b.n	8009c34 <__ieee754_rem_pio2+0x1e4>
 8009e22:	46d0      	mov	r8, sl
 8009e24:	e7dc      	b.n	8009de0 <__ieee754_rem_pio2+0x390>
 8009e26:	bf00      	nop
 8009e28:	41700000 	.word	0x41700000
 8009e2c:	0800afa0 	.word	0x0800afa0

08009e30 <__kernel_cos>:
 8009e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e38:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460f      	mov	r7, r1
 8009e40:	e9cd 2300 	strd	r2, r3, [sp]
 8009e44:	da04      	bge.n	8009e50 <__kernel_cos+0x20>
 8009e46:	f7f6 fdf7 	bl	8000a38 <__aeabi_d2iz>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f000 8086 	beq.w	8009f5c <__kernel_cos+0x12c>
 8009e50:	4642      	mov	r2, r8
 8009e52:	463b      	mov	r3, r7
 8009e54:	4640      	mov	r0, r8
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fb3e 	bl	80004d8 <__aeabi_dmul>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4b4e      	ldr	r3, [pc, #312]	; (8009f98 <__kernel_cos+0x168>)
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	f7f6 fb38 	bl	80004d8 <__aeabi_dmul>
 8009e68:	a33f      	add	r3, pc, #252	; (adr r3, 8009f68 <__kernel_cos+0x138>)
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f6 fb2f 	bl	80004d8 <__aeabi_dmul>
 8009e7a:	a33d      	add	r3, pc, #244	; (adr r3, 8009f70 <__kernel_cos+0x140>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 f974 	bl	800016c <__adddf3>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fb26 	bl	80004d8 <__aeabi_dmul>
 8009e8c:	a33a      	add	r3, pc, #232	; (adr r3, 8009f78 <__kernel_cos+0x148>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f969 	bl	8000168 <__aeabi_dsub>
 8009e96:	4622      	mov	r2, r4
 8009e98:	462b      	mov	r3, r5
 8009e9a:	f7f6 fb1d 	bl	80004d8 <__aeabi_dmul>
 8009e9e:	a338      	add	r3, pc, #224	; (adr r3, 8009f80 <__kernel_cos+0x150>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f962 	bl	800016c <__adddf3>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 fb14 	bl	80004d8 <__aeabi_dmul>
 8009eb0:	a335      	add	r3, pc, #212	; (adr r3, 8009f88 <__kernel_cos+0x158>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f957 	bl	8000168 <__aeabi_dsub>
 8009eba:	4622      	mov	r2, r4
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	f7f6 fb0b 	bl	80004d8 <__aeabi_dmul>
 8009ec2:	a333      	add	r3, pc, #204	; (adr r3, 8009f90 <__kernel_cos+0x160>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f950 	bl	800016c <__adddf3>
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	f7f6 fb02 	bl	80004d8 <__aeabi_dmul>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	f7f6 fafe 	bl	80004d8 <__aeabi_dmul>
 8009edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 faf6 	bl	80004d8 <__aeabi_dmul>
 8009eec:	460b      	mov	r3, r1
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f7f6 f938 	bl	8000168 <__aeabi_dsub>
 8009ef8:	4b28      	ldr	r3, [pc, #160]	; (8009f9c <__kernel_cos+0x16c>)
 8009efa:	4680      	mov	r8, r0
 8009efc:	429e      	cmp	r6, r3
 8009efe:	4689      	mov	r9, r1
 8009f00:	dc0e      	bgt.n	8009f20 <__kernel_cos+0xf0>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	f7f6 f92d 	bl	8000168 <__aeabi_dsub>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	2000      	movs	r0, #0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4922      	ldr	r1, [pc, #136]	; (8009fa0 <__kernel_cos+0x170>)
 8009f16:	f7f6 f927 	bl	8000168 <__aeabi_dsub>
 8009f1a:	b003      	add	sp, #12
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	2400      	movs	r4, #0
 8009f22:	4b20      	ldr	r3, [pc, #128]	; (8009fa4 <__kernel_cos+0x174>)
 8009f24:	4622      	mov	r2, r4
 8009f26:	429e      	cmp	r6, r3
 8009f28:	bfcc      	ite	gt
 8009f2a:	4d1f      	ldrgt	r5, [pc, #124]	; (8009fa8 <__kernel_cos+0x178>)
 8009f2c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009f30:	462b      	mov	r3, r5
 8009f32:	2000      	movs	r0, #0
 8009f34:	491a      	ldr	r1, [pc, #104]	; (8009fa0 <__kernel_cos+0x170>)
 8009f36:	f7f6 f917 	bl	8000168 <__aeabi_dsub>
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	462b      	mov	r3, r5
 8009f42:	4650      	mov	r0, sl
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7f6 f90f 	bl	8000168 <__aeabi_dsub>
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	f7f6 f90b 	bl	8000168 <__aeabi_dsub>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	e7dc      	b.n	8009f16 <__kernel_cos+0xe6>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4910      	ldr	r1, [pc, #64]	; (8009fa0 <__kernel_cos+0x170>)
 8009f60:	e7db      	b.n	8009f1a <__kernel_cos+0xea>
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
 8009f68:	be8838d4 	.word	0xbe8838d4
 8009f6c:	bda8fae9 	.word	0xbda8fae9
 8009f70:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f74:	3e21ee9e 	.word	0x3e21ee9e
 8009f78:	809c52ad 	.word	0x809c52ad
 8009f7c:	3e927e4f 	.word	0x3e927e4f
 8009f80:	19cb1590 	.word	0x19cb1590
 8009f84:	3efa01a0 	.word	0x3efa01a0
 8009f88:	16c15177 	.word	0x16c15177
 8009f8c:	3f56c16c 	.word	0x3f56c16c
 8009f90:	5555554c 	.word	0x5555554c
 8009f94:	3fa55555 	.word	0x3fa55555
 8009f98:	3fe00000 	.word	0x3fe00000
 8009f9c:	3fd33332 	.word	0x3fd33332
 8009fa0:	3ff00000 	.word	0x3ff00000
 8009fa4:	3fe90000 	.word	0x3fe90000
 8009fa8:	3fd20000 	.word	0x3fd20000

08009fac <__kernel_rem_pio2>:
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	9104      	str	r1, [sp, #16]
 8009fb8:	4bbf      	ldr	r3, [pc, #764]	; (800a2b8 <__kernel_rem_pio2+0x30c>)
 8009fba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009fbc:	1ed4      	subs	r4, r2, #3
 8009fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	9302      	str	r3, [sp, #8]
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	9008      	str	r0, [sp, #32]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	9306      	str	r3, [sp, #24]
 8009fce:	2318      	movs	r3, #24
 8009fd0:	fb94 f4f3 	sdiv	r4, r4, r3
 8009fd4:	f06f 0317 	mvn.w	r3, #23
 8009fd8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009fdc:	fb04 3303 	mla	r3, r4, r3, r3
 8009fe0:	eb03 0a02 	add.w	sl, r3, r2
 8009fe4:	9a06      	ldr	r2, [sp, #24]
 8009fe6:	9b02      	ldr	r3, [sp, #8]
 8009fe8:	1aa7      	subs	r7, r4, r2
 8009fea:	eb03 0802 	add.w	r8, r3, r2
 8009fee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	ae1e      	add	r6, sp, #120	; 0x78
 8009ffa:	4545      	cmp	r5, r8
 8009ffc:	dd14      	ble.n	800a028 <__kernel_rem_pio2+0x7c>
 8009ffe:	2600      	movs	r6, #0
 800a000:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800a004:	9b02      	ldr	r3, [sp, #8]
 800a006:	429e      	cmp	r6, r3
 800a008:	dc39      	bgt.n	800a07e <__kernel_rem_pio2+0xd2>
 800a00a:	9b08      	ldr	r3, [sp, #32]
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	3b08      	subs	r3, #8
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	f04f 0900 	mov.w	r9, #0
 800a01a:	199d      	adds	r5, r3, r6
 800a01c:	ab20      	add	r3, sp, #128	; 0x80
 800a01e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	2700      	movs	r7, #0
 800a026:	e023      	b.n	800a070 <__kernel_rem_pio2+0xc4>
 800a028:	42ef      	cmn	r7, r5
 800a02a:	d40b      	bmi.n	800a044 <__kernel_rem_pio2+0x98>
 800a02c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a030:	e9cd 2300 	strd	r2, r3, [sp]
 800a034:	f7f6 f9e6 	bl	8000404 <__aeabi_i2d>
 800a038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a03c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800a040:	3501      	adds	r5, #1
 800a042:	e7da      	b.n	8009ffa <__kernel_rem_pio2+0x4e>
 800a044:	4610      	mov	r0, r2
 800a046:	4619      	mov	r1, r3
 800a048:	e7f8      	b.n	800a03c <__kernel_rem_pio2+0x90>
 800a04a:	9905      	ldr	r1, [sp, #20]
 800a04c:	9d00      	ldr	r5, [sp, #0]
 800a04e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a052:	9105      	str	r1, [sp, #20]
 800a054:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a058:	9500      	str	r5, [sp, #0]
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	4640      	mov	r0, r8
 800a064:	4649      	mov	r1, r9
 800a066:	f7f6 f881 	bl	800016c <__adddf3>
 800a06a:	4680      	mov	r8, r0
 800a06c:	4689      	mov	r9, r1
 800a06e:	3701      	adds	r7, #1
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	429f      	cmp	r7, r3
 800a074:	dde9      	ble.n	800a04a <__kernel_rem_pio2+0x9e>
 800a076:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a07a:	3601      	adds	r6, #1
 800a07c:	e7c2      	b.n	800a004 <__kernel_rem_pio2+0x58>
 800a07e:	9b02      	ldr	r3, [sp, #8]
 800a080:	aa0c      	add	r2, sp, #48	; 0x30
 800a082:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a086:	930b      	str	r3, [sp, #44]	; 0x2c
 800a088:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a08a:	9f02      	ldr	r7, [sp, #8]
 800a08c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a090:	930a      	str	r3, [sp, #40]	; 0x28
 800a092:	2600      	movs	r6, #0
 800a094:	ab98      	add	r3, sp, #608	; 0x260
 800a096:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a09a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a09e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0a2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a0a6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a0aa:	ab98      	add	r3, sp, #608	; 0x260
 800a0ac:	445b      	add	r3, fp
 800a0ae:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800a0b2:	1bbb      	subs	r3, r7, r6
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc71      	bgt.n	800a19c <__kernel_rem_pio2+0x1f0>
 800a0b8:	4652      	mov	r2, sl
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f000 fbff 	bl	800a8c0 <scalbn>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	f7f6 fa04 	bl	80004d8 <__aeabi_dmul>
 800a0d0:	f000 fb72 	bl	800a7b8 <floor>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4b79      	ldr	r3, [pc, #484]	; (800a2bc <__kernel_rem_pio2+0x310>)
 800a0d8:	f7f6 f9fe 	bl	80004d8 <__aeabi_dmul>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 f840 	bl	8000168 <__aeabi_dsub>
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	f7f6 fca4 	bl	8000a38 <__aeabi_d2iz>
 800a0f0:	9005      	str	r0, [sp, #20]
 800a0f2:	f7f6 f987 	bl	8000404 <__aeabi_i2d>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 f833 	bl	8000168 <__aeabi_dsub>
 800a102:	f1ba 0f00 	cmp.w	sl, #0
 800a106:	4680      	mov	r8, r0
 800a108:	4689      	mov	r9, r1
 800a10a:	dd6c      	ble.n	800a1e6 <__kernel_rem_pio2+0x23a>
 800a10c:	1e7a      	subs	r2, r7, #1
 800a10e:	ab0c      	add	r3, sp, #48	; 0x30
 800a110:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a114:	f1ca 0118 	rsb	r1, sl, #24
 800a118:	9c05      	ldr	r4, [sp, #20]
 800a11a:	fa40 f301 	asr.w	r3, r0, r1
 800a11e:	441c      	add	r4, r3
 800a120:	408b      	lsls	r3, r1
 800a122:	1ac0      	subs	r0, r0, r3
 800a124:	ab0c      	add	r3, sp, #48	; 0x30
 800a126:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a12a:	f1ca 0317 	rsb	r3, sl, #23
 800a12e:	9405      	str	r4, [sp, #20]
 800a130:	fa40 f303 	asr.w	r3, r0, r3
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	9b00      	ldr	r3, [sp, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dd62      	ble.n	800a202 <__kernel_rem_pio2+0x256>
 800a13c:	2200      	movs	r2, #0
 800a13e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a142:	4614      	mov	r4, r2
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	3301      	adds	r3, #1
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	4297      	cmp	r7, r2
 800a14c:	f300 809f 	bgt.w	800a28e <__kernel_rem_pio2+0x2e2>
 800a150:	f1ba 0f00 	cmp.w	sl, #0
 800a154:	dd07      	ble.n	800a166 <__kernel_rem_pio2+0x1ba>
 800a156:	f1ba 0f01 	cmp.w	sl, #1
 800a15a:	f000 80bb 	beq.w	800a2d4 <__kernel_rem_pio2+0x328>
 800a15e:	f1ba 0f02 	cmp.w	sl, #2
 800a162:	f000 80c1 	beq.w	800a2e8 <__kernel_rem_pio2+0x33c>
 800a166:	9b00      	ldr	r3, [sp, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d14a      	bne.n	800a202 <__kernel_rem_pio2+0x256>
 800a16c:	4642      	mov	r2, r8
 800a16e:	464b      	mov	r3, r9
 800a170:	2000      	movs	r0, #0
 800a172:	4953      	ldr	r1, [pc, #332]	; (800a2c0 <__kernel_rem_pio2+0x314>)
 800a174:	f7f5 fff8 	bl	8000168 <__aeabi_dsub>
 800a178:	4680      	mov	r8, r0
 800a17a:	4689      	mov	r9, r1
 800a17c:	2c00      	cmp	r4, #0
 800a17e:	d040      	beq.n	800a202 <__kernel_rem_pio2+0x256>
 800a180:	4652      	mov	r2, sl
 800a182:	2000      	movs	r0, #0
 800a184:	494e      	ldr	r1, [pc, #312]	; (800a2c0 <__kernel_rem_pio2+0x314>)
 800a186:	f000 fb9b 	bl	800a8c0 <scalbn>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4640      	mov	r0, r8
 800a190:	4649      	mov	r1, r9
 800a192:	f7f5 ffe9 	bl	8000168 <__aeabi_dsub>
 800a196:	4680      	mov	r8, r0
 800a198:	4689      	mov	r9, r1
 800a19a:	e032      	b.n	800a202 <__kernel_rem_pio2+0x256>
 800a19c:	2200      	movs	r2, #0
 800a19e:	4b49      	ldr	r3, [pc, #292]	; (800a2c4 <__kernel_rem_pio2+0x318>)
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	f7f6 f998 	bl	80004d8 <__aeabi_dmul>
 800a1a8:	f7f6 fc46 	bl	8000a38 <__aeabi_d2iz>
 800a1ac:	f7f6 f92a 	bl	8000404 <__aeabi_i2d>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	4b45      	ldr	r3, [pc, #276]	; (800a2c8 <__kernel_rem_pio2+0x31c>)
 800a1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1b8:	f7f6 f98e 	bl	80004d8 <__aeabi_dmul>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	f7f6 fc36 	bl	8000a38 <__aeabi_d2iz>
 800a1cc:	ab0c      	add	r3, sp, #48	; 0x30
 800a1ce:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a1d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1da:	f7f5 ffc7 	bl	800016c <__adddf3>
 800a1de:	3601      	adds	r6, #1
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4689      	mov	r9, r1
 800a1e4:	e765      	b.n	800a0b2 <__kernel_rem_pio2+0x106>
 800a1e6:	d105      	bne.n	800a1f4 <__kernel_rem_pio2+0x248>
 800a1e8:	1e7b      	subs	r3, r7, #1
 800a1ea:	aa0c      	add	r2, sp, #48	; 0x30
 800a1ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a1f0:	15c3      	asrs	r3, r0, #23
 800a1f2:	e79f      	b.n	800a134 <__kernel_rem_pio2+0x188>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4b35      	ldr	r3, [pc, #212]	; (800a2cc <__kernel_rem_pio2+0x320>)
 800a1f8:	f7f6 fbf4 	bl	80009e4 <__aeabi_dcmpge>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d143      	bne.n	800a288 <__kernel_rem_pio2+0x2dc>
 800a200:	9000      	str	r0, [sp, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 80c3 	beq.w	800a39a <__kernel_rem_pio2+0x3ee>
 800a214:	1e7c      	subs	r4, r7, #1
 800a216:	4623      	mov	r3, r4
 800a218:	2200      	movs	r2, #0
 800a21a:	9902      	ldr	r1, [sp, #8]
 800a21c:	428b      	cmp	r3, r1
 800a21e:	da6a      	bge.n	800a2f6 <__kernel_rem_pio2+0x34a>
 800a220:	2a00      	cmp	r2, #0
 800a222:	f000 8084 	beq.w	800a32e <__kernel_rem_pio2+0x382>
 800a226:	ab0c      	add	r3, sp, #48	; 0x30
 800a228:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a22c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80b0 	beq.w	800a396 <__kernel_rem_pio2+0x3ea>
 800a236:	4652      	mov	r2, sl
 800a238:	2000      	movs	r0, #0
 800a23a:	4921      	ldr	r1, [pc, #132]	; (800a2c0 <__kernel_rem_pio2+0x314>)
 800a23c:	f000 fb40 	bl	800a8c0 <scalbn>
 800a240:	4625      	mov	r5, r4
 800a242:	4606      	mov	r6, r0
 800a244:	460f      	mov	r7, r1
 800a246:	f04f 0a00 	mov.w	sl, #0
 800a24a:	00e3      	lsls	r3, r4, #3
 800a24c:	aa98      	add	r2, sp, #608	; 0x260
 800a24e:	eb02 0803 	add.w	r8, r2, r3
 800a252:	f8df b070 	ldr.w	fp, [pc, #112]	; 800a2c4 <__kernel_rem_pio2+0x318>
 800a256:	9306      	str	r3, [sp, #24]
 800a258:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	f280 80d2 	bge.w	800a406 <__kernel_rem_pio2+0x45a>
 800a262:	2500      	movs	r5, #0
 800a264:	9a06      	ldr	r2, [sp, #24]
 800a266:	ab98      	add	r3, sp, #608	; 0x260
 800a268:	189e      	adds	r6, r3, r2
 800a26a:	3ea8      	subs	r6, #168	; 0xa8
 800a26c:	1b63      	subs	r3, r4, r5
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f2c0 80f9 	blt.w	800a466 <__kernel_rem_pio2+0x4ba>
 800a274:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a2d0 <__kernel_rem_pio2+0x324>
 800a278:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800a27c:	f04f 0a00 	mov.w	sl, #0
 800a280:	f04f 0b00 	mov.w	fp, #0
 800a284:	2700      	movs	r7, #0
 800a286:	e0e2      	b.n	800a44e <__kernel_rem_pio2+0x4a2>
 800a288:	2302      	movs	r3, #2
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	e756      	b.n	800a13c <__kernel_rem_pio2+0x190>
 800a28e:	ab0c      	add	r3, sp, #48	; 0x30
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	b94c      	cbnz	r4, 800a2aa <__kernel_rem_pio2+0x2fe>
 800a296:	b12b      	cbz	r3, 800a2a4 <__kernel_rem_pio2+0x2f8>
 800a298:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a29c:	a80c      	add	r0, sp, #48	; 0x30
 800a29e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	3201      	adds	r2, #1
 800a2a6:	461c      	mov	r4, r3
 800a2a8:	e74f      	b.n	800a14a <__kernel_rem_pio2+0x19e>
 800a2aa:	1acb      	subs	r3, r1, r3
 800a2ac:	a80c      	add	r0, sp, #48	; 0x30
 800a2ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	e7f6      	b.n	800a2a4 <__kernel_rem_pio2+0x2f8>
 800a2b6:	bf00      	nop
 800a2b8:	0800b0e8 	.word	0x0800b0e8
 800a2bc:	40200000 	.word	0x40200000
 800a2c0:	3ff00000 	.word	0x3ff00000
 800a2c4:	3e700000 	.word	0x3e700000
 800a2c8:	41700000 	.word	0x41700000
 800a2cc:	3fe00000 	.word	0x3fe00000
 800a2d0:	0800b0a0 	.word	0x0800b0a0
 800a2d4:	1e7a      	subs	r2, r7, #1
 800a2d6:	ab0c      	add	r3, sp, #48	; 0x30
 800a2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2e0:	a90c      	add	r1, sp, #48	; 0x30
 800a2e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a2e6:	e73e      	b.n	800a166 <__kernel_rem_pio2+0x1ba>
 800a2e8:	1e7a      	subs	r2, r7, #1
 800a2ea:	ab0c      	add	r3, sp, #48	; 0x30
 800a2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2f4:	e7f4      	b.n	800a2e0 <__kernel_rem_pio2+0x334>
 800a2f6:	a90c      	add	r1, sp, #48	; 0x30
 800a2f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	430a      	orrs	r2, r1
 800a300:	e78b      	b.n	800a21a <__kernel_rem_pio2+0x26e>
 800a302:	3401      	adds	r4, #1
 800a304:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a308:	2a00      	cmp	r2, #0
 800a30a:	d0fa      	beq.n	800a302 <__kernel_rem_pio2+0x356>
 800a30c:	ab98      	add	r3, sp, #608	; 0x260
 800a30e:	449b      	add	fp, r3
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	1c7e      	adds	r6, r7, #1
 800a314:	19dd      	adds	r5, r3, r7
 800a316:	ab98      	add	r3, sp, #608	; 0x260
 800a318:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a31c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800a320:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800a324:	443c      	add	r4, r7
 800a326:	42b4      	cmp	r4, r6
 800a328:	da04      	bge.n	800a334 <__kernel_rem_pio2+0x388>
 800a32a:	4627      	mov	r7, r4
 800a32c:	e6b1      	b.n	800a092 <__kernel_rem_pio2+0xe6>
 800a32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a330:	2401      	movs	r4, #1
 800a332:	e7e7      	b.n	800a304 <__kernel_rem_pio2+0x358>
 800a334:	f105 0308 	add.w	r3, r5, #8
 800a338:	9309      	str	r3, [sp, #36]	; 0x24
 800a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a33c:	2700      	movs	r7, #0
 800a33e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a342:	f7f6 f85f 	bl	8000404 <__aeabi_i2d>
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	f04f 0900 	mov.w	r9, #0
 800a34e:	9b08      	ldr	r3, [sp, #32]
 800a350:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a354:	3b08      	subs	r3, #8
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	f105 0310 	add.w	r3, r5, #16
 800a35c:	9305      	str	r3, [sp, #20]
 800a35e:	9b06      	ldr	r3, [sp, #24]
 800a360:	429f      	cmp	r7, r3
 800a362:	dd04      	ble.n	800a36e <__kernel_rem_pio2+0x3c2>
 800a364:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a368:	3601      	adds	r6, #1
 800a36a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a36c:	e7db      	b.n	800a326 <__kernel_rem_pio2+0x37a>
 800a36e:	9905      	ldr	r1, [sp, #20]
 800a370:	9d00      	ldr	r5, [sp, #0]
 800a372:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a376:	9105      	str	r1, [sp, #20]
 800a378:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a37c:	9500      	str	r5, [sp, #0]
 800a37e:	f7f6 f8ab 	bl	80004d8 <__aeabi_dmul>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4640      	mov	r0, r8
 800a388:	4649      	mov	r1, r9
 800a38a:	f7f5 feef 	bl	800016c <__adddf3>
 800a38e:	3701      	adds	r7, #1
 800a390:	4680      	mov	r8, r0
 800a392:	4689      	mov	r9, r1
 800a394:	e7e3      	b.n	800a35e <__kernel_rem_pio2+0x3b2>
 800a396:	3c01      	subs	r4, #1
 800a398:	e745      	b.n	800a226 <__kernel_rem_pio2+0x27a>
 800a39a:	f1ca 0200 	rsb	r2, sl, #0
 800a39e:	4640      	mov	r0, r8
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	f000 fa8d 	bl	800a8c0 <scalbn>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4ba3      	ldr	r3, [pc, #652]	; (800a638 <__kernel_rem_pio2+0x68c>)
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	f7f6 fb19 	bl	80009e4 <__aeabi_dcmpge>
 800a3b2:	b1f8      	cbz	r0, 800a3f4 <__kernel_rem_pio2+0x448>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4ba1      	ldr	r3, [pc, #644]	; (800a63c <__kernel_rem_pio2+0x690>)
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f6 f88c 	bl	80004d8 <__aeabi_dmul>
 800a3c0:	f7f6 fb3a 	bl	8000a38 <__aeabi_d2iz>
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	f7f6 f81d 	bl	8000404 <__aeabi_i2d>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4b9a      	ldr	r3, [pc, #616]	; (800a638 <__kernel_rem_pio2+0x68c>)
 800a3ce:	f7f6 f883 	bl	80004d8 <__aeabi_dmul>
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7f5 fec5 	bl	8000168 <__aeabi_dsub>
 800a3de:	f7f6 fb2b 	bl	8000a38 <__aeabi_d2iz>
 800a3e2:	1c7c      	adds	r4, r7, #1
 800a3e4:	ab0c      	add	r3, sp, #48	; 0x30
 800a3e6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a3ea:	f10a 0a18 	add.w	sl, sl, #24
 800a3ee:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a3f2:	e720      	b.n	800a236 <__kernel_rem_pio2+0x28a>
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f6 fb1e 	bl	8000a38 <__aeabi_d2iz>
 800a3fc:	ab0c      	add	r3, sp, #48	; 0x30
 800a3fe:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a402:	463c      	mov	r4, r7
 800a404:	e717      	b.n	800a236 <__kernel_rem_pio2+0x28a>
 800a406:	ab0c      	add	r3, sp, #48	; 0x30
 800a408:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a40c:	f7f5 fffa 	bl	8000404 <__aeabi_i2d>
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	f7f6 f860 	bl	80004d8 <__aeabi_dmul>
 800a418:	4652      	mov	r2, sl
 800a41a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a41e:	465b      	mov	r3, fp
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 f858 	bl	80004d8 <__aeabi_dmul>
 800a428:	3d01      	subs	r5, #1
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	e715      	b.n	800a25c <__kernel_rem_pio2+0x2b0>
 800a430:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a434:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a438:	f7f6 f84e 	bl	80004d8 <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	f7f5 fe92 	bl	800016c <__adddf3>
 800a448:	4682      	mov	sl, r0
 800a44a:	468b      	mov	fp, r1
 800a44c:	3701      	adds	r7, #1
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	429f      	cmp	r7, r3
 800a452:	dc01      	bgt.n	800a458 <__kernel_rem_pio2+0x4ac>
 800a454:	42bd      	cmp	r5, r7
 800a456:	daeb      	bge.n	800a430 <__kernel_rem_pio2+0x484>
 800a458:	ab48      	add	r3, sp, #288	; 0x120
 800a45a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a45e:	e9c3 ab00 	strd	sl, fp, [r3]
 800a462:	3501      	adds	r5, #1
 800a464:	e702      	b.n	800a26c <__kernel_rem_pio2+0x2c0>
 800a466:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d86c      	bhi.n	800a546 <__kernel_rem_pio2+0x59a>
 800a46c:	e8df f003 	tbb	[pc, r3]
 800a470:	022f2f59 	.word	0x022f2f59
 800a474:	9a06      	ldr	r2, [sp, #24]
 800a476:	ab48      	add	r3, sp, #288	; 0x120
 800a478:	189d      	adds	r5, r3, r2
 800a47a:	46aa      	mov	sl, r5
 800a47c:	46a3      	mov	fp, r4
 800a47e:	f1bb 0f00 	cmp.w	fp, #0
 800a482:	f300 8087 	bgt.w	800a594 <__kernel_rem_pio2+0x5e8>
 800a486:	46a2      	mov	sl, r4
 800a488:	f1ba 0f01 	cmp.w	sl, #1
 800a48c:	f300 809f 	bgt.w	800a5ce <__kernel_rem_pio2+0x622>
 800a490:	2700      	movs	r7, #0
 800a492:	463e      	mov	r6, r7
 800a494:	9d06      	ldr	r5, [sp, #24]
 800a496:	ab48      	add	r3, sp, #288	; 0x120
 800a498:	3508      	adds	r5, #8
 800a49a:	441d      	add	r5, r3
 800a49c:	2c01      	cmp	r4, #1
 800a49e:	f300 80b3 	bgt.w	800a608 <__kernel_rem_pio2+0x65c>
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800a4a6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a4a8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a4aa:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 80b5 	bne.w	800a61c <__kernel_rem_pio2+0x670>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	9804      	ldr	r0, [sp, #16]
 800a4b8:	e9c0 2300 	strd	r2, r3, [r0]
 800a4bc:	4622      	mov	r2, r4
 800a4be:	460b      	mov	r3, r1
 800a4c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4c4:	463a      	mov	r2, r7
 800a4c6:	4633      	mov	r3, r6
 800a4c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a4cc:	e03b      	b.n	800a546 <__kernel_rem_pio2+0x59a>
 800a4ce:	f04f 0c00 	mov.w	ip, #0
 800a4d2:	4626      	mov	r6, r4
 800a4d4:	4667      	mov	r7, ip
 800a4d6:	9d06      	ldr	r5, [sp, #24]
 800a4d8:	ab48      	add	r3, sp, #288	; 0x120
 800a4da:	3508      	adds	r5, #8
 800a4dc:	441d      	add	r5, r3
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	da42      	bge.n	800a568 <__kernel_rem_pio2+0x5bc>
 800a4e2:	9b00      	ldr	r3, [sp, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d049      	beq.n	800a57c <__kernel_rem_pio2+0x5d0>
 800a4e8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a4ec:	4662      	mov	r2, ip
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	9904      	ldr	r1, [sp, #16]
 800a4f2:	2601      	movs	r6, #1
 800a4f4:	e9c1 2300 	strd	r2, r3, [r1]
 800a4f8:	a948      	add	r1, sp, #288	; 0x120
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a500:	f7f5 fe32 	bl	8000168 <__aeabi_dsub>
 800a504:	4684      	mov	ip, r0
 800a506:	460f      	mov	r7, r1
 800a508:	ad48      	add	r5, sp, #288	; 0x120
 800a50a:	42b4      	cmp	r4, r6
 800a50c:	da38      	bge.n	800a580 <__kernel_rem_pio2+0x5d4>
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	b10b      	cbz	r3, 800a516 <__kernel_rem_pio2+0x56a>
 800a512:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a516:	4662      	mov	r2, ip
 800a518:	463b      	mov	r3, r7
 800a51a:	9904      	ldr	r1, [sp, #16]
 800a51c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a520:	e011      	b.n	800a546 <__kernel_rem_pio2+0x59a>
 800a522:	2700      	movs	r7, #0
 800a524:	463d      	mov	r5, r7
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	aa98      	add	r2, sp, #608	; 0x260
 800a52a:	4413      	add	r3, r2
 800a52c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800a530:	2c00      	cmp	r4, #0
 800a532:	da0f      	bge.n	800a554 <__kernel_rem_pio2+0x5a8>
 800a534:	9b00      	ldr	r3, [sp, #0]
 800a536:	b10b      	cbz	r3, 800a53c <__kernel_rem_pio2+0x590>
 800a538:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a53c:	463a      	mov	r2, r7
 800a53e:	462b      	mov	r3, r5
 800a540:	9904      	ldr	r1, [sp, #16]
 800a542:	e9c1 2300 	strd	r2, r3, [r1]
 800a546:	9b05      	ldr	r3, [sp, #20]
 800a548:	f003 0007 	and.w	r0, r3, #7
 800a54c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	4638      	mov	r0, r7
 800a556:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f5 fe06 	bl	800016c <__adddf3>
 800a560:	3c01      	subs	r4, #1
 800a562:	4607      	mov	r7, r0
 800a564:	460d      	mov	r5, r1
 800a566:	e7e3      	b.n	800a530 <__kernel_rem_pio2+0x584>
 800a568:	4660      	mov	r0, ip
 800a56a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f5 fdfc 	bl	800016c <__adddf3>
 800a574:	3e01      	subs	r6, #1
 800a576:	4684      	mov	ip, r0
 800a578:	460f      	mov	r7, r1
 800a57a:	e7b0      	b.n	800a4de <__kernel_rem_pio2+0x532>
 800a57c:	4639      	mov	r1, r7
 800a57e:	e7b5      	b.n	800a4ec <__kernel_rem_pio2+0x540>
 800a580:	4660      	mov	r0, ip
 800a582:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a586:	4639      	mov	r1, r7
 800a588:	f7f5 fdf0 	bl	800016c <__adddf3>
 800a58c:	3601      	adds	r6, #1
 800a58e:	4684      	mov	ip, r0
 800a590:	460f      	mov	r7, r1
 800a592:	e7ba      	b.n	800a50a <__kernel_rem_pio2+0x55e>
 800a594:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800a598:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5a4:	f7f5 fde2 	bl	800016c <__adddf3>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	460f      	mov	r7, r1
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	f7f5 fdd8 	bl	8000168 <__aeabi_dsub>
 800a5b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5bc:	f7f5 fdd6 	bl	800016c <__adddf3>
 800a5c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5c8:	e9ca 6700 	strd	r6, r7, [sl]
 800a5cc:	e757      	b.n	800a47e <__kernel_rem_pio2+0x4d2>
 800a5ce:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800a5d2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	4639      	mov	r1, r7
 800a5da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5de:	f7f5 fdc5 	bl	800016c <__adddf3>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	4689      	mov	r9, r1
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f5 fdbb 	bl	8000168 <__aeabi_dsub>
 800a5f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5f6:	f7f5 fdb9 	bl	800016c <__adddf3>
 800a5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a602:	e9c5 8900 	strd	r8, r9, [r5]
 800a606:	e73f      	b.n	800a488 <__kernel_rem_pio2+0x4dc>
 800a608:	4638      	mov	r0, r7
 800a60a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a60e:	4631      	mov	r1, r6
 800a610:	f7f5 fdac 	bl	800016c <__adddf3>
 800a614:	3c01      	subs	r4, #1
 800a616:	4607      	mov	r7, r0
 800a618:	460e      	mov	r6, r1
 800a61a:	e73f      	b.n	800a49c <__kernel_rem_pio2+0x4f0>
 800a61c:	9b04      	ldr	r3, [sp, #16]
 800a61e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a622:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a626:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a62a:	601d      	str	r5, [r3, #0]
 800a62c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a630:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a634:	615e      	str	r6, [r3, #20]
 800a636:	e786      	b.n	800a546 <__kernel_rem_pio2+0x59a>
 800a638:	41700000 	.word	0x41700000
 800a63c:	3e700000 	.word	0x3e700000

0800a640 <__kernel_sin>:
 800a640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	e9cd 2300 	strd	r2, r3, [sp]
 800a64a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a64e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a652:	4682      	mov	sl, r0
 800a654:	460c      	mov	r4, r1
 800a656:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a658:	da03      	bge.n	800a662 <__kernel_sin+0x22>
 800a65a:	f7f6 f9ed 	bl	8000a38 <__aeabi_d2iz>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d050      	beq.n	800a704 <__kernel_sin+0xc4>
 800a662:	4652      	mov	r2, sl
 800a664:	4623      	mov	r3, r4
 800a666:	4650      	mov	r0, sl
 800a668:	4621      	mov	r1, r4
 800a66a:	f7f5 ff35 	bl	80004d8 <__aeabi_dmul>
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4650      	mov	r0, sl
 800a678:	4621      	mov	r1, r4
 800a67a:	f7f5 ff2d 	bl	80004d8 <__aeabi_dmul>
 800a67e:	a33e      	add	r3, pc, #248	; (adr r3, 800a778 <__kernel_sin+0x138>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	4680      	mov	r8, r0
 800a686:	4689      	mov	r9, r1
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 ff24 	bl	80004d8 <__aeabi_dmul>
 800a690:	a33b      	add	r3, pc, #236	; (adr r3, 800a780 <__kernel_sin+0x140>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f5 fd67 	bl	8000168 <__aeabi_dsub>
 800a69a:	4632      	mov	r2, r6
 800a69c:	463b      	mov	r3, r7
 800a69e:	f7f5 ff1b 	bl	80004d8 <__aeabi_dmul>
 800a6a2:	a339      	add	r3, pc, #228	; (adr r3, 800a788 <__kernel_sin+0x148>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f7f5 fd60 	bl	800016c <__adddf3>
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	f7f5 ff12 	bl	80004d8 <__aeabi_dmul>
 800a6b4:	a336      	add	r3, pc, #216	; (adr r3, 800a790 <__kernel_sin+0x150>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f5 fd55 	bl	8000168 <__aeabi_dsub>
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	f7f5 ff09 	bl	80004d8 <__aeabi_dmul>
 800a6c6:	a334      	add	r3, pc, #208	; (adr r3, 800a798 <__kernel_sin+0x158>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f5 fd4e 	bl	800016c <__adddf3>
 800a6d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d4:	b9dd      	cbnz	r5, 800a70e <__kernel_sin+0xce>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f5 fefb 	bl	80004d8 <__aeabi_dmul>
 800a6e2:	a32f      	add	r3, pc, #188	; (adr r3, 800a7a0 <__kernel_sin+0x160>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fd3e 	bl	8000168 <__aeabi_dsub>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 fef2 	bl	80004d8 <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	f7f5 fd36 	bl	800016c <__adddf3>
 800a700:	4682      	mov	sl, r0
 800a702:	460c      	mov	r4, r1
 800a704:	4650      	mov	r0, sl
 800a706:	4621      	mov	r1, r4
 800a708:	b006      	add	sp, #24
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	2200      	movs	r2, #0
 800a710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a714:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <__kernel_sin+0x168>)
 800a716:	f7f5 fedf 	bl	80004d8 <__aeabi_dmul>
 800a71a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a71e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 fed7 	bl	80004d8 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a732:	f7f5 fd19 	bl	8000168 <__aeabi_dsub>
 800a736:	4632      	mov	r2, r6
 800a738:	463b      	mov	r3, r7
 800a73a:	f7f5 fecd 	bl	80004d8 <__aeabi_dmul>
 800a73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a742:	f7f5 fd11 	bl	8000168 <__aeabi_dsub>
 800a746:	a316      	add	r3, pc, #88	; (adr r3, 800a7a0 <__kernel_sin+0x160>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 fec0 	bl	80004d8 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f5 fd04 	bl	800016c <__adddf3>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4650      	mov	r0, sl
 800a76a:	4621      	mov	r1, r4
 800a76c:	f7f5 fcfc 	bl	8000168 <__aeabi_dsub>
 800a770:	e7c6      	b.n	800a700 <__kernel_sin+0xc0>
 800a772:	bf00      	nop
 800a774:	f3af 8000 	nop.w
 800a778:	5acfd57c 	.word	0x5acfd57c
 800a77c:	3de5d93a 	.word	0x3de5d93a
 800a780:	8a2b9ceb 	.word	0x8a2b9ceb
 800a784:	3e5ae5e6 	.word	0x3e5ae5e6
 800a788:	57b1fe7d 	.word	0x57b1fe7d
 800a78c:	3ec71de3 	.word	0x3ec71de3
 800a790:	19c161d5 	.word	0x19c161d5
 800a794:	3f2a01a0 	.word	0x3f2a01a0
 800a798:	1110f8a6 	.word	0x1110f8a6
 800a79c:	3f811111 	.word	0x3f811111
 800a7a0:	55555549 	.word	0x55555549
 800a7a4:	3fc55555 	.word	0x3fc55555
 800a7a8:	3fe00000 	.word	0x3fe00000

0800a7ac <fabs>:
 800a7ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4770      	bx	lr
 800a7b4:	0000      	movs	r0, r0
	...

0800a7b8 <floor>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a7c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a7c4:	2e13      	cmp	r6, #19
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	dc35      	bgt.n	800a83c <floor+0x84>
 800a7d0:	2e00      	cmp	r6, #0
 800a7d2:	da16      	bge.n	800a802 <floor+0x4a>
 800a7d4:	a336      	add	r3, pc, #216	; (adr r3, 800a8b0 <floor+0xf8>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f7f5 fcc7 	bl	800016c <__adddf3>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f7f6 f909 	bl	80009f8 <__aeabi_dcmpgt>
 800a7e6:	b148      	cbz	r0, 800a7fc <floor+0x44>
 800a7e8:	2c00      	cmp	r4, #0
 800a7ea:	da5b      	bge.n	800a8a4 <floor+0xec>
 800a7ec:	2500      	movs	r5, #0
 800a7ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a7f2:	4a31      	ldr	r2, [pc, #196]	; (800a8b8 <floor+0x100>)
 800a7f4:	433b      	orrs	r3, r7
 800a7f6:	42ab      	cmp	r3, r5
 800a7f8:	bf18      	it	ne
 800a7fa:	4614      	movne	r4, r2
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	462f      	mov	r7, r5
 800a800:	e026      	b.n	800a850 <floor+0x98>
 800a802:	4a2e      	ldr	r2, [pc, #184]	; (800a8bc <floor+0x104>)
 800a804:	fa42 f806 	asr.w	r8, r2, r6
 800a808:	ea01 0208 	and.w	r2, r1, r8
 800a80c:	4302      	orrs	r2, r0
 800a80e:	d01f      	beq.n	800a850 <floor+0x98>
 800a810:	a327      	add	r3, pc, #156	; (adr r3, 800a8b0 <floor+0xf8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 fca9 	bl	800016c <__adddf3>
 800a81a:	2200      	movs	r2, #0
 800a81c:	2300      	movs	r3, #0
 800a81e:	f7f6 f8eb 	bl	80009f8 <__aeabi_dcmpgt>
 800a822:	2800      	cmp	r0, #0
 800a824:	d0ea      	beq.n	800a7fc <floor+0x44>
 800a826:	2c00      	cmp	r4, #0
 800a828:	bfbe      	ittt	lt
 800a82a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a82e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a832:	19a4      	addlt	r4, r4, r6
 800a834:	ea24 0408 	bic.w	r4, r4, r8
 800a838:	2500      	movs	r5, #0
 800a83a:	e7df      	b.n	800a7fc <floor+0x44>
 800a83c:	2e33      	cmp	r6, #51	; 0x33
 800a83e:	dd0b      	ble.n	800a858 <floor+0xa0>
 800a840:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a844:	d104      	bne.n	800a850 <floor+0x98>
 800a846:	4602      	mov	r2, r0
 800a848:	f7f5 fc90 	bl	800016c <__adddf3>
 800a84c:	4607      	mov	r7, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4638      	mov	r0, r7
 800a852:	4619      	mov	r1, r3
 800a854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a858:	f04f 32ff 	mov.w	r2, #4294967295
 800a85c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a860:	fa22 f808 	lsr.w	r8, r2, r8
 800a864:	ea18 0f00 	tst.w	r8, r0
 800a868:	d0f2      	beq.n	800a850 <floor+0x98>
 800a86a:	a311      	add	r3, pc, #68	; (adr r3, 800a8b0 <floor+0xf8>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fc7c 	bl	800016c <__adddf3>
 800a874:	2200      	movs	r2, #0
 800a876:	2300      	movs	r3, #0
 800a878:	f7f6 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0bd      	beq.n	800a7fc <floor+0x44>
 800a880:	2c00      	cmp	r4, #0
 800a882:	da02      	bge.n	800a88a <floor+0xd2>
 800a884:	2e14      	cmp	r6, #20
 800a886:	d103      	bne.n	800a890 <floor+0xd8>
 800a888:	3401      	adds	r4, #1
 800a88a:	ea25 0508 	bic.w	r5, r5, r8
 800a88e:	e7b5      	b.n	800a7fc <floor+0x44>
 800a890:	2301      	movs	r3, #1
 800a892:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a896:	fa03 f606 	lsl.w	r6, r3, r6
 800a89a:	4435      	add	r5, r6
 800a89c:	42bd      	cmp	r5, r7
 800a89e:	bf38      	it	cc
 800a8a0:	18e4      	addcc	r4, r4, r3
 800a8a2:	e7f2      	b.n	800a88a <floor+0xd2>
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	462c      	mov	r4, r5
 800a8a8:	e7a8      	b.n	800a7fc <floor+0x44>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	8800759c 	.word	0x8800759c
 800a8b4:	7e37e43c 	.word	0x7e37e43c
 800a8b8:	bff00000 	.word	0xbff00000
 800a8bc:	000fffff 	.word	0x000fffff

0800a8c0 <scalbn>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	4616      	mov	r6, r2
 800a8c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	b982      	cbnz	r2, 800a8f2 <scalbn+0x32>
 800a8d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8d4:	4303      	orrs	r3, r0
 800a8d6:	d034      	beq.n	800a942 <scalbn+0x82>
 800a8d8:	4b2d      	ldr	r3, [pc, #180]	; (800a990 <scalbn+0xd0>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f7f5 fdfc 	bl	80004d8 <__aeabi_dmul>
 800a8e0:	4b2c      	ldr	r3, [pc, #176]	; (800a994 <scalbn+0xd4>)
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	429e      	cmp	r6, r3
 800a8e6:	460d      	mov	r5, r1
 800a8e8:	da0d      	bge.n	800a906 <scalbn+0x46>
 800a8ea:	a325      	add	r3, pc, #148	; (adr r3, 800a980 <scalbn+0xc0>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	e01c      	b.n	800a92c <scalbn+0x6c>
 800a8f2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a8f6:	42ba      	cmp	r2, r7
 800a8f8:	d109      	bne.n	800a90e <scalbn+0x4e>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	f7f5 fc36 	bl	800016c <__adddf3>
 800a900:	4604      	mov	r4, r0
 800a902:	460d      	mov	r5, r1
 800a904:	e01d      	b.n	800a942 <scalbn+0x82>
 800a906:	460b      	mov	r3, r1
 800a908:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a90c:	3a36      	subs	r2, #54	; 0x36
 800a90e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a912:	4432      	add	r2, r6
 800a914:	428a      	cmp	r2, r1
 800a916:	dd0c      	ble.n	800a932 <scalbn+0x72>
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	a11a      	add	r1, pc, #104	; (adr r1, 800a988 <scalbn+0xc8>)
 800a91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a922:	f000 f83b 	bl	800a99c <copysign>
 800a926:	a318      	add	r3, pc, #96	; (adr r3, 800a988 <scalbn+0xc8>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fdd4 	bl	80004d8 <__aeabi_dmul>
 800a930:	e7e6      	b.n	800a900 <scalbn+0x40>
 800a932:	2a00      	cmp	r2, #0
 800a934:	dd08      	ble.n	800a948 <scalbn+0x88>
 800a936:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a93a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a93e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a948:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a94c:	da0b      	bge.n	800a966 <scalbn+0xa6>
 800a94e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a952:	429e      	cmp	r6, r3
 800a954:	4622      	mov	r2, r4
 800a956:	462b      	mov	r3, r5
 800a958:	dce0      	bgt.n	800a91c <scalbn+0x5c>
 800a95a:	a109      	add	r1, pc, #36	; (adr r1, 800a980 <scalbn+0xc0>)
 800a95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a960:	f000 f81c 	bl	800a99c <copysign>
 800a964:	e7c1      	b.n	800a8ea <scalbn+0x2a>
 800a966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a96a:	3236      	adds	r2, #54	; 0x36
 800a96c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a970:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	2200      	movs	r2, #0
 800a97a:	4b07      	ldr	r3, [pc, #28]	; (800a998 <scalbn+0xd8>)
 800a97c:	e7d6      	b.n	800a92c <scalbn+0x6c>
 800a97e:	bf00      	nop
 800a980:	c2f8f359 	.word	0xc2f8f359
 800a984:	01a56e1f 	.word	0x01a56e1f
 800a988:	8800759c 	.word	0x8800759c
 800a98c:	7e37e43c 	.word	0x7e37e43c
 800a990:	43500000 	.word	0x43500000
 800a994:	ffff3cb0 	.word	0xffff3cb0
 800a998:	3c900000 	.word	0x3c900000

0800a99c <copysign>:
 800a99c:	b530      	push	{r4, r5, lr}
 800a99e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a9a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9a6:	ea42 0503 	orr.w	r5, r2, r3
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	bd30      	pop	{r4, r5, pc}
	...

0800a9b0 <_init>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	bf00      	nop
 800a9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b6:	bc08      	pop	{r3}
 800a9b8:	469e      	mov	lr, r3
 800a9ba:	4770      	bx	lr

0800a9bc <_fini>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	bf00      	nop
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr
