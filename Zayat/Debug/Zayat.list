
Zayat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800d488  0800d488  0001d488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc10  0800dc10  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc10  0800dc10  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc10  0800dc10  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc10  0800dc10  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dc18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ed4  200001e8  0800de00  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040bc  0800de00  000240bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfb1  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003666  00000000  00000000  0003c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001648  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00040e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ab8  00000000  00000000  00042350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012680  00000000  00000000  00058e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ef16  00000000  00000000  0006b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea39e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d64  00000000  00000000  000ea41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d470 	.word	0x0800d470

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800d470 	.word	0x0800d470

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <ARM_Motors>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;
extern TIM_OC_InitTypeDef sConfigOCZayat;

void ARM_Motors(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	sConfigOCZayat.Pulse = 1.2 * ONE_MS;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <ARM_Motors+0x80>)
 8001162:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001166:	605a      	str	r2, [r3, #4]
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 8001168:	2200      	movs	r2, #0
 800116a:	491c      	ldr	r1, [pc, #112]	; (80011dc <ARM_Motors+0x80>)
 800116c:	481c      	ldr	r0, [pc, #112]	; (80011e0 <ARM_Motors+0x84>)
 800116e:	f005 f8c9 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <ARM_Motors+0x20>
   {
	 Error_Handler();
 8001178:	f002 f844 	bl	8003204 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 800117c:	2204      	movs	r2, #4
 800117e:	4917      	ldr	r1, [pc, #92]	; (80011dc <ARM_Motors+0x80>)
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <ARM_Motors+0x84>)
 8001182:	f005 f8bf 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <ARM_Motors+0x34>
   {
	 Error_Handler();
 800118c:	f002 f83a 	bl	8003204 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 8001190:	2208      	movs	r2, #8
 8001192:	4912      	ldr	r1, [pc, #72]	; (80011dc <ARM_Motors+0x80>)
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <ARM_Motors+0x84>)
 8001196:	f005 f8b5 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <ARM_Motors+0x48>
   {
	 Error_Handler();
 80011a0:	f002 f830 	bl	8003204 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 80011a4:	220c      	movs	r2, #12
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <ARM_Motors+0x80>)
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <ARM_Motors+0x84>)
 80011aa:	f005 f8ab 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <ARM_Motors+0x5c>
   {
	 Error_Handler();
 80011b4:	f002 f826 	bl	8003204 <Error_Handler>
   }
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <ARM_Motors+0x84>)
 80011bc:	f004 ff68 	bl	8006090 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011c0:	2108      	movs	r1, #8
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <ARM_Motors+0x84>)
 80011c4:	f004 ff64 	bl	8006090 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011c8:	2104      	movs	r1, #4
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <ARM_Motors+0x84>)
 80011cc:	f004 ff60 	bl	8006090 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80011d0:	210c      	movs	r1, #12
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ARM_Motors+0x84>)
 80011d4:	f004 ff5c 	bl	8006090 <HAL_TIM_PWM_Start>

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000228 	.word	0x20000228
 80011e0:	20003fb4 	.word	0x20003fb4

080011e4 <PWM>:
	 * 		-Motor 4 = CHANNEL_1						 /  \
	 * 													3    4
	 *
	 */
void PWM(u16 dutyCycle, u8 motorNumber)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	717b      	strb	r3, [r7, #5]
	u16 temp = dutyCycle * ONE_MS / 100 + ONE_MS;
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <PWM+0xd0>)
 8001200:	fb82 1203 	smull	r1, r2, r2, r3
 8001204:	1152      	asrs	r2, r2, #5
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001210:	81fb      	strh	r3, [r7, #14]

	switch(motorNumber)
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	3b01      	subs	r3, #1
 8001216:	2b03      	cmp	r3, #3
 8001218:	d846      	bhi.n	80012a8 <PWM+0xc4>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <PWM+0x3c>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001231 	.word	0x08001231
 8001224:	0800124f 	.word	0x0800124f
 8001228:	0800126d 	.word	0x0800126d
 800122c:	0800128b 	.word	0x0800128b
	{
	case 1:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 8001230:	2200      	movs	r2, #0
 8001232:	4921      	ldr	r1, [pc, #132]	; (80012b8 <PWM+0xd4>)
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <PWM+0xd8>)
 8001236:	f005 f865 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <PWM+0x60>
		   {
			 Error_Handler();
 8001240:	f001 ffe0 	bl	8003204 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001244:	2100      	movs	r1, #0
 8001246:	481d      	ldr	r0, [pc, #116]	; (80012bc <PWM+0xd8>)
 8001248:	f004 ff22 	bl	8006090 <HAL_TIM_PWM_Start>
		   break;
 800124c:	e02e      	b.n	80012ac <PWM+0xc8>
	case 2:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 800124e:	2204      	movs	r2, #4
 8001250:	4919      	ldr	r1, [pc, #100]	; (80012b8 <PWM+0xd4>)
 8001252:	481a      	ldr	r0, [pc, #104]	; (80012bc <PWM+0xd8>)
 8001254:	f005 f856 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <PWM+0x7e>
		   {
			 Error_Handler();
 800125e:	f001 ffd1 	bl	8003204 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001262:	2104      	movs	r1, #4
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <PWM+0xd8>)
 8001266:	f004 ff13 	bl	8006090 <HAL_TIM_PWM_Start>
		   break;
 800126a:	e01f      	b.n	80012ac <PWM+0xc8>
	case 3:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 800126c:	2208      	movs	r2, #8
 800126e:	4912      	ldr	r1, [pc, #72]	; (80012b8 <PWM+0xd4>)
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <PWM+0xd8>)
 8001272:	f005 f847 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <PWM+0x9c>
		   {
			 Error_Handler();
 800127c:	f001 ffc2 	bl	8003204 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001280:	2108      	movs	r1, #8
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <PWM+0xd8>)
 8001284:	f004 ff04 	bl	8006090 <HAL_TIM_PWM_Start>
		   break;
 8001288:	e010      	b.n	80012ac <PWM+0xc8>
	case 4:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 800128a:	220c      	movs	r2, #12
 800128c:	490a      	ldr	r1, [pc, #40]	; (80012b8 <PWM+0xd4>)
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <PWM+0xd8>)
 8001290:	f005 f838 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <PWM+0xba>
		   {
			 Error_Handler();
 800129a:	f001 ffb3 	bl	8003204 <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800129e:	210c      	movs	r1, #12
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <PWM+0xd8>)
 80012a2:	f004 fef5 	bl	8006090 <HAL_TIM_PWM_Start>
		   break;
 80012a6:	e001      	b.n	80012ac <PWM+0xc8>
	default:
		ARM_Motors();
 80012a8:	f7ff ff58 	bl	800115c <ARM_Motors>
	}
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	20000228 	.word	0x20000228
 80012bc:	20003fb4 	.word	0x20003fb4

080012c0 <Read_Accel_Values>:
		errory=errory/3000.0;
		errorz=errorz/3000.0;

}
void Read_Accel_Values(parameters *p)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]

	buf[0]=ACCEL_XOUT_H;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <Read_Accel_Values+0xf4>)
 80012ca:	223b      	movs	r2, #59	; 0x3b
 80012cc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a37      	ldr	r2, [pc, #220]	; (80013b4 <Read_Accel_Values+0xf4>)
 80012d8:	21d0      	movs	r1, #208	; 0xd0
 80012da:	4837      	ldr	r0, [pc, #220]	; (80013b8 <Read_Accel_Values+0xf8>)
 80012dc:	f003 fbb0 	bl	8004a40 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2306      	movs	r3, #6
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <Read_Accel_Values+0xf4>)
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	4832      	ldr	r0, [pc, #200]	; (80013b8 <Read_Accel_Values+0xf8>)
 80012ee:	f003 fca5 	bl	8004c3c <HAL_I2C_Master_Receive>
		int16_t temp1,temp2,temp3;
		temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <Read_Accel_Values+0xf4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <Read_Accel_Values+0xf4>)
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	81fb      	strh	r3, [r7, #14]
		temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <Read_Accel_Values+0xf4>)
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <Read_Accel_Values+0xf4>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	81bb      	strh	r3, [r7, #12]
		temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <Read_Accel_Values+0xf4>)
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <Read_Accel_Values+0xf4>)
 8001320:	795b      	ldrb	r3, [r3, #5]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	817b      	strh	r3, [r7, #10]
	p->x_dot_dot = (temp1-errorxbody)/2048.0;
 8001328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fcd5 	bl	8000cdc <__aeabi_i2f>
 8001332:	4602      	mov	r2, r0
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <Read_Accel_Values+0xfc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4610      	mov	r0, r2
 800133c:	f7ff fc18 	bl	8000b70 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdd0 	bl	8000eec <__aeabi_fdiv>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
	p->y_dot_dot = (temp2-errorybody)/2048.0;
 8001354:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcbf 	bl	8000cdc <__aeabi_i2f>
 800135e:	4602      	mov	r2, r0
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <Read_Accel_Values+0x100>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f7ff fc02 	bl	8000b70 <__aeabi_fsub>
 800136c:	4603      	mov	r3, r0
 800136e:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fdba 	bl	8000eec <__aeabi_fdiv>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	61da      	str	r2, [r3, #28]
	p->z_dot_dot = (temp3-errorzbody)/2048.0;
 8001380:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fca9 	bl	8000cdc <__aeabi_i2f>
 800138a:	4602      	mov	r2, r0
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <Read_Accel_Values+0x104>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff fbec 	bl	8000b70 <__aeabi_fsub>
 8001398:	4603      	mov	r3, r0
 800139a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fda4 	bl	8000eec <__aeabi_fdiv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	621a      	str	r2, [r3, #32]

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20003e38 	.word	0x20003e38
 80013b8:	20003f04 	.word	0x20003f04
 80013bc:	2000021c 	.word	0x2000021c
 80013c0:	20000220 	.word	0x20000220
 80013c4:	20000224 	.word	0x20000224

080013c8 <Read_Gyro_Values>:

void Read_Gyro_Values(parameters *p, f32 RT)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b08b      	sub	sp, #44	; 0x2c
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]

		RT=0.01;
 80013d2:	4ba9      	ldr	r3, [pc, #676]	; (8001678 <Read_Gyro_Values+0x2b0>)
 80013d4:	603b      	str	r3, [r7, #0]
		buf[0]=GYRO_XOUT_H;
 80013d6:	4ba9      	ldr	r3, [pc, #676]	; (800167c <Read_Gyro_Values+0x2b4>)
 80013d8:	2243      	movs	r2, #67	; 0x43
 80013da:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	4aa5      	ldr	r2, [pc, #660]	; (800167c <Read_Gyro_Values+0x2b4>)
 80013e6:	21d0      	movs	r1, #208	; 0xd0
 80013e8:	48a5      	ldr	r0, [pc, #660]	; (8001680 <Read_Gyro_Values+0x2b8>)
 80013ea:	f003 fb29 	bl	8004a40 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2306      	movs	r3, #6
 80013f6:	4aa1      	ldr	r2, [pc, #644]	; (800167c <Read_Gyro_Values+0x2b4>)
 80013f8:	21d0      	movs	r1, #208	; 0xd0
 80013fa:	48a1      	ldr	r0, [pc, #644]	; (8001680 <Read_Gyro_Values+0x2b8>)
 80013fc:	f003 fc1e 	bl	8004c3c <HAL_I2C_Master_Receive>


		int16_t temp1,temp2,temp3;
					temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 8001400:	4b9e      	ldr	r3, [pc, #632]	; (800167c <Read_Gyro_Values+0x2b4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b9c      	ldr	r3, [pc, #624]	; (800167c <Read_Gyro_Values+0x2b4>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	83fb      	strh	r3, [r7, #30]
					temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 8001412:	4b9a      	ldr	r3, [pc, #616]	; (800167c <Read_Gyro_Values+0x2b4>)
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b98      	ldr	r3, [pc, #608]	; (800167c <Read_Gyro_Values+0x2b4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	83bb      	strh	r3, [r7, #28]
					temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 8001424:	4b95      	ldr	r3, [pc, #596]	; (800167c <Read_Gyro_Values+0x2b4>)
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b93      	ldr	r3, [pc, #588]	; (800167c <Read_Gyro_Values+0x2b4>)
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	837b      	strh	r3, [r7, #26]

						p->p = temp1/1.0f;
 8001436:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc4e 	bl	8000cdc <__aeabi_i2f>
 8001440:	4602      	mov	r2, r0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	649a      	str	r2, [r3, #72]	; 0x48

						p->q = temp2/1.0f;
 8001446:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc46 	bl	8000cdc <__aeabi_i2f>
 8001450:	4602      	mov	r2, r0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c

						p->r = temp3/1.0f;
 8001456:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc3e 	bl	8000cdc <__aeabi_i2f>
 8001460:	4602      	mov	r2, r0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	651a      	str	r2, [r3, #80]	; 0x50
		p->p = ((p->p-errorp)/16.4);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <Read_Gyro_Values+0x2bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f7ff fb7d 	bl	8000b70 <__aeabi_fsub>
 8001476:	4603      	mov	r3, r0
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffd5 	bl	8000428 <__aeabi_f2d>
 800147e:	a37a      	add	r3, pc, #488	; (adr r3, 8001668 <Read_Gyro_Values+0x2a0>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f952 	bl	800072c <__aeabi_ddiv>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f7ff fb1a 	bl	8000ac8 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	649a      	str	r2, [r3, #72]	; 0x48
		p->q = ((p->q-errorq)/16.4);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149e:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <Read_Gyro_Values+0x2c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fb63 	bl	8000b70 <__aeabi_fsub>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffbb 	bl	8000428 <__aeabi_f2d>
 80014b2:	a36d      	add	r3, pc, #436	; (adr r3, 8001668 <Read_Gyro_Values+0x2a0>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f938 	bl	800072c <__aeabi_ddiv>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4618      	mov	r0, r3
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff fb00 	bl	8000ac8 <__aeabi_d2f>
 80014c8:	4602      	mov	r2, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
		p->r = ((p->r-errorr)/16.4);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d2:	4b6e      	ldr	r3, [pc, #440]	; (800168c <Read_Gyro_Values+0x2c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f7ff fb49 	bl	8000b70 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffa1 	bl	8000428 <__aeabi_f2d>
 80014e6:	a360      	add	r3, pc, #384	; (adr r3, 8001668 <Read_Gyro_Values+0x2a0>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f91e 	bl	800072c <__aeabi_ddiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fae6 	bl	8000ac8 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
	//Body frame phi and theta
	p->phib = p->phib+RT*p->p ;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc39 	bl	8000d84 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fb2c 	bl	8000b74 <__addsf3>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
	p->thetab = p->thetab+RT*p->q;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	6839      	ldr	r1, [r7, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc28 	bl	8000d84 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fb1b 	bl	8000b74 <__addsf3>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
	p->psib = p->psib+RT*p->r;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc17 	bl	8000d84 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fb0a 	bl	8000b74 <__addsf3>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	639a      	str	r2, [r3, #56]	; 0x38

	f32 first_term;
	f32 second_term;
	first_term = 0.98;
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <Read_Gyro_Values+0x2c8>)
 800156a:	617b      	str	r3, [r7, #20]
	second_term = 0.02;
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <Read_Gyro_Values+0x2cc>)
 800156e:	613b      	str	r3, [r7, #16]
	f32 accelPhi;
	f32 acceltheta;


    accelPhi = atan2(p->y_dot_dot,sqrt(p->x_dot_dot * p->x_dot_dot + p->z_dot_dot* p->z_dot_dot)) * 57.3;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff57 	bl	8000428 <__aeabi_f2d>
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f7ff fbfb 	bl	8000d84 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	461e      	mov	r6, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f7ff fbf1 	bl	8000d84 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4630      	mov	r0, r6
 80015a8:	f7ff fae4 	bl	8000b74 <__addsf3>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff3a 	bl	8000428 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f00a fc38 	bl	800be30 <sqrt>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f00a fc30 	bl	800be2c <atan2>
 80015cc:	a328      	add	r3, pc, #160	; (adr r3, 8001670 <Read_Gyro_Values+0x2a8>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ff81 	bl	80004d8 <__aeabi_dmul>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4618      	mov	r0, r3
 80015dc:	4621      	mov	r1, r4
 80015de:	f7ff fa73 	bl	8000ac8 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	60fb      	str	r3, [r7, #12]
   acceltheta = atan2(-p->x_dot_dot, sqrt(p->y_dot_dot * p->y_dot_dot + p->z_dot_dot * p->z_dot_dot)) * 57.3;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	4604      	mov	r4, r0
 80015f6:	460d      	mov	r5, r1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff fbbe 	bl	8000d84 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	461e      	mov	r6, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f7ff fbb4 	bl	8000d84 <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4630      	mov	r0, r6
 8001622:	f7ff faa7 	bl	8000b74 <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fefd 	bl	8000428 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f00a fbfb 	bl	800be30 <sqrt>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f00a fbf3 	bl	800be2c <atan2>
 8001646:	a30a      	add	r3, pc, #40	; (adr r3, 8001670 <Read_Gyro_Values+0x2a8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ff44 	bl	80004d8 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4618      	mov	r0, r3
 8001656:	4621      	mov	r1, r4
 8001658:	f7ff fa36 	bl	8000ac8 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	60bb      	str	r3, [r7, #8]


   p->phib = first_term * p->phib + second_term * accelPhi;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	e019      	b.n	8001698 <Read_Gyro_Values+0x2d0>
 8001664:	f3af 8000 	nop.w
 8001668:	66666666 	.word	0x66666666
 800166c:	40306666 	.word	0x40306666
 8001670:	66666666 	.word	0x66666666
 8001674:	404ca666 	.word	0x404ca666
 8001678:	3c23d70a 	.word	0x3c23d70a
 800167c:	20003e38 	.word	0x20003e38
 8001680:	20003f04 	.word	0x20003f04
 8001684:	20000204 	.word	0x20000204
 8001688:	20000208 	.word	0x20000208
 800168c:	2000020c 	.word	0x2000020c
 8001690:	3f7ae148 	.word	0x3f7ae148
 8001694:	3ca3d70a 	.word	0x3ca3d70a
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb71 	bl	8000d84 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461c      	mov	r4, r3
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	6938      	ldr	r0, [r7, #16]
 80016aa:	f7ff fb6b 	bl	8000d84 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fa5e 	bl	8000b74 <__addsf3>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
    p->thetab = first_term * p->thetab + second_term * acceltheta;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	6979      	ldr	r1, [r7, #20]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb5c 	bl	8000d84 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461c      	mov	r4, r3
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6938      	ldr	r0, [r7, #16]
 80016d4:	f7ff fb56 	bl	8000d84 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fa49 	bl	8000b74 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
	if(p->psib > 180.0)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	4914      	ldr	r1, [pc, #80]	; (8001740 <Read_Gyro_Values+0x378>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fd03 	bl	80010fc <__aeabi_fcmpgt>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <Read_Gyro_Values+0x348>
		p->psib -= 360;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001700:	4910      	ldr	r1, [pc, #64]	; (8001744 <Read_Gyro_Values+0x37c>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fa34 	bl	8000b70 <__aeabi_fsub>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
	if(p->psib < -180.0)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <Read_Gyro_Values+0x380>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcd2 	bl	80010c0 <__aeabi_fcmplt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <Read_Gyro_Values+0x35c>
		p->psib += 360;

}
 8001722:	e009      	b.n	8001738 <Read_Gyro_Values+0x370>
		p->psib += 360;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <Read_Gyro_Values+0x37c>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fa22 	bl	8000b74 <__addsf3>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001738:	bf00      	nop
 800173a:	3724      	adds	r7, #36	; 0x24
 800173c:	46bd      	mov	sp, r7
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001740:	43340000 	.word	0x43340000
 8001744:	43b40000 	.word	0x43b40000
 8001748:	c3340000 	.word	0xc3340000
 800174c:	00000000 	.word	0x00000000

08001750 <imu_Comp_Filter>:

void imu_Comp_Filter(parameters *p, f32 RT)
{
 8001750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001754:	b099      	sub	sp, #100	; 0x64
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	RT=0.01;
 800175c:	4ba8      	ldr	r3, [pc, #672]	; (8001a00 <imu_Comp_Filter+0x2b0>)
 800175e:	603b      	str	r3, [r7, #0]
	f32 first_term;
	f32 second_term;
	f32 accelPhi;
	f32 acceltheta;
	//euler[0] = p->phi; euler[1] = p->theta; euler[2] = p->psi;
	euler[0]= p->phib;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
	euler[1]= p->thetab;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
	euler[2]= p->psib;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	637b      	str	r3, [r7, #52]	; 0x34

	Quaternion(q, euler);
 8001772:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fd47 	bl	8003210 <Quaternion>
	ang_vel[0] = p->p; ang_vel[1] = p->q; ang_vel[2] = p->r;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 acc_vel[3];
	acc_vel[0]= p->x_dot_dot;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	617b      	str	r3, [r7, #20]
	acc_vel[1]= p->y_dot_dot;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	61bb      	str	r3, [r7, #24]
	acc_vel[2]= p->z_dot_dot;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	61fb      	str	r3, [r7, #28]
	Rotate_BtoW(ang_vel,q);
 80017a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 ffa5 	bl	8003700 <Rotate_BtoW>
//----------------------------------------------------------------------------

	//Quaternion(q, euler);
	//idk khaled told me to add them idk what they do but seems like they use rotated accel
	f32 acc[3] = {p->x_dot_dot, p->y_dot_dot, p->z_dot_dot};
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	613b      	str	r3, [r7, #16]
	Rotate_BtoW_acc(acc, q); // there was a line to get q but i believe it's already there
 80017c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f940 	bl	8003a58 <Rotate_BtoW_acc>

	acc[0] -= errorx;
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <imu_Comp_Filter+0x2b4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f7ff f9c5 	bl	8000b70 <__aeabi_fsub>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60bb      	str	r3, [r7, #8]
	acc[1]  -= errory;
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <imu_Comp_Filter+0x2b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f7ff f9bc 	bl	8000b70 <__aeabi_fsub>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
	acc[2]  -= errorz;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <imu_Comp_Filter+0x2bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7ff f9b3 	bl	8000b70 <__aeabi_fsub>
 800180a:	4603      	mov	r3, r0
 800180c:	613b      	str	r3, [r7, #16]

	p->x += RT * p->x_dot;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681c      	ldr	r4, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fab3 	bl	8000d84 <__aeabi_fmul>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff f9a6 	bl	8000b74 <__addsf3>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	601a      	str	r2, [r3, #0]
	p->y += RT * p->y_dot;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685c      	ldr	r4, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff faa2 	bl	8000d84 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff f995 	bl	8000b74 <__addsf3>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	605a      	str	r2, [r3, #4]
	p->z += RT * p->z_dot;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689c      	ldr	r4, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa91 	bl	8000d84 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	4619      	mov	r1, r3
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff f984 	bl	8000b74 <__addsf3>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]

	p->x_dot += RT * (acc[0] ) * 9.812;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fdd5 	bl	8000428 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa7c 	bl	8000d84 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
 8001894:	a356      	add	r3, pc, #344	; (adr r3, 80019f0 <imu_Comp_Filter+0x2a0>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fe1d 	bl	80004d8 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fc61 	bl	800016c <__adddf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	4618      	mov	r0, r3
 80018b0:	4621      	mov	r1, r4
 80018b2:	f7ff f909 	bl	8000ac8 <__aeabi_d2f>
 80018b6:	4602      	mov	r2, r0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	60da      	str	r2, [r3, #12]
	p->y_dot += RT * (acc[1] ) * 9.812;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fdb1 	bl	8000428 <__aeabi_f2d>
 80018c6:	4604      	mov	r4, r0
 80018c8:	460d      	mov	r5, r1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa58 	bl	8000d84 <__aeabi_fmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fda6 	bl	8000428 <__aeabi_f2d>
 80018dc:	a344      	add	r3, pc, #272	; (adr r3, 80019f0 <imu_Comp_Filter+0x2a0>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fdf9 	bl	80004d8 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc3d 	bl	800016c <__adddf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	f7ff f8e5 	bl	8000ac8 <__aeabi_d2f>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
	p->z_dot += RT * (acc[2] ) * 9.812;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd8d 	bl	8000428 <__aeabi_f2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa34 	bl	8000d84 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd82 	bl	8000428 <__aeabi_f2d>
 8001924:	a332      	add	r3, pc, #200	; (adr r3, 80019f0 <imu_Comp_Filter+0x2a0>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fdd5 	bl	80004d8 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4620      	mov	r0, r4
 8001934:	4629      	mov	r1, r5
 8001936:	f7fe fc19 	bl	800016c <__adddf3>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	4618      	mov	r0, r3
 8001940:	4621      	mov	r1, r4
 8001942:	f7ff f8c1 	bl	8000ac8 <__aeabi_d2f>
 8001946:	4602      	mov	r2, r0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	615a      	str	r2, [r3, #20]


	// Integrating the p q r to get angles
	p->phi = p->phi +ang_vel[0]*RT;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa15 	bl	8000d84 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff f908 	bl	8000b74 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
	p->theta =p->theta+ ang_vel[1]*RT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fa05 	bl	8000d84 <__aeabi_fmul>
 800197a:	4603      	mov	r3, r0
 800197c:	4619      	mov	r1, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff f8f8 	bl	8000b74 <__addsf3>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
	p->psi=p->psib;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
	//p->psi =p->psi+ ang_vel[2]*RT;

	// Accelometer from body to world
	f32 temp1 = cos(-p->psi*0.0174532)*p->x_dot_dot + sin(-p->psi*0.0174532)*p->y_dot_dot;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd43 	bl	8000428 <__aeabi_f2d>
 80019a2:	a315      	add	r3, pc, #84	; (adr r3, 80019f8 <imu_Comp_Filter+0x2a8>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fd96 	bl	80004d8 <__aeabi_dmul>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	f00a f9ca 	bl	800bd4c <cos>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd31 	bl	8000428 <__aeabi_f2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe fd83 	bl	80004d8 <__aeabi_dmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	4625      	mov	r5, r4
 80019d8:	461c      	mov	r4, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd20 	bl	8000428 <__aeabi_f2d>
 80019e8:	e012      	b.n	8001a10 <imu_Comp_Filter+0x2c0>
 80019ea:	bf00      	nop
 80019ec:	f3af 8000 	nop.w
 80019f0:	76c8b439 	.word	0x76c8b439
 80019f4:	40239fbe 	.word	0x40239fbe
 80019f8:	6cd799af 	.word	0x6cd799af
 80019fc:	3f91df40 	.word	0x3f91df40
 8001a00:	3c23d70a 	.word	0x3c23d70a
 8001a04:	20000210 	.word	0x20000210
 8001a08:	20000214 	.word	0x20000214
 8001a0c:	20000218 	.word	0x20000218
 8001a10:	a3a3      	add	r3, pc, #652	; (adr r3, 8001ca0 <imu_Comp_Filter+0x550>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fd5f 	bl	80004d8 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f00a f9c9 	bl	800bdb8 <sin>
 8001a26:	4680      	mov	r8, r0
 8001a28:	4689      	mov	r9, r1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fcfa 	bl	8000428 <__aeabi_f2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4640      	mov	r0, r8
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	f7fe fd4c 	bl	80004d8 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fb90 	bl	800016c <__adddf3>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	4618      	mov	r0, r3
 8001a52:	4621      	mov	r1, r4
 8001a54:	f7ff f838 	bl	8000ac8 <__aeabi_d2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	f32 temp2 = -sin(-p->psi*0.0174532)*p->x_dot_dot + cos(-p->psi*0.0174532)*p->y_dot_dot;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fce1 	bl	8000428 <__aeabi_f2d>
 8001a66:	a38e      	add	r3, pc, #568	; (adr r3, 8001ca0 <imu_Comp_Filter+0x550>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fd34 	bl	80004d8 <__aeabi_dmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	460c      	mov	r4, r1
 8001a74:	4618      	mov	r0, r3
 8001a76:	4621      	mov	r1, r4
 8001a78:	f00a f99e 	bl	800bdb8 <sin>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fccf 	bl	8000428 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f7fe fd21 	bl	80004d8 <__aeabi_dmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4625      	mov	r5, r4
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcbe 	bl	8000428 <__aeabi_f2d>
 8001aac:	a37c      	add	r3, pc, #496	; (adr r3, 8001ca0 <imu_Comp_Filter+0x550>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fd11 	bl	80004d8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f00a f945 	bl	800bd4c <cos>
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fcac 	bl	8000428 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4640      	mov	r0, r8
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	f7fe fcfe 	bl	80004d8 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fb42 	bl	800016c <__adddf3>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4618      	mov	r0, r3
 8001aee:	4621      	mov	r1, r4
 8001af0:	f7fe ffea 	bl	8000ac8 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	65bb      	str	r3, [r7, #88]	; 0x58
	acc_vel[0]=temp1;
 8001af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afa:	617b      	str	r3, [r7, #20]
	acc_vel[1]=temp2;
 8001afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001afe:	61bb      	str	r3, [r7, #24]


	// Angles from Acc
    accelPhi = atan2(acc_vel[1],sqrt(acc_vel[0] * acc_vel[0] + acc_vel[2]* acc_vel[2])) * 57.3;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fc90 	bl	8000428 <__aeabi_f2d>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f936 	bl	8000d84 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461e      	mov	r6, r3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f92e 	bl	8000d84 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f7ff f821 	bl	8000b74 <__addsf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc77 	bl	8000428 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f00a f975 	bl	800be30 <sqrt>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f00a f96d 	bl	800be2c <atan2>
 8001b52:	a355      	add	r3, pc, #340	; (adr r3, 8001ca8 <imu_Comp_Filter+0x558>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fcbe 	bl	80004d8 <__aeabi_dmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	f7fe ffb0 	bl	8000ac8 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
   acceltheta = atan2(-acc_vel[0], sqrt(acc_vel[1] * acc_vel[1] + acc_vel[2] * acc_vel[2])) * 57.3;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc58 	bl	8000428 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f8fe 	bl	8000d84 <__aeabi_fmul>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461e      	mov	r6, r3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f8f6 	bl	8000d84 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f7fe ffe9 	bl	8000b74 <__addsf3>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc3f 	bl	8000428 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f00a f93d 	bl	800be30 <sqrt>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f00a f935 	bl	800be2c <atan2>
 8001bc2:	a339      	add	r3, pc, #228	; (adr r3, 8001ca8 <imu_Comp_Filter+0x558>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fc86 	bl	80004d8 <__aeabi_dmul>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	460c      	mov	r4, r1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	f7fe ff78 	bl	8000ac8 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50

	 first_term = 0.98; ////////////////////
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <imu_Comp_Filter+0x560>)
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
	 second_term = 0.02; //////////////////
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <imu_Comp_Filter+0x564>)
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48

   // Comp Filter
    p->phi = first_term * p->phi + second_term * accelPhi;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f8ca 	bl	8000d84 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bf8:	f7ff f8c4 	bl	8000d84 <__aeabi_fmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7fe ffb7 	bl	8000b74 <__addsf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    p->theta = first_term * p->theta + second_term * acceltheta;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f8b5 	bl	8000d84 <__aeabi_fmul>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461c      	mov	r4, r3
 8001c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c22:	f7ff f8af 	bl	8000d84 <__aeabi_fmul>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7fe ffa2 	bl	8000b74 <__addsf3>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
	if(p->psi > 180.0)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	491e      	ldr	r1, [pc, #120]	; (8001cb8 <imu_Comp_Filter+0x568>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa5c 	bl	80010fc <__aeabi_fcmpgt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <imu_Comp_Filter+0x50e>
		p->psi -= 360;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	491b      	ldr	r1, [pc, #108]	; (8001cbc <imu_Comp_Filter+0x56c>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe ff8d 	bl	8000b70 <__aeabi_fsub>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	if(p->psi < -180.0)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	4917      	ldr	r1, [pc, #92]	; (8001cc0 <imu_Comp_Filter+0x570>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa2b 	bl	80010c0 <__aeabi_fcmplt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <imu_Comp_Filter+0x534>
		p->psi += 360;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	4911      	ldr	r1, [pc, #68]	; (8001cbc <imu_Comp_Filter+0x56c>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe ff7c 	bl	8000b74 <__addsf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c


	p->x_dot_dot = acc[0];
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
	p->y_dot_dot = acc[1];
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	61da      	str	r2, [r3, #28]
	p->z_dot_dot = acc[2];
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	621a      	str	r2, [r3, #32]


}
 8001c96:	bf00      	nop
 8001c98:	3764      	adds	r7, #100	; 0x64
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ca0:	6cd799af 	.word	0x6cd799af
 8001ca4:	3f91df40 	.word	0x3f91df40
 8001ca8:	66666666 	.word	0x66666666
 8001cac:	404ca666 	.word	0x404ca666
 8001cb0:	3f7ae148 	.word	0x3f7ae148
 8001cb4:	3ca3d70a 	.word	0x3ca3d70a
 8001cb8:	43340000 	.word	0x43340000
 8001cbc:	43b40000 	.word	0x43b40000
 8001cc0:	c3340000 	.word	0xc3340000

08001cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc8:	f002 fb0e 	bl	80042e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  vInitPARAMETERS(&parameter);
 8001ccc:	483d      	ldr	r0, [pc, #244]	; (8001dc4 <main+0x100>)
 8001cce:	f000 faf5 	bl	80022bc <vInitPARAMETERS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f8b9 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f000 fa25 	bl	8002124 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cda:	f000 f8fd 	bl	8001ed8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cde:	f000 f929 	bl	8001f34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001ce2:	f000 f9cb 	bl	800207c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ce6:	f000 f9f3 	bl	80020d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4836      	ldr	r0, [pc, #216]	; (8001dc8 <main+0x104>)
 8001cee:	f004 f9cf 	bl	8006090 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cf2:	f005 fa53 	bl	800719c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BODY_RATES */
  BODY_RATESHandle = osThreadNew(BodyRate, (void*) p, &BODY_RATES_attributes);
 8001cf6:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <main+0x108>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a35      	ldr	r2, [pc, #212]	; (8001dd0 <main+0x10c>)
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4835      	ldr	r0, [pc, #212]	; (8001dd4 <main+0x110>)
 8001d00:	f005 fada 	bl	80072b8 <osThreadNew>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <main+0x114>)
 8001d08:	601a      	str	r2, [r3, #0]

  /* creation of DRONE_START */
  DRONE_STARTHandle = osThreadNew(DroneStart, (void*) p, &DRONE_START_attributes);
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <main+0x108>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <main+0x118>)
 8001d10:	4619      	mov	r1, r3
 8001d12:	4833      	ldr	r0, [pc, #204]	; (8001de0 <main+0x11c>)
 8001d14:	f005 fad0 	bl	80072b8 <osThreadNew>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <main+0x120>)
 8001d1c:	601a      	str	r2, [r3, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(MPU, (void*) p, &IMU_attributes);
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <main+0x108>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <main+0x124>)
 8001d24:	4619      	mov	r1, r3
 8001d26:	4831      	ldr	r0, [pc, #196]	; (8001dec <main+0x128>)
 8001d28:	f005 fac6 	bl	80072b8 <osThreadNew>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <main+0x12c>)
 8001d30:	601a      	str	r2, [r3, #0]

  /* creation of PRINT_TTL */
  PRINT_TTLHandle = osThreadNew(PrintPARAMS, (void*) p, &PRINT_TTL_attributes);
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <main+0x108>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <main+0x130>)
 8001d38:	4619      	mov	r1, r3
 8001d3a:	482f      	ldr	r0, [pc, #188]	; (8001df8 <main+0x134>)
 8001d3c:	f005 fabc 	bl	80072b8 <osThreadNew>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <main+0x138>)
 8001d44:	601a      	str	r2, [r3, #0]

  /* creation of INSERT_PARAMETE */
  INSERT_PARAMETEHandle = osThreadNew(insertPARAMS, (void*) p, &INSERT_PARAMETE_attributes);
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <main+0x108>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <main+0x13c>)
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <main+0x140>)
 8001d50:	f005 fab2 	bl	80072b8 <osThreadNew>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <main+0x144>)
 8001d58:	601a      	str	r2, [r3, #0]

  /* creation of OUTPUT_THRUST */
  OUTPUT_THRUSTHandle = osThreadNew(outputTHRUST, (void*) p, &OUTPUT_THRUST_attributes);
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <main+0x108>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <main+0x148>)
 8001d60:	4619      	mov	r1, r3
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <main+0x14c>)
 8001d64:	f005 faa8 	bl	80072b8 <osThreadNew>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <main+0x150>)
 8001d6c:	601a      	str	r2, [r3, #0]

  /* creation of ROLL_PITCH */
  ROLL_PITCHHandle = osThreadNew(RollPitch, (void*) p, &ROLL_PITCH_attributes);
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <main+0x108>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <main+0x154>)
 8001d74:	4619      	mov	r1, r3
 8001d76:	4829      	ldr	r0, [pc, #164]	; (8001e1c <main+0x158>)
 8001d78:	f005 fa9e 	bl	80072b8 <osThreadNew>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <main+0x15c>)
 8001d80:	601a      	str	r2, [r3, #0]

  /* creation of YAW */
  YAWHandle = osThreadNew(YawCONTROLLER, (void*) p, &YAW_attributes);
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <main+0x108>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <main+0x160>)
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4827      	ldr	r0, [pc, #156]	; (8001e28 <main+0x164>)
 8001d8c:	f005 fa94 	bl	80072b8 <osThreadNew>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <main+0x168>)
 8001d94:	601a      	str	r2, [r3, #0]

  /* creation of ALTITUDE_CONTRO */
  ALTITUDE_CONTROHandle = osThreadNew(Altitude, (void*) p, &ALTITUDE_CONTRO_attributes);
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <main+0x108>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <main+0x16c>)
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4825      	ldr	r0, [pc, #148]	; (8001e34 <main+0x170>)
 8001da0:	f005 fa8a 	bl	80072b8 <osThreadNew>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <main+0x174>)
 8001da8:	601a      	str	r2, [r3, #0]

  /* creation of LATERAL_CONTROL */
  LATERAL_CONTROLHandle = osThreadNew(lateral, (void*) p, &LATERAL_CONTROL_attributes);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <main+0x108>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <main+0x178>)
 8001db0:	4619      	mov	r1, r3
 8001db2:	4823      	ldr	r0, [pc, #140]	; (8001e40 <main+0x17c>)
 8001db4:	f005 fa80 	bl	80072b8 <osThreadNew>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <main+0x180>)
 8001dbc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001dbe:	f005 fa1f 	bl	8007200 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <main+0xfe>
 8001dc4:	20003e50 	.word	0x20003e50
 8001dc8:	20003fb4 	.word	0x20003fb4
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	0800d614 	.word	0x0800d614
 8001dd4:	08002461 	.word	0x08002461
 8001dd8:	20003e48 	.word	0x20003e48
 8001ddc:	0800d638 	.word	0x0800d638
 8001de0:	08002579 	.word	0x08002579
 8001de4:	20003fac 	.word	0x20003fac
 8001de8:	0800d65c 	.word	0x0800d65c
 8001dec:	080025dd 	.word	0x080025dd
 8001df0:	20003f5c 	.word	0x20003f5c
 8001df4:	0800d680 	.word	0x0800d680
 8001df8:	08002631 	.word	0x08002631
 8001dfc:	20003fa0 	.word	0x20003fa0
 8001e00:	0800d6a4 	.word	0x0800d6a4
 8001e04:	08002741 	.word	0x08002741
 8001e08:	20003f58 	.word	0x20003f58
 8001e0c:	0800d6c8 	.word	0x0800d6c8
 8001e10:	08002a69 	.word	0x08002a69
 8001e14:	20003fa8 	.word	0x20003fa8
 8001e18:	0800d6ec 	.word	0x0800d6ec
 8001e1c:	08002ca1 	.word	0x08002ca1
 8001e20:	20003fa4 	.word	0x20003fa4
 8001e24:	0800d710 	.word	0x0800d710
 8001e28:	08002fd9 	.word	0x08002fd9
 8001e2c:	20003fb0 	.word	0x20003fb0
 8001e30:	0800d734 	.word	0x0800d734
 8001e34:	08003019 	.word	0x08003019
 8001e38:	20003e44 	.word	0x20003e44
 8001e3c:	0800d758 	.word	0x0800d758
 8001e40:	08003131 	.word	0x08003131
 8001e44:	20003e4c 	.word	0x20003e4c

08001e48 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b090      	sub	sp, #64	; 0x40
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	2228      	movs	r2, #40	; 0x28
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fea9 	bl	8009bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fc09 	bl	80056a8 <HAL_RCC_OscConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e9c:	f001 f9b2 	bl	8003204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fe74 	bl	8005ba8 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ec6:	f001 f99d 	bl	8003204 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001eca:	f003 ff57 	bl	8005d7c <HAL_RCC_EnableCSS>
}
 8001ece:	bf00      	nop
 8001ed0:	3740      	adds	r7, #64	; 0x40
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <MX_I2C1_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <MX_I2C1_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_I2C1_Init+0x50>)
 8001f16:	f002 fc6b 	bl	80047f0 <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f001 f970 	bl	8003204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20003f04 	.word	0x20003f04
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b08e      	sub	sp, #56	; 0x38
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60;
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f6e:	223c      	movs	r2, #60	; 0x3c
 8001f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f7a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8001f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8c:	4839      	ldr	r0, [pc, #228]	; (8002074 <MX_TIM2_Init+0x140>)
 8001f8e:	f003 fffd 	bl	8005f8c <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f98:	f001 f934 	bl	8003204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4832      	ldr	r0, [pc, #200]	; (8002074 <MX_TIM2_Init+0x140>)
 8001faa:	f004 fa71 	bl	8006490 <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fb4:	f001 f926 	bl	8003204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb8:	482e      	ldr	r0, [pc, #184]	; (8002074 <MX_TIM2_Init+0x140>)
 8001fba:	f004 f835 	bl	8006028 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fc4:	f001 f91e 	bl	8003204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4827      	ldr	r0, [pc, #156]	; (8002074 <MX_TIM2_Init+0x140>)
 8001fd8:	f004 fdda 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fe2:	f001 f90f 	bl	8003204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe6:	2360      	movs	r3, #96	; 0x60
 8001fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481d      	ldr	r0, [pc, #116]	; (8002074 <MX_TIM2_Init+0x140>)
 8001ffe:	f004 f981 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002008:	f001 f8fc 	bl	8003204 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800200c:	2304      	movs	r3, #4
 800200e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2204      	movs	r2, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4817      	ldr	r0, [pc, #92]	; (8002074 <MX_TIM2_Init+0x140>)
 8002018:	f004 f974 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002022:	f001 f8ef 	bl	8003204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2208      	movs	r2, #8
 800202a:	4619      	mov	r1, r3
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <MX_TIM2_Init+0x140>)
 800202e:	f004 f969 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002038:	f001 f8e4 	bl	8003204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	220c      	movs	r2, #12
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_TIM2_Init+0x140>)
 8002044:	f004 f95e 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 800204e:	f001 f8d9 	bl	8003204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOCZayat = sConfigOC;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_TIM2_Init+0x144>)
 8002054:	461d      	mov	r5, r3
 8002056:	1d3c      	adds	r4, r7, #4
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002060:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM2_Init+0x140>)
 8002066:	f001 ff5b 	bl	8003f20 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3738      	adds	r7, #56	; 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bdb0      	pop	{r4, r5, r7, pc}
 8002072:	bf00      	nop
 8002074:	20003fb4 	.word	0x20003fb4
 8002078:	20000228 	.word	0x20000228

0800207c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART1_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020b4:	f004 fdc2 	bl	8006c3c <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f001 f8a1 	bl	8003204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20003f60 	.word	0x20003f60
 80020cc:	40013800 	.word	0x40013800

080020d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <MX_USART2_UART_Init+0x50>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_USART2_UART_Init+0x4c>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_USART2_UART_Init+0x4c>)
 8002108:	f004 fd98 	bl	8006c3c <HAL_UART_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002112:	f001 f877 	bl	8003204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20003ff4 	.word	0x20003ff4
 8002120:	40004400 	.word	0x40004400

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <MX_GPIO_Init+0xa8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <MX_GPIO_Init+0xa8>)
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_GPIO_Init+0xa8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_GPIO_Init+0xa8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <MX_GPIO_Init+0xa8>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <MX_GPIO_Init+0xa8>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_GPIO_Init+0xa8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <MX_GPIO_Init+0xac>)
 80021a0:	f002 fb0e 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4619      	mov	r1, r3
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_GPIO_Init+0xac>)
 80021be:	f002 f9a5 	bl	800450c <HAL_GPIO_Init>

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40011000 	.word	0x40011000

080021d4 <fview>:

/* USER CODE BEGIN 4 */
void fview(float argument)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	uint8_t buffer[25];
	int16_t x = argument *100;
 80021dc:	491c      	ldr	r1, [pc, #112]	; (8002250 <fview+0x7c>)
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fdd0 	bl	8000d84 <__aeabi_fmul>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe ff92 	bl	8001110 <__aeabi_f2iz>
 80021ec:	4603      	mov	r3, r0
 80021ee:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y = (x)%100;
 80021f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <fview+0x80>)
 80021f6:	fb82 1203 	smull	r1, r2, r2, r3
 80021fa:	1151      	asrs	r1, r2, #5
 80021fc:	17da      	asrs	r2, r3, #31
 80021fe:	1a8a      	subs	r2, r1, r2
 8002200:	2164      	movs	r1, #100	; 0x64
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf((char*)buffer,"phi = %d.%02u\t", x/100,y);
 800220c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <fview+0x80>)
 8002212:	fb82 1203 	smull	r1, r2, r2, r3
 8002216:	1152      	asrs	r2, r2, #5
 8002218:	17db      	asrs	r3, r3, #31
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b21b      	sxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002222:	f107 0008 	add.w	r0, r7, #8
 8002226:	490c      	ldr	r1, [pc, #48]	; (8002258 <fview+0x84>)
 8002228:	f008 f918 	bl	800a45c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4618      	mov	r0, r3
 8002232:	f7fd ff8d 	bl	8000150 <strlen>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	f107 0108 	add.w	r1, r7, #8
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <fview+0x88>)
 8002244:	f004 fd47 	bl	8006cd6 <HAL_UART_Transmit>
}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	42c80000 	.word	0x42c80000
 8002254:	51eb851f 	.word	0x51eb851f
 8002258:	0800d500 	.word	0x0800d500
 800225c:	20003f60 	.word	0x20003f60

08002260 <string_receive>:
void string_receive(uint8_t* buffer)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[i], 1, HAL_MAX_DELAY);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	18d1      	adds	r1, r2, r3
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	2201      	movs	r2, #1
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <string_receive+0x58>)
 800227a:	f004 fdc5 	bl	8006e08 <HAL_UART_Receive>
	while(buffer[i]!='#')
 800227e:	e00b      	b.n	8002298 <string_receive+0x38>
	{
		i++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive(&huart1, (uint8_t*)&buffer[i], 1, HAL_MAX_DELAY);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	18d1      	adds	r1, r2, r3
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	2201      	movs	r2, #1
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <string_receive+0x58>)
 8002294:	f004 fdb8 	bl	8006e08 <HAL_UART_Receive>
	while(buffer[i]!='#')
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b23      	cmp	r3, #35	; 0x23
 80022a2:	d1ed      	bne.n	8002280 <string_receive+0x20>
	}
	buffer[i] = '\0';
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20003f60 	.word	0x20003f60

080022bc <vInitPARAMETERS>:
void vInitPARAMETERS(parameters *ptr)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	/***********************************/
	/*TO INITIALIZE ALL PARAMETERS TO 0*/
	/***********************************/
	ptr->x = ptr->y = ptr->z = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	601a      	str	r2, [r3, #0]
	ptr->x_dot = ptr->y_dot = ptr->z_dot = 0;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	615a      	str	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
	ptr->x_dot_dot = ptr->y_dot_dot = ptr->z_dot_dot = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	61da      	str	r2, [r3, #28]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
	ptr->phi = ptr->theta = ptr->psi = 0;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
	ptr->phi_dot = ptr->theta_dot = ptr->psi_dot = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
	ptr->p = ptr->q = ptr->r = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	651a      	str	r2, [r3, #80]	; 0x50
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	649a      	str	r2, [r3, #72]	; 0x48
	ptr->p_dot = ptr->q_dot = ptr->r_dot = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
	ptr->x_cmd = ptr->y_cmd = ptr->z_cmd = 0;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	669a      	str	r2, [r3, #104]	; 0x68
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	665a      	str	r2, [r3, #100]	; 0x64
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	661a      	str	r2, [r3, #96]	; 0x60
	ptr->x_dot_cmd = ptr->y_dot_cmd = ptr->z_dot_cmd = 0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	675a      	str	r2, [r3, #116]	; 0x74
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	671a      	str	r2, [r3, #112]	; 0x70
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	66da      	str	r2, [r3, #108]	; 0x6c
	ptr->x_dot_dot_cmd = ptr->y_dot_dot_cmd = ptr->z_dot_dot_cmd = 0;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	67da      	str	r2, [r3, #124]	; 0x7c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->psi_cmd = ptr->p_cmd = ptr->q_cmd = ptr->r_cmd = 0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptr->u1 = ptr->u2 = ptr->u3 = ptr->u4 = 0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptr->cmd_thrust[0] = 0;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = 0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = 0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = 0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ptr-> phib=ptr-> thetab=ptr-> psib=0;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
	...

08002460 <BodyRate>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_BodyRate */
void BodyRate(void *argument)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	parameters* ptr = argument;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */

  for(;;)
  {
		f32 p_error,q_error,r_error;
		p_error = ptr->p_cmd - ptr->p;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f7fe fb79 	bl	8000b70 <__aeabi_fsub>
 800247e:	4603      	mov	r3, r0
 8002480:	613b      	str	r3, [r7, #16]
		q_error = ptr->q_cmd - ptr->q;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7fe fb6e 	bl	8000b70 <__aeabi_fsub>
 8002494:	4603      	mov	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
		r_error = ptr->r_cmd - ptr->r;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f7fe fb63 	bl	8000b70 <__aeabi_fsub>
 80024aa:	4603      	mov	r3, r0
 80024ac:	60bb      	str	r3, [r7, #8]
		ptr->p_dot = kp_p * p_error;
 80024ae:	4930      	ldr	r1, [pc, #192]	; (8002570 <BodyRate+0x110>)
 80024b0:	6938      	ldr	r0, [r7, #16]
 80024b2:	f7fe fc67 	bl	8000d84 <__aeabi_fmul>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
		ptr->q_dot = kp_q * q_error;
 80024be:	492c      	ldr	r1, [pc, #176]	; (8002570 <BodyRate+0x110>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7fe fc5f 	bl	8000d84 <__aeabi_fmul>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58
		ptr->r_dot = kp_r * r_error;
 80024ce:	4929      	ldr	r1, [pc, #164]	; (8002574 <BodyRate+0x114>)
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7fe fc57 	bl	8000d84 <__aeabi_fmul>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c
		ptr->u2 = Ixx * ptr->p_dot;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd ffa0 	bl	8000428 <__aeabi_f2d>
 80024e8:	a31d      	add	r3, pc, #116	; (adr r3, 8002560 <BodyRate+0x100>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fd fff3 	bl	80004d8 <__aeabi_dmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	4618      	mov	r0, r3
 80024f8:	4621      	mov	r1, r4
 80024fa:	f7fe fae5 	bl	8000ac8 <__aeabi_d2f>
 80024fe:	4602      	mov	r2, r0
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		ptr->u3 = Iyy * ptr->q_dot;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ff8c 	bl	8000428 <__aeabi_f2d>
 8002510:	a313      	add	r3, pc, #76	; (adr r3, 8002560 <BodyRate+0x100>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fd ffdf 	bl	80004d8 <__aeabi_dmul>
 800251a:	4603      	mov	r3, r0
 800251c:	460c      	mov	r4, r1
 800251e:	4618      	mov	r0, r3
 8002520:	4621      	mov	r1, r4
 8002522:	f7fe fad1 	bl	8000ac8 <__aeabi_d2f>
 8002526:	4602      	mov	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		ptr->u4 = Izz * ptr->r_dot;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ff78 	bl	8000428 <__aeabi_f2d>
 8002538:	a30b      	add	r3, pc, #44	; (adr r3, 8002568 <BodyRate+0x108>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd ffcb 	bl	80004d8 <__aeabi_dmul>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	4618      	mov	r0, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f7fe fabd 	bl	8000ac8 <__aeabi_d2f>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		osDelay(20);
 8002556:	2014      	movs	r0, #20
 8002558:	f004 ff58 	bl	800740c <osDelay>
  {
 800255c:	e786      	b.n	800246c <BodyRate+0xc>
 800255e:	bf00      	nop
 8002560:	47ae147b 	.word	0x47ae147b
 8002564:	3fb47ae1 	.word	0x3fb47ae1
 8002568:	9142b303 	.word	0x9142b303
 800256c:	3f44e7ee 	.word	0x3f44e7ee
 8002570:	42a00000 	.word	0x42a00000
 8002574:	41700000 	.word	0x41700000

08002578 <DroneStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DroneStart */
void DroneStart(void *argument)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DroneStart */

	/*TO CALIBRATE DRONE MOTOR OR START*/
	u8 buffer[25] = {"Calibrate = 0#\nDirect Start = 1#\n"};
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <DroneStart+0x5c>)
 8002582:	f107 040c 	add.w	r4, r7, #12
 8002586:	461d      	mov	r5, r3
 8002588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002590:	c403      	stmia	r4!, {r0, r1}
 8002592:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fdd9 	bl	8000150 <strlen>
 800259e:	4603      	mov	r3, r0
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f107 010c 	add.w	r1, r7, #12
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <DroneStart+0x60>)
 80025ac:	f004 fb93 	bl	8006cd6 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd fdcb 	bl	8000150 <strlen>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b29a      	uxth	r2, r3
 80025be:	f107 010c 	add.w	r1, r7, #12
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	4804      	ldr	r0, [pc, #16]	; (80025d8 <DroneStart+0x60>)
 80025c8:	f004 fc1e 	bl	8006e08 <HAL_UART_Receive>
			break;
	default: vCalibrate_Motors();
		}
	vTaskDelete(NULL);
	*/
    osDelay(1);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f004 ff1d 	bl	800740c <osDelay>
 80025d2:	e7fb      	b.n	80025cc <DroneStart+0x54>
 80025d4:	0800d510 	.word	0x0800d510
 80025d8:	20003f60 	.word	0x20003f60

080025dc <MPU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU */
void MPU(void *argument)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU */
	parameters *ptr = argument;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	s32 x; u32 y;
	  	u32 tickzayat;
	  /* Infinite loop */
	  for(;;)
	  {
		tickzayat = osKernelGetTickCount();
 80025e8:	f004 fe3e 	bl	8007268 <osKernelGetTickCount>
 80025ec:	62b8      	str	r0, [r7, #40]	; 0x28

		Read_Accel_Values(ptr);
 80025ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f0:	f7fe fe66 	bl	80012c0 <Read_Accel_Values>

		Read_Gyro_Values(ptr,INTEGRAL_DT);
 80025f4:	490d      	ldr	r1, [pc, #52]	; (800262c <MPU+0x50>)
 80025f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f8:	f7fe fee6 	bl	80013c8 <Read_Gyro_Values>

		imu_Comp_Filter(ptr,INTEGRAL_DT);
 80025fc:	490b      	ldr	r1, [pc, #44]	; (800262c <MPU+0x50>)
 80025fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002600:	f7ff f8a6 	bl	8001750 <imu_Comp_Filter>

		fview(ptr->phi);
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fde3 	bl	80021d4 <fview>
		fview(ptr->theta);
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fdde 	bl	80021d4 <fview>
		fview(ptr->psi);
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fdd9 	bl	80021d4 <fview>
		osDelay(3);
 8002622:	2003      	movs	r0, #3
 8002624:	f004 fef2 	bl	800740c <osDelay>
		tickzayat = osKernelGetTickCount();
 8002628:	e7de      	b.n	80025e8 <MPU+0xc>
 800262a:	bf00      	nop
 800262c:	3ca3d70a 	.word	0x3ca3d70a

08002630 <PrintPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PrintPARAMS */
void PrintPARAMS(void *argument)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b08b      	sub	sp, #44	; 0x2c
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PrintPARAMS */
	uint8_t buffer[25];
	parameters *ptr = argument;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  {
		/***********************************/
		/*TO READ FORCE VALS IN WORLD FRAME*/
		/***********************************/

sprintf((char*)buffer, "Value of F1 = %f\t", ptr->cmd_thrust[0]);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd fef0 	bl	8000428 <__aeabi_f2d>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	f107 0008 	add.w	r0, r7, #8
 8002650:	461a      	mov	r2, r3
 8002652:	4623      	mov	r3, r4
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <PrintPARAMS+0xfc>)
 8002656:	f007 ff01 	bl	800a45c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd fd76 	bl	8000150 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	b29a      	uxth	r2, r3
 8002668:	f107 0108 	add.w	r1, r7, #8
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	482f      	ldr	r0, [pc, #188]	; (8002730 <PrintPARAMS+0x100>)
 8002672:	f004 fb30 	bl	8006cd6 <HAL_UART_Transmit>

sprintf((char*)buffer, "Value of F2 = %f\t", ptr->cmd_thrust[1]);
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fed3 	bl	8000428 <__aeabi_f2d>
 8002682:	4603      	mov	r3, r0
 8002684:	460c      	mov	r4, r1
 8002686:	f107 0008 	add.w	r0, r7, #8
 800268a:	461a      	mov	r2, r3
 800268c:	4623      	mov	r3, r4
 800268e:	4929      	ldr	r1, [pc, #164]	; (8002734 <PrintPARAMS+0x104>)
 8002690:	f007 fee4 	bl	800a45c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fd59 	bl	8000150 <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f107 0108 	add.w	r1, r7, #8
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	4821      	ldr	r0, [pc, #132]	; (8002730 <PrintPARAMS+0x100>)
 80026ac:	f004 fb13 	bl	8006cd6 <HAL_UART_Transmit>

sprintf((char*)buffer, "Value of F3 = %f\n", ptr->cmd_thrust[2]);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd feb6 	bl	8000428 <__aeabi_f2d>
 80026bc:	4603      	mov	r3, r0
 80026be:	460c      	mov	r4, r1
 80026c0:	f107 0008 	add.w	r0, r7, #8
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	491b      	ldr	r1, [pc, #108]	; (8002738 <PrintPARAMS+0x108>)
 80026ca:	f007 fec7 	bl	800a45c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fd3c 	bl	8000150 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	b29a      	uxth	r2, r3
 80026dc:	f107 0108 	add.w	r1, r7, #8
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	4812      	ldr	r0, [pc, #72]	; (8002730 <PrintPARAMS+0x100>)
 80026e6:	f004 faf6 	bl	8006cd6 <HAL_UART_Transmit>

sprintf((char*)buffer, "Value of F4 = %f\n", ptr->cmd_thrust[3]);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fe99 	bl	8000428 <__aeabi_f2d>
 80026f6:	4603      	mov	r3, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	f107 0008 	add.w	r0, r7, #8
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	490e      	ldr	r1, [pc, #56]	; (800273c <PrintPARAMS+0x10c>)
 8002704:	f007 feaa 	bl	800a45c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fd1f 	bl	8000150 <strlen>
 8002712:	4603      	mov	r3, r0
 8002714:	b29a      	uxth	r2, r3
 8002716:	f107 0108 	add.w	r1, r7, #8
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	4804      	ldr	r0, [pc, #16]	; (8002730 <PrintPARAMS+0x100>)
 8002720:	f004 fad9 	bl	8006cd6 <HAL_UART_Transmit>

	osDelay(40);
 8002724:	2028      	movs	r0, #40	; 0x28
 8002726:	f004 fe71 	bl	800740c <osDelay>
sprintf((char*)buffer, "Value of F1 = %f\t", ptr->cmd_thrust[0]);
 800272a:	e787      	b.n	800263c <PrintPARAMS+0xc>
 800272c:	0800d534 	.word	0x0800d534
 8002730:	20003f60 	.word	0x20003f60
 8002734:	0800d548 	.word	0x0800d548
 8002738:	0800d55c 	.word	0x0800d55c
 800273c:	0800d570 	.word	0x0800d570

08002740 <insertPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_insertPARAMS */
void insertPARAMS(void *argument)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b08d      	sub	sp, #52	; 0x34
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN insertPARAMS */
	parameters *ptr = argument;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t buffer[25];
	uint8_t ok[] = {"OK"};
 800274c:	4abc      	ldr	r2, [pc, #752]	; (8002a40 <insertPARAMS+0x300>)
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	4611      	mov	r1, r2
 8002756:	8019      	strh	r1, [r3, #0]
 8002758:	3302      	adds	r3, #2
 800275a:	0c12      	lsrs	r2, r2, #16
 800275c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		/*TO INSERT X Y Z TARGET TO PID BLK*/
	strcpy((char*)buffer, "Insert x\n");
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4ab8      	ldr	r2, [pc, #736]	; (8002a44 <insertPARAMS+0x304>)
 8002764:	ca07      	ldmia	r2, {r0, r1, r2}
 8002766:	c303      	stmia	r3!, {r0, r1}
 8002768:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fcee 	bl	8000150 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	b29a      	uxth	r2, r3
 8002778:	f107 0110 	add.w	r1, r7, #16
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	48b1      	ldr	r0, [pc, #708]	; (8002a48 <insertPARAMS+0x308>)
 8002782:	f004 faa8 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fd68 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fcdb 	bl	8000150 <strlen>
 800279a:	4603      	mov	r3, r0
 800279c:	b29a      	uxth	r2, r3
 800279e:	f107 010c 	add.w	r1, r7, #12
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	48a8      	ldr	r0, [pc, #672]	; (8002a48 <insertPARAMS+0x308>)
 80027a8:	f004 fa95 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->x_cmd = atoi((char*)buffer);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4618      	mov	r0, r3
 80027b2:	f007 f9c3 	bl	8009b3c <atoi>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fa8f 	bl	8000cdc <__aeabi_i2f>
 80027be:	4602      	mov	r2, r0
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
	strcpy((char*)buffer, "Insert x dot\n");
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4aa0      	ldr	r2, [pc, #640]	; (8002a4c <insertPARAMS+0x30c>)
 80027ca:	461c      	mov	r4, r3
 80027cc:	4613      	mov	r3, r2
 80027ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d0:	c407      	stmia	r4!, {r0, r1, r2}
 80027d2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fcb9 	bl	8000150 <strlen>
 80027de:	4603      	mov	r3, r0
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f107 0110 	add.w	r1, r7, #16
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	4897      	ldr	r0, [pc, #604]	; (8002a48 <insertPARAMS+0x308>)
 80027ec:	f004 fa73 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fd33 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fca6 	bl	8000150 <strlen>
 8002804:	4603      	mov	r3, r0
 8002806:	b29a      	uxth	r2, r3
 8002808:	f107 010c 	add.w	r1, r7, #12
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	488d      	ldr	r0, [pc, #564]	; (8002a48 <insertPARAMS+0x308>)
 8002812:	f004 fa60 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->x_dot_cmd = atoi((char*)buffer);
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f007 f98e 	bl	8009b3c <atoi>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fa5a 	bl	8000cdc <__aeabi_i2f>
 8002828:	4602      	mov	r2, r0
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	66da      	str	r2, [r3, #108]	; 0x6c
	strcpy((char*)buffer, "Insert y\n");
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4a87      	ldr	r2, [pc, #540]	; (8002a50 <insertPARAMS+0x310>)
 8002834:	ca07      	ldmia	r2, {r0, r1, r2}
 8002836:	c303      	stmia	r3!, {r0, r1}
 8002838:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fc86 	bl	8000150 <strlen>
 8002844:	4603      	mov	r3, r0
 8002846:	b29a      	uxth	r2, r3
 8002848:	f107 0110 	add.w	r1, r7, #16
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	487d      	ldr	r0, [pc, #500]	; (8002a48 <insertPARAMS+0x308>)
 8002852:	f004 fa40 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fd00 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fc73 	bl	8000150 <strlen>
 800286a:	4603      	mov	r3, r0
 800286c:	b29a      	uxth	r2, r3
 800286e:	f107 010c 	add.w	r1, r7, #12
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	4874      	ldr	r0, [pc, #464]	; (8002a48 <insertPARAMS+0x308>)
 8002878:	f004 fa2d 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->y_cmd = atoi(buffer);
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f007 f95b 	bl	8009b3c <atoi>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fa27 	bl	8000cdc <__aeabi_i2f>
 800288e:	4602      	mov	r2, r0
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	665a      	str	r2, [r3, #100]	; 0x64
	strcpy(buffer, "Insert y dot\n");
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <insertPARAMS+0x314>)
 800289a:	461c      	mov	r4, r3
 800289c:	4613      	mov	r3, r2
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	c407      	stmia	r4!, {r0, r1, r2}
 80028a2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fc51 	bl	8000150 <strlen>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f107 0110 	add.w	r1, r7, #16
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	4863      	ldr	r0, [pc, #396]	; (8002a48 <insertPARAMS+0x308>)
 80028bc:	f004 fa0b 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive(buffer);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fccb 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc3e 	bl	8000150 <strlen>
 80028d4:	4603      	mov	r3, r0
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	f107 010c 	add.w	r1, r7, #12
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	4859      	ldr	r0, [pc, #356]	; (8002a48 <insertPARAMS+0x308>)
 80028e2:	f004 f9f8 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->y_dot_cmd = atoi(buffer);
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	4618      	mov	r0, r3
 80028ec:	f007 f926 	bl	8009b3c <atoi>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f9f2 	bl	8000cdc <__aeabi_i2f>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	671a      	str	r2, [r3, #112]	; 0x70
	strcpy(buffer, "Insert z\n");
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <insertPARAMS+0x318>)
 8002904:	ca07      	ldmia	r2, {r0, r1, r2}
 8002906:	c303      	stmia	r3!, {r0, r1}
 8002908:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fc1e 	bl	8000150 <strlen>
 8002914:	4603      	mov	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	f107 0110 	add.w	r1, r7, #16
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	4849      	ldr	r0, [pc, #292]	; (8002a48 <insertPARAMS+0x308>)
 8002922:	f004 f9d8 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive(buffer);
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc98 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fc0b 	bl	8000150 <strlen>
 800293a:	4603      	mov	r3, r0
 800293c:	b29a      	uxth	r2, r3
 800293e:	f107 010c 	add.w	r1, r7, #12
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	4840      	ldr	r0, [pc, #256]	; (8002a48 <insertPARAMS+0x308>)
 8002948:	f004 f9c5 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->z_cmd = atoi(buffer);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f007 f8f3 	bl	8009b3c <atoi>
 8002956:	4603      	mov	r3, r0
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f9bf 	bl	8000cdc <__aeabi_i2f>
 800295e:	4602      	mov	r2, r0
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	669a      	str	r2, [r3, #104]	; 0x68
	strcpy(buffer, "Insert z dot\n");
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <insertPARAMS+0x31c>)
 800296a:	461c      	mov	r4, r3
 800296c:	4613      	mov	r3, r2
 800296e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002970:	c407      	stmia	r4!, {r0, r1, r2}
 8002972:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fbe9 	bl	8000150 <strlen>
 800297e:	4603      	mov	r3, r0
 8002980:	b29a      	uxth	r2, r3
 8002982:	f107 0110 	add.w	r1, r7, #16
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	482f      	ldr	r0, [pc, #188]	; (8002a48 <insertPARAMS+0x308>)
 800298c:	f004 f9a3 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive(buffer);
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc63 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fbd6 	bl	8000150 <strlen>
 80029a4:	4603      	mov	r3, r0
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	f107 010c 	add.w	r1, r7, #12
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	4825      	ldr	r0, [pc, #148]	; (8002a48 <insertPARAMS+0x308>)
 80029b2:	f004 f990 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->z_dot_cmd = atoi(buffer);
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4618      	mov	r0, r3
 80029bc:	f007 f8be 	bl	8009b3c <atoi>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f98a 	bl	8000cdc <__aeabi_i2f>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	675a      	str	r2, [r3, #116]	; 0x74
	strcpy(buffer, "Insert psi\n");
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <insertPARAMS+0x320>)
 80029d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80029da:	f107 0310 	add.w	r3, r7, #16
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fbb6 	bl	8000150 <strlen>
 80029e4:	4603      	mov	r3, r0
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f107 0110 	add.w	r1, r7, #16
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	4815      	ldr	r0, [pc, #84]	; (8002a48 <insertPARAMS+0x308>)
 80029f2:	f004 f970 	bl	8006cd6 <HAL_UART_Transmit>
	string_receive(buffer);
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fc30 	bl	8002260 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fba3 	bl	8000150 <strlen>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f107 010c 	add.w	r1, r7, #12
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <insertPARAMS+0x308>)
 8002a18:	f004 f95d 	bl	8006cd6 <HAL_UART_Transmit>

	ptr->psi_cmd = atoi(buffer);
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f007 f88b 	bl	8009b3c <atoi>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f957 	bl	8000cdc <__aeabi_i2f>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	osDelay(60000);
 8002a36:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002a3a:	f004 fce7 	bl	800740c <osDelay>
  {
 8002a3e:	e68e      	b.n	800275e <insertPARAMS+0x1e>
 8002a40:	0800d5e4 	.word	0x0800d5e4
 8002a44:	0800d584 	.word	0x0800d584
 8002a48:	20003f60 	.word	0x20003f60
 8002a4c:	0800d590 	.word	0x0800d590
 8002a50:	0800d5a0 	.word	0x0800d5a0
 8002a54:	0800d5ac 	.word	0x0800d5ac
 8002a58:	0800d5bc 	.word	0x0800d5bc
 8002a5c:	0800d5c8 	.word	0x0800d5c8
 8002a60:	0800d5d8 	.word	0x0800d5d8
 8002a64:	00000000 	.word	0x00000000

08002a68 <outputTHRUST>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_outputTHRUST */
void outputTHRUST(void *argument)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b08d      	sub	sp, #52	; 0x34
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN outputTHRUST */
	parameters *ptr = argument;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  for(;;)
  {

	f32 l = L/1.4142135623;
 8002a74:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <outputTHRUST+0x228>)
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
	f32 t1 = ptr->u2/ l;
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fa33 	bl	8000eec <__aeabi_fdiv>
 8002a86:	4603      	mov	r3, r0
 8002a88:	623b      	str	r3, [r7, #32]
	f32 t2 = ptr->u3 / l;
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fa2a 	bl	8000eec <__aeabi_fdiv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	61fb      	str	r3, [r7, #28]
	f32 t3 = - ptr->u4/ k_thrust;
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002aa2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fcbe 	bl	8000428 <__aeabi_f2d>
 8002aac:	a376      	add	r3, pc, #472	; (adr r3, 8002c88 <outputTHRUST+0x220>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fe3b 	bl	800072c <__aeabi_ddiv>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	460c      	mov	r4, r1
 8002aba:	4618      	mov	r0, r3
 8002abc:	4621      	mov	r1, r4
 8002abe:	f7fe f803 	bl	8000ac8 <__aeabi_d2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]
	f32 t4 = ptr->u1;
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	617b      	str	r3, [r7, #20]
	ptr->cmd_thrust[0] = (t1 + t2 + t3 + t4)/4.f; // front left
 8002ace:	69f9      	ldr	r1, [r7, #28]
 8002ad0:	6a38      	ldr	r0, [r7, #32]
 8002ad2:	f7fe f84f 	bl	8000b74 <__addsf3>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f84a 	bl	8000b74 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	6979      	ldr	r1, [r7, #20]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe f845 	bl	8000b74 <__addsf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe f9fb 	bl	8000eec <__aeabi_fdiv>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = (-t1 + t2 - t3 + t4)/4.f; // front right
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	69f8      	ldr	r0, [r7, #28]
 8002b04:	f7fe f834 	bl	8000b70 <__aeabi_fsub>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe f82f 	bl	8000b70 <__aeabi_fsub>
 8002b12:	4603      	mov	r3, r0
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f82c 	bl	8000b74 <__addsf3>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f9e2 	bl	8000eec <__aeabi_fdiv>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = (t1 - t2 - t3 + t4)/4.f ; // rear left
 8002b32:	69f9      	ldr	r1, [r7, #28]
 8002b34:	6a38      	ldr	r0, [r7, #32]
 8002b36:	f7fe f81b 	bl	8000b70 <__aeabi_fsub>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f816 	bl	8000b70 <__aeabi_fsub>
 8002b44:	4603      	mov	r3, r0
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f813 	bl	8000b74 <__addsf3>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f9c9 	bl	8000eec <__aeabi_fdiv>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = (-t1 - t2 + t3 + t4)/4.f; // rear right
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd ffff 	bl	8000b70 <__aeabi_fsub>
 8002b72:	4603      	mov	r3, r0
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fffc 	bl	8000b74 <__addsf3>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	6979      	ldr	r1, [r7, #20]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fff7 	bl	8000b74 <__addsf3>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe f9ad 	bl	8000eec <__aeabi_fdiv>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/*************/
	/*PWM MAPPING*/
	/*************/
	u8 i;
	u16 speed_pwm[4];
	for(i=0 ; i<4;i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ba2:	e067      	b.n	8002c74 <outputTHRUST+0x20c>
	{
		if (ptr->cmd_thrust[i] < F_min) ptr->cmd_thrust[i]=F_min;
 8002ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	3328      	adds	r3, #40	; 0x28
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4938      	ldr	r1, [pc, #224]	; (8002c94 <outputTHRUST+0x22c>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fa83 	bl	80010c0 <__aeabi_fcmplt>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <outputTHRUST+0x168>
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc6:	3328      	adds	r3, #40	; 0x28
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a31      	ldr	r2, [pc, #196]	; (8002c94 <outputTHRUST+0x22c>)
 8002bce:	605a      	str	r2, [r3, #4]
		if (ptr->cmd_thrust[i] > F_max) ptr->cmd_thrust[i]=F_max;
 8002bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	3328      	adds	r3, #40	; 0x28
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	492e      	ldr	r1, [pc, #184]	; (8002c98 <outputTHRUST+0x230>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fa8b 	bl	80010fc <__aeabi_fcmpgt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <outputTHRUST+0x194>
 8002bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	3328      	adds	r3, #40	; 0x28
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <outputTHRUST+0x230>)
 8002bfa:	605a      	str	r2, [r3, #4]
		speed_pwm[i] = (1/(F_max-F_min))*ptr->cmd_thrust[i]*500.0;
 8002bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c02:	3328      	adds	r3, #40	; 0x28
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f8b8 	bl	8000d84 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc06 	bl	8000428 <__aeabi_f2d>
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <outputTHRUST+0x234>)
 8002c22:	f7fd fc59 	bl	80004d8 <__aeabi_dmul>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd ff27 	bl	8000a88 <__aeabi_d2uiz>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	0063      	lsls	r3, r4, #1
 8002c40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002c44:	440b      	add	r3, r1
 8002c46:	f823 2c24 	strh.w	r2, [r3, #-36]
		PWM(speed_pwm[i],i+1);
 8002c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c54:	4413      	add	r3, r2
 8002c56:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f7fe fabd 	bl	80011e4 <PWM>
	for(i=0 ; i<4;i++)
 8002c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d993      	bls.n	8002ba4 <outputTHRUST+0x13c>
	}
    osDelay(20);
 8002c7c:	2014      	movs	r0, #20
 8002c7e:	f004 fbc5 	bl	800740c <osDelay>
  {
 8002c82:	e6f7      	b.n	8002a74 <outputTHRUST+0xc>
 8002c84:	f3af 8000 	nop.w
 8002c88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c8c:	3f90624d 	.word	0x3f90624d
 8002c90:	3f3504f3 	.word	0x3f3504f3
 8002c94:	c0400000 	.word	0xc0400000
 8002c98:	44160000 	.word	0x44160000
 8002c9c:	407f4000 	.word	0x407f4000

08002ca0 <RollPitch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RollPitch */
void RollPitch(void *argument)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b092      	sub	sp, #72	; 0x48
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RollPitch */
	parameters* ptr = argument;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {
	f32 b_x_dot_cmd, b_y_dot_cmd, taw=1/kp_bank;
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	643b      	str	r3, [r7, #64]	; 0x40
	f32 R11 = 1;
 8002cb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 R12 = sin(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbb3 	bl	8000428 <__aeabi_f2d>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4621      	mov	r1, r4
 8002cca:	f009 f875 	bl	800bdb8 <sin>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fba6 	bl	8000428 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f009 f868 	bl	800bdb8 <sin>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fbf2 	bl	80004d8 <__aeabi_dmul>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	4625      	mov	r5, r4
 8002cfa:	461c      	mov	r4, r3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fb91 	bl	8000428 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f009 f81d 	bl	800bd4c <cos>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fd07 	bl	800072c <__aeabi_ddiv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	4618      	mov	r0, r3
 8002d24:	4621      	mov	r1, r4
 8002d26:	f7fd fecf 	bl	8000ac8 <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
	f32 R13= cos(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fb78 	bl	8000428 <__aeabi_f2d>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4621      	mov	r1, r4
 8002d40:	f009 f804 	bl	800bd4c <cos>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fb6b 	bl	8000428 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f009 f82d 	bl	800bdb8 <sin>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fbb7 	bl	80004d8 <__aeabi_dmul>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	4625      	mov	r5, r4
 8002d70:	461c      	mov	r4, r3
 8002d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fb56 	bl	8000428 <__aeabi_f2d>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f008 ffe2 	bl	800bd4c <cos>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fccc 	bl	800072c <__aeabi_ddiv>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	f7fd fe94 	bl	8000ac8 <__aeabi_d2f>
 8002da0:	4603      	mov	r3, r0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
	f32 R21 = 0;
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
	f32 R22 = cos(ptr->phi);
 8002daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fb3a 	bl	8000428 <__aeabi_f2d>
 8002db4:	4603      	mov	r3, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	f008 ffc6 	bl	800bd4c <cos>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	f7fd fe7e 	bl	8000ac8 <__aeabi_d2f>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	f32 R23= -sin(ptr->phi);
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb27 	bl	8000428 <__aeabi_f2d>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	4618      	mov	r0, r3
 8002de0:	4621      	mov	r1, r4
 8002de2:	f008 ffe9 	bl	800bdb8 <sin>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	4618      	mov	r0, r3
 8002dec:	4621      	mov	r1, r4
 8002dee:	f7fd fe6b 	bl	8000ac8 <__aeabi_d2f>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 R31 = 0;
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
	f32 R32 = sin(ptr->phi) / cos(ptr->theta);
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fb0f 	bl	8000428 <__aeabi_f2d>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4621      	mov	r1, r4
 8002e12:	f008 ffd1 	bl	800bdb8 <sin>
 8002e16:	4604      	mov	r4, r0
 8002e18:	460d      	mov	r5, r1
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb02 	bl	8000428 <__aeabi_f2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f008 ff8e 	bl	800bd4c <cos>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd fc78 	bl	800072c <__aeabi_ddiv>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4618      	mov	r0, r3
 8002e42:	4621      	mov	r1, r4
 8002e44:	f7fd fe40 	bl	8000ac8 <__aeabi_d2f>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	623b      	str	r3, [r7, #32]
	f32 R33 = cos(ptr->phi) / cos(ptr->theta);
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fae9 	bl	8000428 <__aeabi_f2d>
 8002e56:	4603      	mov	r3, r0
 8002e58:	460c      	mov	r4, r1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f008 ff75 	bl	800bd4c <cos>
 8002e62:	4604      	mov	r4, r0
 8002e64:	460d      	mov	r5, r1
 8002e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fadc 	bl	8000428 <__aeabi_f2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f008 ff68 	bl	800bd4c <cos>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd fc52 	bl	800072c <__aeabi_ddiv>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	4621      	mov	r1, r4
 8002e90:	f7fd fe1a 	bl	8000ac8 <__aeabi_d2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	61fb      	str	r3, [r7, #28]
	f32 R13_cmd= ptr->x_dot_dot_cmd*m/ptr->u1;
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fac3 	bl	8000428 <__aeabi_f2d>
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <RollPitch+0x334>)
 8002ea8:	f7fd fb16 	bl	80004d8 <__aeabi_dmul>
 8002eac:	4603      	mov	r3, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	4625      	mov	r5, r4
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fab4 	bl	8000428 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fc30 	bl	800072c <__aeabi_ddiv>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	f7fd fdf8 	bl	8000ac8 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
	f32 R23_cmd= ptr->y_dot_dot_cmd*m/ptr->u1;
 8002edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd faa1 	bl	8000428 <__aeabi_f2d>
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <RollPitch+0x334>)
 8002eec:	f7fd faf4 	bl	80004d8 <__aeabi_dmul>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4625      	mov	r5, r4
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fa92 	bl	8000428 <__aeabi_f2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd fc0e 	bl	800072c <__aeabi_ddiv>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	4618      	mov	r0, r3
 8002f16:	4621      	mov	r1, r4
 8002f18:	f7fd fdd6 	bl	8000ac8 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	617b      	str	r3, [r7, #20]
	b_x_dot_cmd= (R13-R13_cmd)/taw;
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f24:	f7fd fe24 	bl	8000b70 <__aeabi_fsub>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd ffdd 	bl	8000eec <__aeabi_fdiv>
 8002f32:	4603      	mov	r3, r0
 8002f34:	613b      	str	r3, [r7, #16]
	b_y_dot_cmd= (R23-R23_cmd)/taw;
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3a:	f7fd fe19 	bl	8000b70 <__aeabi_fsub>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd ffd2 	bl	8000eec <__aeabi_fdiv>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]
	ptr->p_cmd = 1/R33 * (R21*b_x_dot_cmd - R11*b_y_dot_cmd);
 8002f4c:	69f9      	ldr	r1, [r7, #28]
 8002f4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f52:	f7fd ffcb 	bl	8000eec <__aeabi_fdiv>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461c      	mov	r4, r3
 8002f5a:	6939      	ldr	r1, [r7, #16]
 8002f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5e:	f7fd ff11 	bl	8000d84 <__aeabi_fmul>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461d      	mov	r5, r3
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f6a:	f7fd ff0b 	bl	8000d84 <__aeabi_fmul>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4619      	mov	r1, r3
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7fd fdfc 	bl	8000b70 <__aeabi_fsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fd ff01 	bl	8000d84 <__aeabi_fmul>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ptr->q_cmd = 1/R33 * (R22*b_x_dot_cmd - R12*b_y_dot_cmd);
 8002f8c:	69f9      	ldr	r1, [r7, #28]
 8002f8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f92:	f7fd ffab 	bl	8000eec <__aeabi_fdiv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461c      	mov	r4, r3
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f9e:	f7fd fef1 	bl	8000d84 <__aeabi_fmul>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002faa:	f7fd feeb 	bl	8000d84 <__aeabi_fmul>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7fd fddc 	bl	8000b70 <__aeabi_fsub>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7fd fee1 	bl	8000d84 <__aeabi_fmul>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	osDelay(20);
 8002fcc:	2014      	movs	r0, #20
 8002fce:	f004 fa1d 	bl	800740c <osDelay>
  {
 8002fd2:	e66b      	b.n	8002cac <RollPitch+0xc>
 8002fd4:	3ff80000 	.word	0x3ff80000

08002fd8 <YawCONTROLLER>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_YawCONTROLLER */
void YawCONTROLLER(void *argument)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YawCONTROLLER */
	parameters* ptr = argument;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7fd fdbd 	bl	8000b70 <__aeabi_fsub>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fdba 	bl	8000b74 <__addsf3>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	osDelay(20);
 800300a:	2014      	movs	r0, #20
 800300c:	f004 f9fe 	bl	800740c <osDelay>
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 8003010:	e7e8      	b.n	8002fe4 <YawCONTROLLER+0xc>
 8003012:	0000      	movs	r0, r0
 8003014:	0000      	movs	r0, r0
	...

08003018 <Altitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Altitude */
void Altitude(void *argument)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Altitude */
	parameters* ptr = argument;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	f32 R33 = cos(ptr->phi)/cos(ptr->theta);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd f9fd 	bl	8000428 <__aeabi_f2d>
 800302e:	4603      	mov	r3, r0
 8003030:	460c      	mov	r4, r1
 8003032:	4618      	mov	r0, r3
 8003034:	4621      	mov	r1, r4
 8003036:	f008 fe89 	bl	800bd4c <cos>
 800303a:	4604      	mov	r4, r0
 800303c:	460d      	mov	r5, r1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd f9f0 	bl	8000428 <__aeabi_f2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f008 fe7c 	bl	800bd4c <cos>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	f7fd fb66 	bl	800072c <__aeabi_ddiv>
 8003060:	4603      	mov	r3, r0
 8003062:	460c      	mov	r4, r1
 8003064:	4618      	mov	r0, r3
 8003066:	4621      	mov	r1, r4
 8003068:	f7fd fd2e 	bl	8000ac8 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	60bb      	str	r3, [r7, #8]
	ptr->z_dot_dot_cmd= kp_z*(ptr->z_cmd- ptr->z) + kd_z*(ptr->z_dot_cmd-ptr->z_dot);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fd fd78 	bl	8000b70 <__aeabi_fsub>
 8003080:	4603      	mov	r3, r0
 8003082:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe7c 	bl	8000d84 <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	461c      	mov	r4, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fd fd68 	bl	8000b70 <__aeabi_fsub>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <Altitude+0x110>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fe6d 	bl	8000d84 <__aeabi_fmul>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4619      	mov	r1, r3
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7fd fd60 	bl	8000b74 <__addsf3>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ptr->u1 = m * (ptr->z_dot_dot_cmd - g)/R33;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f9af 	bl	8000428 <__aeabi_f2d>
 80030ca:	a315      	add	r3, pc, #84	; (adr r3, 8003120 <Altitude+0x108>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd f84a 	bl	8000168 <__aeabi_dsub>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	4618      	mov	r0, r3
 80030da:	4621      	mov	r1, r4
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <Altitude+0x114>)
 80030e2:	f7fd f9f9 	bl	80004d8 <__aeabi_dmul>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	4625      	mov	r5, r4
 80030ec:	461c      	mov	r4, r3
 80030ee:	68b8      	ldr	r0, [r7, #8]
 80030f0:	f7fd f99a 	bl	8000428 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd fb16 	bl	800072c <__aeabi_ddiv>
 8003100:	4603      	mov	r3, r0
 8003102:	460c      	mov	r4, r1
 8003104:	4618      	mov	r0, r3
 8003106:	4621      	mov	r1, r4
 8003108:	f7fd fcde 	bl	8000ac8 <__aeabi_d2f>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	osDelay(20);
 8003114:	2014      	movs	r0, #20
 8003116:	f004 f979 	bl	800740c <osDelay>
  {
 800311a:	e783      	b.n	8003024 <Altitude+0xc>
 800311c:	f3af 8000 	nop.w
 8003120:	76c8b439 	.word	0x76c8b439
 8003124:	40239fbe 	.word	0x40239fbe
 8003128:	41400000 	.word	0x41400000
 800312c:	3ff80000 	.word	0x3ff80000

08003130 <lateral>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lateral */
void lateral(void *argument)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lateral */
	parameters* ptr = argument;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7fd fd12 	bl	8000b70 <__aeabi_fsub>
 800314c:	4603      	mov	r3, r0
 800314e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fe16 	bl	8000d84 <__aeabi_fmul>
 8003158:	4603      	mov	r3, r0
 800315a:	461c      	mov	r4, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7fd fd02 	bl	8000b70 <__aeabi_fsub>
 800316c:	4603      	mov	r3, r0
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <lateral+0xac>)
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fe07 	bl	8000d84 <__aeabi_fmul>
 8003176:	4603      	mov	r3, r0
 8003178:	4619      	mov	r1, r3
 800317a:	4620      	mov	r0, r4
 800317c:	f7fd fcfa 	bl	8000b74 <__addsf3>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->y_dot_dot_cmd= kp_xy*(ptr->y_cmd- ptr->z) + kd_xy*(ptr->y_dot_cmd-ptr->y_dot);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7fd fcec 	bl	8000b70 <__aeabi_fsub>
 8003198:	4603      	mov	r3, r0
 800319a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fdf0 	bl	8000d84 <__aeabi_fmul>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461c      	mov	r4, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7fd fcdc 	bl	8000b70 <__aeabi_fsub>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <lateral+0xac>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fde1 	bl	8000d84 <__aeabi_fmul>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4619      	mov	r1, r3
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7fd fcd4 	bl	8000b74 <__addsf3>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	67da      	str	r2, [r3, #124]	; 0x7c

	osDelay(20);
 80031d4:	2014      	movs	r0, #20
 80031d6:	f004 f919 	bl	800740c <osDelay>
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 80031da:	e7af      	b.n	800313c <lateral+0xc>
 80031dc:	41400000 	.word	0x41400000

080031e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031f2:	f001 f88f 	bl	8004314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40000800 	.word	0x40000800

08003204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <Quaternion>:
        sqrt = ( number/temp + temp) / 2;
    }
return sqrt;
}*/
void Quaternion(f32 *q, f32 *euler)
{
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]


	euler[0]/=2;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fe61 	bl	8000eec <__aeabi_fdiv>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
	euler[1]/=2;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3304      	adds	r3, #4
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1d1e      	adds	r6, r3, #4
 800323c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003240:	4610      	mov	r0, r2
 8003242:	f7fd fe53 	bl	8000eec <__aeabi_fdiv>
 8003246:	4603      	mov	r3, r0
 8003248:	6033      	str	r3, [r6, #0]
	euler[2]/=2;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3308      	adds	r3, #8
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f103 0608 	add.w	r6, r3, #8
 8003256:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800325a:	4610      	mov	r0, r2
 800325c:	f7fd fe46 	bl	8000eec <__aeabi_fdiv>
 8003260:	4603      	mov	r3, r0
 8003262:	6033      	str	r3, [r6, #0]
	euler[0]*=0.0174532;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f8dd 	bl	8000428 <__aeabi_f2d>
 800326e:	a3d6      	add	r3, pc, #856	; (adr r3, 80035c8 <Quaternion+0x3b8>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f930 	bl	80004d8 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f7fd fc22 	bl	8000ac8 <__aeabi_d2f>
 8003284:	4602      	mov	r2, r0
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]
	euler[1]*=0.0174532;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f8c9 	bl	8000428 <__aeabi_f2d>
 8003296:	a3cc      	add	r3, pc, #816	; (adr r3, 80035c8 <Quaternion+0x3b8>)
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f7fd f91c 	bl	80004d8 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	1d1e      	adds	r6, r3, #4
 80032ac:	4608      	mov	r0, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	f7fd fc0a 	bl	8000ac8 <__aeabi_d2f>
 80032b4:	4603      	mov	r3, r0
 80032b6:	6033      	str	r3, [r6, #0]
	euler[2]*=0.0174532;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f8b2 	bl	8000428 <__aeabi_f2d>
 80032c4:	a3c0      	add	r3, pc, #768	; (adr r3, 80035c8 <Quaternion+0x3b8>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fd f905 	bl	80004d8 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f103 0608 	add.w	r6, r3, #8
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	f7fd fbf2 	bl	8000ac8 <__aeabi_d2f>
 80032e4:	4603      	mov	r3, r0
 80032e6:	6033      	str	r3, [r6, #0]
	q[0] = cos(euler[0]) * cos(euler[1]) * cos(euler[2])   + sin(euler[0])  * sin(euler[1]) * sin(euler[2]);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f89b 	bl	8000428 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	f008 fd27 	bl	800bd4c <cos>
 80032fe:	4680      	mov	r8, r0
 8003300:	4689      	mov	r9, r1
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f88d 	bl	8000428 <__aeabi_f2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f008 fd19 	bl	800bd4c <cos>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4640      	mov	r0, r8
 8003320:	4649      	mov	r1, r9
 8003322:	f7fd f8d9 	bl	80004d8 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f877 	bl	8000428 <__aeabi_f2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	f008 fd03 	bl	800bd4c <cos>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fd f8c3 	bl	80004d8 <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f862 	bl	8000428 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f008 fd24 	bl	800bdb8 <sin>
 8003370:	4682      	mov	sl, r0
 8003372:	468b      	mov	fp, r1
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f854 	bl	8000428 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f008 fd16 	bl	800bdb8 <sin>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4650      	mov	r0, sl
 8003392:	4659      	mov	r1, fp
 8003394:	f7fd f8a0 	bl	80004d8 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4692      	mov	sl, r2
 800339e:	469b      	mov	fp, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f83e 	bl	8000428 <__aeabi_f2d>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f008 fd00 	bl	800bdb8 <sin>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4650      	mov	r0, sl
 80033be:	4659      	mov	r1, fp
 80033c0:	f7fd f88a 	bl	80004d8 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4640      	mov	r0, r8
 80033ca:	4649      	mov	r1, r9
 80033cc:	f7fc fece 	bl	800016c <__adddf3>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fb76 	bl	8000ac8 <__aeabi_d2f>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
	q[1] =-cos(euler[0]) * sin(euler[1]) * sin(euler[2])   + cos(euler[1]) * cos(euler[2])   * sin(euler[0]);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f81e 	bl	8000428 <__aeabi_f2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f008 fcaa 	bl	800bd4c <cos>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4614      	mov	r4, r2
 80033fe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	3304      	adds	r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f80d 	bl	8000428 <__aeabi_f2d>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f008 fccf 	bl	800bdb8 <sin>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4620      	mov	r0, r4
 8003420:	4629      	mov	r1, r5
 8003422:	f7fd f859 	bl	80004d8 <__aeabi_dmul>
 8003426:	4603      	mov	r3, r0
 8003428:	460c      	mov	r4, r1
 800342a:	4625      	mov	r5, r4
 800342c:	461c      	mov	r4, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fc fff7 	bl	8000428 <__aeabi_f2d>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	f008 fcb9 	bl	800bdb8 <sin>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd f843 	bl	80004d8 <__aeabi_dmul>
 8003452:	4603      	mov	r3, r0
 8003454:	460c      	mov	r4, r1
 8003456:	4625      	mov	r5, r4
 8003458:	461c      	mov	r4, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	3304      	adds	r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fc ffe1 	bl	8000428 <__aeabi_f2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f008 fc6d 	bl	800bd4c <cos>
 8003472:	4680      	mov	r8, r0
 8003474:	4689      	mov	r9, r1
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3308      	adds	r3, #8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fc ffd3 	bl	8000428 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f008 fc5f 	bl	800bd4c <cos>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4640      	mov	r0, r8
 8003494:	4649      	mov	r1, r9
 8003496:	f7fd f81f 	bl	80004d8 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc ffbe 	bl	8000428 <__aeabi_f2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f008 fc80 	bl	800bdb8 <sin>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4640      	mov	r0, r8
 80034be:	4649      	mov	r1, r9
 80034c0:	f7fd f80a 	bl	80004d8 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc fe4e 	bl	800016c <__adddf3>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4619      	mov	r1, r3
 80034d6:	4622      	mov	r2, r4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1d1c      	adds	r4, r3, #4
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	f7fd faf2 	bl	8000ac8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	6023      	str	r3, [r4, #0]
	q[2] = cos(euler[0]) * cos(euler[2])   * sin(euler[1]) + sin(euler[0])  * cos(euler[1]) * sin(euler[2]);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fc ff9b 	bl	8000428 <__aeabi_f2d>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	4618      	mov	r0, r3
 80034f8:	4621      	mov	r1, r4
 80034fa:	f008 fc27 	bl	800bd4c <cos>
 80034fe:	4604      	mov	r4, r0
 8003500:	460d      	mov	r5, r1
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fc ff8d 	bl	8000428 <__aeabi_f2d>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f008 fc19 	bl	800bd4c <cos>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fc ffd9 	bl	80004d8 <__aeabi_dmul>
 8003526:	4603      	mov	r3, r0
 8003528:	460c      	mov	r4, r1
 800352a:	4625      	mov	r5, r4
 800352c:	461c      	mov	r4, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3304      	adds	r3, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc ff77 	bl	8000428 <__aeabi_f2d>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f008 fc39 	bl	800bdb8 <sin>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fc ffc3 	bl	80004d8 <__aeabi_dmul>
 8003552:	4603      	mov	r3, r0
 8003554:	460c      	mov	r4, r1
 8003556:	4625      	mov	r5, r4
 8003558:	461c      	mov	r4, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fc ff62 	bl	8000428 <__aeabi_f2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	f008 fc24 	bl	800bdb8 <sin>
 8003570:	4680      	mov	r8, r0
 8003572:	4689      	mov	r9, r1
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc ff54 	bl	8000428 <__aeabi_f2d>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f008 fbe0 	bl	800bd4c <cos>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fc ffa0 	bl	80004d8 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4690      	mov	r8, r2
 800359e:	4699      	mov	r9, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3308      	adds	r3, #8
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ff3e 	bl	8000428 <__aeabi_f2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f008 fc00 	bl	800bdb8 <sin>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4640      	mov	r0, r8
 80035be:	4649      	mov	r1, r9
 80035c0:	f7fc ff8a 	bl	80004d8 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	e003      	b.n	80035d0 <Quaternion+0x3c0>
 80035c8:	6cd799af 	.word	0x6cd799af
 80035cc:	3f91df40 	.word	0x3f91df40
 80035d0:	460b      	mov	r3, r1
 80035d2:	4620      	mov	r0, r4
 80035d4:	4629      	mov	r1, r5
 80035d6:	f7fc fdc9 	bl	800016c <__adddf3>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 0408 	add.w	r4, r3, #8
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	f7fd fa6c 	bl	8000ac8 <__aeabi_d2f>
 80035f0:	4603      	mov	r3, r0
 80035f2:	6023      	str	r3, [r4, #0]
	q[3] = cos(euler[0]) * cos(euler[1]) * sin(euler[2])   - sin(euler[0])  * cos(euler[2])   * sin(euler[1]);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff15 	bl	8000428 <__aeabi_f2d>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	4618      	mov	r0, r3
 8003604:	4621      	mov	r1, r4
 8003606:	f008 fba1 	bl	800bd4c <cos>
 800360a:	4604      	mov	r4, r0
 800360c:	460d      	mov	r5, r1
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ff07 	bl	8000428 <__aeabi_f2d>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f008 fb93 	bl	800bd4c <cos>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4620      	mov	r0, r4
 800362c:	4629      	mov	r1, r5
 800362e:	f7fc ff53 	bl	80004d8 <__aeabi_dmul>
 8003632:	4603      	mov	r3, r0
 8003634:	460c      	mov	r4, r1
 8003636:	4625      	mov	r5, r4
 8003638:	461c      	mov	r4, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3308      	adds	r3, #8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc fef1 	bl	8000428 <__aeabi_f2d>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f008 fbb3 	bl	800bdb8 <sin>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	f7fc ff3d 	bl	80004d8 <__aeabi_dmul>
 800365e:	4603      	mov	r3, r0
 8003660:	460c      	mov	r4, r1
 8003662:	4625      	mov	r5, r4
 8003664:	461c      	mov	r4, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc fedc 	bl	8000428 <__aeabi_f2d>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f008 fb9e 	bl	800bdb8 <sin>
 800367c:	4680      	mov	r8, r0
 800367e:	4689      	mov	r9, r1
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fece 	bl	8000428 <__aeabi_f2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f008 fb5a 	bl	800bd4c <cos>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4640      	mov	r0, r8
 800369e:	4649      	mov	r1, r9
 80036a0:	f7fc ff1a 	bl	80004d8 <__aeabi_dmul>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4690      	mov	r8, r2
 80036aa:	4699      	mov	r9, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3304      	adds	r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc feb8 	bl	8000428 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f008 fb7a 	bl	800bdb8 <sin>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4640      	mov	r0, r8
 80036ca:	4649      	mov	r1, r9
 80036cc:	f7fc ff04 	bl	80004d8 <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4620      	mov	r0, r4
 80036d6:	4629      	mov	r1, r5
 80036d8:	f7fc fd46 	bl	8000168 <__aeabi_dsub>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4619      	mov	r1, r3
 80036e2:	4622      	mov	r2, r4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f103 040c 	add.w	r4, r3, #12
 80036ea:	4608      	mov	r0, r1
 80036ec:	4611      	mov	r1, r2
 80036ee:	f7fd f9eb 	bl	8000ac8 <__aeabi_d2f>
 80036f2:	4603      	mov	r3, r0
 80036f4:	6023      	str	r3, [r4, #0]

}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003700 <Rotate_BtoW>:
void Rotate_BtoW(f32 *acc, f32 *q)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b093      	sub	sp, #76	; 0x4c
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	f32 R[9];
	f32 x = q[1];
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
	f32 y = q[2];
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
	f32 z = q[3];
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 s = q[0];
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	63bb      	str	r3, [r7, #56]	; 0x38



	 R[0] = 1 - 2*y*y - 2*z*z; R[1] = 2*x*y - 2*s*z;     R[2] = 2*x*z + 2*s*y;
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	4619      	mov	r1, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fa24 	bl	8000b74 <__addsf3>
 800372c:	4603      	mov	r3, r0
 800372e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fb27 	bl	8000d84 <__aeabi_fmul>
 8003736:	4603      	mov	r3, r0
 8003738:	4619      	mov	r1, r3
 800373a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800373e:	f7fd fa17 	bl	8000b70 <__aeabi_fsub>
 8003742:	4603      	mov	r3, r0
 8003744:	461c      	mov	r4, r3
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	4619      	mov	r1, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fa12 	bl	8000b74 <__addsf3>
 8003750:	4603      	mov	r3, r0
 8003752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fb15 	bl	8000d84 <__aeabi_fmul>
 800375a:	4603      	mov	r3, r0
 800375c:	4619      	mov	r1, r3
 800375e:	4620      	mov	r0, r4
 8003760:	f7fd fa06 	bl	8000b70 <__aeabi_fsub>
 8003764:	4603      	mov	r3, r0
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376a:	4619      	mov	r1, r3
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fa01 	bl	8000b74 <__addsf3>
 8003772:	4603      	mov	r3, r0
 8003774:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fb04 	bl	8000d84 <__aeabi_fmul>
 800377c:	4603      	mov	r3, r0
 800377e:	461c      	mov	r4, r3
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	4619      	mov	r1, r3
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd f9f5 	bl	8000b74 <__addsf3>
 800378a:	4603      	mov	r3, r0
 800378c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd faf8 	bl	8000d84 <__aeabi_fmul>
 8003794:	4603      	mov	r3, r0
 8003796:	4619      	mov	r1, r3
 8003798:	4620      	mov	r0, r4
 800379a:	f7fd f9e9 	bl	8000b70 <__aeabi_fsub>
 800379e:	4603      	mov	r3, r0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a4:	4619      	mov	r1, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd f9e4 	bl	8000b74 <__addsf3>
 80037ac:	4603      	mov	r3, r0
 80037ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fae7 	bl	8000d84 <__aeabi_fmul>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461c      	mov	r4, r3
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	4619      	mov	r1, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd f9d8 	bl	8000b74 <__addsf3>
 80037c4:	4603      	mov	r3, r0
 80037c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fadb 	bl	8000d84 <__aeabi_fmul>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4619      	mov	r1, r3
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7fd f9ce 	bl	8000b74 <__addsf3>
 80037d8:	4603      	mov	r3, r0
 80037da:	613b      	str	r3, [r7, #16]
	  R[3] = 2*x*y + 2*s*z;     R[4] = 1 - 2*x*x - 2*z*z; R[5] = 2*y*z - 2*s*x;
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	4619      	mov	r1, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd f9c7 	bl	8000b74 <__addsf3>
 80037e6:	4603      	mov	r3, r0
 80037e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd faca 	bl	8000d84 <__aeabi_fmul>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461c      	mov	r4, r3
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	4619      	mov	r1, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd f9bb 	bl	8000b74 <__addsf3>
 80037fe:	4603      	mov	r3, r0
 8003800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fabe 	bl	8000d84 <__aeabi_fmul>
 8003808:	4603      	mov	r3, r0
 800380a:	4619      	mov	r1, r3
 800380c:	4620      	mov	r0, r4
 800380e:	f7fd f9b1 	bl	8000b74 <__addsf3>
 8003812:	4603      	mov	r3, r0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003818:	4619      	mov	r1, r3
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd f9aa 	bl	8000b74 <__addsf3>
 8003820:	4603      	mov	r3, r0
 8003822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd faad 	bl	8000d84 <__aeabi_fmul>
 800382a:	4603      	mov	r3, r0
 800382c:	4619      	mov	r1, r3
 800382e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003832:	f7fd f99d 	bl	8000b70 <__aeabi_fsub>
 8003836:	4603      	mov	r3, r0
 8003838:	461c      	mov	r4, r3
 800383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383c:	4619      	mov	r1, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f998 	bl	8000b74 <__addsf3>
 8003844:	4603      	mov	r3, r0
 8003846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fa9b 	bl	8000d84 <__aeabi_fmul>
 800384e:	4603      	mov	r3, r0
 8003850:	4619      	mov	r1, r3
 8003852:	4620      	mov	r0, r4
 8003854:	f7fd f98c 	bl	8000b70 <__aeabi_fsub>
 8003858:	4603      	mov	r3, r0
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385e:	4619      	mov	r1, r3
 8003860:	4618      	mov	r0, r3
 8003862:	f7fd f987 	bl	8000b74 <__addsf3>
 8003866:	4603      	mov	r3, r0
 8003868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fa8a 	bl	8000d84 <__aeabi_fmul>
 8003870:	4603      	mov	r3, r0
 8003872:	461c      	mov	r4, r3
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	4619      	mov	r1, r3
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd f97b 	bl	8000b74 <__addsf3>
 800387e:	4603      	mov	r3, r0
 8003880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fa7e 	bl	8000d84 <__aeabi_fmul>
 8003888:	4603      	mov	r3, r0
 800388a:	4619      	mov	r1, r3
 800388c:	4620      	mov	r0, r4
 800388e:	f7fd f96f 	bl	8000b70 <__aeabi_fsub>
 8003892:	4603      	mov	r3, r0
 8003894:	61fb      	str	r3, [r7, #28]
	  R[6] = 2*x*z - 2*s*y;     R[7] = 2*y*z + 2*s*x;     R[8] = 1 - 2*x*x - 2*y*y;
 8003896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003898:	4619      	mov	r1, r3
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd f96a 	bl	8000b74 <__addsf3>
 80038a0:	4603      	mov	r3, r0
 80038a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fa6d 	bl	8000d84 <__aeabi_fmul>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461c      	mov	r4, r3
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	4619      	mov	r1, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd f95e 	bl	8000b74 <__addsf3>
 80038b8:	4603      	mov	r3, r0
 80038ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fa61 	bl	8000d84 <__aeabi_fmul>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4619      	mov	r1, r3
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fd f952 	bl	8000b70 <__aeabi_fsub>
 80038cc:	4603      	mov	r3, r0
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	4619      	mov	r1, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd f94d 	bl	8000b74 <__addsf3>
 80038da:	4603      	mov	r3, r0
 80038dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fa50 	bl	8000d84 <__aeabi_fmul>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461c      	mov	r4, r3
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	4619      	mov	r1, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd f941 	bl	8000b74 <__addsf3>
 80038f2:	4603      	mov	r3, r0
 80038f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fa44 	bl	8000d84 <__aeabi_fmul>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4619      	mov	r1, r3
 8003900:	4620      	mov	r0, r4
 8003902:	f7fd f937 	bl	8000b74 <__addsf3>
 8003906:	4603      	mov	r3, r0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390c:	4619      	mov	r1, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd f930 	bl	8000b74 <__addsf3>
 8003914:	4603      	mov	r3, r0
 8003916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fa33 	bl	8000d84 <__aeabi_fmul>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003926:	f7fd f923 	bl	8000b70 <__aeabi_fsub>
 800392a:	4603      	mov	r3, r0
 800392c:	461c      	mov	r4, r3
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	4619      	mov	r1, r3
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f91e 	bl	8000b74 <__addsf3>
 8003938:	4603      	mov	r3, r0
 800393a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fa21 	bl	8000d84 <__aeabi_fmul>
 8003942:	4603      	mov	r3, r0
 8003944:	4619      	mov	r1, r3
 8003946:	4620      	mov	r0, r4
 8003948:	f7fd f912 	bl	8000b70 <__aeabi_fsub>
 800394c:	4603      	mov	r3, r0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28





		f32 acc0 = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fd fa13 	bl	8000d84 <__aeabi_fmul>
 800395e:	4603      	mov	r3, r0
 8003960:	461c      	mov	r4, r3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7fd fa09 	bl	8000d84 <__aeabi_fmul>
 8003972:	4603      	mov	r3, r0
 8003974:	4619      	mov	r1, r3
 8003976:	4620      	mov	r0, r4
 8003978:	f7fd f8fc 	bl	8000b74 <__addsf3>
 800397c:	4603      	mov	r3, r0
 800397e:	461c      	mov	r4, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3308      	adds	r3, #8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fd f9fa 	bl	8000d84 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f7fd f8ed 	bl	8000b74 <__addsf3>
 800399a:	4603      	mov	r3, r0
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
		f32 acc1 = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fd f9ec 	bl	8000d84 <__aeabi_fmul>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461c      	mov	r4, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fd f9e2 	bl	8000d84 <__aeabi_fmul>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4619      	mov	r1, r3
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7fd f8d5 	bl	8000b74 <__addsf3>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461c      	mov	r4, r3
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3308      	adds	r3, #8
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7fd f9d3 	bl	8000d84 <__aeabi_fmul>
 80039de:	4603      	mov	r3, r0
 80039e0:	4619      	mov	r1, r3
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7fd f8c6 	bl	8000b74 <__addsf3>
 80039e8:	4603      	mov	r3, r0
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
		f32 acc2 = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fd f9c5 	bl	8000d84 <__aeabi_fmul>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461c      	mov	r4, r3
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fd f9bb 	bl	8000d84 <__aeabi_fmul>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4619      	mov	r1, r3
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7fd f8ae 	bl	8000b74 <__addsf3>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461c      	mov	r4, r3
 8003a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3308      	adds	r3, #8
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fd f9ac 	bl	8000d84 <__aeabi_fmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7fd f89f 	bl	8000b74 <__addsf3>
 8003a36:	4603      	mov	r3, r0
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
		acc[0]=acc0;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3e:	601a      	str	r2, [r3, #0]
		acc[1]=acc1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a46:	601a      	str	r2, [r3, #0]
		acc[2]=acc2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	601a      	str	r2, [r3, #0]

}
 8003a50:	bf00      	nop
 8003a52:	374c      	adds	r7, #76	; 0x4c
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd90      	pop	{r4, r7, pc}

08003a58 <Rotate_BtoW_acc>:
void Rotate_BtoW_acc(f32 *acc, f32 *q)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b095      	sub	sp, #84	; 0x54
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	f32 q0 = -q[0];
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	f32 R[9];
	f32 acc2[3];
	f32 r0 = q0*q0;
 8003a6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a70:	f7fd f988 	bl	8000d84 <__aeabi_fmul>
 8003a74:	4603      	mov	r3, r0
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
	f32 r1 = q[1]*q[1];
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7fd f97c 	bl	8000d84 <__aeabi_fmul>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
	f32 r2 = q[2]*q[2];
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7fd f970 	bl	8000d84 <__aeabi_fmul>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
	f32 r3 = q[3]*q[3];
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7fd f964 	bl	8000d84 <__aeabi_fmul>
 8003abc:	4603      	mov	r3, r0
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	R[0] = r0 + r1 - r2 - r3;
 8003ac0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ac4:	f7fd f856 	bl	8000b74 <__addsf3>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd f84f 	bl	8000b70 <__aeabi_fsub>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd f84a 	bl	8000b70 <__aeabi_fsub>
 8003adc:	4603      	mov	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
	R[1] = 2*q[1]*q[2] + 2*q0*q[3];
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f843 	bl	8000b74 <__addsf3>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fd f942 	bl	8000d84 <__aeabi_fmul>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461c      	mov	r4, r3
 8003b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f833 	bl	8000b74 <__addsf3>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7fd f932 	bl	8000d84 <__aeabi_fmul>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7fd f825 	bl	8000b74 <__addsf3>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	61fb      	str	r3, [r7, #28]
	R[2] = 2*q[1]*q[3] - 2*q0*q[2];
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3304      	adds	r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4619      	mov	r1, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd f81c 	bl	8000b74 <__addsf3>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fd f91b 	bl	8000d84 <__aeabi_fmul>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461c      	mov	r4, r3
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	4619      	mov	r1, r3
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f80c 	bl	8000b74 <__addsf3>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7fd f90b 	bl	8000d84 <__aeabi_fmul>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4619      	mov	r1, r3
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7fc fffc 	bl	8000b70 <__aeabi_fsub>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	623b      	str	r3, [r7, #32]
	R[3] = 2*q[1]*q[2] - 2*q0*q[3];
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fff5 	bl	8000b74 <__addsf3>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fd f8f4 	bl	8000d84 <__aeabi_fmul>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461c      	mov	r4, r3
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc ffe5 	bl	8000b74 <__addsf3>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f7fd f8e4 	bl	8000d84 <__aeabi_fmul>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7fc ffd5 	bl	8000b70 <__aeabi_fsub>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
	R[4] = r0 - r1 + r2 - r3;
 8003bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bcc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003bce:	f7fc ffcf 	bl	8000b70 <__aeabi_fsub>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc ffcc 	bl	8000b74 <__addsf3>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc ffc5 	bl	8000b70 <__aeabi_fsub>
 8003be6:	4603      	mov	r3, r0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
	R[5] = 2*q[2]*q[3] + 2*q0*q[1];
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc ffbe 	bl	8000b74 <__addsf3>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fd f8bd 	bl	8000d84 <__aeabi_fmul>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	4619      	mov	r1, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc ffae 	bl	8000b74 <__addsf3>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fd f8ad 	bl	8000d84 <__aeabi_fmul>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7fc ffa0 	bl	8000b74 <__addsf3>
 8003c34:	4603      	mov	r3, r0
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	R[6] = 2*q[1]*q[3] + 2*q0*q[2];
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc ff97 	bl	8000b74 <__addsf3>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fd f896 	bl	8000d84 <__aeabi_fmul>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461c      	mov	r4, r3
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc ff87 	bl	8000b74 <__addsf3>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fd f886 	bl	8000d84 <__aeabi_fmul>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7fc ff79 	bl	8000b74 <__addsf3>
 8003c82:	4603      	mov	r3, r0
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
	R[7] = 2*q[2]*q[3] - 2*q0*q[1];
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc ff70 	bl	8000b74 <__addsf3>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fd f86f 	bl	8000d84 <__aeabi_fmul>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461c      	mov	r4, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	4619      	mov	r1, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc ff60 	bl	8000b74 <__addsf3>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fd f85f 	bl	8000d84 <__aeabi_fmul>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7fc ff50 	bl	8000b70 <__aeabi_fsub>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
	R[8] = r0 - r1 - r2 + r3;
 8003cd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cd6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003cd8:	f7fc ff4a 	bl	8000b70 <__aeabi_fsub>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc ff45 	bl	8000b70 <__aeabi_fsub>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc ff42 	bl	8000b74 <__addsf3>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	acc2[0] = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fd f841 	bl	8000d84 <__aeabi_fmul>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461c      	mov	r4, r3
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f7fd f837 	bl	8000d84 <__aeabi_fmul>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7fc ff2a 	bl	8000b74 <__addsf3>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461c      	mov	r4, r3
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7fd f828 	bl	8000d84 <__aeabi_fmul>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4619      	mov	r1, r3
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7fc ff1b 	bl	8000b74 <__addsf3>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	60fb      	str	r3, [r7, #12]
	acc2[1] = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fd f81a 	bl	8000d84 <__aeabi_fmul>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461c      	mov	r4, r3
 8003d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7fd f810 	bl	8000d84 <__aeabi_fmul>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4619      	mov	r1, r3
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7fc ff03 	bl	8000b74 <__addsf3>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461c      	mov	r4, r3
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3308      	adds	r3, #8
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fd f801 	bl	8000d84 <__aeabi_fmul>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4619      	mov	r1, r3
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7fc fef4 	bl	8000b74 <__addsf3>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	613b      	str	r3, [r7, #16]
	acc2[2] = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fc fff3 	bl	8000d84 <__aeabi_fmul>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461c      	mov	r4, r3
 8003da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fc ffe9 	bl	8000d84 <__aeabi_fmul>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4619      	mov	r1, r3
 8003db6:	4620      	mov	r0, r4
 8003db8:	f7fc fedc 	bl	8000b74 <__addsf3>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461c      	mov	r4, r3
 8003dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fc ffda 	bl	8000d84 <__aeabi_fmul>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f7fc fecd 	bl	8000b74 <__addsf3>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	617b      	str	r3, [r7, #20]
	acc[0] = acc2[0];
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
	acc[1] = acc2[1];
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	601a      	str	r2, [r3, #0]
	acc[2] = acc2[2];
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3308      	adds	r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	601a      	str	r2, [r3, #0]

}
 8003df4:	bf00      	nop
 8003df6:	3754      	adds	r7, #84	; 0x54
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd90      	pop	{r4, r7, pc}

08003dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_MspInit+0x68>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_MspInit+0x68>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6193      	str	r3, [r2, #24]
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_MspInit+0x68>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_MspInit+0x68>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_MspInit+0x68>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	61d3      	str	r3, [r2, #28]
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_MspInit+0x68>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	210f      	movs	r1, #15
 8003e36:	f06f 0001 	mvn.w	r0, #1
 8003e3a:	f000 fb3c 	bl	80044b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_MspInit+0x6c>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <HAL_MspInit+0x6c>)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000

08003e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_I2C_MspInit+0x70>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d123      	bne.n	8003ed4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ea4:	23c0      	movs	r3, #192	; 0xc0
 8003ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea8:	2312      	movs	r3, #18
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	480b      	ldr	r0, [pc, #44]	; (8003ee4 <HAL_I2C_MspInit+0x78>)
 8003eb8:	f000 fb28 	bl	800450c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec6:	61d3      	str	r3, [r2, #28]
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_I2C_MspInit+0x74>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed4:	bf00      	nop
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40005400 	.word	0x40005400
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010c00 	.word	0x40010c00

08003ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d10b      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_TIM_Base_MspInit+0x34>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_TIM_Base_MspInit+0x34>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	61d3      	str	r3, [r2, #28]
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_TIM_Base_MspInit+0x34>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d142      	bne.n	8003fc6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f5e:	f043 0308 	orr.w	r3, r3, #8
 8003f62:	6193      	str	r3, [r2, #24]
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_TIM_MspPostInit+0xb0>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f70:	2303      	movs	r3, #3
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <HAL_TIM_MspPostInit+0xb4>)
 8003f84:	f000 fac2 	bl	800450c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2302      	movs	r3, #2
 8003f94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <HAL_TIM_MspPostInit+0xb8>)
 8003f9e:	f000 fab5 	bl	800450c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_TIM_MspPostInit+0xbc>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	4a06      	ldr	r2, [pc, #24]	; (8003fdc <HAL_TIM_MspPostInit+0xbc>)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003fc6:	bf00      	nop
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40010800 	.word	0x40010800
 8003fd8:	40010c00 	.word	0x40010c00
 8003fdc:	40010000 	.word	0x40010000

08003fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0318 	add.w	r3, r7, #24
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a37      	ldr	r2, [pc, #220]	; (80040d8 <HAL_UART_MspInit+0xf8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d132      	bne.n	8004066 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	4a35      	ldr	r2, [pc, #212]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800400a:	6193      	str	r3, [r2, #24]
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403e:	f107 0318 	add.w	r3, r7, #24
 8004042:	4619      	mov	r1, r3
 8004044:	4826      	ldr	r0, [pc, #152]	; (80040e0 <HAL_UART_MspInit+0x100>)
 8004046:	f000 fa61 	bl	800450c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800404a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004058:	f107 0318 	add.w	r3, r7, #24
 800405c:	4619      	mov	r1, r3
 800405e:	4820      	ldr	r0, [pc, #128]	; (80040e0 <HAL_UART_MspInit+0x100>)
 8004060:	f000 fa54 	bl	800450c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004064:	e034      	b.n	80040d0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_UART_MspInit+0x104>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d12f      	bne.n	80040d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004070:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407a:	61d3      	str	r3, [r2, #28]
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_UART_MspInit+0xfc>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	6193      	str	r3, [r2, #24]
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_UART_MspInit+0xfc>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040a0:	2304      	movs	r3, #4
 80040a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a4:	2302      	movs	r3, #2
 80040a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040a8:	2303      	movs	r3, #3
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 0318 	add.w	r3, r7, #24
 80040b0:	4619      	mov	r1, r3
 80040b2:	480b      	ldr	r0, [pc, #44]	; (80040e0 <HAL_UART_MspInit+0x100>)
 80040b4:	f000 fa2a 	bl	800450c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040b8:	2308      	movs	r3, #8
 80040ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c4:	f107 0318 	add.w	r3, r7, #24
 80040c8:	4619      	mov	r1, r3
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <HAL_UART_MspInit+0x100>)
 80040cc:	f000 fa1e 	bl	800450c <HAL_GPIO_Init>
}
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40010800 	.word	0x40010800
 80040e4:	40004400 	.word	0x40004400

080040e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80040f8:	2200      	movs	r2, #0
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	201e      	movs	r0, #30
 80040fe:	f000 f9da 	bl	80044b6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8004102:	201e      	movs	r0, #30
 8004104:	f000 f9f3 	bl	80044ee <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <HAL_InitTick+0xa0>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_InitTick+0xa0>)
 800410e:	f043 0304 	orr.w	r3, r3, #4
 8004112:	61d3      	str	r3, [r2, #28]
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <HAL_InitTick+0xa0>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004120:	f107 0210 	add.w	r2, r7, #16
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fec6 	bl	8005ebc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004130:	f001 fe9c 	bl	8005e6c <HAL_RCC_GetPCLK1Freq>
 8004134:	4603      	mov	r3, r0
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <HAL_InitTick+0xa4>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9b      	lsrs	r3, r3, #18
 8004144:	3b01      	subs	r3, #1
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_InitTick+0xa8>)
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_InitTick+0xac>)
 800414c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_InitTick+0xa8>)
 8004150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004154:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_InitTick+0xa8>)
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_InitTick+0xa8>)
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_InitTick+0xa8>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <HAL_InitTick+0xa8>)
 800416a:	f001 ff0f 	bl	8005f8c <HAL_TIM_Base_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004174:	4806      	ldr	r0, [pc, #24]	; (8004190 <HAL_InitTick+0xa8>)
 8004176:	f001 ff34 	bl	8005fe2 <HAL_TIM_Base_Start_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	e000      	b.n	8004180 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	; 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	431bde83 	.word	0x431bde83
 8004190:	20004034 	.word	0x20004034
 8004194:	40000800 	.word	0x40000800

08004198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800419c:	f001 febe 	bl	8005f1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a8:	e7fe      	b.n	80041a8 <HardFault_Handler+0x4>

080041aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041ae:	e7fe      	b.n	80041ae <MemManage_Handler+0x4>

080041b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <BusFault_Handler+0x4>

080041b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041ba:	e7fe      	b.n	80041ba <UsageFault_Handler+0x4>

080041bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <TIM4_IRQHandler+0x10>)
 80041ce:	f001 ff91 	bl	80060f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20004034 	.word	0x20004034

080041dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <_sbrk+0x50>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <_sbrk+0x16>
		heap_end = &end;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <_sbrk+0x50>)
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <_sbrk+0x54>)
 80041f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <_sbrk+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <_sbrk+0x50>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	466a      	mov	r2, sp
 8004202:	4293      	cmp	r3, r2
 8004204:	d907      	bls.n	8004216 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004206:	f005 fc9d 	bl	8009b44 <__errno>
 800420a:	4602      	mov	r2, r0
 800420c:	230c      	movs	r3, #12
 800420e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	e006      	b.n	8004224 <_sbrk+0x48>
	}

	heap_end += incr;
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <_sbrk+0x50>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <_sbrk+0x50>)
 8004220:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000244 	.word	0x20000244
 8004230:	200040c0 	.word	0x200040c0

08004234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <SystemInit+0x5c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <SystemInit+0x5c>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <SystemInit+0x5c>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4911      	ldr	r1, [pc, #68]	; (8004290 <SystemInit+0x5c>)
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <SystemInit+0x60>)
 800424c:	4013      	ands	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <SystemInit+0x5c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <SystemInit+0x5c>)
 8004256:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <SystemInit+0x5c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <SystemInit+0x5c>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <SystemInit+0x5c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <SystemInit+0x5c>)
 8004272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004276:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <SystemInit+0x5c>)
 800427a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800427e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <SystemInit+0x64>)
 8004282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004286:	609a      	str	r2, [r3, #8]
#endif 
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40021000 	.word	0x40021000
 8004294:	f8ff0000 	.word	0xf8ff0000
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800429c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800429e:	e003      	b.n	80042a8 <LoopCopyDataInit>

080042a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80042a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042a6:	3104      	adds	r1, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80042a8:	480a      	ldr	r0, [pc, #40]	; (80042d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80042ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80042ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80042b0:	d3f6      	bcc.n	80042a0 <CopyDataInit>
  ldr r2, =_sbss
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80042b4:	e002      	b.n	80042bc <LoopFillZerobss>

080042b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80042b8:	f842 3b04 	str.w	r3, [r2], #4

080042bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80042be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80042c0:	d3f9      	bcc.n	80042b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80042c2:	f7ff ffb7 	bl	8004234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042c6:	f005 fc43 	bl	8009b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042ca:	f7fd fcfb 	bl	8001cc4 <main>
  bx lr
 80042ce:	4770      	bx	lr
  ldr r3, =_sidata
 80042d0:	0800dc18 	.word	0x0800dc18
  ldr r0, =_sdata
 80042d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80042d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80042dc:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80042e0:	200040bc 	.word	0x200040bc

080042e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042e4:	e7fe      	b.n	80042e4 <ADC1_2_IRQHandler>
	...

080042e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_Init+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <HAL_Init+0x28>)
 80042f2:	f043 0310 	orr.w	r3, r3, #16
 80042f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f8:	2003      	movs	r0, #3
 80042fa:	f000 f8d1 	bl	80044a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fe:	2000      	movs	r0, #0
 8004300:	f7ff fef2 	bl	80040e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004304:	f7ff fd7a 	bl	8003dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_IncTick+0x1c>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_IncTick+0x20>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4413      	add	r3, r2
 8004324:	4a03      	ldr	r2, [pc, #12]	; (8004334 <HAL_IncTick+0x20>)
 8004326:	6013      	str	r3, [r2, #0]
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	2000000c 	.word	0x2000000c
 8004334:	20004074 	.word	0x20004074

08004338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return uwTick;
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <HAL_GetTick+0x10>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	20004074 	.word	0x20004074

0800434c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004368:	4013      	ands	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437e:	4a04      	ldr	r2, [pc, #16]	; (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <__NVIC_GetPriorityGrouping+0x18>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f003 0307 	and.w	r3, r3, #7
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db0b      	blt.n	80043da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4906      	ldr	r1, [pc, #24]	; (80043e4 <__NVIC_EnableIRQ+0x34>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	6039      	str	r1, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	db0a      	blt.n	8004412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	490c      	ldr	r1, [pc, #48]	; (8004434 <__NVIC_SetPriority+0x4c>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	440b      	add	r3, r1
 800440c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004410:	e00a      	b.n	8004428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4908      	ldr	r1, [pc, #32]	; (8004438 <__NVIC_SetPriority+0x50>)
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3b04      	subs	r3, #4
 8004420:	0112      	lsls	r2, r2, #4
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	440b      	add	r3, r1
 8004426:	761a      	strb	r2, [r3, #24]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	e000e100 	.word	0xe000e100
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	bf28      	it	cs
 800445a:	2304      	movcs	r3, #4
 800445c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3304      	adds	r3, #4
 8004462:	2b06      	cmp	r3, #6
 8004464:	d902      	bls.n	800446c <NVIC_EncodePriority+0x30>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3b03      	subs	r3, #3
 800446a:	e000      	b.n	800446e <NVIC_EncodePriority+0x32>
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	401a      	ands	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43d9      	mvns	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	4313      	orrs	r3, r2
         );
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff4f 	bl	800434c <__NVIC_SetPriorityGrouping>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c8:	f7ff ff64 	bl	8004394 <__NVIC_GetPriorityGrouping>
 80044cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff ffb2 	bl	800443c <NVIC_EncodePriority>
 80044d8:	4602      	mov	r2, r0
 80044da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff81 	bl	80043e8 <__NVIC_SetPriority>
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff57 	bl	80043b0 <__NVIC_EnableIRQ>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800450c:	b480      	push	{r7}
 800450e:	b08b      	sub	sp, #44	; 0x2c
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800451e:	e127      	b.n	8004770 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004520:	2201      	movs	r2, #1
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	429a      	cmp	r2, r3
 800453a:	f040 8116 	bne.w	800476a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b12      	cmp	r3, #18
 8004544:	d034      	beq.n	80045b0 <HAL_GPIO_Init+0xa4>
 8004546:	2b12      	cmp	r3, #18
 8004548:	d80d      	bhi.n	8004566 <HAL_GPIO_Init+0x5a>
 800454a:	2b02      	cmp	r3, #2
 800454c:	d02b      	beq.n	80045a6 <HAL_GPIO_Init+0x9a>
 800454e:	2b02      	cmp	r3, #2
 8004550:	d804      	bhi.n	800455c <HAL_GPIO_Init+0x50>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d031      	beq.n	80045ba <HAL_GPIO_Init+0xae>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d01c      	beq.n	8004594 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800455a:	e048      	b.n	80045ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800455c:	2b03      	cmp	r3, #3
 800455e:	d043      	beq.n	80045e8 <HAL_GPIO_Init+0xdc>
 8004560:	2b11      	cmp	r3, #17
 8004562:	d01b      	beq.n	800459c <HAL_GPIO_Init+0x90>
          break;
 8004564:	e043      	b.n	80045ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004566:	4a89      	ldr	r2, [pc, #548]	; (800478c <HAL_GPIO_Init+0x280>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d026      	beq.n	80045ba <HAL_GPIO_Init+0xae>
 800456c:	4a87      	ldr	r2, [pc, #540]	; (800478c <HAL_GPIO_Init+0x280>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d806      	bhi.n	8004580 <HAL_GPIO_Init+0x74>
 8004572:	4a87      	ldr	r2, [pc, #540]	; (8004790 <HAL_GPIO_Init+0x284>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d020      	beq.n	80045ba <HAL_GPIO_Init+0xae>
 8004578:	4a86      	ldr	r2, [pc, #536]	; (8004794 <HAL_GPIO_Init+0x288>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01d      	beq.n	80045ba <HAL_GPIO_Init+0xae>
          break;
 800457e:	e036      	b.n	80045ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004580:	4a85      	ldr	r2, [pc, #532]	; (8004798 <HAL_GPIO_Init+0x28c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d019      	beq.n	80045ba <HAL_GPIO_Init+0xae>
 8004586:	4a85      	ldr	r2, [pc, #532]	; (800479c <HAL_GPIO_Init+0x290>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d016      	beq.n	80045ba <HAL_GPIO_Init+0xae>
 800458c:	4a84      	ldr	r2, [pc, #528]	; (80047a0 <HAL_GPIO_Init+0x294>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0xae>
          break;
 8004592:	e02c      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	623b      	str	r3, [r7, #32]
          break;
 800459a:	e028      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	3304      	adds	r3, #4
 80045a2:	623b      	str	r3, [r7, #32]
          break;
 80045a4:	e023      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	3308      	adds	r3, #8
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e01e      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	330c      	adds	r3, #12
 80045b6:	623b      	str	r3, [r7, #32]
          break;
 80045b8:	e019      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045c2:	2304      	movs	r3, #4
 80045c4:	623b      	str	r3, [r7, #32]
          break;
 80045c6:	e012      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d0:	2308      	movs	r3, #8
 80045d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	611a      	str	r2, [r3, #16]
          break;
 80045da:	e008      	b.n	80045ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045dc:	2308      	movs	r3, #8
 80045de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	615a      	str	r2, [r3, #20]
          break;
 80045e6:	e002      	b.n	80045ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]
          break;
 80045ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2bff      	cmp	r3, #255	; 0xff
 80045f2:	d801      	bhi.n	80045f8 <HAL_GPIO_Init+0xec>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	e001      	b.n	80045fc <HAL_GPIO_Init+0xf0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2bff      	cmp	r3, #255	; 0xff
 8004602:	d802      	bhi.n	800460a <HAL_GPIO_Init+0xfe>
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	e002      	b.n	8004610 <HAL_GPIO_Init+0x104>
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	3b08      	subs	r3, #8
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	210f      	movs	r1, #15
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	401a      	ands	r2, r3
 8004622:	6a39      	ldr	r1, [r7, #32]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	431a      	orrs	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8096 	beq.w	800476a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800463e:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_GPIO_Init+0x298>)
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4a58      	ldr	r2, [pc, #352]	; (80047a4 <HAL_GPIO_Init+0x298>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6193      	str	r3, [r2, #24]
 800464a:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <HAL_GPIO_Init+0x298>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004656:	4a54      	ldr	r2, [pc, #336]	; (80047a8 <HAL_GPIO_Init+0x29c>)
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3302      	adds	r3, #2
 800465e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004662:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4b      	ldr	r2, [pc, #300]	; (80047ac <HAL_GPIO_Init+0x2a0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_GPIO_Init+0x19e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <HAL_GPIO_Init+0x2a4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00d      	beq.n	80046a6 <HAL_GPIO_Init+0x19a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_GPIO_Init+0x2a8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <HAL_GPIO_Init+0x196>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a48      	ldr	r2, [pc, #288]	; (80047b8 <HAL_GPIO_Init+0x2ac>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_GPIO_Init+0x192>
 800469a:	2303      	movs	r3, #3
 800469c:	e006      	b.n	80046ac <HAL_GPIO_Init+0x1a0>
 800469e:	2304      	movs	r3, #4
 80046a0:	e004      	b.n	80046ac <HAL_GPIO_Init+0x1a0>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_Init+0x1a0>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_GPIO_Init+0x1a0>
 80046aa:	2300      	movs	r3, #0
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	f002 0203 	and.w	r2, r2, #3
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4093      	lsls	r3, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046bc:	493a      	ldr	r1, [pc, #232]	; (80047a8 <HAL_GPIO_Init+0x29c>)
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	3302      	adds	r3, #2
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4938      	ldr	r1, [pc, #224]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
 80046e2:	e006      	b.n	80046f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	4933      	ldr	r1, [pc, #204]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	492e      	ldr	r1, [pc, #184]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	604b      	str	r3, [r1, #4]
 800470a:	e006      	b.n	800471a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800470c:	4b2b      	ldr	r3, [pc, #172]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	43db      	mvns	r3, r3
 8004714:	4929      	ldr	r1, [pc, #164]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004716:	4013      	ands	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	4924      	ldr	r1, [pc, #144]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
 8004732:	e006      	b.n	8004742 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	43db      	mvns	r3, r3
 800473c:	491f      	ldr	r1, [pc, #124]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 800473e:	4013      	ands	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	491a      	ldr	r1, [pc, #104]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	60cb      	str	r3, [r1, #12]
 800475a:	e006      	b.n	800476a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800475c:	4b17      	ldr	r3, [pc, #92]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	43db      	mvns	r3, r3
 8004764:	4915      	ldr	r1, [pc, #84]	; (80047bc <HAL_GPIO_Init+0x2b0>)
 8004766:	4013      	ands	r3, r2
 8004768:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	3301      	adds	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	f47f aed0 	bne.w	8004520 <HAL_GPIO_Init+0x14>
  }
}
 8004780:	bf00      	nop
 8004782:	372c      	adds	r7, #44	; 0x2c
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	10210000 	.word	0x10210000
 8004790:	10110000 	.word	0x10110000
 8004794:	10120000 	.word	0x10120000
 8004798:	10310000 	.word	0x10310000
 800479c:	10320000 	.word	0x10320000
 80047a0:	10220000 	.word	0x10220000
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40010c00 	.word	0x40010c00
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	40010400 	.word	0x40010400

080047c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
 80047cc:	4613      	mov	r3, r2
 80047ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d0:	787b      	ldrb	r3, [r7, #1]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047dc:	e003      	b.n	80047e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047de:	887b      	ldrh	r3, [r7, #2]
 80047e0:	041a      	lsls	r2, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e10f      	b.n	8004a22 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fb28 	bl	8003e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004834:	f001 fb1a 	bl	8005e6c <HAL_RCC_GetPCLK1Freq>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a7b      	ldr	r2, [pc, #492]	; (8004a2c <HAL_I2C_Init+0x23c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d807      	bhi.n	8004854 <HAL_I2C_Init+0x64>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a7a      	ldr	r2, [pc, #488]	; (8004a30 <HAL_I2C_Init+0x240>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e006      	b.n	8004862 <HAL_I2C_Init+0x72>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a77      	ldr	r2, [pc, #476]	; (8004a34 <HAL_I2C_Init+0x244>)
 8004858:	4293      	cmp	r3, r2
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0db      	b.n	8004a22 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a72      	ldr	r2, [pc, #456]	; (8004a38 <HAL_I2C_Init+0x248>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0c9b      	lsrs	r3, r3, #18
 8004874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a64      	ldr	r2, [pc, #400]	; (8004a2c <HAL_I2C_Init+0x23c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d802      	bhi.n	80048a4 <HAL_I2C_Init+0xb4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	3301      	adds	r3, #1
 80048a2:	e009      	b.n	80048b8 <HAL_I2C_Init+0xc8>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4a63      	ldr	r2, [pc, #396]	; (8004a3c <HAL_I2C_Init+0x24c>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	3301      	adds	r3, #1
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4956      	ldr	r1, [pc, #344]	; (8004a2c <HAL_I2C_Init+0x23c>)
 80048d4:	428b      	cmp	r3, r1
 80048d6:	d80d      	bhi.n	80048f4 <HAL_I2C_Init+0x104>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1e59      	subs	r1, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	bf38      	it	cc
 80048f0:	2304      	movcc	r3, #4
 80048f2:	e04f      	b.n	8004994 <HAL_I2C_Init+0x1a4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d111      	bne.n	8004920 <HAL_I2C_Init+0x130>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e58      	subs	r0, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e012      	b.n	8004946 <HAL_I2C_Init+0x156>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e58      	subs	r0, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	0099      	lsls	r1, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	fbb0 f3f3 	udiv	r3, r0, r3
 8004936:	3301      	adds	r3, #1
 8004938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Init+0x15e>
 800494a:	2301      	movs	r3, #1
 800494c:	e022      	b.n	8004994 <HAL_I2C_Init+0x1a4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <HAL_I2C_Init+0x184>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e58      	subs	r0, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	440b      	add	r3, r1
 8004964:	fbb0 f3f3 	udiv	r3, r0, r3
 8004968:	3301      	adds	r3, #1
 800496a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004972:	e00f      	b.n	8004994 <HAL_I2C_Init+0x1a4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e58      	subs	r0, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	0099      	lsls	r1, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	6809      	ldr	r1, [r1, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6911      	ldr	r1, [r2, #16]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68d2      	ldr	r2, [r2, #12]
 80049ce:	4311      	orrs	r1, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	000186a0 	.word	0x000186a0
 8004a30:	001e847f 	.word	0x001e847f
 8004a34:	003d08ff 	.word	0x003d08ff
 8004a38:	431bde83 	.word	0x431bde83
 8004a3c:	10624dd3 	.word	0x10624dd3

08004a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	817b      	strh	r3, [r7, #10]
 8004a50:	4613      	mov	r3, r2
 8004a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a54:	f7ff fc70 	bl	8004338 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	f040 80e0 	bne.w	8004c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2319      	movs	r3, #25
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4970      	ldr	r1, [pc, #448]	; (8004c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fc3c 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0d3      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_I2C_Master_Transmit+0x50>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0cc      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d007      	beq.n	8004ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2221      	movs	r2, #33	; 0x21
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	893a      	ldrh	r2, [r7, #8]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a50      	ldr	r2, [pc, #320]	; (8004c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004af8:	8979      	ldrh	r1, [r7, #10]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 faca 	bl	8005098 <I2C_MasterRequestWrite>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e08d      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b24:	e066      	b.n	8004bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fcb6 	bl	800549c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d107      	bne.n	8004b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06b      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_I2C_Master_Transmit+0x188>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	6a39      	ldr	r1, [r7, #32]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fca6 	bl	800551e <I2C_WaitOnBTFFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d107      	bne.n	8004bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e01a      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d194      	bne.n	8004b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	00100002 	.word	0x00100002
 8004c38:	ffff0000 	.word	0xffff0000

08004c3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	461a      	mov	r2, r3
 8004c48:	460b      	mov	r3, r1
 8004c4a:	817b      	strh	r3, [r7, #10]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c50:	f7ff fb72 	bl	8004338 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	f040 8213 	bne.w	800508a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2319      	movs	r3, #25
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	497e      	ldr	r1, [pc, #504]	; (8004e68 <HAL_I2C_Master_Receive+0x22c>)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fb3e 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e206      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_I2C_Master_Receive+0x50>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e1ff      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d007      	beq.n	8004cb2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2222      	movs	r2, #34	; 0x22
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2210      	movs	r2, #16
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	893a      	ldrh	r2, [r7, #8]
 8004ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a5e      	ldr	r2, [pc, #376]	; (8004e6c <HAL_I2C_Master_Receive+0x230>)
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cf4:	8979      	ldrh	r1, [r7, #10]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fa42 	bl	8005184 <I2C_MasterRequestRead>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1c0      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d113      	bne.n	8004d3a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e194      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d11d      	bne.n	8004d7e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d52:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d7a:	b662      	cpsie	i
 8004d7c:	e172      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d11d      	bne.n	8004dc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d96:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dbe:	b662      	cpsie	i
 8004dc0:	e150      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004de8:	e13c      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	f200 80f5 	bhi.w	8004fde <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d123      	bne.n	8004e44 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fbcd 	bl	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e13d      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e42:	e10f      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d150      	bne.n	8004eee <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2200      	movs	r2, #0
 8004e54:	4906      	ldr	r1, [pc, #24]	; (8004e70 <HAL_I2C_Master_Receive+0x234>)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fa4a 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e112      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
 8004e66:	bf00      	nop
 8004e68:	00100002 	.word	0x00100002
 8004e6c:	ffff0000 	.word	0xffff0000
 8004e70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e74:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e84:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004eb8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eec:	e0ba      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4967      	ldr	r1, [pc, #412]	; (8005094 <HAL_I2C_Master_Receive+0x458>)
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f9f9 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0c1      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f18:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	2200      	movs	r2, #0
 8004f54:	494f      	ldr	r1, [pc, #316]	; (8005094 <HAL_I2C_Master_Receive+0x458>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f9ca 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e092      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f74:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fa8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fdc:	e042      	b.n	8005064 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fadc 	bl	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e04c      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d118      	bne.n	8005064 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f aebe 	bne.w	8004dea <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010004 	.word	0x00010004

08005098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	460b      	mov	r3, r1
 80050a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d006      	beq.n	80050c2 <I2C_MasterRequestWrite+0x2a>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d003      	beq.n	80050c2 <I2C_MasterRequestWrite+0x2a>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050c0:	d108      	bne.n	80050d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e00b      	b.n	80050ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	2b12      	cmp	r3, #18
 80050da:	d107      	bne.n	80050ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f8f9 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e035      	b.n	8005174 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005110:	d108      	bne.n	8005124 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005112:	897b      	ldrh	r3, [r7, #10]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005120:	611a      	str	r2, [r3, #16]
 8005122:	e01b      	b.n	800515c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005124:	897b      	ldrh	r3, [r7, #10]
 8005126:	11db      	asrs	r3, r3, #7
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f063 030f 	orn	r3, r3, #15
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <I2C_MasterRequestWrite+0xe4>)
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f92b 	bl	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e010      	b.n	8005174 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4907      	ldr	r1, [pc, #28]	; (8005180 <I2C_MasterRequestWrite+0xe8>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f91b 	bl	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	00010008 	.word	0x00010008
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d006      	beq.n	80051be <I2C_MasterRequestRead+0x3a>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d003      	beq.n	80051be <I2C_MasterRequestRead+0x3a>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051bc:	d108      	bne.n	80051d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e00b      	b.n	80051e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b11      	cmp	r3, #17
 80051d6:	d107      	bne.n	80051e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f87b 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e06d      	b.n	80052e0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800520c:	d108      	bne.n	8005220 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800520e:	897b      	ldrh	r3, [r7, #10]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e053      	b.n	80052c8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005220:	897b      	ldrh	r3, [r7, #10]
 8005222:	11db      	asrs	r3, r3, #7
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0306 	and.w	r3, r3, #6
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f063 030f 	orn	r3, r3, #15
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	492a      	ldr	r1, [pc, #168]	; (80052e8 <I2C_MasterRequestRead+0x164>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8ad 	bl	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e048      	b.n	80052e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	4923      	ldr	r1, [pc, #140]	; (80052ec <I2C_MasterRequestRead+0x168>)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f89d 	bl	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e038      	b.n	80052e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f825 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e017      	b.n	80052e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	11db      	asrs	r3, r3, #7
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f063 030e 	orn	r3, r3, #14
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4907      	ldr	r1, [pc, #28]	; (80052ec <I2C_MasterRequestRead+0x168>)
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f865 	bl	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	00010008 	.word	0x00010008
 80052ec:	00010002 	.word	0x00010002

080052f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005300:	e025      	b.n	800534e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d021      	beq.n	800534e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530a:	f7ff f815 	bl	8004338 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d116      	bne.n	800534e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e023      	b.n	8005396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d10d      	bne.n	8005374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	43da      	mvns	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4013      	ands	r3, r2
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	e00c      	b.n	800538e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	43da      	mvns	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	429a      	cmp	r2, r3
 8005392:	d0b6      	beq.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ac:	e051      	b.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d123      	bne.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e046      	b.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d021      	beq.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe ff93 	bl	8004338 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d116      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e020      	b.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10c      	bne.n	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e00b      	b.n	800548e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	43da      	mvns	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d18d      	bne.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a8:	e02d      	b.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f8ce 	bl	800564c <I2C_IsAcknowledgeFailed>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e02d      	b.n	8005516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d021      	beq.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fe ff39 	bl	8004338 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d116      	bne.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e007      	b.n	8005516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d1ca      	bne.n	80054aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800552a:	e02d      	b.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f88d 	bl	800564c <I2C_IsAcknowledgeFailed>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e02d      	b.n	8005598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d021      	beq.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7fe fef8 	bl	8004338 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d116      	bne.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e007      	b.n	8005598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b04      	cmp	r3, #4
 8005594:	d1ca      	bne.n	800552c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ac:	e042      	b.n	8005634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d119      	bne.n	80055f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e029      	b.n	8005644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f0:	f7fe fea2 	bl	8004338 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d116      	bne.n	8005634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e007      	b.n	8005644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d1b5      	bne.n	80055ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005662:	d11b      	bne.n	800569c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800566c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f043 0204 	orr.w	r2, r3, #4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e26c      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8087 	beq.w	80057d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056c8:	4b92      	ldr	r3, [pc, #584]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d00c      	beq.n	80056ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056d4:	4b8f      	ldr	r3, [pc, #572]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 030c 	and.w	r3, r3, #12
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d112      	bne.n	8005706 <HAL_RCC_OscConfig+0x5e>
 80056e0:	4b8c      	ldr	r3, [pc, #560]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ec:	d10b      	bne.n	8005706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ee:	4b89      	ldr	r3, [pc, #548]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d06c      	beq.n	80057d4 <HAL_RCC_OscConfig+0x12c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d168      	bne.n	80057d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e246      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570e:	d106      	bne.n	800571e <HAL_RCC_OscConfig+0x76>
 8005710:	4b80      	ldr	r3, [pc, #512]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7f      	ldr	r2, [pc, #508]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e02e      	b.n	800577c <HAL_RCC_OscConfig+0xd4>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x98>
 8005726:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7a      	ldr	r2, [pc, #488]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800572c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b78      	ldr	r3, [pc, #480]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a77      	ldr	r2, [pc, #476]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e01d      	b.n	800577c <HAL_RCC_OscConfig+0xd4>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005748:	d10c      	bne.n	8005764 <HAL_RCC_OscConfig+0xbc>
 800574a:	4b72      	ldr	r3, [pc, #456]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a71      	ldr	r2, [pc, #452]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	4b6f      	ldr	r3, [pc, #444]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6e      	ldr	r2, [pc, #440]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0xd4>
 8005764:	4b6b      	ldr	r3, [pc, #428]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6a      	ldr	r2, [pc, #424]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800576a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a67      	ldr	r2, [pc, #412]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fe fdd8 	bl	8004338 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578c:	f7fe fdd4 	bl	8004338 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	; 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e1fa      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	4b5d      	ldr	r3, [pc, #372]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0xe4>
 80057aa:	e014      	b.n	80057d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fe fdc4 	bl	8004338 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fe fdc0 	bl	8004338 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1e6      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c6:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x10c>
 80057d2:	e000      	b.n	80057d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d063      	beq.n	80058aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057e2:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057ee:	4b49      	ldr	r3, [pc, #292]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d11c      	bne.n	8005834 <HAL_RCC_OscConfig+0x18c>
 80057fa:	4b46      	ldr	r3, [pc, #280]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d116      	bne.n	8005834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005806:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_RCC_OscConfig+0x176>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d001      	beq.n	800581e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e1ba      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4939      	ldr	r1, [pc, #228]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005832:	e03a      	b.n	80058aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d020      	beq.n	800587e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x270>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005842:	f7fe fd79 	bl	8004338 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584a:	f7fe fd75 	bl	8004338 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e19b      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585c:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005868:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4927      	ldr	r1, [pc, #156]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	600b      	str	r3, [r1, #0]
 800587c:	e015      	b.n	80058aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <HAL_RCC_OscConfig+0x270>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fe fd58 	bl	8004338 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588c:	f7fe fd54 	bl	8004338 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e17a      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589e:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d03a      	beq.n	800592c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d019      	beq.n	80058f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058be:	4b17      	ldr	r3, [pc, #92]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c4:	f7fe fd38 	bl	8004338 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058cc:	f7fe fd34 	bl	8004338 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e15a      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058ea:	2001      	movs	r0, #1
 80058ec:	f000 fb2a 	bl	8005f44 <RCC_Delay>
 80058f0:	e01c      	b.n	800592c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f8:	f7fe fd1e 	bl	8004338 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fe:	e00f      	b.n	8005920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005900:	f7fe fd1a 	bl	8004338 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d908      	bls.n	8005920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e140      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000
 8005918:	42420000 	.word	0x42420000
 800591c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005920:	4b9e      	ldr	r3, [pc, #632]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e9      	bne.n	8005900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80a6 	beq.w	8005a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593e:	4b97      	ldr	r3, [pc, #604]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	4b94      	ldr	r3, [pc, #592]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	4a93      	ldr	r2, [pc, #588]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	61d3      	str	r3, [r2, #28]
 8005956:	4b91      	ldr	r3, [pc, #580]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005966:	4b8e      	ldr	r3, [pc, #568]	; (8005ba0 <HAL_RCC_OscConfig+0x4f8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005972:	4b8b      	ldr	r3, [pc, #556]	; (8005ba0 <HAL_RCC_OscConfig+0x4f8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a8a      	ldr	r2, [pc, #552]	; (8005ba0 <HAL_RCC_OscConfig+0x4f8>)
 8005978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597e:	f7fe fcdb 	bl	8004338 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005986:	f7fe fcd7 	bl	8004338 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b64      	cmp	r3, #100	; 0x64
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0fd      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	4b81      	ldr	r3, [pc, #516]	; (8005ba0 <HAL_RCC_OscConfig+0x4f8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x312>
 80059ac:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4a7a      	ldr	r2, [pc, #488]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6213      	str	r3, [r2, #32]
 80059b8:	e02d      	b.n	8005a16 <HAL_RCC_OscConfig+0x36e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x334>
 80059c2:	4b76      	ldr	r3, [pc, #472]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4a75      	ldr	r2, [pc, #468]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6213      	str	r3, [r2, #32]
 80059ce:	4b73      	ldr	r3, [pc, #460]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	4a72      	ldr	r2, [pc, #456]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	6213      	str	r3, [r2, #32]
 80059da:	e01c      	b.n	8005a16 <HAL_RCC_OscConfig+0x36e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b05      	cmp	r3, #5
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_OscConfig+0x356>
 80059e4:	4b6d      	ldr	r3, [pc, #436]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	4a6c      	ldr	r2, [pc, #432]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	6213      	str	r3, [r2, #32]
 80059f0:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4a69      	ldr	r2, [pc, #420]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6213      	str	r3, [r2, #32]
 80059fc:	e00b      	b.n	8005a16 <HAL_RCC_OscConfig+0x36e>
 80059fe:	4b67      	ldr	r3, [pc, #412]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4a66      	ldr	r2, [pc, #408]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6213      	str	r3, [r2, #32]
 8005a0a:	4b64      	ldr	r3, [pc, #400]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4a63      	ldr	r2, [pc, #396]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d015      	beq.n	8005a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1e:	f7fe fc8b 	bl	8004338 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fe fc87 	bl	8004338 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0ab      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ee      	beq.n	8005a26 <HAL_RCC_OscConfig+0x37e>
 8005a48:	e014      	b.n	8005a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7fe fc75 	bl	8004338 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fe fc71 	bl	8004338 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e095      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ee      	bne.n	8005a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4b48      	ldr	r3, [pc, #288]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4a47      	ldr	r2, [pc, #284]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8081 	beq.w	8005b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d061      	beq.n	8005b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d146      	bne.n	8005b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa4:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <HAL_RCC_OscConfig+0x4fc>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fe fc45 	bl	8004338 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fe fc41 	bl	8004338 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e067      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac4:	4b35      	ldr	r3, [pc, #212]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d108      	bne.n	8005aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ada:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	492d      	ldr	r1, [pc, #180]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aec:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a19      	ldr	r1, [r3, #32]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	430b      	orrs	r3, r1
 8005afe:	4927      	ldr	r1, [pc, #156]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_RCC_OscConfig+0x4fc>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0a:	f7fe fc15 	bl	8004338 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fe fc11 	bl	8004338 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e037      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x46a>
 8005b30:	e02f      	b.n	8005b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <HAL_RCC_OscConfig+0x4fc>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fe fbfe 	bl	8004338 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fe fbfa 	bl	8004338 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e020      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x498>
 8005b5e:	e018      	b.n	8005b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e013      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCC_OscConfig+0x4f4>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40007000 	.word	0x40007000
 8005ba4:	42420060 	.word	0x42420060

08005ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0d0      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b6a      	ldr	r3, [pc, #424]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d910      	bls.n	8005bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b67      	ldr	r3, [pc, #412]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 0207 	bic.w	r2, r3, #7
 8005bd2:	4965      	ldr	r1, [pc, #404]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0b8      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c04:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a58      	ldr	r2, [pc, #352]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c1c:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a52      	ldr	r2, [pc, #328]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c28:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	494d      	ldr	r1, [pc, #308]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d040      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d115      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e07f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e073      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c76:	4b3d      	ldr	r3, [pc, #244]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e06b      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f023 0203 	bic.w	r2, r3, #3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4936      	ldr	r1, [pc, #216]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c98:	f7fe fb4e 	bl	8004338 <HAL_GetTick>
 8005c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fe fb4a 	bl	8004338 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e053      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 020c 	and.w	r2, r3, #12
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1eb      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d210      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 0207 	bic.w	r2, r3, #7
 8005cde:	4922      	ldr	r1, [pc, #136]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e032      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4916      	ldr	r1, [pc, #88]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	490e      	ldr	r1, [pc, #56]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d36:	f000 f82d 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	5cd3      	ldrb	r3, [r2, r3]
 8005d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <HAL_RCC_ClockConfig+0x1cc>)
 8005d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1d0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f9c6 	bl	80040e8 <HAL_InitTick>

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40022000 	.word	0x40022000
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	0800d77c 	.word	0x0800d77c
 8005d74:	20000004 	.word	0x20000004
 8005d78:	20000008 	.word	0x20000008

08005d7c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <HAL_RCC_EnableCSS+0x14>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	4242004c 	.word	0x4242004c

08005d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b490      	push	{r4, r7}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d9a:	4b2a      	ldr	r3, [pc, #168]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d9c:	1d3c      	adds	r4, r7, #4
 8005d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dbe:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d002      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d003      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x46>
 8005dd2:	e02d      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dd6:	623b      	str	r3, [r7, #32]
      break;
 8005dd8:	e02d      	b.n	8005e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	0c9b      	lsrs	r3, r3, #18
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005de6:	4413      	add	r3, r2
 8005de8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005dec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005df8:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0c5b      	lsrs	r3, r3, #17
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e06:	4413      	add	r3, r2
 8005e08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e12:	fb02 f203 	mul.w	r2, r2, r3
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	e004      	b.n	8005e2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	623b      	str	r3, [r7, #32]
      break;
 8005e2e:	e002      	b.n	8005e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e32:	623b      	str	r3, [r7, #32]
      break;
 8005e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e36:	6a3b      	ldr	r3, [r7, #32]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc90      	pop	{r4, r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	0800d5e8 	.word	0x0800d5e8
 8005e48:	0800d5f8 	.word	0x0800d5f8
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	007a1200 	.word	0x007a1200
 8005e54:	003d0900 	.word	0x003d0900

08005e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr
 8005e68:	20000004 	.word	0x20000004

08005e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e70:	f7ff fff2 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005e74:	4601      	mov	r1, r0
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4a03      	ldr	r2, [pc, #12]	; (8005e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e82:	5cd3      	ldrb	r3, [r2, r3]
 8005e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	0800d78c 	.word	0x0800d78c

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e98:	f7ff ffde 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	0adb      	lsrs	r3, r3, #11
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4a03      	ldr	r2, [pc, #12]	; (8005eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eaa:	5cd3      	ldrb	r3, [r2, r3]
 8005eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	0800d78c 	.word	0x0800d78c

08005ebc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	220f      	movs	r2, #15
 8005eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_GetClockConfig+0x58>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 0203 	and.w	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RCC_GetClockConfig+0x58>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_GetClockConfig+0x58>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <HAL_RCC_GetClockConfig+0x58>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_GetClockConfig+0x5c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0207 	and.w	r2, r3, #7
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40022000 	.word	0x40022000

08005f1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_NMI_IRQHandler+0x20>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d104      	bne.n	8005f36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005f2c:	f000 f828 	bl	8005f80 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	701a      	strb	r2, [r3, #0]
  }
}
 8005f36:	bf00      	nop
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	4002100a 	.word	0x4002100a

08005f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <RCC_Delay+0x34>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <RCC_Delay+0x38>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	0a5b      	lsrs	r3, r3, #9
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f60:	bf00      	nop
  }
  while (Delay --);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	60fa      	str	r2, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f9      	bne.n	8005f60 <RCC_Delay+0x1c>
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20000004 	.word	0x20000004
 8005f7c:	10624dd3 	.word	0x10624dd3

08005f80 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e01d      	b.n	8005fda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fd ff98 	bl	8003ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f000 fb3c 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b06      	cmp	r3, #6
 800600a:	d007      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e01d      	b.n	8006076 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f815 	bl	800607e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f000 faee 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fd50 	bl	8006b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <HAL_TIM_PWM_Start+0x60>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00

080060f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d122      	bne.n	8006150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b02      	cmp	r3, #2
 8006116:	d11b      	bne.n	8006150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0202 	mvn.w	r2, #2
 8006120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa6a 	bl	8006610 <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa5d 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fa6c 	bl	8006622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b04      	cmp	r3, #4
 800615c:	d122      	bne.n	80061a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b04      	cmp	r3, #4
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0204 	mvn.w	r2, #4
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa40 	bl	8006610 <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa33 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa42 	bl	8006622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d122      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d11b      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0208 	mvn.w	r2, #8
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2204      	movs	r2, #4
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa16 	bl	8006610 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa09 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa18 	bl	8006622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b10      	cmp	r3, #16
 8006204:	d122      	bne.n	800624c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b10      	cmp	r3, #16
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0210 	mvn.w	r2, #16
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2208      	movs	r2, #8
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9ec 	bl	8006610 <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9df 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f9ee 	bl	8006622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10e      	bne.n	8006278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d107      	bne.n	8006278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0201 	mvn.w	r2, #1
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fc ffb4 	bl	80031e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d10e      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d107      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fcc3 	bl	8006c2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d10e      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d107      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9b2 	bl	8006634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d107      	bne.n	80062fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0220 	mvn.w	r2, #32
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fc8e 	bl	8006c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800631a:	2302      	movs	r3, #2
 800631c:	e0b4      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x184>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b0c      	cmp	r3, #12
 8006332:	f200 809f 	bhi.w	8006474 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006371 	.word	0x08006371
 8006340:	08006475 	.word	0x08006475
 8006344:	08006475 	.word	0x08006475
 8006348:	08006475 	.word	0x08006475
 800634c:	080063b1 	.word	0x080063b1
 8006350:	08006475 	.word	0x08006475
 8006354:	08006475 	.word	0x08006475
 8006358:	08006475 	.word	0x08006475
 800635c:	080063f3 	.word	0x080063f3
 8006360:	08006475 	.word	0x08006475
 8006364:	08006475 	.word	0x08006475
 8006368:	08006475 	.word	0x08006475
 800636c:	08006433 	.word	0x08006433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 f9c8 	bl	800670c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6999      	ldr	r1, [r3, #24]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	619a      	str	r2, [r3, #24]
      break;
 80063ae:	e062      	b.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fa0e 	bl	80067d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	619a      	str	r2, [r3, #24]
      break;
 80063f0:	e041      	b.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fa57 	bl	80068ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0204 	bic.w	r2, r2, #4
 800641c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69d9      	ldr	r1, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	61da      	str	r2, [r3, #28]
      break;
 8006430:	e021      	b.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 faa1 	bl	8006980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	021a      	lsls	r2, r3, #8
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	61da      	str	r2, [r3, #28]
      break;
 8006472:	e000      	b.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006474:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_ConfigClockSource+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0a6      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x166>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d067      	beq.n	80065b0 <HAL_TIM_ConfigClockSource+0x120>
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d80b      	bhi.n	80064fc <HAL_TIM_ConfigClockSource+0x6c>
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d073      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x140>
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d802      	bhi.n	80064f2 <HAL_TIM_ConfigClockSource+0x62>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d06f      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064f0:	e078      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d06c      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x140>
 80064f6:	2b30      	cmp	r3, #48	; 0x30
 80064f8:	d06a      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80064fa:	e073      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064fc:	2b70      	cmp	r3, #112	; 0x70
 80064fe:	d00d      	beq.n	800651c <HAL_TIM_ConfigClockSource+0x8c>
 8006500:	2b70      	cmp	r3, #112	; 0x70
 8006502:	d804      	bhi.n	800650e <HAL_TIM_ConfigClockSource+0x7e>
 8006504:	2b50      	cmp	r3, #80	; 0x50
 8006506:	d033      	beq.n	8006570 <HAL_TIM_ConfigClockSource+0xe0>
 8006508:	2b60      	cmp	r3, #96	; 0x60
 800650a:	d041      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800650c:	e06a      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d066      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x152>
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006518:	d017      	beq.n	800654a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800651a:	e063      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f000 faed 	bl	8006b0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800653e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	609a      	str	r2, [r3, #8]
      break;
 8006548:	e04c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6899      	ldr	r1, [r3, #8]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f000 fad6 	bl	8006b0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656c:	609a      	str	r2, [r3, #8]
      break;
 800656e:	e039      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6859      	ldr	r1, [r3, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	461a      	mov	r2, r3
 800657e:	f000 fa4d 	bl	8006a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2150      	movs	r1, #80	; 0x50
 8006588:	4618      	mov	r0, r3
 800658a:	f000 faa4 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800658e:	e029      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	461a      	mov	r2, r3
 800659e:	f000 fa6b 	bl	8006a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2160      	movs	r1, #96	; 0x60
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fa94 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065ae:	e019      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6859      	ldr	r1, [r3, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	461a      	mov	r2, r3
 80065be:	f000 fa2d 	bl	8006a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2140      	movs	r1, #64	; 0x40
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fa84 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065ce:	e009      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f000 fa7b 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_Base_SetConfig+0xb8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_Base_SetConfig+0x30>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d007      	beq.n	8006678 <TIM_Base_SetConfig+0x30>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a26      	ldr	r2, [pc, #152]	; (8006704 <TIM_Base_SetConfig+0xbc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_Base_SetConfig+0x30>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a25      	ldr	r2, [pc, #148]	; (8006708 <TIM_Base_SetConfig+0xc0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d108      	bne.n	800668a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a1c      	ldr	r2, [pc, #112]	; (8006700 <TIM_Base_SetConfig+0xb8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0x62>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0x62>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <TIM_Base_SetConfig+0xbc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0x62>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <TIM_Base_SetConfig+0xc0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a07      	ldr	r2, [pc, #28]	; (8006700 <TIM_Base_SetConfig+0xb8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800

0800670c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0201 	bic.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0302 	bic.w	r3, r3, #2
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <TIM_OC1_SetConfig+0xc8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10c      	bne.n	8006782 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0308 	bic.w	r3, r3, #8
 800676e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 0304 	bic.w	r3, r3, #4
 8006780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <TIM_OC1_SetConfig+0xc8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d111      	bne.n	80067ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40012c00 	.word	0x40012c00

080067d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f023 0210 	bic.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0320 	bic.w	r3, r3, #32
 8006822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <TIM_OC2_SetConfig+0xd0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10d      	bne.n	8006854 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <TIM_OC2_SetConfig+0xd0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d113      	bne.n	8006884 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	40012c00 	.word	0x40012c00

080068ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1d      	ldr	r2, [pc, #116]	; (800697c <TIM_OC3_SetConfig+0xd0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10d      	bne.n	8006926 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <TIM_OC3_SetConfig+0xd0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d113      	bne.n	8006956 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40012c00 	.word	0x40012c00

08006980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	031b      	lsls	r3, r3, #12
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <TIM_OC4_SetConfig+0x98>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d109      	bne.n	80069f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	019b      	lsls	r3, r3, #6
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr
 8006a18:	40012c00 	.word	0x40012c00

08006a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 030a 	bic.w	r3, r3, #10
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	031b      	lsls	r3, r3, #12
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b087      	sub	sp, #28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	021a      	lsls	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	609a      	str	r2, [r3, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e032      	b.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e03f      	b.n	8006cce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fd f9bc 	bl	8003fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9b1 	bl	8006fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_UART_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af02      	add	r7, sp, #8
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	f040 8083 	bne.w	8006dfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_UART_Transmit+0x2e>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e07b      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Transmit+0x40>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e074      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2221      	movs	r2, #33	; 0x21
 8006d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d2c:	f7fd fb04 	bl	8004338 <HAL_GetTick>
 8006d30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d3e:	e042      	b.n	8006dc6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d56:	d122      	bne.n	8006d9e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f8f6 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e046      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d103      	bne.n	8006d96 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3302      	adds	r3, #2
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	e017      	b.n	8006dc6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	e013      	b.n	8006dc6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f8d3 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e023      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	60ba      	str	r2, [r7, #8]
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1b7      	bne.n	8006d40 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f8ba 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e00a      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e000      	b.n	8006e00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	f040 8090 	bne.w	8006f4a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_UART_Receive+0x2e>
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e088      	b.n	8006f4c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_UART_Receive+0x40>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e081      	b.n	8006f4c <HAL_UART_Receive+0x144>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2222      	movs	r2, #34	; 0x22
 8006e5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e5e:	f7fd fa6b 	bl	8004338 <HAL_GetTick>
 8006e62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006e70:	e05c      	b.n	8006f2c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d12b      	bne.n	8006ee2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2120      	movs	r1, #32
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f85d 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e053      	b.n	8006f4c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10c      	bne.n	8006eca <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	e030      	b.n	8006f2c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	e024      	b.n	8006f2c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2120      	movs	r1, #32
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f831 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e027      	b.n	8006f4c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d108      	bne.n	8006f16 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	60ba      	str	r2, [r7, #8]
 8006f10:	b2ca      	uxtb	r2, r1
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e00a      	b.n	8006f2c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	1c59      	adds	r1, r3, #1
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d19d      	bne.n	8006e72 <HAL_UART_Receive+0x6a>
        }
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f64:	e02c      	b.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d028      	beq.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f74:	f7fd f9e0 	bl	8004338 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d21d      	bcs.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e00f      	b.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d0c3      	beq.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007022:	f023 030c 	bic.w	r3, r3, #12
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	430b      	orrs	r3, r1
 800702e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a52      	ldr	r2, [pc, #328]	; (8007194 <UART_SetConfig+0x1ac>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d14e      	bne.n	80070ee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fe ff20 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8007054:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009a      	lsls	r2, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	4a4a      	ldr	r2, [pc, #296]	; (8007198 <UART_SetConfig+0x1b0>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	0119      	lsls	r1, r3, #4
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009a      	lsls	r2, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	fbb2 f2f3 	udiv	r2, r2, r3
 800708c:	4b42      	ldr	r3, [pc, #264]	; (8007198 <UART_SetConfig+0x1b0>)
 800708e:	fba3 0302 	umull	r0, r3, r3, r2
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	2064      	movs	r0, #100	; 0x64
 8007096:	fb00 f303 	mul.w	r3, r0, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	3332      	adds	r3, #50	; 0x32
 80070a0:	4a3d      	ldr	r2, [pc, #244]	; (8007198 <UART_SetConfig+0x1b0>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ac:	4419      	add	r1, r3
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009a      	lsls	r2, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070c4:	4b34      	ldr	r3, [pc, #208]	; (8007198 <UART_SetConfig+0x1b0>)
 80070c6:	fba3 0302 	umull	r0, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2064      	movs	r0, #100	; 0x64
 80070ce:	fb00 f303 	mul.w	r3, r0, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	3332      	adds	r3, #50	; 0x32
 80070d8:	4a2f      	ldr	r2, [pc, #188]	; (8007198 <UART_SetConfig+0x1b0>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	440a      	add	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80070ec:	e04d      	b.n	800718a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80070ee:	f7fe febd 	bl	8005e6c <HAL_RCC_GetPCLK1Freq>
 80070f2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009a      	lsls	r2, r3, #2
 80070fe:	441a      	add	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	fbb2 f3f3 	udiv	r3, r2, r3
 800710a:	4a23      	ldr	r2, [pc, #140]	; (8007198 <UART_SetConfig+0x1b0>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	0119      	lsls	r1, r3, #4
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009a      	lsls	r2, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	fbb2 f2f3 	udiv	r2, r2, r3
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <UART_SetConfig+0x1b0>)
 800712c:	fba3 0302 	umull	r0, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2064      	movs	r0, #100	; 0x64
 8007134:	fb00 f303 	mul.w	r3, r0, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	3332      	adds	r3, #50	; 0x32
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <UART_SetConfig+0x1b0>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800714a:	4419      	add	r1, r3
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009a      	lsls	r2, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <UART_SetConfig+0x1b0>)
 8007164:	fba3 0302 	umull	r0, r3, r3, r2
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	2064      	movs	r0, #100	; 0x64
 800716c:	fb00 f303 	mul.w	r3, r0, r3
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	3332      	adds	r3, #50	; 0x32
 8007176:	4a08      	ldr	r2, [pc, #32]	; (8007198 <UART_SetConfig+0x1b0>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	f003 020f 	and.w	r2, r3, #15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	440a      	add	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40013800 	.word	0x40013800
 8007198:	51eb851f 	.word	0x51eb851f

0800719c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80071a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10f      	bne.n	80071ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ae:	f3ef 8310 	mrs	r3, PRIMASK
 80071b2:	607b      	str	r3, [r7, #4]
  return(result);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <osKernelInitialize+0x32>
 80071ba:	4b10      	ldr	r3, [pc, #64]	; (80071fc <osKernelInitialize+0x60>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d109      	bne.n	80071d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071c2:	f3ef 8311 	mrs	r3, BASEPRI
 80071c6:	603b      	str	r3, [r7, #0]
  return(result);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80071ce:	f06f 0305 	mvn.w	r3, #5
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e00c      	b.n	80071f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <osKernelInitialize+0x60>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <osKernelInitialize+0x60>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e002      	b.n	80071f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80071f0:	68fb      	ldr	r3, [r7, #12]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	20000248 	.word	0x20000248

08007200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007206:	f3ef 8305 	mrs	r3, IPSR
 800720a:	60bb      	str	r3, [r7, #8]
  return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10f      	bne.n	8007232 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007212:	f3ef 8310 	mrs	r3, PRIMASK
 8007216:	607b      	str	r3, [r7, #4]
  return(result);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <osKernelStart+0x32>
 800721e:	4b11      	ldr	r3, [pc, #68]	; (8007264 <osKernelStart+0x64>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d109      	bne.n	800723a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007226:	f3ef 8311 	mrs	r3, BASEPRI
 800722a:	603b      	str	r3, [r7, #0]
  return(result);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007232:	f06f 0305 	mvn.w	r3, #5
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e00e      	b.n	8007258 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <osKernelStart+0x64>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007242:	4b08      	ldr	r3, [pc, #32]	; (8007264 <osKernelStart+0x64>)
 8007244:	2202      	movs	r2, #2
 8007246:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007248:	f001 f88c 	bl	8008364 <vTaskStartScheduler>
      stat = osOK;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e002      	b.n	8007258 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000248 	.word	0x20000248

08007268 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800726e:	f3ef 8305 	mrs	r3, IPSR
 8007272:	60bb      	str	r3, [r7, #8]
  return(result);
 8007274:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727a:	f3ef 8310 	mrs	r3, PRIMASK
 800727e:	607b      	str	r3, [r7, #4]
  return(result);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <osKernelGetTickCount+0x32>
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <osKernelGetTickCount+0x4c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d109      	bne.n	80072a2 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800728e:	f3ef 8311 	mrs	r3, BASEPRI
 8007292:	603b      	str	r3, [r7, #0]
  return(result);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800729a:	f001 f97f 	bl	800859c <xTaskGetTickCountFromISR>
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	e002      	b.n	80072a8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80072a2:	f001 f96d 	bl	8008580 <xTaskGetTickCount>
 80072a6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80072a8:	68fb      	ldr	r3, [r7, #12]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000248 	.word	0x20000248

080072b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b092      	sub	sp, #72	; 0x48
 80072bc:	af04      	add	r7, sp, #16
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072c8:	f3ef 8305 	mrs	r3, IPSR
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 8094 	bne.w	80073fe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d6:	f3ef 8310 	mrs	r3, PRIMASK
 80072da:	623b      	str	r3, [r7, #32]
  return(result);
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 808d 	bne.w	80073fe <osThreadNew+0x146>
 80072e4:	4b48      	ldr	r3, [pc, #288]	; (8007408 <osThreadNew+0x150>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d106      	bne.n	80072fa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072ec:	f3ef 8311 	mrs	r3, BASEPRI
 80072f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 8082 	bne.w	80073fe <osThreadNew+0x146>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d07e      	beq.n	80073fe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007304:	2318      	movs	r3, #24
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007308:	2300      	movs	r3, #0
 800730a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800730c:	f107 031b 	add.w	r3, r7, #27
 8007310:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d045      	beq.n	80073aa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <osThreadNew+0x74>
        name = attr->name;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <osThreadNew+0x9a>
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	2b38      	cmp	r3, #56	; 0x38
 8007344:	d805      	bhi.n	8007352 <osThreadNew+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <osThreadNew+0x9e>
        return (NULL);
 8007352:	2300      	movs	r3, #0
 8007354:	e054      	b.n	8007400 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	089b      	lsrs	r3, r3, #2
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00e      	beq.n	800738c <osThreadNew+0xd4>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b5b      	cmp	r3, #91	; 0x5b
 8007374:	d90a      	bls.n	800738c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800737a:	2b00      	cmp	r3, #0
 800737c:	d006      	beq.n	800738c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <osThreadNew+0xd4>
        mem = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
 800738a:	e010      	b.n	80073ae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10c      	bne.n	80073ae <osThreadNew+0xf6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d108      	bne.n	80073ae <osThreadNew+0xf6>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <osThreadNew+0xf6>
          mem = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a8:	e001      	b.n	80073ae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d110      	bne.n	80073d6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073bc:	9202      	str	r2, [sp, #8]
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fe02 	bl	8007fd4 <xTaskCreateStatic>
 80073d0:	4603      	mov	r3, r0
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e013      	b.n	80073fe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d110      	bne.n	80073fe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fe49 	bl	8008086 <xTaskCreate>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d001      	beq.n	80073fe <osThreadNew+0x146>
          hTask = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3738      	adds	r7, #56	; 0x38
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000248 	.word	0x20000248

0800740c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007414:	f3ef 8305 	mrs	r3, IPSR
 8007418:	613b      	str	r3, [r7, #16]
  return(result);
 800741a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10f      	bne.n	8007440 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007420:	f3ef 8310 	mrs	r3, PRIMASK
 8007424:	60fb      	str	r3, [r7, #12]
  return(result);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <osDelay+0x34>
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <osDelay+0x58>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d109      	bne.n	8007448 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007434:	f3ef 8311 	mrs	r3, BASEPRI
 8007438:	60bb      	str	r3, [r7, #8]
  return(result);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <osDelay+0x3c>
    stat = osErrorISR;
 8007440:	f06f 0305 	mvn.w	r3, #5
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e007      	b.n	8007458 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 ff52 	bl	80082fc <vTaskDelay>
    }
  }

  return (stat);
 8007458:	697b      	ldr	r3, [r7, #20]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000248 	.word	0x20000248

08007468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a06      	ldr	r2, [pc, #24]	; (8007490 <vApplicationGetIdleTaskMemory+0x28>)
 8007478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4a05      	ldr	r2, [pc, #20]	; (8007494 <vApplicationGetIdleTaskMemory+0x2c>)
 800747e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	601a      	str	r2, [r3, #0]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr
 8007490:	2000024c 	.word	0x2000024c
 8007494:	200002a8 	.word	0x200002a8

08007498 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80074a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4a06      	ldr	r2, [pc, #24]	; (80074c8 <vApplicationGetTimerTaskMemory+0x30>)
 80074ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	200004a8 	.word	0x200004a8
 80074c8:	20000504 	.word	0x20000504

080074cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 0208 	add.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f103 0208 	add.w	r2, r3, #8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f103 0208 	add.w	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d103      	bne.n	8007588 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e00c      	b.n	80075a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3308      	adds	r3, #8
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e002      	b.n	8007596 <vListInsert+0x2e>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d2f6      	bcs.n	8007590 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr

080075d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6892      	ldr	r2, [r2, #8]
 80075ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6852      	ldr	r2, [r2, #4]
 80075f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d103      	bne.n	800760c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	1e5a      	subs	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
	...

0800762c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	e7fe      	b.n	8007652 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007654:	f001 ffa8 	bl	80095a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	441a      	add	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007684:	3b01      	subs	r3, #1
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800768a:	fb01 f303 	mul.w	r3, r1, r3
 800768e:	441a      	add	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d114      	bne.n	80076d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01a      	beq.n	80076e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3310      	adds	r3, #16
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f8ea 	bl	8008890 <xTaskRemoveFromEventList>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d012      	beq.n	80076e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <xQueueGenericReset+0xcc>)
 80076c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	e009      	b.n	80076e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3310      	adds	r3, #16
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fef7 	bl	80074cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fef2 	bl	80074cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076e8:	f001 ff8c 	bl	8009604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076ec:	2301      	movs	r3, #1
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08e      	sub	sp, #56	; 0x38
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <xQueueGenericCreateStatic+0x28>
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
 8007722:	e7fe      	b.n	8007722 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <xQueueGenericCreateStatic+0x42>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
 800773c:	e7fe      	b.n	800773c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <xQueueGenericCreateStatic+0x4e>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <xQueueGenericCreateStatic+0x52>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <xQueueGenericCreateStatic+0x54>
 800774e:	2300      	movs	r3, #0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <xQueueGenericCreateStatic+0x6c>
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	623b      	str	r3, [r7, #32]
 8007766:	e7fe      	b.n	8007766 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <xQueueGenericCreateStatic+0x78>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <xQueueGenericCreateStatic+0x7c>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <xQueueGenericCreateStatic+0x7e>
 8007778:	2300      	movs	r3, #0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <xQueueGenericCreateStatic+0x96>
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e7fe      	b.n	8007790 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007792:	2350      	movs	r3, #80	; 0x50
 8007794:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b50      	cmp	r3, #80	; 0x50
 800779a:	d009      	beq.n	80077b0 <xQueueGenericCreateStatic+0xb4>
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	e7fe      	b.n	80077ae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4613      	mov	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f805 	bl	80077e0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077d8:	4618      	mov	r0, r3
 80077da:	3730      	adds	r7, #48	; 0x30
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	e002      	b.n	8007802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800780e:	2101      	movs	r1, #1
 8007810:	69b8      	ldr	r0, [r7, #24]
 8007812:	f7ff ff0b 	bl	800762c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08e      	sub	sp, #56	; 0x38
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007836:	2300      	movs	r3, #0
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <xQueueGenericSend+0x30>
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
 8007856:	e7fe      	b.n	8007856 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <xQueueGenericSend+0x3e>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <xQueueGenericSend+0x42>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueGenericSend+0x44>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <xQueueGenericSend+0x5c>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
 8007882:	e7fe      	b.n	8007882 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d103      	bne.n	8007892 <xQueueGenericSend+0x6a>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <xQueueGenericSend+0x6e>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSend+0x70>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <xQueueGenericSend+0x88>
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	623b      	str	r3, [r7, #32]
 80078ae:	e7fe      	b.n	80078ae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b0:	f001 f9a8 	bl	8008c04 <xTaskGetSchedulerState>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xQueueGenericSend+0x98>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <xQueueGenericSend+0x9c>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <xQueueGenericSend+0x9e>
 80078c4:	2300      	movs	r3, #0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <xQueueGenericSend+0xb6>
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e7fe      	b.n	80078dc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078de:	f001 fe63 	bl	80095a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <xQueueGenericSend+0xcc>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d129      	bne.n	8007948 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078fa:	f000 f9ff 	bl	8007cfc <prvCopyDataToQueue>
 80078fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d010      	beq.n	800792a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	4618      	mov	r0, r3
 800790e:	f000 ffbf 	bl	8008890 <xTaskRemoveFromEventList>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d013      	beq.n	8007940 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007918:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <xQueueGenericSend+0x1f0>)
 800791a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	e00a      	b.n	8007940 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007930:	4b39      	ldr	r3, [pc, #228]	; (8007a18 <xQueueGenericSend+0x1f0>)
 8007932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007940:	f001 fe60 	bl	8009604 <vPortExitCritical>
				return pdPASS;
 8007944:	2301      	movs	r3, #1
 8007946:	e063      	b.n	8007a10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800794e:	f001 fe59 	bl	8009604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007952:	2300      	movs	r3, #0
 8007954:	e05c      	b.n	8007a10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800795c:	f107 0314 	add.w	r3, r7, #20
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fff7 	bl	8008954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007966:	2301      	movs	r3, #1
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800796a:	f001 fe4b 	bl	8009604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800796e:	f000 fd5d 	bl	800842c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007972:	f001 fe19 	bl	80095a8 <vPortEnterCritical>
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800797c:	b25b      	sxtb	r3, r3
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d103      	bne.n	800798c <xQueueGenericSend+0x164>
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007992:	b25b      	sxtb	r3, r3
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d103      	bne.n	80079a2 <xQueueGenericSend+0x17a>
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a2:	f001 fe2f 	bl	8009604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079a6:	1d3a      	adds	r2, r7, #4
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 ffe6 	bl	8008980 <xTaskCheckForTimeOut>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d124      	bne.n	8007a04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079bc:	f000 fa96 	bl	8007eec <prvIsQueueFull>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d018      	beq.n	80079f8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	3310      	adds	r3, #16
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 ff10 	bl	80087f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d6:	f000 fa21 	bl	8007e1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079da:	f000 fd35 	bl	8008448 <xTaskResumeAll>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af7c 	bne.w	80078de <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <xQueueGenericSend+0x1f0>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	e772      	b.n	80078de <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079fa:	f000 fa0f 	bl	8007e1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079fe:	f000 fd23 	bl	8008448 <xTaskResumeAll>
 8007a02:	e76c      	b.n	80078de <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a06:	f000 fa09 	bl	8007e1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a0a:	f000 fd1d 	bl	8008448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a0e:	2300      	movs	r3, #0
		}
	}
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3738      	adds	r7, #56	; 0x38
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08e      	sub	sp, #56	; 0x38
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <xQueueGenericSendFromISR+0x2c>
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
 8007a46:	e7fe      	b.n	8007a46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d103      	bne.n	8007a56 <xQueueGenericSendFromISR+0x3a>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <xQueueGenericSendFromISR+0x3e>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericSendFromISR+0x40>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <xQueueGenericSendFromISR+0x58>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d103      	bne.n	8007a82 <xQueueGenericSendFromISR+0x66>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <xQueueGenericSendFromISR+0x6a>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <xQueueGenericSendFromISR+0x6c>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <xQueueGenericSendFromISR+0x84>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	e7fe      	b.n	8007a9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aa0:	f001 fe3c 	bl	800971c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aa4:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61ba      	str	r2, [r7, #24]
 8007aba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007abc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d302      	bcc.n	8007ad2 <xQueueGenericSendFromISR+0xb6>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d12c      	bne.n	8007b2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae2:	f000 f90b 	bl	8007cfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d112      	bne.n	8007b16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d016      	beq.n	8007b26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fec7 	bl	8008890 <xTaskRemoveFromEventList>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e007      	b.n	8007b26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	b25a      	sxtb	r2, r3
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b26:	2301      	movs	r3, #1
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b2a:	e001      	b.n	8007b30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3738      	adds	r7, #56	; 0x38
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08c      	sub	sp, #48	; 0x30
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <xQueueReceive+0x2e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	623b      	str	r3, [r7, #32]
 8007b70:	e7fe      	b.n	8007b70 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <xQueueReceive+0x3c>
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <xQueueReceive+0x40>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <xQueueReceive+0x42>
 8007b84:	2300      	movs	r3, #0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <xQueueReceive+0x5a>
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e7fe      	b.n	8007b9c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9e:	f001 f831 	bl	8008c04 <xTaskGetSchedulerState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xQueueReceive+0x6a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueReceive+0x6e>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueReceive+0x70>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <xQueueReceive+0x88>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	e7fe      	b.n	8007bca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bcc:	f001 fcec 	bl	80095a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01f      	beq.n	8007c1c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be0:	f000 f8f6 	bl	8007dd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	1e5a      	subs	r2, r3, #1
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00f      	beq.n	8007c14 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	3310      	adds	r3, #16
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fe49 	bl	8008890 <xTaskRemoveFromEventList>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c04:	4b3c      	ldr	r3, [pc, #240]	; (8007cf8 <xQueueReceive+0x1b4>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c14:	f001 fcf6 	bl	8009604 <vPortExitCritical>
				return pdPASS;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e069      	b.n	8007cf0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c22:	f001 fcef 	bl	8009604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e062      	b.n	8007cf0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c30:	f107 0310 	add.w	r3, r7, #16
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fe8d 	bl	8008954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c3e:	f001 fce1 	bl	8009604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c42:	f000 fbf3 	bl	800842c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c46:	f001 fcaf 	bl	80095a8 <vPortEnterCritical>
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c50:	b25b      	sxtb	r3, r3
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d103      	bne.n	8007c60 <xQueueReceive+0x11c>
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d103      	bne.n	8007c76 <xQueueReceive+0x132>
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c76:	f001 fcc5 	bl	8009604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c7a:	1d3a      	adds	r2, r7, #4
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fe7c 	bl	8008980 <xTaskCheckForTimeOut>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d123      	bne.n	8007cd6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c90:	f000 f916 	bl	8007ec0 <prvIsQueueEmpty>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	3324      	adds	r3, #36	; 0x24
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fda6 	bl	80087f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007caa:	f000 f8b7 	bl	8007e1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cae:	f000 fbcb 	bl	8008448 <xTaskResumeAll>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d189      	bne.n	8007bcc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <xQueueReceive+0x1b4>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	e780      	b.n	8007bcc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ccc:	f000 f8a6 	bl	8007e1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd0:	f000 fbba 	bl	8008448 <xTaskResumeAll>
 8007cd4:	e77a      	b.n	8007bcc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd8:	f000 f8a0 	bl	8007e1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cdc:	f000 fbb4 	bl	8008448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f000 f8ed 	bl	8007ec0 <prvIsQueueEmpty>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f af6f 	beq.w	8007bcc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3730      	adds	r7, #48	; 0x30
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10d      	bne.n	8007d36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d14d      	bne.n	8007dbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 ff8a 	bl	8008c40 <xTaskPriorityDisinherit>
 8007d2c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	e043      	b.n	8007dbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d119      	bne.n	8007d70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6898      	ldr	r0, [r3, #8]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	461a      	mov	r2, r3
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	f001 ff26 	bl	8009b98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d32b      	bcc.n	8007dbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	609a      	str	r2, [r3, #8]
 8007d6e:	e026      	b.n	8007dbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68d8      	ldr	r0, [r3, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	f001 ff0c 	bl	8009b98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	425b      	negs	r3, r3
 8007d8a:	441a      	add	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d207      	bcs.n	8007dac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	425b      	negs	r3, r3
 8007da6:	441a      	add	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d105      	bne.n	8007dbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dc6:	697b      	ldr	r3, [r7, #20]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d018      	beq.n	8007e14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	441a      	add	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d303      	bcc.n	8007e04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68d9      	ldr	r1, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	f001 fec2 	bl	8009b98 <memcpy>
	}
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e24:	f001 fbc0 	bl	80095a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e30:	e011      	b.n	8007e56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fd26 	bl	8008890 <xTaskRemoveFromEventList>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e4a:	f000 fdf9 	bl	8008a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dce9      	bgt.n	8007e32 <prvUnlockQueue+0x16>
 8007e5e:	e000      	b.n	8007e62 <prvUnlockQueue+0x46>
					break;
 8007e60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e6a:	f001 fbcb 	bl	8009604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e6e:	f001 fb9b 	bl	80095a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e7a:	e011      	b.n	8007ea0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d012      	beq.n	8007eaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3310      	adds	r3, #16
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fd01 	bl	8008890 <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e94:	f000 fdd4 	bl	8008a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dce9      	bgt.n	8007e7c <prvUnlockQueue+0x60>
 8007ea8:	e000      	b.n	8007eac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	22ff      	movs	r2, #255	; 0xff
 8007eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eb4:	f001 fba6 	bl	8009604 <vPortExitCritical>
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ec8:	f001 fb6e 	bl	80095a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e001      	b.n	8007ede <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ede:	f001 fb91 	bl	8009604 <vPortExitCritical>

	return xReturn;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ef4:	f001 fb58 	bl	80095a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d102      	bne.n	8007f0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	e001      	b.n	8007f0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f0e:	f001 fb79 	bl	8009604 <vPortExitCritical>

	return xReturn;
 8007f12:	68fb      	ldr	r3, [r7, #12]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e014      	b.n	8007f56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f2c:	4a0e      	ldr	r2, [pc, #56]	; (8007f68 <vQueueAddToRegistry+0x4c>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f38:	490b      	ldr	r1, [pc, #44]	; (8007f68 <vQueueAddToRegistry+0x4c>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <vQueueAddToRegistry+0x4c>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4413      	add	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f4e:	e005      	b.n	8007f5c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b07      	cmp	r3, #7
 8007f5a:	d9e7      	bls.n	8007f2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	20004078 	.word	0x20004078

08007f6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f7c:	f001 fb14 	bl	80095a8 <vPortEnterCritical>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f86:	b25b      	sxtb	r3, r3
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d103      	bne.n	8007f96 <vQueueWaitForMessageRestricted+0x2a>
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f9c:	b25b      	sxtb	r3, r3
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d103      	bne.n	8007fac <vQueueWaitForMessageRestricted+0x40>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fac:	f001 fb2a 	bl	8009604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d106      	bne.n	8007fc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fc3b 	bl	800883c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fc6:	6978      	ldr	r0, [r7, #20]
 8007fc8:	f7ff ff28 	bl	8007e1c <prvUnlockQueue>
	}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08e      	sub	sp, #56	; 0x38
 8007fd8:	af04      	add	r7, sp, #16
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d109      	bne.n	8007ffc <xTaskCreateStatic+0x28>
 8007fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	623b      	str	r3, [r7, #32]
 8007ffa:	e7fe      	b.n	8007ffa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <xTaskCreateStatic+0x42>
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e7fe      	b.n	8008014 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008016:	235c      	movs	r3, #92	; 0x5c
 8008018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b5c      	cmp	r3, #92	; 0x5c
 800801e:	d009      	beq.n	8008034 <xTaskCreateStatic+0x60>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e7fe      	b.n	8008032 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01e      	beq.n	8008078 <xTaskCreateStatic+0xa4>
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01b      	beq.n	8008078 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008052:	2300      	movs	r3, #0
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	f107 0314 	add.w	r3, r7, #20
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f850 	bl	8008110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008072:	f000 f8d3 	bl	800821c <prvAddNewTaskToReadyList>
 8008076:	e001      	b.n	800807c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800807c:	697b      	ldr	r3, [r7, #20]
	}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008086:	b580      	push	{r7, lr}
 8008088:	b08c      	sub	sp, #48	; 0x30
 800808a:	af04      	add	r7, sp, #16
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4618      	mov	r0, r3
 800809c:	f001 fb7a 	bl	8009794 <pvPortMalloc>
 80080a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80080a8:	205c      	movs	r0, #92	; 0x5c
 80080aa:	f001 fb73 	bl	8009794 <pvPortMalloc>
 80080ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
 80080bc:	e005      	b.n	80080ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	f001 fc2a 	bl	8009918 <vPortFree>
 80080c4:	e001      	b.n	80080ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d017      	beq.n	8008100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	2300      	movs	r3, #0
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 f80e 	bl	8008110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080f4:	69f8      	ldr	r0, [r7, #28]
 80080f6:	f000 f891 	bl	800821c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080fa:	2301      	movs	r3, #1
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	e002      	b.n	8008106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008106:	69bb      	ldr	r3, [r7, #24]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	461a      	mov	r2, r3
 8008128:	21a5      	movs	r1, #165	; 0xa5
 800812a:	f001 fd40 	bl	8009bae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008138:	3b01      	subs	r3, #1
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <prvInitialiseNewTask+0x56>
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	e7fe      	b.n	8008164 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e012      	b.n	8008192 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	7819      	ldrb	r1, [r3, #0]
 8008174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	3334      	adds	r3, #52	; 0x34
 800817c:	460a      	mov	r2, r1
 800817e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b0f      	cmp	r3, #15
 8008196:	d9e9      	bls.n	800816c <prvInitialiseNewTask+0x5c>
 8008198:	e000      	b.n	800819c <prvInitialiseNewTask+0x8c>
		{
			break;
 800819a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	2b37      	cmp	r3, #55	; 0x37
 80081a8:	d901      	bls.n	80081ae <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081aa:	2337      	movs	r3, #55	; 0x37
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2200      	movs	r2, #0
 80081be:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	3304      	adds	r3, #4
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff f9a0 	bl	800750a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	3318      	adds	r3, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f99b 	bl	800750a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	69b8      	ldr	r0, [r7, #24]
 80081fe:	f001 f8e9 	bl	80093d4 <pxPortInitialiseStack>
 8008202:	4602      	mov	r2, r0
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800820e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008214:	bf00      	nop
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008224:	f001 f9c0 	bl	80095a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008228:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a2c      	ldr	r2, [pc, #176]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 8008230:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008232:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008240:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d110      	bne.n	800826a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008248:	f000 fc1e 	bl	8008a88 <prvInitialiseTaskLists>
 800824c:	e00d      	b.n	800826a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <prvAddNewTaskToReadyList+0xcc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008256:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d802      	bhi.n	800826a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008264:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 8008272:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <prvAddNewTaskToReadyList+0xd4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d903      	bls.n	8008290 <prvAddNewTaskToReadyList+0x74>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <prvAddNewTaskToReadyList+0xd4>)
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4a15      	ldr	r2, [pc, #84]	; (80082f4 <prvAddNewTaskToReadyList+0xd8>)
 800829e:	441a      	add	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7ff f93b 	bl	8007522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082ac:	f001 f9aa 	bl	8009604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <prvAddNewTaskToReadyList+0xcc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d207      	bcs.n	80082d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvAddNewTaskToReadyList+0xdc>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000dd8 	.word	0x20000dd8
 80082e4:	20000904 	.word	0x20000904
 80082e8:	20000de4 	.word	0x20000de4
 80082ec:	20000df4 	.word	0x20000df4
 80082f0:	20000de0 	.word	0x20000de0
 80082f4:	20000908 	.word	0x20000908
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d016      	beq.n	800833c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <vTaskDelay+0x60>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <vTaskDelay+0x2e>
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	60bb      	str	r3, [r7, #8]
 8008328:	e7fe      	b.n	8008328 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800832a:	f000 f87f 	bl	800842c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fcf1 	bl	8008d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008336:	f000 f887 	bl	8008448 <xTaskResumeAll>
 800833a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d107      	bne.n	8008352 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <vTaskDelay+0x64>)
 8008344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000e00 	.word	0x20000e00
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008372:	463a      	mov	r2, r7
 8008374:	1d39      	adds	r1, r7, #4
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff f874 	bl	8007468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	9202      	str	r2, [sp, #8]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	460a      	mov	r2, r1
 8008392:	4920      	ldr	r1, [pc, #128]	; (8008414 <vTaskStartScheduler+0xb0>)
 8008394:	4820      	ldr	r0, [pc, #128]	; (8008418 <vTaskStartScheduler+0xb4>)
 8008396:	f7ff fe1d 	bl	8007fd4 <xTaskCreateStatic>
 800839a:	4602      	mov	r2, r0
 800839c:	4b1f      	ldr	r3, [pc, #124]	; (800841c <vTaskStartScheduler+0xb8>)
 800839e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <vTaskStartScheduler+0xb8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e001      	b.n	80083b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083b8:	f000 fd02 	bl	8008dc0 <xTimerCreateTimerTask>
 80083bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d115      	bne.n	80083f0 <vTaskStartScheduler+0x8c>
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d6:	4b12      	ldr	r3, [pc, #72]	; (8008420 <vTaskStartScheduler+0xbc>)
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <vTaskStartScheduler+0xc0>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80083e4:	4b10      	ldr	r3, [pc, #64]	; (8008428 <vTaskStartScheduler+0xc4>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ea:	f001 f86d 	bl	80094c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083ee:	e00d      	b.n	800840c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d109      	bne.n	800840c <vTaskStartScheduler+0xa8>
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e7fe      	b.n	800840a <vTaskStartScheduler+0xa6>
}
 800840c:	bf00      	nop
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0800d5fc 	.word	0x0800d5fc
 8008418:	08008a59 	.word	0x08008a59
 800841c:	20000dfc 	.word	0x20000dfc
 8008420:	20000df8 	.word	0x20000df8
 8008424:	20000de4 	.word	0x20000de4
 8008428:	20000ddc 	.word	0x20000ddc

0800842c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <vTaskSuspendAll+0x18>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a03      	ldr	r2, [pc, #12]	; (8008444 <vTaskSuspendAll+0x18>)
 8008438:	6013      	str	r3, [r2, #0]
}
 800843a:	bf00      	nop
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000e00 	.word	0x20000e00

08008448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008456:	4b41      	ldr	r3, [pc, #260]	; (800855c <xTaskResumeAll+0x114>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <xTaskResumeAll+0x2a>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	e7fe      	b.n	8008470 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008472:	f001 f899 	bl	80095a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008476:	4b39      	ldr	r3, [pc, #228]	; (800855c <xTaskResumeAll+0x114>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3b01      	subs	r3, #1
 800847c:	4a37      	ldr	r2, [pc, #220]	; (800855c <xTaskResumeAll+0x114>)
 800847e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008480:	4b36      	ldr	r3, [pc, #216]	; (800855c <xTaskResumeAll+0x114>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d162      	bne.n	800854e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008488:	4b35      	ldr	r3, [pc, #212]	; (8008560 <xTaskResumeAll+0x118>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05e      	beq.n	800854e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008490:	e02f      	b.n	80084f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008492:	4b34      	ldr	r3, [pc, #208]	; (8008564 <xTaskResumeAll+0x11c>)
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3318      	adds	r3, #24
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff f89a 	bl	80075d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff f895 	bl	80075d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	4b2d      	ldr	r3, [pc, #180]	; (8008568 <xTaskResumeAll+0x120>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d903      	bls.n	80084c2 <xTaskResumeAll+0x7a>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084be:	4a2a      	ldr	r2, [pc, #168]	; (8008568 <xTaskResumeAll+0x120>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4a27      	ldr	r2, [pc, #156]	; (800856c <xTaskResumeAll+0x124>)
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f7ff f822 	bl	8007522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <xTaskResumeAll+0x128>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80084ec:	4b21      	ldr	r3, [pc, #132]	; (8008574 <xTaskResumeAll+0x12c>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <xTaskResumeAll+0x11c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1cb      	bne.n	8008492 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008500:	f000 fb5c 	bl	8008bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008504:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <xTaskResumeAll+0x130>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d010      	beq.n	8008532 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008510:	f000 f856 	bl	80085c0 <xTaskIncrementTick>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <xTaskResumeAll+0x12c>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3b01      	subs	r3, #1
 8008524:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f1      	bne.n	8008510 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <xTaskResumeAll+0x130>)
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <xTaskResumeAll+0x12c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800853a:	2301      	movs	r3, #1
 800853c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <xTaskResumeAll+0x134>)
 8008540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800854e:	f001 f859 	bl	8009604 <vPortExitCritical>

	return xAlreadyYielded;
 8008552:	68bb      	ldr	r3, [r7, #8]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000e00 	.word	0x20000e00
 8008560:	20000dd8 	.word	0x20000dd8
 8008564:	20000d98 	.word	0x20000d98
 8008568:	20000de0 	.word	0x20000de0
 800856c:	20000908 	.word	0x20000908
 8008570:	20000904 	.word	0x20000904
 8008574:	20000dec 	.word	0x20000dec
 8008578:	20000de8 	.word	0x20000de8
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008586:	4b04      	ldr	r3, [pc, #16]	; (8008598 <xTaskGetTickCount+0x18>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800858c:	687b      	ldr	r3, [r7, #4]
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr
 8008598:	20000ddc 	.word	0x20000ddc

0800859c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085a2:	f001 f8bb 	bl	800971c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80085a6:	2300      	movs	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80085aa:	4b04      	ldr	r3, [pc, #16]	; (80085bc <xTaskGetTickCountFromISR+0x20>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085b0:	683b      	ldr	r3, [r7, #0]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000ddc 	.word	0x20000ddc

080085c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ca:	4b51      	ldr	r3, [pc, #324]	; (8008710 <xTaskIncrementTick+0x150>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 808d 	bne.w	80086ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085d4:	4b4f      	ldr	r3, [pc, #316]	; (8008714 <xTaskIncrementTick+0x154>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085dc:	4a4d      	ldr	r2, [pc, #308]	; (8008714 <xTaskIncrementTick+0x154>)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11f      	bne.n	8008628 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80085e8:	4b4b      	ldr	r3, [pc, #300]	; (8008718 <xTaskIncrementTick+0x158>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d009      	beq.n	8008606 <xTaskIncrementTick+0x46>
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	e7fe      	b.n	8008604 <xTaskIncrementTick+0x44>
 8008606:	4b44      	ldr	r3, [pc, #272]	; (8008718 <xTaskIncrementTick+0x158>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	4b43      	ldr	r3, [pc, #268]	; (800871c <xTaskIncrementTick+0x15c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a41      	ldr	r2, [pc, #260]	; (8008718 <xTaskIncrementTick+0x158>)
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	4a41      	ldr	r2, [pc, #260]	; (800871c <xTaskIncrementTick+0x15c>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4b41      	ldr	r3, [pc, #260]	; (8008720 <xTaskIncrementTick+0x160>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <xTaskIncrementTick+0x160>)
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	f000 faca 	bl	8008bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <xTaskIncrementTick+0x164>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	d34e      	bcc.n	80086d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008632:	4b39      	ldr	r3, [pc, #228]	; (8008718 <xTaskIncrementTick+0x158>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <xTaskIncrementTick+0x80>
 800863c:	2301      	movs	r3, #1
 800863e:	e000      	b.n	8008642 <xTaskIncrementTick+0x82>
 8008640:	2300      	movs	r3, #0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008646:	4b37      	ldr	r3, [pc, #220]	; (8008724 <xTaskIncrementTick+0x164>)
 8008648:	f04f 32ff 	mov.w	r2, #4294967295
 800864c:	601a      	str	r2, [r3, #0]
					break;
 800864e:	e03f      	b.n	80086d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008650:	4b31      	ldr	r3, [pc, #196]	; (8008718 <xTaskIncrementTick+0x158>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d203      	bcs.n	8008670 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008668:	4a2e      	ldr	r2, [pc, #184]	; (8008724 <xTaskIncrementTick+0x164>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
						break;
 800866e:	e02f      	b.n	80086d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3304      	adds	r3, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe ffaf 	bl	80075d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	3318      	adds	r3, #24
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe ffa6 	bl	80075d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008690:	4b25      	ldr	r3, [pc, #148]	; (8008728 <xTaskIncrementTick+0x168>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d903      	bls.n	80086a0 <xTaskIncrementTick+0xe0>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	4a22      	ldr	r2, [pc, #136]	; (8008728 <xTaskIncrementTick+0x168>)
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4a1f      	ldr	r2, [pc, #124]	; (800872c <xTaskIncrementTick+0x16c>)
 80086ae:	441a      	add	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fe ff33 	bl	8007522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b1b      	ldr	r3, [pc, #108]	; (8008730 <xTaskIncrementTick+0x170>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d3b3      	bcc.n	8008632 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80086ca:	2301      	movs	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ce:	e7b0      	b.n	8008632 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086d0:	4b17      	ldr	r3, [pc, #92]	; (8008730 <xTaskIncrementTick+0x170>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d6:	4915      	ldr	r1, [pc, #84]	; (800872c <xTaskIncrementTick+0x16c>)
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d907      	bls.n	80086f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80086e8:	2301      	movs	r3, #1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e004      	b.n	80086f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086ee:	4b11      	ldr	r3, [pc, #68]	; (8008734 <xTaskIncrementTick+0x174>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a0f      	ldr	r2, [pc, #60]	; (8008734 <xTaskIncrementTick+0x174>)
 80086f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086f8:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <xTaskIncrementTick+0x178>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008704:	697b      	ldr	r3, [r7, #20]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000e00 	.word	0x20000e00
 8008714:	20000ddc 	.word	0x20000ddc
 8008718:	20000d90 	.word	0x20000d90
 800871c:	20000d94 	.word	0x20000d94
 8008720:	20000df0 	.word	0x20000df0
 8008724:	20000df8 	.word	0x20000df8
 8008728:	20000de0 	.word	0x20000de0
 800872c:	20000908 	.word	0x20000908
 8008730:	20000904 	.word	0x20000904
 8008734:	20000de8 	.word	0x20000de8
 8008738:	20000dec 	.word	0x20000dec

0800873c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008742:	4b27      	ldr	r3, [pc, #156]	; (80087e0 <vTaskSwitchContext+0xa4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800874a:	4b26      	ldr	r3, [pc, #152]	; (80087e4 <vTaskSwitchContext+0xa8>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008750:	e040      	b.n	80087d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008752:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <vTaskSwitchContext+0xa8>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008758:	4b23      	ldr	r3, [pc, #140]	; (80087e8 <vTaskSwitchContext+0xac>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e00f      	b.n	8008780 <vTaskSwitchContext+0x44>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <vTaskSwitchContext+0x3e>
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	607b      	str	r3, [r7, #4]
 8008778:	e7fe      	b.n	8008778 <vTaskSwitchContext+0x3c>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3b01      	subs	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	491a      	ldr	r1, [pc, #104]	; (80087ec <vTaskSwitchContext+0xb0>)
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0e5      	beq.n	8008760 <vTaskSwitchContext+0x24>
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4a13      	ldr	r2, [pc, #76]	; (80087ec <vTaskSwitchContext+0xb0>)
 80087a0:	4413      	add	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	3308      	adds	r3, #8
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d104      	bne.n	80087c4 <vTaskSwitchContext+0x88>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	605a      	str	r2, [r3, #4]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <vTaskSwitchContext+0xb4>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <vTaskSwitchContext+0xac>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6013      	str	r3, [r2, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20000e00 	.word	0x20000e00
 80087e4:	20000dec 	.word	0x20000dec
 80087e8:	20000de0 	.word	0x20000de0
 80087ec:	20000908 	.word	0x20000908
 80087f0:	20000904 	.word	0x20000904

080087f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d109      	bne.n	8008818 <vTaskPlaceOnEventList+0x24>
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e7fe      	b.n	8008816 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008818:	4b07      	ldr	r3, [pc, #28]	; (8008838 <vTaskPlaceOnEventList+0x44>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3318      	adds	r3, #24
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe fea1 	bl	8007568 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008826:	2101      	movs	r1, #1
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	f000 fa75 	bl	8008d18 <prvAddCurrentTaskToDelayedList>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000904 	.word	0x20000904

0800883c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <vTaskPlaceOnEventListRestricted+0x26>
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	e7fe      	b.n	8008860 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <vTaskPlaceOnEventListRestricted+0x50>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3318      	adds	r3, #24
 8008868:	4619      	mov	r1, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7fe fe59 	bl	8007522 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008876:	f04f 33ff 	mov.w	r3, #4294967295
 800887a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	f000 fa4a 	bl	8008d18 <prvAddCurrentTaskToDelayedList>
	}
 8008884:	bf00      	nop
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000904 	.word	0x20000904

08008890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <xTaskRemoveFromEventList+0x2a>
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e7fe      	b.n	80088b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3318      	adds	r3, #24
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fe8a 	bl	80075d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c4:	4b1d      	ldr	r3, [pc, #116]	; (800893c <xTaskRemoveFromEventList+0xac>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11d      	bne.n	8008908 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fe81 	bl	80075d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	4b19      	ldr	r3, [pc, #100]	; (8008940 <xTaskRemoveFromEventList+0xb0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d903      	bls.n	80088ea <xTaskRemoveFromEventList+0x5a>
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	4a16      	ldr	r2, [pc, #88]	; (8008940 <xTaskRemoveFromEventList+0xb0>)
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4a13      	ldr	r2, [pc, #76]	; (8008944 <xTaskRemoveFromEventList+0xb4>)
 80088f8:	441a      	add	r2, r3
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7fe fe0e 	bl	8007522 <vListInsertEnd>
 8008906:	e005      	b.n	8008914 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	3318      	adds	r3, #24
 800890c:	4619      	mov	r1, r3
 800890e:	480e      	ldr	r0, [pc, #56]	; (8008948 <xTaskRemoveFromEventList+0xb8>)
 8008910:	f7fe fe07 	bl	8007522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4b0c      	ldr	r3, [pc, #48]	; (800894c <xTaskRemoveFromEventList+0xbc>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	429a      	cmp	r2, r3
 8008920:	d905      	bls.n	800892e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <xTaskRemoveFromEventList+0xc0>)
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e001      	b.n	8008932 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008932:	697b      	ldr	r3, [r7, #20]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000e00 	.word	0x20000e00
 8008940:	20000de0 	.word	0x20000de0
 8008944:	20000908 	.word	0x20000908
 8008948:	20000d98 	.word	0x20000d98
 800894c:	20000904 	.word	0x20000904
 8008950:	20000dec 	.word	0x20000dec

08008954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <vTaskInternalSetTimeOutState+0x24>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <vTaskInternalSetTimeOutState+0x28>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	20000df0 	.word	0x20000df0
 800897c:	20000ddc 	.word	0x20000ddc

08008980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <xTaskCheckForTimeOut+0x24>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	e7fe      	b.n	80089a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d109      	bne.n	80089be <xTaskCheckForTimeOut+0x3e>
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e7fe      	b.n	80089bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80089be:	f000 fdf3 	bl	80095a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089c2:	4b1d      	ldr	r3, [pc, #116]	; (8008a38 <xTaskCheckForTimeOut+0xb8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d102      	bne.n	80089e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e023      	b.n	8008a2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <xTaskCheckForTimeOut+0xbc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d007      	beq.n	80089fe <xTaskCheckForTimeOut+0x7e>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d302      	bcc.n	80089fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	61fb      	str	r3, [r7, #28]
 80089fc:	e015      	b.n	8008a2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d20b      	bcs.n	8008a20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff ff9d 	bl	8008954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	e004      	b.n	8008a2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a2a:	f000 fdeb 	bl	8009604 <vPortExitCritical>

	return xReturn;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000ddc 	.word	0x20000ddc
 8008a3c:	20000df0 	.word	0x20000df0

08008a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a44:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <vTaskMissedYield+0x14>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
}
 8008a4a:	bf00      	nop
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000dec 	.word	0x20000dec

08008a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a60:	f000 f852 	bl	8008b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <prvIdleTask+0x28>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d9f9      	bls.n	8008a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <prvIdleTask+0x2c>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a7c:	e7f0      	b.n	8008a60 <prvIdleTask+0x8>
 8008a7e:	bf00      	nop
 8008a80:	20000908 	.word	0x20000908
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	e00c      	b.n	8008aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4a12      	ldr	r2, [pc, #72]	; (8008ae8 <prvInitialiseTaskLists+0x60>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fd12 	bl	80074cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	607b      	str	r3, [r7, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b37      	cmp	r3, #55	; 0x37
 8008ab2:	d9ef      	bls.n	8008a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ab4:	480d      	ldr	r0, [pc, #52]	; (8008aec <prvInitialiseTaskLists+0x64>)
 8008ab6:	f7fe fd09 	bl	80074cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aba:	480d      	ldr	r0, [pc, #52]	; (8008af0 <prvInitialiseTaskLists+0x68>)
 8008abc:	f7fe fd06 	bl	80074cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ac0:	480c      	ldr	r0, [pc, #48]	; (8008af4 <prvInitialiseTaskLists+0x6c>)
 8008ac2:	f7fe fd03 	bl	80074cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ac6:	480c      	ldr	r0, [pc, #48]	; (8008af8 <prvInitialiseTaskLists+0x70>)
 8008ac8:	f7fe fd00 	bl	80074cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008acc:	480b      	ldr	r0, [pc, #44]	; (8008afc <prvInitialiseTaskLists+0x74>)
 8008ace:	f7fe fcfd 	bl	80074cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <prvInitialiseTaskLists+0x78>)
 8008ad4:	4a05      	ldr	r2, [pc, #20]	; (8008aec <prvInitialiseTaskLists+0x64>)
 8008ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <prvInitialiseTaskLists+0x7c>)
 8008ada:	4a05      	ldr	r2, [pc, #20]	; (8008af0 <prvInitialiseTaskLists+0x68>)
 8008adc:	601a      	str	r2, [r3, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000908 	.word	0x20000908
 8008aec:	20000d68 	.word	0x20000d68
 8008af0:	20000d7c 	.word	0x20000d7c
 8008af4:	20000d98 	.word	0x20000d98
 8008af8:	20000dac 	.word	0x20000dac
 8008afc:	20000dc4 	.word	0x20000dc4
 8008b00:	20000d90 	.word	0x20000d90
 8008b04:	20000d94 	.word	0x20000d94

08008b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b0e:	e019      	b.n	8008b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b10:	f000 fd4a 	bl	80095a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <prvCheckTasksWaitingTermination+0x4c>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fd59 	bl	80075d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b26:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <prvCheckTasksWaitingTermination+0x50>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <prvCheckTasksWaitingTermination+0x50>)
 8008b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <prvCheckTasksWaitingTermination+0x54>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <prvCheckTasksWaitingTermination+0x54>)
 8008b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b3a:	f000 fd63 	bl	8009604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f80e 	bl	8008b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <prvCheckTasksWaitingTermination+0x54>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e1      	bne.n	8008b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000dac 	.word	0x20000dac
 8008b58:	20000dd8 	.word	0x20000dd8
 8008b5c:	20000dc0 	.word	0x20000dc0

08008b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d108      	bne.n	8008b84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fece 	bl	8009918 <vPortFree>
				vPortFree( pxTCB );
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fecb 	bl	8009918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b82:	e017      	b.n	8008bb4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d103      	bne.n	8008b96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fec2 	bl	8009918 <vPortFree>
	}
 8008b94:	e00e      	b.n	8008bb4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d009      	beq.n	8008bb4 <prvDeleteTCB+0x54>
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e7fe      	b.n	8008bb2 <prvDeleteTCB+0x52>
	}
 8008bb4:	bf00      	nop
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <prvResetNextTaskUnblockTime+0x40>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <prvResetNextTaskUnblockTime+0x14>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <prvResetNextTaskUnblockTime+0x16>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd6:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <prvResetNextTaskUnblockTime+0x44>)
 8008bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bde:	e008      	b.n	8008bf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <prvResetNextTaskUnblockTime+0x40>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <prvResetNextTaskUnblockTime+0x44>)
 8008bf0:	6013      	str	r3, [r2, #0]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr
 8008bfc:	20000d90 	.word	0x20000d90
 8008c00:	20000df8 	.word	0x20000df8

08008c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <xTaskGetSchedulerState+0x34>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c12:	2301      	movs	r3, #1
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	e008      	b.n	8008c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c18:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <xTaskGetSchedulerState+0x38>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c20:	2302      	movs	r3, #2
 8008c22:	607b      	str	r3, [r7, #4]
 8008c24:	e001      	b.n	8008c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c26:	2300      	movs	r3, #0
 8008c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c2a:	687b      	ldr	r3, [r7, #4]
	}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000de4 	.word	0x20000de4
 8008c3c:	20000e00 	.word	0x20000e00

08008c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d054      	beq.n	8008d00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c56:	4b2d      	ldr	r3, [pc, #180]	; (8008d0c <xTaskPriorityDisinherit+0xcc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d009      	beq.n	8008c74 <xTaskPriorityDisinherit+0x34>
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	e7fe      	b.n	8008c72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <xTaskPriorityDisinherit+0x50>
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	e7fe      	b.n	8008c8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d02c      	beq.n	8008d00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d128      	bne.n	8008d00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fc90 	bl	80075d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <xTaskPriorityDisinherit+0xd0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d903      	bls.n	8008ce0 <xTaskPriorityDisinherit+0xa0>
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	4a0c      	ldr	r2, [pc, #48]	; (8008d10 <xTaskPriorityDisinherit+0xd0>)
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <xTaskPriorityDisinherit+0xd4>)
 8008cee:	441a      	add	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7fe fc13 	bl	8007522 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d00:	697b      	ldr	r3, [r7, #20]
	}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000904 	.word	0x20000904
 8008d10:	20000de0 	.word	0x20000de0
 8008d14:	20000908 	.word	0x20000908

08008d18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d22:	4b21      	ldr	r3, [pc, #132]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d28:	4b20      	ldr	r3, [pc, #128]	; (8008dac <prvAddCurrentTaskToDelayedList+0x94>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fc52 	bl	80075d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d10a      	bne.n	8008d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d42:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <prvAddCurrentTaskToDelayedList+0x94>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4819      	ldr	r0, [pc, #100]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d4c:	f7fe fbe9 	bl	8007522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d50:	e026      	b.n	8008da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4413      	add	r3, r2
 8008d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d209      	bcs.n	8008d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <prvAddCurrentTaskToDelayedList+0x94>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fe fbf6 	bl	8007568 <vListInsert>
}
 8008d7c:	e010      	b.n	8008da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <prvAddCurrentTaskToDelayedList+0x94>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fbec 	bl	8007568 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d202      	bcs.n	8008da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d9a:	4a08      	ldr	r2, [pc, #32]	; (8008dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6013      	str	r3, [r2, #0]
}
 8008da0:	bf00      	nop
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20000ddc 	.word	0x20000ddc
 8008dac:	20000904 	.word	0x20000904
 8008db0:	20000dc4 	.word	0x20000dc4
 8008db4:	20000d94 	.word	0x20000d94
 8008db8:	20000d90 	.word	0x20000d90
 8008dbc:	20000df8 	.word	0x20000df8

08008dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	; 0x28
 8008dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dca:	f000 fac3 	bl	8009354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dce:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <xTimerCreateTimerTask+0x80>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d021      	beq.n	8008e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dde:	1d3a      	adds	r2, r7, #4
 8008de0:	f107 0108 	add.w	r1, r7, #8
 8008de4:	f107 030c 	add.w	r3, r7, #12
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fb55 	bl	8007498 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	9202      	str	r2, [sp, #8]
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	2302      	movs	r3, #2
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	460a      	mov	r2, r1
 8008e00:	4910      	ldr	r1, [pc, #64]	; (8008e44 <xTimerCreateTimerTask+0x84>)
 8008e02:	4811      	ldr	r0, [pc, #68]	; (8008e48 <xTimerCreateTimerTask+0x88>)
 8008e04:	f7ff f8e6 	bl	8007fd4 <xTaskCreateStatic>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <xTimerCreateTimerTask+0x8c>)
 8008e0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <xTimerCreateTimerTask+0x8c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e16:	2301      	movs	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <xTimerCreateTimerTask+0x74>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	e7fe      	b.n	8008e32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008e34:	697b      	ldr	r3, [r7, #20]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000e34 	.word	0x20000e34
 8008e44:	0800d604 	.word	0x0800d604
 8008e48:	08008f69 	.word	0x08008f69
 8008e4c:	20000e38 	.word	0x20000e38

08008e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <xTimerGenericCommand+0x2c>
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	623b      	str	r3, [r7, #32]
 8008e7a:	e7fe      	b.n	8008e7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e7c:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <xTimerGenericCommand+0x94>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d02a      	beq.n	8008eda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	dc18      	bgt.n	8008ec8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e96:	f7ff feb5 	bl	8008c04 <xTaskGetSchedulerState>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d109      	bne.n	8008eb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ea0:	4b10      	ldr	r3, [pc, #64]	; (8008ee4 <xTimerGenericCommand+0x94>)
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	f107 0110 	add.w	r1, r7, #16
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eac:	f7fe fcbc 	bl	8007828 <xQueueGenericSend>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24
 8008eb2:	e012      	b.n	8008eda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <xTimerGenericCommand+0x94>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	f107 0110 	add.w	r1, r7, #16
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f7fe fcb2 	bl	8007828 <xQueueGenericSend>
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ec6:	e008      	b.n	8008eda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <xTimerGenericCommand+0x94>)
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	f107 0110 	add.w	r1, r7, #16
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	f7fe fda2 	bl	8007a1c <xQueueGenericSendFromISR>
 8008ed8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000e34 	.word	0x20000e34

08008ee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef2:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <prvProcessExpiredTimer+0x7c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	3304      	adds	r3, #4
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fb69 	bl	80075d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d121      	bne.n	8008f52 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	18d1      	adds	r1, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6978      	ldr	r0, [r7, #20]
 8008f1c:	f000 f8c8 	bl	80090b0 <prvInsertTimerInActiveList>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d015      	beq.n	8008f52 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f26:	2300      	movs	r3, #0
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6978      	ldr	r0, [r7, #20]
 8008f32:	f7ff ff8d 	bl	8008e50 <xTimerGenericCommand>
 8008f36:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <prvProcessExpiredTimer+0x6a>
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	e7fe      	b.n	8008f50 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	6978      	ldr	r0, [r7, #20]
 8008f58:	4798      	blx	r3
}
 8008f5a:	bf00      	nop
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000e2c 	.word	0x20000e2c

08008f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f70:	f107 0308 	add.w	r3, r7, #8
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f857 	bl	8009028 <prvGetNextExpireTime>
 8008f7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f803 	bl	8008f8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f86:	f000 f8d5 	bl	8009134 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f8a:	e7f1      	b.n	8008f70 <prvTimerTask+0x8>

08008f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f96:	f7ff fa49 	bl	800842c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f866 	bl	8009070 <prvSampleTimeNow>
 8008fa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d130      	bne.n	800900e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <prvProcessTimerOrBlockTask+0x3c>
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d806      	bhi.n	8008fc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fba:	f7ff fa45 	bl	8008448 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff91 	bl	8008ee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fc6:	e024      	b.n	8009012 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <prvProcessTimerOrBlockTask+0x90>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <prvProcessTimerOrBlockTask+0x94>)
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4619      	mov	r1, r3
 8008fee:	f7fe ffbd 	bl	8007f6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ff2:	f7ff fa29 	bl	8008448 <xTaskResumeAll>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <prvProcessTimerOrBlockTask+0x98>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	f3bf 8f6f 	isb	sy
}
 800900c:	e001      	b.n	8009012 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800900e:	f7ff fa1b 	bl	8008448 <xTaskResumeAll>
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000e30 	.word	0x20000e30
 8009020:	20000e34 	.word	0x20000e34
 8009024:	e000ed04 	.word	0xe000ed04

08009028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <prvGetNextExpireTime+0x44>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <prvGetNextExpireTime+0x44>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e001      	b.n	800905e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800905e:	68fb      	ldr	r3, [r7, #12]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000e2c 	.word	0x20000e2c

08009070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009078:	f7ff fa82 	bl	8008580 <xTaskGetTickCount>
 800907c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800907e:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <prvSampleTimeNow+0x3c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	429a      	cmp	r2, r3
 8009086:	d205      	bcs.n	8009094 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009088:	f000 f904 	bl	8009294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	e002      	b.n	800909a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800909a:	4a04      	ldr	r2, [pc, #16]	; (80090ac <prvSampleTimeNow+0x3c>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090a0:	68fb      	ldr	r3, [r7, #12]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000e3c 	.word	0x20000e3c

080090b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d812      	bhi.n	80090fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e01b      	b.n	8009122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090ea:	4b10      	ldr	r3, [pc, #64]	; (800912c <prvInsertTimerInActiveList+0x7c>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7fe fa37 	bl	8007568 <vListInsert>
 80090fa:	e012      	b.n	8009122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d206      	bcs.n	8009112 <prvInsertTimerInActiveList+0x62>
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d302      	bcc.n	8009112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e007      	b.n	8009122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <prvInsertTimerInActiveList+0x80>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3304      	adds	r3, #4
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f7fe fa23 	bl	8007568 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009122:	697b      	ldr	r3, [r7, #20]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000e30 	.word	0x20000e30
 8009130:	20000e2c 	.word	0x20000e2c

08009134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08e      	sub	sp, #56	; 0x38
 8009138:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800913a:	e099      	b.n	8009270 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da17      	bge.n	8009172 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	3304      	adds	r3, #4
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <prvProcessReceivedCommands+0x2e>
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	e7fe      	b.n	8009160 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009168:	6850      	ldr	r0, [r2, #4]
 800916a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800916c:	6892      	ldr	r2, [r2, #8]
 800916e:	4611      	mov	r1, r2
 8009170:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	db7a      	blt.n	800926e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d004      	beq.n	800918e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	3304      	adds	r3, #4
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fa25 	bl	80075d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800918e:	463b      	mov	r3, r7
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff ff6d 	bl	8009070 <prvSampleTimeNow>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b09      	cmp	r3, #9
 800919c:	d868      	bhi.n	8009270 <prvProcessReceivedCommands+0x13c>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <prvProcessReceivedCommands+0x70>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	08009271 	.word	0x08009271
 80091b4:	08009227 	.word	0x08009227
 80091b8:	0800925d 	.word	0x0800925d
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091cd 	.word	0x080091cd
 80091c4:	08009271 	.word	0x08009271
 80091c8:	08009227 	.word	0x08009227
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	18d1      	adds	r1, r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091da:	f7ff ff69 	bl	80090b0 <prvInsertTimerInActiveList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d045      	beq.n	8009270 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d13d      	bne.n	8009270 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	441a      	add	r2, r3
 80091fc:	2300      	movs	r3, #0
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	2300      	movs	r3, #0
 8009202:	2100      	movs	r1, #0
 8009204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009206:	f7ff fe23 	bl	8008e50 <xTimerGenericCommand>
 800920a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d12e      	bne.n	8009270 <prvProcessReceivedCommands+0x13c>
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	e7fe      	b.n	8009224 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <prvProcessReceivedCommands+0x114>
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	e7fe      	b.n	8009246 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	18d1      	adds	r1, r2, r3
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f7ff ff2b 	bl	80090b0 <prvInsertTimerInActiveList>
					break;
 800925a:	e009      	b.n	8009270 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d104      	bne.n	8009270 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009268:	f000 fb56 	bl	8009918 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800926c:	e000      	b.n	8009270 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800926e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <prvProcessReceivedCommands+0x15c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	1d39      	adds	r1, r7, #4
 8009276:	2200      	movs	r2, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fc63 	bl	8007b44 <xQueueReceive>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	f47f af5b 	bne.w	800913c <prvProcessReceivedCommands+0x8>
	}
}
 8009286:	bf00      	nop
 8009288:	3730      	adds	r7, #48	; 0x30
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000e34 	.word	0x20000e34

08009294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800929a:	e044      	b.n	8009326 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800929c:	4b2b      	ldr	r3, [pc, #172]	; (800934c <prvSwitchTimerLists+0xb8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <prvSwitchTimerLists+0xb8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3304      	adds	r3, #4
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe f98f 	bl	80075d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d12d      	bne.n	8009326 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d90e      	bls.n	80092fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092e8:	4b18      	ldr	r3, [pc, #96]	; (800934c <prvSwitchTimerLists+0xb8>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3304      	adds	r3, #4
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fe f938 	bl	8007568 <vListInsert>
 80092f8:	e015      	b.n	8009326 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092fa:	2300      	movs	r3, #0
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	2300      	movs	r3, #0
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	2100      	movs	r1, #0
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7ff fda3 	bl	8008e50 <xTimerGenericCommand>
 800930a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <prvSwitchTimerLists+0x92>
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	e7fe      	b.n	8009324 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009326:	4b09      	ldr	r3, [pc, #36]	; (800934c <prvSwitchTimerLists+0xb8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1b5      	bne.n	800929c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009330:	4b06      	ldr	r3, [pc, #24]	; (800934c <prvSwitchTimerLists+0xb8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009336:	4b06      	ldr	r3, [pc, #24]	; (8009350 <prvSwitchTimerLists+0xbc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a04      	ldr	r2, [pc, #16]	; (800934c <prvSwitchTimerLists+0xb8>)
 800933c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800933e:	4a04      	ldr	r2, [pc, #16]	; (8009350 <prvSwitchTimerLists+0xbc>)
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	6013      	str	r3, [r2, #0]
}
 8009344:	bf00      	nop
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000e2c 	.word	0x20000e2c
 8009350:	20000e30 	.word	0x20000e30

08009354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800935a:	f000 f925 	bl	80095a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <prvCheckForValidListAndQueue+0x60>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d120      	bne.n	80093a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009366:	4814      	ldr	r0, [pc, #80]	; (80093b8 <prvCheckForValidListAndQueue+0x64>)
 8009368:	f7fe f8b0 	bl	80074cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800936c:	4813      	ldr	r0, [pc, #76]	; (80093bc <prvCheckForValidListAndQueue+0x68>)
 800936e:	f7fe f8ad 	bl	80074cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009372:	4b13      	ldr	r3, [pc, #76]	; (80093c0 <prvCheckForValidListAndQueue+0x6c>)
 8009374:	4a10      	ldr	r2, [pc, #64]	; (80093b8 <prvCheckForValidListAndQueue+0x64>)
 8009376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009378:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <prvCheckForValidListAndQueue+0x70>)
 800937a:	4a10      	ldr	r2, [pc, #64]	; (80093bc <prvCheckForValidListAndQueue+0x68>)
 800937c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800937e:	2300      	movs	r3, #0
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <prvCheckForValidListAndQueue+0x74>)
 8009384:	4a11      	ldr	r2, [pc, #68]	; (80093cc <prvCheckForValidListAndQueue+0x78>)
 8009386:	2110      	movs	r1, #16
 8009388:	200a      	movs	r0, #10
 800938a:	f7fe f9b7 	bl	80076fc <xQueueGenericCreateStatic>
 800938e:	4602      	mov	r2, r0
 8009390:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <prvCheckForValidListAndQueue+0x60>)
 8009392:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <prvCheckForValidListAndQueue+0x60>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <prvCheckForValidListAndQueue+0x60>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	490b      	ldr	r1, [pc, #44]	; (80093d0 <prvCheckForValidListAndQueue+0x7c>)
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fdba 	bl	8007f1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093a8:	f000 f92c 	bl	8009604 <vPortExitCritical>
}
 80093ac:	bf00      	nop
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000e34 	.word	0x20000e34
 80093b8:	20000e04 	.word	0x20000e04
 80093bc:	20000e18 	.word	0x20000e18
 80093c0:	20000e2c 	.word	0x20000e2c
 80093c4:	20000e30 	.word	0x20000e30
 80093c8:	20000ee0 	.word	0x20000ee0
 80093cc:	20000e40 	.word	0x20000e40
 80093d0:	0800d60c 	.word	0x0800d60c

080093d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3b04      	subs	r3, #4
 80093e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f023 0201 	bic.w	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3b04      	subs	r3, #4
 8009402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <pxPortInitialiseStack+0x54>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3b14      	subs	r3, #20
 800940e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3b20      	subs	r3, #32
 800941a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800941c:	68fb      	ldr	r3, [r7, #12]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr
 8009428:	0800942d 	.word	0x0800942d

0800942c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009436:	4b10      	ldr	r3, [pc, #64]	; (8009478 <prvTaskExitError+0x4c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d009      	beq.n	8009454 <prvTaskExitError+0x28>
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	e7fe      	b.n	8009452 <prvTaskExitError+0x26>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009466:	bf00      	nop
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0fc      	beq.n	8009468 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr
 8009478:	20000010 	.word	0x20000010
 800947c:	00000000 	.word	0x00000000

08009480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <pxCurrentTCBConst2>)
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	6808      	ldr	r0, [r1, #0]
 8009486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800948a:	f380 8809 	msr	PSP, r0
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8811 	msr	BASEPRI, r0
 800949a:	f04e 0e0d 	orr.w	lr, lr, #13
 800949e:	4770      	bx	lr

080094a0 <pxCurrentTCBConst2>:
 80094a0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80094a8:	4806      	ldr	r0, [pc, #24]	; (80094c4 <prvPortStartFirstTask+0x1c>)
 80094aa:	6800      	ldr	r0, [r0, #0]
 80094ac:	6800      	ldr	r0, [r0, #0]
 80094ae:	f380 8808 	msr	MSP, r0
 80094b2:	b662      	cpsie	i
 80094b4:	b661      	cpsie	f
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	df00      	svc	0
 80094c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094c2:	bf00      	nop
 80094c4:	e000ed08 	.word	0xe000ed08

080094c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <xPortStartScheduler+0xcc>)
 80094d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	4b29      	ldr	r3, [pc, #164]	; (8009598 <xPortStartScheduler+0xd0>)
 80094f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094f6:	4b29      	ldr	r3, [pc, #164]	; (800959c <xPortStartScheduler+0xd4>)
 80094f8:	2207      	movs	r2, #7
 80094fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094fc:	e009      	b.n	8009512 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80094fe:	4b27      	ldr	r3, [pc, #156]	; (800959c <xPortStartScheduler+0xd4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3b01      	subs	r3, #1
 8009504:	4a25      	ldr	r2, [pc, #148]	; (800959c <xPortStartScheduler+0xd4>)
 8009506:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951a:	2b80      	cmp	r3, #128	; 0x80
 800951c:	d0ef      	beq.n	80094fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800951e:	4b1f      	ldr	r3, [pc, #124]	; (800959c <xPortStartScheduler+0xd4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f1c3 0307 	rsb	r3, r3, #7
 8009526:	2b04      	cmp	r3, #4
 8009528:	d009      	beq.n	800953e <xPortStartScheduler+0x76>
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	60bb      	str	r3, [r7, #8]
 800953c:	e7fe      	b.n	800953c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800953e:	4b17      	ldr	r3, [pc, #92]	; (800959c <xPortStartScheduler+0xd4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <xPortStartScheduler+0xd4>)
 8009546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009548:	4b14      	ldr	r3, [pc, #80]	; (800959c <xPortStartScheduler+0xd4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009550:	4a12      	ldr	r2, [pc, #72]	; (800959c <xPortStartScheduler+0xd4>)
 8009552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <xPortStartScheduler+0xd8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0f      	ldr	r2, [pc, #60]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <xPortStartScheduler+0xd8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a0c      	ldr	r2, [pc, #48]	; (80095a0 <xPortStartScheduler+0xd8>)
 800956e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009574:	f000 f8b0 	bl	80096d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <xPortStartScheduler+0xdc>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800957e:	f7ff ff93 	bl	80094a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009582:	f7ff f8db 	bl	800873c <vTaskSwitchContext>
	prvTaskExitError();
 8009586:	f7ff ff51 	bl	800942c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	e000e400 	.word	0xe000e400
 8009598:	20000f30 	.word	0x20000f30
 800959c:	20000f34 	.word	0x20000f34
 80095a0:	e000ed20 	.word	0xe000ed20
 80095a4:	20000010 	.word	0x20000010

080095a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095c0:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <vPortEnterCritical+0x54>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a0d      	ldr	r2, [pc, #52]	; (80095fc <vPortEnterCritical+0x54>)
 80095c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <vPortEnterCritical+0x54>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10e      	bne.n	80095f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095d2:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <vPortEnterCritical+0x58>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d009      	beq.n	80095f0 <vPortEnterCritical+0x48>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	603b      	str	r3, [r7, #0]
 80095ee:	e7fe      	b.n	80095ee <vPortEnterCritical+0x46>
	}
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	20000010 	.word	0x20000010
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <vPortExitCritical+0x48>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <vPortExitCritical+0x22>
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	e7fe      	b.n	8009624 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <vPortExitCritical+0x48>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3b01      	subs	r3, #1
 800962c:	4a07      	ldr	r2, [pc, #28]	; (800964c <vPortExitCritical+0x48>)
 800962e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009630:	4b06      	ldr	r3, [pc, #24]	; (800964c <vPortExitCritical+0x48>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <vPortExitCritical+0x3e>
 8009638:	2300      	movs	r3, #0
 800963a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr
 800964c:	20000010 	.word	0x20000010

08009650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009650:	f3ef 8009 	mrs	r0, PSP
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <pxCurrentTCBConst>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009660:	6010      	str	r0, [r2, #0]
 8009662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800966a:	f380 8811 	msr	BASEPRI, r0
 800966e:	f7ff f865 	bl	800873c <vTaskSwitchContext>
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f380 8811 	msr	BASEPRI, r0
 800967a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800967e:	6819      	ldr	r1, [r3, #0]
 8009680:	6808      	ldr	r0, [r1, #0]
 8009682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009686:	f380 8809 	msr	PSP, r0
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	4770      	bx	lr

08009690 <pxCurrentTCBConst>:
 8009690:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096b0:	f7fe ff86 	bl	80085c0 <xTaskIncrementTick>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <SysTick_Handler+0x3c>)
 80096bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	2300      	movs	r3, #0
 80096c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <vPortSetupTimerInterrupt+0x30>)
 80096de:	2200      	movs	r2, #0
 80096e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096e2:	4b0a      	ldr	r3, [pc, #40]	; (800970c <vPortSetupTimerInterrupt+0x34>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096e8:	4b09      	ldr	r3, [pc, #36]	; (8009710 <vPortSetupTimerInterrupt+0x38>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <vPortSetupTimerInterrupt+0x3c>)
 80096ee:	fba2 2303 	umull	r2, r3, r2, r3
 80096f2:	099b      	lsrs	r3, r3, #6
 80096f4:	4a08      	ldr	r2, [pc, #32]	; (8009718 <vPortSetupTimerInterrupt+0x40>)
 80096f6:	3b01      	subs	r3, #1
 80096f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <vPortSetupTimerInterrupt+0x30>)
 80096fc:	2207      	movs	r2, #7
 80096fe:	601a      	str	r2, [r3, #0]
}
 8009700:	bf00      	nop
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	e000e010 	.word	0xe000e010
 800970c:	e000e018 	.word	0xe000e018
 8009710:	20000004 	.word	0x20000004
 8009714:	10624dd3 	.word	0x10624dd3
 8009718:	e000e014 	.word	0xe000e014

0800971c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009722:	f3ef 8305 	mrs	r3, IPSR
 8009726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b0f      	cmp	r3, #15
 800972c:	d913      	bls.n	8009756 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972e:	4a15      	ldr	r2, [pc, #84]	; (8009784 <vPortValidateInterruptPriority+0x68>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009738:	4b13      	ldr	r3, [pc, #76]	; (8009788 <vPortValidateInterruptPriority+0x6c>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	7afa      	ldrb	r2, [r7, #11]
 800973e:	429a      	cmp	r2, r3
 8009740:	d209      	bcs.n	8009756 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	e7fe      	b.n	8009754 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009756:	4b0d      	ldr	r3, [pc, #52]	; (800978c <vPortValidateInterruptPriority+0x70>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975e:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <vPortValidateInterruptPriority+0x74>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d909      	bls.n	800977a <vPortValidateInterruptPriority+0x5e>
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x5c>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	bc80      	pop	{r7}
 8009782:	4770      	bx	lr
 8009784:	e000e3f0 	.word	0xe000e3f0
 8009788:	20000f30 	.word	0x20000f30
 800978c:	e000ed0c 	.word	0xe000ed0c
 8009790:	20000f34 	.word	0x20000f34

08009794 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	; 0x28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a0:	f7fe fe44 	bl	800842c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a4:	4b57      	ldr	r3, [pc, #348]	; (8009904 <pvPortMalloc+0x170>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097ac:	f000 f90c 	bl	80099c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b0:	4b55      	ldr	r3, [pc, #340]	; (8009908 <pvPortMalloc+0x174>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f040 808c 	bne.w	80098d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01c      	beq.n	80097fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80097c4:	2208      	movs	r2, #8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d013      	beq.n	80097fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	3308      	adds	r3, #8
 80097de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <pvPortMalloc+0x6a>
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	e7fe      	b.n	80097fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d068      	beq.n	80098d6 <pvPortMalloc+0x142>
 8009804:	4b41      	ldr	r3, [pc, #260]	; (800990c <pvPortMalloc+0x178>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d863      	bhi.n	80098d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800980e:	4b40      	ldr	r3, [pc, #256]	; (8009910 <pvPortMalloc+0x17c>)
 8009810:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009812:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <pvPortMalloc+0x17c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009818:	e004      	b.n	8009824 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d903      	bls.n	8009836 <pvPortMalloc+0xa2>
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1f1      	bne.n	800981a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009836:	4b33      	ldr	r3, [pc, #204]	; (8009904 <pvPortMalloc+0x170>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983c:	429a      	cmp	r2, r3
 800983e:	d04a      	beq.n	80098d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2208      	movs	r2, #8
 8009846:	4413      	add	r3, r2
 8009848:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	1ad2      	subs	r2, r2, r3
 800985a:	2308      	movs	r3, #8
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	429a      	cmp	r2, r3
 8009860:	d91e      	bls.n	80098a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4413      	add	r3, r2
 8009868:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <pvPortMalloc+0xf4>
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	613b      	str	r3, [r7, #16]
 8009886:	e7fe      	b.n	8009886 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800989a:	69b8      	ldr	r0, [r7, #24]
 800989c:	f000 f8f6 	bl	8009a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a0:	4b1a      	ldr	r3, [pc, #104]	; (800990c <pvPortMalloc+0x178>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	4a18      	ldr	r2, [pc, #96]	; (800990c <pvPortMalloc+0x178>)
 80098ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098ae:	4b17      	ldr	r3, [pc, #92]	; (800990c <pvPortMalloc+0x178>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b18      	ldr	r3, [pc, #96]	; (8009914 <pvPortMalloc+0x180>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d203      	bcs.n	80098c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098ba:	4b14      	ldr	r3, [pc, #80]	; (800990c <pvPortMalloc+0x178>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a15      	ldr	r2, [pc, #84]	; (8009914 <pvPortMalloc+0x180>)
 80098c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <pvPortMalloc+0x174>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098d6:	f7fe fdb7 	bl	8008448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <pvPortMalloc+0x164>
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	e7fe      	b.n	80098f6 <pvPortMalloc+0x162>
	return pvReturn;
 80098f8:	69fb      	ldr	r3, [r7, #28]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3728      	adds	r7, #40	; 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20003e20 	.word	0x20003e20
 8009908:	20003e2c 	.word	0x20003e2c
 800990c:	20003e24 	.word	0x20003e24
 8009910:	20003e18 	.word	0x20003e18
 8009914:	20003e28 	.word	0x20003e28

08009918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d046      	beq.n	80099b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800992a:	2308      	movs	r3, #8
 800992c:	425b      	negs	r3, r3
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b20      	ldr	r3, [pc, #128]	; (80099c0 <vPortFree+0xa8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d109      	bne.n	800995a <vPortFree+0x42>
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e7fe      	b.n	8009958 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <vPortFree+0x5e>
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60bb      	str	r3, [r7, #8]
 8009974:	e7fe      	b.n	8009974 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <vPortFree+0xa8>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4013      	ands	r3, r2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d019      	beq.n	80099b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d115      	bne.n	80099b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <vPortFree+0xa8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	43db      	mvns	r3, r3
 8009996:	401a      	ands	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800999c:	f7fe fd46 	bl	800842c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <vPortFree+0xac>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4413      	add	r3, r2
 80099aa:	4a06      	ldr	r2, [pc, #24]	; (80099c4 <vPortFree+0xac>)
 80099ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f000 f86c 	bl	8009a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80099b4:	f7fe fd48 	bl	8008448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099b8:	bf00      	nop
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20003e2c 	.word	0x20003e2c
 80099c4:	20003e24 	.word	0x20003e24

080099c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099ce:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80099d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099d4:	4b27      	ldr	r3, [pc, #156]	; (8009a74 <prvHeapInit+0xac>)
 80099d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00c      	beq.n	80099fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3307      	adds	r3, #7
 80099e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0307 	bic.w	r3, r3, #7
 80099ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	4a1f      	ldr	r2, [pc, #124]	; (8009a74 <prvHeapInit+0xac>)
 80099f8:	4413      	add	r3, r2
 80099fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a00:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <prvHeapInit+0xb0>)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a06:	4b1c      	ldr	r3, [pc, #112]	; (8009a78 <prvHeapInit+0xb0>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4413      	add	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a14:	2208      	movs	r2, #8
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 0307 	bic.w	r3, r3, #7
 8009a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4a15      	ldr	r2, [pc, #84]	; (8009a7c <prvHeapInit+0xb4>)
 8009a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a2a:	4b14      	ldr	r3, [pc, #80]	; (8009a7c <prvHeapInit+0xb4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a32:	4b12      	ldr	r3, [pc, #72]	; (8009a7c <prvHeapInit+0xb4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a48:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <prvHeapInit+0xb4>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <prvHeapInit+0xb8>)
 8009a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <prvHeapInit+0xbc>)
 8009a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a60:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <prvHeapInit+0xc0>)
 8009a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a66:	601a      	str	r2, [r3, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000f38 	.word	0x20000f38
 8009a78:	20003e18 	.word	0x20003e18
 8009a7c:	20003e20 	.word	0x20003e20
 8009a80:	20003e28 	.word	0x20003e28
 8009a84:	20003e24 	.word	0x20003e24
 8009a88:	20003e2c 	.word	0x20003e2c

08009a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a94:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <prvInsertBlockIntoFreeList+0xa8>)
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e002      	b.n	8009aa0 <prvInsertBlockIntoFreeList+0x14>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d8f7      	bhi.n	8009a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d108      	bne.n	8009ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d118      	bne.n	8009b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvInsertBlockIntoFreeList+0xac>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d00d      	beq.n	8009b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	441a      	add	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e008      	b.n	8009b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <prvInsertBlockIntoFreeList+0xac>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e003      	b.n	8009b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d002      	beq.n	8009b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr
 8009b34:	20003e18 	.word	0x20003e18
 8009b38:	20003e20 	.word	0x20003e20

08009b3c <atoi>:
 8009b3c:	220a      	movs	r2, #10
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f000 bd28 	b.w	800a594 <strtol>

08009b44 <__errno>:
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <__errno+0x8>)
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20000014 	.word	0x20000014

08009b50 <__libc_init_array>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	2500      	movs	r5, #0
 8009b54:	4e0c      	ldr	r6, [pc, #48]	; (8009b88 <__libc_init_array+0x38>)
 8009b56:	4c0d      	ldr	r4, [pc, #52]	; (8009b8c <__libc_init_array+0x3c>)
 8009b58:	1ba4      	subs	r4, r4, r6
 8009b5a:	10a4      	asrs	r4, r4, #2
 8009b5c:	42a5      	cmp	r5, r4
 8009b5e:	d109      	bne.n	8009b74 <__libc_init_array+0x24>
 8009b60:	f003 fc86 	bl	800d470 <_init>
 8009b64:	2500      	movs	r5, #0
 8009b66:	4e0a      	ldr	r6, [pc, #40]	; (8009b90 <__libc_init_array+0x40>)
 8009b68:	4c0a      	ldr	r4, [pc, #40]	; (8009b94 <__libc_init_array+0x44>)
 8009b6a:	1ba4      	subs	r4, r4, r6
 8009b6c:	10a4      	asrs	r4, r4, #2
 8009b6e:	42a5      	cmp	r5, r4
 8009b70:	d105      	bne.n	8009b7e <__libc_init_array+0x2e>
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b78:	4798      	blx	r3
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	e7ee      	b.n	8009b5c <__libc_init_array+0xc>
 8009b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b82:	4798      	blx	r3
 8009b84:	3501      	adds	r5, #1
 8009b86:	e7f2      	b.n	8009b6e <__libc_init_array+0x1e>
 8009b88:	0800dc10 	.word	0x0800dc10
 8009b8c:	0800dc10 	.word	0x0800dc10
 8009b90:	0800dc10 	.word	0x0800dc10
 8009b94:	0800dc14 	.word	0x0800dc14

08009b98 <memcpy>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	1e43      	subs	r3, r0, #1
 8009b9c:	440a      	add	r2, r1
 8009b9e:	4291      	cmp	r1, r2
 8009ba0:	d100      	bne.n	8009ba4 <memcpy+0xc>
 8009ba2:	bd10      	pop	{r4, pc}
 8009ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bac:	e7f7      	b.n	8009b9e <memcpy+0x6>

08009bae <memset>:
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4402      	add	r2, r0
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d100      	bne.n	8009bb8 <memset+0xa>
 8009bb6:	4770      	bx	lr
 8009bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bbc:	e7f9      	b.n	8009bb2 <memset+0x4>

08009bbe <__cvt>:
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	461e      	mov	r6, r3
 8009bc6:	bfbb      	ittet	lt
 8009bc8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009bcc:	461e      	movlt	r6, r3
 8009bce:	2300      	movge	r3, #0
 8009bd0:	232d      	movlt	r3, #45	; 0x2d
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009bd6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009bda:	f027 0720 	bic.w	r7, r7, #32
 8009bde:	2f46      	cmp	r7, #70	; 0x46
 8009be0:	4614      	mov	r4, r2
 8009be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009be4:	700b      	strb	r3, [r1, #0]
 8009be6:	d004      	beq.n	8009bf2 <__cvt+0x34>
 8009be8:	2f45      	cmp	r7, #69	; 0x45
 8009bea:	d100      	bne.n	8009bee <__cvt+0x30>
 8009bec:	3501      	adds	r5, #1
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e000      	b.n	8009bf4 <__cvt+0x36>
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	aa07      	add	r2, sp, #28
 8009bf6:	9204      	str	r2, [sp, #16]
 8009bf8:	aa06      	add	r2, sp, #24
 8009bfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009bfe:	e9cd 3500 	strd	r3, r5, [sp]
 8009c02:	4622      	mov	r2, r4
 8009c04:	4633      	mov	r3, r6
 8009c06:	f000 fd6b 	bl	800a6e0 <_dtoa_r>
 8009c0a:	2f47      	cmp	r7, #71	; 0x47
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	d102      	bne.n	8009c16 <__cvt+0x58>
 8009c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c12:	07db      	lsls	r3, r3, #31
 8009c14:	d526      	bpl.n	8009c64 <__cvt+0xa6>
 8009c16:	2f46      	cmp	r7, #70	; 0x46
 8009c18:	eb08 0905 	add.w	r9, r8, r5
 8009c1c:	d111      	bne.n	8009c42 <__cvt+0x84>
 8009c1e:	f898 3000 	ldrb.w	r3, [r8]
 8009c22:	2b30      	cmp	r3, #48	; 0x30
 8009c24:	d10a      	bne.n	8009c3c <__cvt+0x7e>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	f7f6 febb 	bl	80009a8 <__aeabi_dcmpeq>
 8009c32:	b918      	cbnz	r0, 8009c3c <__cvt+0x7e>
 8009c34:	f1c5 0501 	rsb	r5, r5, #1
 8009c38:	f8ca 5000 	str.w	r5, [sl]
 8009c3c:	f8da 3000 	ldr.w	r3, [sl]
 8009c40:	4499      	add	r9, r3
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	4631      	mov	r1, r6
 8009c4a:	f7f6 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8009c4e:	b938      	cbnz	r0, 8009c60 <__cvt+0xa2>
 8009c50:	2230      	movs	r2, #48	; 0x30
 8009c52:	9b07      	ldr	r3, [sp, #28]
 8009c54:	454b      	cmp	r3, r9
 8009c56:	d205      	bcs.n	8009c64 <__cvt+0xa6>
 8009c58:	1c59      	adds	r1, r3, #1
 8009c5a:	9107      	str	r1, [sp, #28]
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	e7f8      	b.n	8009c52 <__cvt+0x94>
 8009c60:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c64:	4640      	mov	r0, r8
 8009c66:	9b07      	ldr	r3, [sp, #28]
 8009c68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c6a:	eba3 0308 	sub.w	r3, r3, r8
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	b008      	add	sp, #32
 8009c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009c76 <__exponent>:
 8009c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	bfb4      	ite	lt
 8009c7c:	232d      	movlt	r3, #45	; 0x2d
 8009c7e:	232b      	movge	r3, #43	; 0x2b
 8009c80:	4604      	mov	r4, r0
 8009c82:	bfb8      	it	lt
 8009c84:	4249      	neglt	r1, r1
 8009c86:	2909      	cmp	r1, #9
 8009c88:	f804 2b02 	strb.w	r2, [r4], #2
 8009c8c:	7043      	strb	r3, [r0, #1]
 8009c8e:	dd21      	ble.n	8009cd4 <__exponent+0x5e>
 8009c90:	f10d 0307 	add.w	r3, sp, #7
 8009c94:	461f      	mov	r7, r3
 8009c96:	260a      	movs	r6, #10
 8009c98:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c9c:	fb06 1115 	mls	r1, r6, r5, r1
 8009ca0:	2d09      	cmp	r5, #9
 8009ca2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009ca6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009caa:	f103 32ff 	add.w	r2, r3, #4294967295
 8009cae:	4629      	mov	r1, r5
 8009cb0:	dc09      	bgt.n	8009cc6 <__exponent+0x50>
 8009cb2:	3130      	adds	r1, #48	; 0x30
 8009cb4:	3b02      	subs	r3, #2
 8009cb6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cba:	42bb      	cmp	r3, r7
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	d304      	bcc.n	8009cca <__exponent+0x54>
 8009cc0:	1a10      	subs	r0, r2, r0
 8009cc2:	b003      	add	sp, #12
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	e7e6      	b.n	8009c98 <__exponent+0x22>
 8009cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cce:	f804 2b01 	strb.w	r2, [r4], #1
 8009cd2:	e7f2      	b.n	8009cba <__exponent+0x44>
 8009cd4:	2330      	movs	r3, #48	; 0x30
 8009cd6:	4419      	add	r1, r3
 8009cd8:	7083      	strb	r3, [r0, #2]
 8009cda:	1d02      	adds	r2, r0, #4
 8009cdc:	70c1      	strb	r1, [r0, #3]
 8009cde:	e7ef      	b.n	8009cc0 <__exponent+0x4a>

08009ce0 <_printf_float>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	b091      	sub	sp, #68	; 0x44
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009cea:	4693      	mov	fp, r2
 8009cec:	461e      	mov	r6, r3
 8009cee:	4605      	mov	r5, r0
 8009cf0:	f001 faae 	bl	800b250 <_localeconv_r>
 8009cf4:	6803      	ldr	r3, [r0, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfa:	f7f6 fa29 	bl	8000150 <strlen>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	930e      	str	r3, [sp, #56]	; 0x38
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	900a      	str	r0, [sp, #40]	; 0x28
 8009d06:	3307      	adds	r3, #7
 8009d08:	f023 0307 	bic.w	r3, r3, #7
 8009d0c:	f103 0208 	add.w	r2, r3, #8
 8009d10:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009d14:	f8d4 a000 	ldr.w	sl, [r4]
 8009d18:	603a      	str	r2, [r7, #0]
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d22:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009d26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	4ba6      	ldr	r3, [pc, #664]	; (8009fcc <_printf_float+0x2ec>)
 8009d32:	4638      	mov	r0, r7
 8009d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d36:	f7f6 fe69 	bl	8000a0c <__aeabi_dcmpun>
 8009d3a:	bb68      	cbnz	r0, 8009d98 <_printf_float+0xb8>
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	4ba2      	ldr	r3, [pc, #648]	; (8009fcc <_printf_float+0x2ec>)
 8009d42:	4638      	mov	r0, r7
 8009d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d46:	f7f6 fe43 	bl	80009d0 <__aeabi_dcmple>
 8009d4a:	bb28      	cbnz	r0, 8009d98 <_printf_float+0xb8>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4638      	mov	r0, r7
 8009d52:	4649      	mov	r1, r9
 8009d54:	f7f6 fe32 	bl	80009bc <__aeabi_dcmplt>
 8009d58:	b110      	cbz	r0, 8009d60 <_printf_float+0x80>
 8009d5a:	232d      	movs	r3, #45	; 0x2d
 8009d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d60:	4f9b      	ldr	r7, [pc, #620]	; (8009fd0 <_printf_float+0x2f0>)
 8009d62:	4b9c      	ldr	r3, [pc, #624]	; (8009fd4 <_printf_float+0x2f4>)
 8009d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d68:	bf98      	it	ls
 8009d6a:	461f      	movls	r7, r3
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	f02a 0304 	bic.w	r3, sl, #4
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	9600      	str	r6, [sp, #0]
 8009d7c:	465b      	mov	r3, fp
 8009d7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d80:	4621      	mov	r1, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f9e2 	bl	800a14c <_printf_common>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f040 8090 	bne.w	8009eae <_printf_float+0x1ce>
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	b011      	add	sp, #68	; 0x44
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	463a      	mov	r2, r7
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fe34 	bl	8000a0c <__aeabi_dcmpun>
 8009da4:	b110      	cbz	r0, 8009dac <_printf_float+0xcc>
 8009da6:	4f8c      	ldr	r7, [pc, #560]	; (8009fd8 <_printf_float+0x2f8>)
 8009da8:	4b8c      	ldr	r3, [pc, #560]	; (8009fdc <_printf_float+0x2fc>)
 8009daa:	e7db      	b.n	8009d64 <_printf_float+0x84>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009db2:	1c59      	adds	r1, r3, #1
 8009db4:	a80d      	add	r0, sp, #52	; 0x34
 8009db6:	a90e      	add	r1, sp, #56	; 0x38
 8009db8:	d140      	bne.n	8009e3c <_printf_float+0x15c>
 8009dba:	2306      	movs	r3, #6
 8009dbc:	6063      	str	r3, [r4, #4]
 8009dbe:	f04f 0c00 	mov.w	ip, #0
 8009dc2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009dc6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009dca:	6863      	ldr	r3, [r4, #4]
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	463a      	mov	r2, r7
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f7ff feee 	bl	8009bbe <__cvt>
 8009de2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009de6:	2b47      	cmp	r3, #71	; 0x47
 8009de8:	4607      	mov	r7, r0
 8009dea:	d109      	bne.n	8009e00 <_printf_float+0x120>
 8009dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dee:	1cd8      	adds	r0, r3, #3
 8009df0:	db02      	blt.n	8009df8 <_printf_float+0x118>
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	dd47      	ble.n	8009e88 <_printf_float+0x1a8>
 8009df8:	f1a8 0802 	sub.w	r8, r8, #2
 8009dfc:	fa5f f888 	uxtb.w	r8, r8
 8009e00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009e04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e06:	d824      	bhi.n	8009e52 <_printf_float+0x172>
 8009e08:	3901      	subs	r1, #1
 8009e0a:	4642      	mov	r2, r8
 8009e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e10:	910d      	str	r1, [sp, #52]	; 0x34
 8009e12:	f7ff ff30 	bl	8009c76 <__exponent>
 8009e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e18:	4681      	mov	r9, r0
 8009e1a:	1813      	adds	r3, r2, r0
 8009e1c:	2a01      	cmp	r2, #1
 8009e1e:	6123      	str	r3, [r4, #16]
 8009e20:	dc02      	bgt.n	8009e28 <_printf_float+0x148>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	07d1      	lsls	r1, r2, #31
 8009e26:	d501      	bpl.n	8009e2c <_printf_float+0x14c>
 8009e28:	3301      	adds	r3, #1
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d0a2      	beq.n	8009d7a <_printf_float+0x9a>
 8009e34:	232d      	movs	r3, #45	; 0x2d
 8009e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3a:	e79e      	b.n	8009d7a <_printf_float+0x9a>
 8009e3c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009e40:	f000 816e 	beq.w	800a120 <_printf_float+0x440>
 8009e44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e48:	d1b9      	bne.n	8009dbe <_printf_float+0xde>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1b7      	bne.n	8009dbe <_printf_float+0xde>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7b4      	b.n	8009dbc <_printf_float+0xdc>
 8009e52:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009e56:	d119      	bne.n	8009e8c <_printf_float+0x1ac>
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	6863      	ldr	r3, [r4, #4]
 8009e5c:	dd0c      	ble.n	8009e78 <_printf_float+0x198>
 8009e5e:	6121      	str	r1, [r4, #16]
 8009e60:	b913      	cbnz	r3, 8009e68 <_printf_float+0x188>
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	07d2      	lsls	r2, r2, #31
 8009e66:	d502      	bpl.n	8009e6e <_printf_float+0x18e>
 8009e68:	3301      	adds	r3, #1
 8009e6a:	440b      	add	r3, r1
 8009e6c:	6123      	str	r3, [r4, #16]
 8009e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e70:	f04f 0900 	mov.w	r9, #0
 8009e74:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e76:	e7d9      	b.n	8009e2c <_printf_float+0x14c>
 8009e78:	b913      	cbnz	r3, 8009e80 <_printf_float+0x1a0>
 8009e7a:	6822      	ldr	r2, [r4, #0]
 8009e7c:	07d0      	lsls	r0, r2, #31
 8009e7e:	d501      	bpl.n	8009e84 <_printf_float+0x1a4>
 8009e80:	3302      	adds	r3, #2
 8009e82:	e7f3      	b.n	8009e6c <_printf_float+0x18c>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e7f1      	b.n	8009e6c <_printf_float+0x18c>
 8009e88:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009e8c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009e90:	4293      	cmp	r3, r2
 8009e92:	db05      	blt.n	8009ea0 <_printf_float+0x1c0>
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	07d1      	lsls	r1, r2, #31
 8009e9a:	d5e8      	bpl.n	8009e6e <_printf_float+0x18e>
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	e7e5      	b.n	8009e6c <_printf_float+0x18c>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfcc      	ite	gt
 8009ea4:	2301      	movgt	r3, #1
 8009ea6:	f1c3 0302 	rsble	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	e7de      	b.n	8009e6c <_printf_float+0x18c>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	055a      	lsls	r2, r3, #21
 8009eb2:	d407      	bmi.n	8009ec4 <_printf_float+0x1e4>
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	4659      	mov	r1, fp
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b0      	blx	r6
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d129      	bne.n	8009f16 <_printf_float+0x236>
 8009ec2:	e764      	b.n	8009d8e <_printf_float+0xae>
 8009ec4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009ec8:	f240 80d7 	bls.w	800a07a <_printf_float+0x39a>
 8009ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f7f6 fd68 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed8:	b388      	cbz	r0, 8009f3e <_printf_float+0x25e>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4a40      	ldr	r2, [pc, #256]	; (8009fe0 <_printf_float+0x300>)
 8009ede:	4659      	mov	r1, fp
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b0      	blx	r6
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f af52 	beq.w	8009d8e <_printf_float+0xae>
 8009eea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	db02      	blt.n	8009ef8 <_printf_float+0x218>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	07d8      	lsls	r0, r3, #31
 8009ef6:	d50e      	bpl.n	8009f16 <_printf_float+0x236>
 8009ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009efc:	4659      	mov	r1, fp
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b0      	blx	r6
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f af43 	beq.w	8009d8e <_printf_float+0xae>
 8009f08:	2700      	movs	r7, #0
 8009f0a:	f104 081a 	add.w	r8, r4, #26
 8009f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f10:	3b01      	subs	r3, #1
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	dc09      	bgt.n	8009f2a <_printf_float+0x24a>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	079f      	lsls	r7, r3, #30
 8009f1a:	f100 80fd 	bmi.w	800a118 <_printf_float+0x438>
 8009f1e:	68e0      	ldr	r0, [r4, #12]
 8009f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f22:	4298      	cmp	r0, r3
 8009f24:	bfb8      	it	lt
 8009f26:	4618      	movlt	r0, r3
 8009f28:	e733      	b.n	8009d92 <_printf_float+0xb2>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4642      	mov	r2, r8
 8009f2e:	4659      	mov	r1, fp
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b0      	blx	r6
 8009f34:	3001      	adds	r0, #1
 8009f36:	f43f af2a 	beq.w	8009d8e <_printf_float+0xae>
 8009f3a:	3701      	adds	r7, #1
 8009f3c:	e7e7      	b.n	8009f0e <_printf_float+0x22e>
 8009f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	dc2b      	bgt.n	8009f9c <_printf_float+0x2bc>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <_printf_float+0x300>)
 8009f48:	4659      	mov	r1, fp
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b0      	blx	r6
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af1d 	beq.w	8009d8e <_printf_float+0xae>
 8009f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f56:	b923      	cbnz	r3, 8009f62 <_printf_float+0x282>
 8009f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f5a:	b913      	cbnz	r3, 8009f62 <_printf_float+0x282>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07d9      	lsls	r1, r3, #31
 8009f60:	d5d9      	bpl.n	8009f16 <_printf_float+0x236>
 8009f62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f66:	4659      	mov	r1, fp
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b0      	blx	r6
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	f43f af0e 	beq.w	8009d8e <_printf_float+0xae>
 8009f72:	f04f 0800 	mov.w	r8, #0
 8009f76:	f104 091a 	add.w	r9, r4, #26
 8009f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7c:	425b      	negs	r3, r3
 8009f7e:	4543      	cmp	r3, r8
 8009f80:	dc01      	bgt.n	8009f86 <_printf_float+0x2a6>
 8009f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f84:	e797      	b.n	8009eb6 <_printf_float+0x1d6>
 8009f86:	2301      	movs	r3, #1
 8009f88:	464a      	mov	r2, r9
 8009f8a:	4659      	mov	r1, fp
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	3001      	adds	r0, #1
 8009f92:	f43f aefc 	beq.w	8009d8e <_printf_float+0xae>
 8009f96:	f108 0801 	add.w	r8, r8, #1
 8009f9a:	e7ee      	b.n	8009f7a <_printf_float+0x29a>
 8009f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	bfa8      	it	ge
 8009fa4:	461a      	movge	r2, r3
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	4690      	mov	r8, r2
 8009faa:	dd07      	ble.n	8009fbc <_printf_float+0x2dc>
 8009fac:	4613      	mov	r3, r2
 8009fae:	4659      	mov	r1, fp
 8009fb0:	463a      	mov	r2, r7
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b0      	blx	r6
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f43f aee9 	beq.w	8009d8e <_printf_float+0xae>
 8009fbc:	f104 031a 	add.w	r3, r4, #26
 8009fc0:	f04f 0a00 	mov.w	sl, #0
 8009fc4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fca:	e015      	b.n	8009ff8 <_printf_float+0x318>
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	0800d798 	.word	0x0800d798
 8009fd4:	0800d794 	.word	0x0800d794
 8009fd8:	0800d7a0 	.word	0x0800d7a0
 8009fdc:	0800d79c 	.word	0x0800d79c
 8009fe0:	0800d7a4 	.word	0x0800d7a4
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fe8:	4659      	mov	r1, fp
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b0      	blx	r6
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f aecd 	beq.w	8009d8e <_printf_float+0xae>
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009ffc:	eba9 0308 	sub.w	r3, r9, r8
 800a000:	4553      	cmp	r3, sl
 800a002:	dcef      	bgt.n	8009fe4 <_printf_float+0x304>
 800a004:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a008:	429a      	cmp	r2, r3
 800a00a:	444f      	add	r7, r9
 800a00c:	db14      	blt.n	800a038 <_printf_float+0x358>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	07da      	lsls	r2, r3, #31
 800a012:	d411      	bmi.n	800a038 <_printf_float+0x358>
 800a014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a016:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a018:	eba3 0209 	sub.w	r2, r3, r9
 800a01c:	eba3 0901 	sub.w	r9, r3, r1
 800a020:	4591      	cmp	r9, r2
 800a022:	bfa8      	it	ge
 800a024:	4691      	movge	r9, r2
 800a026:	f1b9 0f00 	cmp.w	r9, #0
 800a02a:	dc0d      	bgt.n	800a048 <_printf_float+0x368>
 800a02c:	2700      	movs	r7, #0
 800a02e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a032:	f104 081a 	add.w	r8, r4, #26
 800a036:	e018      	b.n	800a06a <_printf_float+0x38a>
 800a038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a03c:	4659      	mov	r1, fp
 800a03e:	4628      	mov	r0, r5
 800a040:	47b0      	blx	r6
 800a042:	3001      	adds	r0, #1
 800a044:	d1e6      	bne.n	800a014 <_printf_float+0x334>
 800a046:	e6a2      	b.n	8009d8e <_printf_float+0xae>
 800a048:	464b      	mov	r3, r9
 800a04a:	463a      	mov	r2, r7
 800a04c:	4659      	mov	r1, fp
 800a04e:	4628      	mov	r0, r5
 800a050:	47b0      	blx	r6
 800a052:	3001      	adds	r0, #1
 800a054:	d1ea      	bne.n	800a02c <_printf_float+0x34c>
 800a056:	e69a      	b.n	8009d8e <_printf_float+0xae>
 800a058:	2301      	movs	r3, #1
 800a05a:	4642      	mov	r2, r8
 800a05c:	4659      	mov	r1, fp
 800a05e:	4628      	mov	r0, r5
 800a060:	47b0      	blx	r6
 800a062:	3001      	adds	r0, #1
 800a064:	f43f ae93 	beq.w	8009d8e <_printf_float+0xae>
 800a068:	3701      	adds	r7, #1
 800a06a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a06e:	1a9b      	subs	r3, r3, r2
 800a070:	eba3 0309 	sub.w	r3, r3, r9
 800a074:	42bb      	cmp	r3, r7
 800a076:	dcef      	bgt.n	800a058 <_printf_float+0x378>
 800a078:	e74d      	b.n	8009f16 <_printf_float+0x236>
 800a07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a07c:	2a01      	cmp	r2, #1
 800a07e:	dc01      	bgt.n	800a084 <_printf_float+0x3a4>
 800a080:	07db      	lsls	r3, r3, #31
 800a082:	d538      	bpl.n	800a0f6 <_printf_float+0x416>
 800a084:	2301      	movs	r3, #1
 800a086:	463a      	mov	r2, r7
 800a088:	4659      	mov	r1, fp
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b0      	blx	r6
 800a08e:	3001      	adds	r0, #1
 800a090:	f43f ae7d 	beq.w	8009d8e <_printf_float+0xae>
 800a094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a098:	4659      	mov	r1, fp
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b0      	blx	r6
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f107 0701 	add.w	r7, r7, #1
 800a0a4:	f43f ae73 	beq.w	8009d8e <_printf_float+0xae>
 800a0a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f103 38ff 	add.w	r8, r3, #4294967295
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f7f6 fc77 	bl	80009a8 <__aeabi_dcmpeq>
 800a0ba:	b9c0      	cbnz	r0, 800a0ee <_printf_float+0x40e>
 800a0bc:	4643      	mov	r3, r8
 800a0be:	463a      	mov	r2, r7
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d10d      	bne.n	800a0e6 <_printf_float+0x406>
 800a0ca:	e660      	b.n	8009d8e <_printf_float+0xae>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	4659      	mov	r1, fp
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b0      	blx	r6
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f ae59 	beq.w	8009d8e <_printf_float+0xae>
 800a0dc:	3701      	adds	r7, #1
 800a0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	dcf2      	bgt.n	800a0cc <_printf_float+0x3ec>
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0ec:	e6e4      	b.n	8009eb8 <_printf_float+0x1d8>
 800a0ee:	2700      	movs	r7, #0
 800a0f0:	f104 081a 	add.w	r8, r4, #26
 800a0f4:	e7f3      	b.n	800a0de <_printf_float+0x3fe>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e7e1      	b.n	800a0be <_printf_float+0x3de>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	4659      	mov	r1, fp
 800a100:	4628      	mov	r0, r5
 800a102:	47b0      	blx	r6
 800a104:	3001      	adds	r0, #1
 800a106:	f43f ae42 	beq.w	8009d8e <_printf_float+0xae>
 800a10a:	3701      	adds	r7, #1
 800a10c:	68e3      	ldr	r3, [r4, #12]
 800a10e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	42bb      	cmp	r3, r7
 800a114:	dcf1      	bgt.n	800a0fa <_printf_float+0x41a>
 800a116:	e702      	b.n	8009f1e <_printf_float+0x23e>
 800a118:	2700      	movs	r7, #0
 800a11a:	f104 0819 	add.w	r8, r4, #25
 800a11e:	e7f5      	b.n	800a10c <_printf_float+0x42c>
 800a120:	2b00      	cmp	r3, #0
 800a122:	f43f ae94 	beq.w	8009e4e <_printf_float+0x16e>
 800a126:	f04f 0c00 	mov.w	ip, #0
 800a12a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a12e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a138:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	463a      	mov	r2, r7
 800a140:	464b      	mov	r3, r9
 800a142:	4628      	mov	r0, r5
 800a144:	f7ff fd3b 	bl	8009bbe <__cvt>
 800a148:	4607      	mov	r7, r0
 800a14a:	e64f      	b.n	8009dec <_printf_float+0x10c>

0800a14c <_printf_common>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	4691      	mov	r9, r2
 800a152:	461f      	mov	r7, r3
 800a154:	688a      	ldr	r2, [r1, #8]
 800a156:	690b      	ldr	r3, [r1, #16]
 800a158:	4606      	mov	r6, r0
 800a15a:	4293      	cmp	r3, r2
 800a15c:	bfb8      	it	lt
 800a15e:	4613      	movlt	r3, r2
 800a160:	f8c9 3000 	str.w	r3, [r9]
 800a164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a168:	460c      	mov	r4, r1
 800a16a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16e:	b112      	cbz	r2, 800a176 <_printf_common+0x2a>
 800a170:	3301      	adds	r3, #1
 800a172:	f8c9 3000 	str.w	r3, [r9]
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	0699      	lsls	r1, r3, #26
 800a17a:	bf42      	ittt	mi
 800a17c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a180:	3302      	addmi	r3, #2
 800a182:	f8c9 3000 	strmi.w	r3, [r9]
 800a186:	6825      	ldr	r5, [r4, #0]
 800a188:	f015 0506 	ands.w	r5, r5, #6
 800a18c:	d107      	bne.n	800a19e <_printf_common+0x52>
 800a18e:	f104 0a19 	add.w	sl, r4, #25
 800a192:	68e3      	ldr	r3, [r4, #12]
 800a194:	f8d9 2000 	ldr.w	r2, [r9]
 800a198:	1a9b      	subs	r3, r3, r2
 800a19a:	42ab      	cmp	r3, r5
 800a19c:	dc29      	bgt.n	800a1f2 <_printf_common+0xa6>
 800a19e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	3300      	adds	r3, #0
 800a1a6:	bf18      	it	ne
 800a1a8:	2301      	movne	r3, #1
 800a1aa:	0692      	lsls	r2, r2, #26
 800a1ac:	d42e      	bmi.n	800a20c <_printf_common+0xc0>
 800a1ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	47c0      	blx	r8
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d021      	beq.n	800a200 <_printf_common+0xb4>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	68e5      	ldr	r5, [r4, #12]
 800a1c0:	f003 0306 	and.w	r3, r3, #6
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	bf18      	it	ne
 800a1c8:	2500      	movne	r5, #0
 800a1ca:	f8d9 2000 	ldr.w	r2, [r9]
 800a1ce:	f04f 0900 	mov.w	r9, #0
 800a1d2:	bf08      	it	eq
 800a1d4:	1aad      	subeq	r5, r5, r2
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	bf08      	it	eq
 800a1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	bfc4      	itt	gt
 800a1e4:	1a9b      	subgt	r3, r3, r2
 800a1e6:	18ed      	addgt	r5, r5, r3
 800a1e8:	341a      	adds	r4, #26
 800a1ea:	454d      	cmp	r5, r9
 800a1ec:	d11a      	bne.n	800a224 <_printf_common+0xd8>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e008      	b.n	800a204 <_printf_common+0xb8>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	47c0      	blx	r8
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d103      	bne.n	800a208 <_printf_common+0xbc>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	3501      	adds	r5, #1
 800a20a:	e7c2      	b.n	800a192 <_printf_common+0x46>
 800a20c:	2030      	movs	r0, #48	; 0x30
 800a20e:	18e1      	adds	r1, r4, r3
 800a210:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a21a:	4422      	add	r2, r4
 800a21c:	3302      	adds	r3, #2
 800a21e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a222:	e7c4      	b.n	800a1ae <_printf_common+0x62>
 800a224:	2301      	movs	r3, #1
 800a226:	4622      	mov	r2, r4
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	47c0      	blx	r8
 800a22e:	3001      	adds	r0, #1
 800a230:	d0e6      	beq.n	800a200 <_printf_common+0xb4>
 800a232:	f109 0901 	add.w	r9, r9, #1
 800a236:	e7d8      	b.n	800a1ea <_printf_common+0x9e>

0800a238 <_printf_i>:
 800a238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a23c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a240:	460c      	mov	r4, r1
 800a242:	7e09      	ldrb	r1, [r1, #24]
 800a244:	b085      	sub	sp, #20
 800a246:	296e      	cmp	r1, #110	; 0x6e
 800a248:	4617      	mov	r7, r2
 800a24a:	4606      	mov	r6, r0
 800a24c:	4698      	mov	r8, r3
 800a24e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a250:	f000 80b3 	beq.w	800a3ba <_printf_i+0x182>
 800a254:	d822      	bhi.n	800a29c <_printf_i+0x64>
 800a256:	2963      	cmp	r1, #99	; 0x63
 800a258:	d036      	beq.n	800a2c8 <_printf_i+0x90>
 800a25a:	d80a      	bhi.n	800a272 <_printf_i+0x3a>
 800a25c:	2900      	cmp	r1, #0
 800a25e:	f000 80b9 	beq.w	800a3d4 <_printf_i+0x19c>
 800a262:	2958      	cmp	r1, #88	; 0x58
 800a264:	f000 8083 	beq.w	800a36e <_printf_i+0x136>
 800a268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a270:	e032      	b.n	800a2d8 <_printf_i+0xa0>
 800a272:	2964      	cmp	r1, #100	; 0x64
 800a274:	d001      	beq.n	800a27a <_printf_i+0x42>
 800a276:	2969      	cmp	r1, #105	; 0x69
 800a278:	d1f6      	bne.n	800a268 <_printf_i+0x30>
 800a27a:	6820      	ldr	r0, [r4, #0]
 800a27c:	6813      	ldr	r3, [r2, #0]
 800a27e:	0605      	lsls	r5, r0, #24
 800a280:	f103 0104 	add.w	r1, r3, #4
 800a284:	d52a      	bpl.n	800a2dc <_printf_i+0xa4>
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6011      	str	r1, [r2, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	da03      	bge.n	800a296 <_printf_i+0x5e>
 800a28e:	222d      	movs	r2, #45	; 0x2d
 800a290:	425b      	negs	r3, r3
 800a292:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a296:	486f      	ldr	r0, [pc, #444]	; (800a454 <_printf_i+0x21c>)
 800a298:	220a      	movs	r2, #10
 800a29a:	e039      	b.n	800a310 <_printf_i+0xd8>
 800a29c:	2973      	cmp	r1, #115	; 0x73
 800a29e:	f000 809d 	beq.w	800a3dc <_printf_i+0x1a4>
 800a2a2:	d808      	bhi.n	800a2b6 <_printf_i+0x7e>
 800a2a4:	296f      	cmp	r1, #111	; 0x6f
 800a2a6:	d020      	beq.n	800a2ea <_printf_i+0xb2>
 800a2a8:	2970      	cmp	r1, #112	; 0x70
 800a2aa:	d1dd      	bne.n	800a268 <_printf_i+0x30>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	f043 0320 	orr.w	r3, r3, #32
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	e003      	b.n	800a2be <_printf_i+0x86>
 800a2b6:	2975      	cmp	r1, #117	; 0x75
 800a2b8:	d017      	beq.n	800a2ea <_printf_i+0xb2>
 800a2ba:	2978      	cmp	r1, #120	; 0x78
 800a2bc:	d1d4      	bne.n	800a268 <_printf_i+0x30>
 800a2be:	2378      	movs	r3, #120	; 0x78
 800a2c0:	4865      	ldr	r0, [pc, #404]	; (800a458 <_printf_i+0x220>)
 800a2c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2c6:	e055      	b.n	800a374 <_printf_i+0x13c>
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2ce:	1d19      	adds	r1, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6011      	str	r1, [r2, #0]
 800a2d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e08c      	b.n	800a3f6 <_printf_i+0x1be>
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2e2:	6011      	str	r1, [r2, #0]
 800a2e4:	bf18      	it	ne
 800a2e6:	b21b      	sxthne	r3, r3
 800a2e8:	e7cf      	b.n	800a28a <_printf_i+0x52>
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	1d18      	adds	r0, r3, #4
 800a2f0:	6010      	str	r0, [r2, #0]
 800a2f2:	0628      	lsls	r0, r5, #24
 800a2f4:	d501      	bpl.n	800a2fa <_printf_i+0xc2>
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	e002      	b.n	800a300 <_printf_i+0xc8>
 800a2fa:	0668      	lsls	r0, r5, #25
 800a2fc:	d5fb      	bpl.n	800a2f6 <_printf_i+0xbe>
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	296f      	cmp	r1, #111	; 0x6f
 800a302:	bf14      	ite	ne
 800a304:	220a      	movne	r2, #10
 800a306:	2208      	moveq	r2, #8
 800a308:	4852      	ldr	r0, [pc, #328]	; (800a454 <_printf_i+0x21c>)
 800a30a:	2100      	movs	r1, #0
 800a30c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a310:	6865      	ldr	r5, [r4, #4]
 800a312:	2d00      	cmp	r5, #0
 800a314:	60a5      	str	r5, [r4, #8]
 800a316:	f2c0 8095 	blt.w	800a444 <_printf_i+0x20c>
 800a31a:	6821      	ldr	r1, [r4, #0]
 800a31c:	f021 0104 	bic.w	r1, r1, #4
 800a320:	6021      	str	r1, [r4, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d13d      	bne.n	800a3a2 <_printf_i+0x16a>
 800a326:	2d00      	cmp	r5, #0
 800a328:	f040 808e 	bne.w	800a448 <_printf_i+0x210>
 800a32c:	4665      	mov	r5, ip
 800a32e:	2a08      	cmp	r2, #8
 800a330:	d10b      	bne.n	800a34a <_printf_i+0x112>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	07db      	lsls	r3, r3, #31
 800a336:	d508      	bpl.n	800a34a <_printf_i+0x112>
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	6862      	ldr	r2, [r4, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	bfde      	ittt	le
 800a340:	2330      	movle	r3, #48	; 0x30
 800a342:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a346:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a34a:	ebac 0305 	sub.w	r3, ip, r5
 800a34e:	6123      	str	r3, [r4, #16]
 800a350:	f8cd 8000 	str.w	r8, [sp]
 800a354:	463b      	mov	r3, r7
 800a356:	aa03      	add	r2, sp, #12
 800a358:	4621      	mov	r1, r4
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff fef6 	bl	800a14c <_printf_common>
 800a360:	3001      	adds	r0, #1
 800a362:	d14d      	bne.n	800a400 <_printf_i+0x1c8>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	b005      	add	sp, #20
 800a36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a36e:	4839      	ldr	r0, [pc, #228]	; (800a454 <_printf_i+0x21c>)
 800a370:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a374:	6813      	ldr	r3, [r2, #0]
 800a376:	6821      	ldr	r1, [r4, #0]
 800a378:	1d1d      	adds	r5, r3, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6015      	str	r5, [r2, #0]
 800a37e:	060a      	lsls	r2, r1, #24
 800a380:	d50b      	bpl.n	800a39a <_printf_i+0x162>
 800a382:	07ca      	lsls	r2, r1, #31
 800a384:	bf44      	itt	mi
 800a386:	f041 0120 	orrmi.w	r1, r1, #32
 800a38a:	6021      	strmi	r1, [r4, #0]
 800a38c:	b91b      	cbnz	r3, 800a396 <_printf_i+0x15e>
 800a38e:	6822      	ldr	r2, [r4, #0]
 800a390:	f022 0220 	bic.w	r2, r2, #32
 800a394:	6022      	str	r2, [r4, #0]
 800a396:	2210      	movs	r2, #16
 800a398:	e7b7      	b.n	800a30a <_printf_i+0xd2>
 800a39a:	064d      	lsls	r5, r1, #25
 800a39c:	bf48      	it	mi
 800a39e:	b29b      	uxthmi	r3, r3
 800a3a0:	e7ef      	b.n	800a382 <_printf_i+0x14a>
 800a3a2:	4665      	mov	r5, ip
 800a3a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3a8:	fb02 3311 	mls	r3, r2, r1, r3
 800a3ac:	5cc3      	ldrb	r3, [r0, r3]
 800a3ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d1f5      	bne.n	800a3a4 <_printf_i+0x16c>
 800a3b8:	e7b9      	b.n	800a32e <_printf_i+0xf6>
 800a3ba:	6813      	ldr	r3, [r2, #0]
 800a3bc:	6825      	ldr	r5, [r4, #0]
 800a3be:	1d18      	adds	r0, r3, #4
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	6010      	str	r0, [r2, #0]
 800a3c4:	0628      	lsls	r0, r5, #24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	d501      	bpl.n	800a3ce <_printf_i+0x196>
 800a3ca:	6019      	str	r1, [r3, #0]
 800a3cc:	e002      	b.n	800a3d4 <_printf_i+0x19c>
 800a3ce:	066a      	lsls	r2, r5, #25
 800a3d0:	d5fb      	bpl.n	800a3ca <_printf_i+0x192>
 800a3d2:	8019      	strh	r1, [r3, #0]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4665      	mov	r5, ip
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	e7b9      	b.n	800a350 <_printf_i+0x118>
 800a3dc:	6813      	ldr	r3, [r2, #0]
 800a3de:	1d19      	adds	r1, r3, #4
 800a3e0:	6011      	str	r1, [r2, #0]
 800a3e2:	681d      	ldr	r5, [r3, #0]
 800a3e4:	6862      	ldr	r2, [r4, #4]
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 ff59 	bl	800b2a0 <memchr>
 800a3ee:	b108      	cbz	r0, 800a3f4 <_printf_i+0x1bc>
 800a3f0:	1b40      	subs	r0, r0, r5
 800a3f2:	6060      	str	r0, [r4, #4]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3fe:	e7a7      	b.n	800a350 <_printf_i+0x118>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	462a      	mov	r2, r5
 800a404:	4639      	mov	r1, r7
 800a406:	4630      	mov	r0, r6
 800a408:	47c0      	blx	r8
 800a40a:	3001      	adds	r0, #1
 800a40c:	d0aa      	beq.n	800a364 <_printf_i+0x12c>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	079b      	lsls	r3, r3, #30
 800a412:	d413      	bmi.n	800a43c <_printf_i+0x204>
 800a414:	68e0      	ldr	r0, [r4, #12]
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	4298      	cmp	r0, r3
 800a41a:	bfb8      	it	lt
 800a41c:	4618      	movlt	r0, r3
 800a41e:	e7a3      	b.n	800a368 <_printf_i+0x130>
 800a420:	2301      	movs	r3, #1
 800a422:	464a      	mov	r2, r9
 800a424:	4639      	mov	r1, r7
 800a426:	4630      	mov	r0, r6
 800a428:	47c0      	blx	r8
 800a42a:	3001      	adds	r0, #1
 800a42c:	d09a      	beq.n	800a364 <_printf_i+0x12c>
 800a42e:	3501      	adds	r5, #1
 800a430:	68e3      	ldr	r3, [r4, #12]
 800a432:	9a03      	ldr	r2, [sp, #12]
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	42ab      	cmp	r3, r5
 800a438:	dcf2      	bgt.n	800a420 <_printf_i+0x1e8>
 800a43a:	e7eb      	b.n	800a414 <_printf_i+0x1dc>
 800a43c:	2500      	movs	r5, #0
 800a43e:	f104 0919 	add.w	r9, r4, #25
 800a442:	e7f5      	b.n	800a430 <_printf_i+0x1f8>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1ac      	bne.n	800a3a2 <_printf_i+0x16a>
 800a448:	7803      	ldrb	r3, [r0, #0]
 800a44a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a44e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a452:	e76c      	b.n	800a32e <_printf_i+0xf6>
 800a454:	0800d7a6 	.word	0x0800d7a6
 800a458:	0800d7b7 	.word	0x0800d7b7

0800a45c <siprintf>:
 800a45c:	b40e      	push	{r1, r2, r3}
 800a45e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a462:	b500      	push	{lr}
 800a464:	b09c      	sub	sp, #112	; 0x70
 800a466:	ab1d      	add	r3, sp, #116	; 0x74
 800a468:	9002      	str	r0, [sp, #8]
 800a46a:	9006      	str	r0, [sp, #24]
 800a46c:	9107      	str	r1, [sp, #28]
 800a46e:	9104      	str	r1, [sp, #16]
 800a470:	4808      	ldr	r0, [pc, #32]	; (800a494 <siprintf+0x38>)
 800a472:	4909      	ldr	r1, [pc, #36]	; (800a498 <siprintf+0x3c>)
 800a474:	f853 2b04 	ldr.w	r2, [r3], #4
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	6800      	ldr	r0, [r0, #0]
 800a47c:	a902      	add	r1, sp, #8
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	f001 fb06 	bl	800ba90 <_svfiprintf_r>
 800a484:	2200      	movs	r2, #0
 800a486:	9b02      	ldr	r3, [sp, #8]
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	b01c      	add	sp, #112	; 0x70
 800a48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a490:	b003      	add	sp, #12
 800a492:	4770      	bx	lr
 800a494:	20000014 	.word	0x20000014
 800a498:	ffff0208 	.word	0xffff0208

0800a49c <_strtol_l.isra.0>:
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4689      	mov	r9, r1
 800a4a4:	4692      	mov	sl, r2
 800a4a6:	461e      	mov	r6, r3
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	463d      	mov	r5, r7
 800a4ac:	9808      	ldr	r0, [sp, #32]
 800a4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4b2:	f000 fec9 	bl	800b248 <__locale_ctype_ptr_l>
 800a4b6:	4420      	add	r0, r4
 800a4b8:	7843      	ldrb	r3, [r0, #1]
 800a4ba:	f013 0308 	ands.w	r3, r3, #8
 800a4be:	d132      	bne.n	800a526 <_strtol_l.isra.0+0x8a>
 800a4c0:	2c2d      	cmp	r4, #45	; 0x2d
 800a4c2:	d132      	bne.n	800a52a <_strtol_l.isra.0+0x8e>
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	787c      	ldrb	r4, [r7, #1]
 800a4c8:	1cbd      	adds	r5, r7, #2
 800a4ca:	2e00      	cmp	r6, #0
 800a4cc:	d05d      	beq.n	800a58a <_strtol_l.isra.0+0xee>
 800a4ce:	2e10      	cmp	r6, #16
 800a4d0:	d109      	bne.n	800a4e6 <_strtol_l.isra.0+0x4a>
 800a4d2:	2c30      	cmp	r4, #48	; 0x30
 800a4d4:	d107      	bne.n	800a4e6 <_strtol_l.isra.0+0x4a>
 800a4d6:	782b      	ldrb	r3, [r5, #0]
 800a4d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4dc:	2b58      	cmp	r3, #88	; 0x58
 800a4de:	d14f      	bne.n	800a580 <_strtol_l.isra.0+0xe4>
 800a4e0:	2610      	movs	r6, #16
 800a4e2:	786c      	ldrb	r4, [r5, #1]
 800a4e4:	3502      	adds	r5, #2
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	bf14      	ite	ne
 800a4ea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a4ee:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a4f2:	2700      	movs	r7, #0
 800a4f4:	fbb1 fcf6 	udiv	ip, r1, r6
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a4fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a502:	2b09      	cmp	r3, #9
 800a504:	d817      	bhi.n	800a536 <_strtol_l.isra.0+0x9a>
 800a506:	461c      	mov	r4, r3
 800a508:	42a6      	cmp	r6, r4
 800a50a:	dd23      	ble.n	800a554 <_strtol_l.isra.0+0xb8>
 800a50c:	1c7b      	adds	r3, r7, #1
 800a50e:	d007      	beq.n	800a520 <_strtol_l.isra.0+0x84>
 800a510:	4584      	cmp	ip, r0
 800a512:	d31c      	bcc.n	800a54e <_strtol_l.isra.0+0xb2>
 800a514:	d101      	bne.n	800a51a <_strtol_l.isra.0+0x7e>
 800a516:	45a6      	cmp	lr, r4
 800a518:	db19      	blt.n	800a54e <_strtol_l.isra.0+0xb2>
 800a51a:	2701      	movs	r7, #1
 800a51c:	fb00 4006 	mla	r0, r0, r6, r4
 800a520:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a524:	e7eb      	b.n	800a4fe <_strtol_l.isra.0+0x62>
 800a526:	462f      	mov	r7, r5
 800a528:	e7bf      	b.n	800a4aa <_strtol_l.isra.0+0xe>
 800a52a:	2c2b      	cmp	r4, #43	; 0x2b
 800a52c:	bf04      	itt	eq
 800a52e:	1cbd      	addeq	r5, r7, #2
 800a530:	787c      	ldrbeq	r4, [r7, #1]
 800a532:	461a      	mov	r2, r3
 800a534:	e7c9      	b.n	800a4ca <_strtol_l.isra.0+0x2e>
 800a536:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a53a:	2b19      	cmp	r3, #25
 800a53c:	d801      	bhi.n	800a542 <_strtol_l.isra.0+0xa6>
 800a53e:	3c37      	subs	r4, #55	; 0x37
 800a540:	e7e2      	b.n	800a508 <_strtol_l.isra.0+0x6c>
 800a542:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a546:	2b19      	cmp	r3, #25
 800a548:	d804      	bhi.n	800a554 <_strtol_l.isra.0+0xb8>
 800a54a:	3c57      	subs	r4, #87	; 0x57
 800a54c:	e7dc      	b.n	800a508 <_strtol_l.isra.0+0x6c>
 800a54e:	f04f 37ff 	mov.w	r7, #4294967295
 800a552:	e7e5      	b.n	800a520 <_strtol_l.isra.0+0x84>
 800a554:	1c7b      	adds	r3, r7, #1
 800a556:	d108      	bne.n	800a56a <_strtol_l.isra.0+0xce>
 800a558:	2322      	movs	r3, #34	; 0x22
 800a55a:	4608      	mov	r0, r1
 800a55c:	f8c8 3000 	str.w	r3, [r8]
 800a560:	f1ba 0f00 	cmp.w	sl, #0
 800a564:	d107      	bne.n	800a576 <_strtol_l.isra.0+0xda>
 800a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56a:	b102      	cbz	r2, 800a56e <_strtol_l.isra.0+0xd2>
 800a56c:	4240      	negs	r0, r0
 800a56e:	f1ba 0f00 	cmp.w	sl, #0
 800a572:	d0f8      	beq.n	800a566 <_strtol_l.isra.0+0xca>
 800a574:	b10f      	cbz	r7, 800a57a <_strtol_l.isra.0+0xde>
 800a576:	f105 39ff 	add.w	r9, r5, #4294967295
 800a57a:	f8ca 9000 	str.w	r9, [sl]
 800a57e:	e7f2      	b.n	800a566 <_strtol_l.isra.0+0xca>
 800a580:	2430      	movs	r4, #48	; 0x30
 800a582:	2e00      	cmp	r6, #0
 800a584:	d1af      	bne.n	800a4e6 <_strtol_l.isra.0+0x4a>
 800a586:	2608      	movs	r6, #8
 800a588:	e7ad      	b.n	800a4e6 <_strtol_l.isra.0+0x4a>
 800a58a:	2c30      	cmp	r4, #48	; 0x30
 800a58c:	d0a3      	beq.n	800a4d6 <_strtol_l.isra.0+0x3a>
 800a58e:	260a      	movs	r6, #10
 800a590:	e7a9      	b.n	800a4e6 <_strtol_l.isra.0+0x4a>
	...

0800a594 <strtol>:
 800a594:	4b08      	ldr	r3, [pc, #32]	; (800a5b8 <strtol+0x24>)
 800a596:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a598:	681c      	ldr	r4, [r3, #0]
 800a59a:	4d08      	ldr	r5, [pc, #32]	; (800a5bc <strtol+0x28>)
 800a59c:	6a23      	ldr	r3, [r4, #32]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bf08      	it	eq
 800a5a2:	462b      	moveq	r3, r5
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	460a      	mov	r2, r1
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7ff ff75 	bl	800a49c <_strtol_l.isra.0>
 800a5b2:	b003      	add	sp, #12
 800a5b4:	bd30      	pop	{r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000014 	.word	0x20000014
 800a5bc:	20000078 	.word	0x20000078

0800a5c0 <quorem>:
 800a5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	6903      	ldr	r3, [r0, #16]
 800a5c6:	690c      	ldr	r4, [r1, #16]
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	f2c0 8084 	blt.w	800a6d8 <quorem+0x118>
 800a5d0:	3c01      	subs	r4, #1
 800a5d2:	f101 0714 	add.w	r7, r1, #20
 800a5d6:	f100 0614 	add.w	r6, r0, #20
 800a5da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a5de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	fbb0 f5f5 	udiv	r5, r0, r5
 800a5e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a5ec:	eb06 030c 	add.w	r3, r6, ip
 800a5f0:	eb07 090c 	add.w	r9, r7, ip
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	b39d      	cbz	r5, 800a660 <quorem+0xa0>
 800a5f8:	f04f 0a00 	mov.w	sl, #0
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	46b6      	mov	lr, r6
 800a600:	46d3      	mov	fp, sl
 800a602:	f850 2b04 	ldr.w	r2, [r0], #4
 800a606:	b293      	uxth	r3, r2
 800a608:	fb05 a303 	mla	r3, r5, r3, sl
 800a60c:	0c12      	lsrs	r2, r2, #16
 800a60e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a612:	fb05 a202 	mla	r2, r5, r2, sl
 800a616:	b29b      	uxth	r3, r3
 800a618:	ebab 0303 	sub.w	r3, fp, r3
 800a61c:	f8de b000 	ldr.w	fp, [lr]
 800a620:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a624:	fa1f fb8b 	uxth.w	fp, fp
 800a628:	445b      	add	r3, fp
 800a62a:	fa1f fb82 	uxth.w	fp, r2
 800a62e:	f8de 2000 	ldr.w	r2, [lr]
 800a632:	4581      	cmp	r9, r0
 800a634:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a642:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a646:	f84e 3b04 	str.w	r3, [lr], #4
 800a64a:	d2da      	bcs.n	800a602 <quorem+0x42>
 800a64c:	f856 300c 	ldr.w	r3, [r6, ip]
 800a650:	b933      	cbnz	r3, 800a660 <quorem+0xa0>
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	3b04      	subs	r3, #4
 800a656:	429e      	cmp	r6, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	d331      	bcc.n	800a6c0 <quorem+0x100>
 800a65c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a660:	4640      	mov	r0, r8
 800a662:	f001 f83f 	bl	800b6e4 <__mcmp>
 800a666:	2800      	cmp	r0, #0
 800a668:	db26      	blt.n	800a6b8 <quorem+0xf8>
 800a66a:	4630      	mov	r0, r6
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	3501      	adds	r5, #1
 800a672:	f857 1b04 	ldr.w	r1, [r7], #4
 800a676:	f8d0 e000 	ldr.w	lr, [r0]
 800a67a:	b28b      	uxth	r3, r1
 800a67c:	ebac 0303 	sub.w	r3, ip, r3
 800a680:	fa1f f28e 	uxth.w	r2, lr
 800a684:	4413      	add	r3, r2
 800a686:	0c0a      	lsrs	r2, r1, #16
 800a688:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	b29b      	uxth	r3, r3
 800a692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a696:	45b9      	cmp	r9, r7
 800a698:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a69c:	f840 3b04 	str.w	r3, [r0], #4
 800a6a0:	d2e7      	bcs.n	800a672 <quorem+0xb2>
 800a6a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6aa:	b92a      	cbnz	r2, 800a6b8 <quorem+0xf8>
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	429e      	cmp	r6, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	d30b      	bcc.n	800a6cc <quorem+0x10c>
 800a6b4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	b003      	add	sp, #12
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	3b04      	subs	r3, #4
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	d1c9      	bne.n	800a65c <quorem+0x9c>
 800a6c8:	3c01      	subs	r4, #1
 800a6ca:	e7c4      	b.n	800a656 <quorem+0x96>
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	3b04      	subs	r3, #4
 800a6d0:	2a00      	cmp	r2, #0
 800a6d2:	d1ef      	bne.n	800a6b4 <quorem+0xf4>
 800a6d4:	3c01      	subs	r4, #1
 800a6d6:	e7ea      	b.n	800a6ae <quorem+0xee>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e7ee      	b.n	800a6ba <quorem+0xfa>
 800a6dc:	0000      	movs	r0, r0
	...

0800a6e0 <_dtoa_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6ea:	b095      	sub	sp, #84	; 0x54
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a6f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a6f6:	b93d      	cbnz	r5, 800a708 <_dtoa_r+0x28>
 800a6f8:	2010      	movs	r0, #16
 800a6fa:	f000 fdb7 	bl	800b26c <malloc>
 800a6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a704:	6005      	str	r5, [r0, #0]
 800a706:	60c5      	str	r5, [r0, #12]
 800a708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70a:	6819      	ldr	r1, [r3, #0]
 800a70c:	b151      	cbz	r1, 800a724 <_dtoa_r+0x44>
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	2301      	movs	r3, #1
 800a712:	4093      	lsls	r3, r2
 800a714:	604a      	str	r2, [r1, #4]
 800a716:	608b      	str	r3, [r1, #8]
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fe03 	bl	800b324 <_Bfree>
 800a71e:	2200      	movs	r2, #0
 800a720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	1e3b      	subs	r3, r7, #0
 800a726:	bfaf      	iteee	ge
 800a728:	2300      	movge	r3, #0
 800a72a:	2201      	movlt	r2, #1
 800a72c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a730:	9303      	strlt	r3, [sp, #12]
 800a732:	bfac      	ite	ge
 800a734:	f8c8 3000 	strge.w	r3, [r8]
 800a738:	f8c8 2000 	strlt.w	r2, [r8]
 800a73c:	4bae      	ldr	r3, [pc, #696]	; (800a9f8 <_dtoa_r+0x318>)
 800a73e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a742:	ea33 0308 	bics.w	r3, r3, r8
 800a746:	d11b      	bne.n	800a780 <_dtoa_r+0xa0>
 800a748:	f242 730f 	movw	r3, #9999	; 0x270f
 800a74c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	b923      	cbnz	r3, 800a75e <_dtoa_r+0x7e>
 800a754:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a758:	2800      	cmp	r0, #0
 800a75a:	f000 8545 	beq.w	800b1e8 <_dtoa_r+0xb08>
 800a75e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a760:	b953      	cbnz	r3, 800a778 <_dtoa_r+0x98>
 800a762:	4ba6      	ldr	r3, [pc, #664]	; (800a9fc <_dtoa_r+0x31c>)
 800a764:	e021      	b.n	800a7aa <_dtoa_r+0xca>
 800a766:	4ba6      	ldr	r3, [pc, #664]	; (800aa00 <_dtoa_r+0x320>)
 800a768:	9306      	str	r3, [sp, #24]
 800a76a:	3308      	adds	r3, #8
 800a76c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	9806      	ldr	r0, [sp, #24]
 800a772:	b015      	add	sp, #84	; 0x54
 800a774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a778:	4ba0      	ldr	r3, [pc, #640]	; (800a9fc <_dtoa_r+0x31c>)
 800a77a:	9306      	str	r3, [sp, #24]
 800a77c:	3303      	adds	r3, #3
 800a77e:	e7f5      	b.n	800a76c <_dtoa_r+0x8c>
 800a780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f90c 	bl	80009a8 <__aeabi_dcmpeq>
 800a790:	4682      	mov	sl, r0
 800a792:	b160      	cbz	r0, 800a7ae <_dtoa_r+0xce>
 800a794:	2301      	movs	r3, #1
 800a796:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8520 	beq.w	800b1e2 <_dtoa_r+0xb02>
 800a7a2:	4b98      	ldr	r3, [pc, #608]	; (800aa04 <_dtoa_r+0x324>)
 800a7a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	9306      	str	r3, [sp, #24]
 800a7ac:	e7e0      	b.n	800a770 <_dtoa_r+0x90>
 800a7ae:	ab12      	add	r3, sp, #72	; 0x48
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	ab13      	add	r3, sp, #76	; 0x4c
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	463b      	mov	r3, r7
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f001 f80a 	bl	800b7d4 <__d2b>
 800a7c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7c4:	4683      	mov	fp, r0
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	d07d      	beq.n	800a8c6 <_dtoa_r+0x1e6>
 800a7ca:	46b0      	mov	r8, r6
 800a7cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a7d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a7d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4b89      	ldr	r3, [pc, #548]	; (800aa08 <_dtoa_r+0x328>)
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f5 fcbe 	bl	8000168 <__aeabi_dsub>
 800a7ec:	a37c      	add	r3, pc, #496	; (adr r3, 800a9e0 <_dtoa_r+0x300>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fe71 	bl	80004d8 <__aeabi_dmul>
 800a7f6:	a37c      	add	r3, pc, #496	; (adr r3, 800a9e8 <_dtoa_r+0x308>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fcb6 	bl	800016c <__adddf3>
 800a800:	4606      	mov	r6, r0
 800a802:	4628      	mov	r0, r5
 800a804:	460f      	mov	r7, r1
 800a806:	f7f5 fdfd 	bl	8000404 <__aeabi_i2d>
 800a80a:	a379      	add	r3, pc, #484	; (adr r3, 800a9f0 <_dtoa_r+0x310>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f7f5 fe62 	bl	80004d8 <__aeabi_dmul>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4630      	mov	r0, r6
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f5 fca6 	bl	800016c <__adddf3>
 800a820:	4606      	mov	r6, r0
 800a822:	460f      	mov	r7, r1
 800a824:	f7f6 f908 	bl	8000a38 <__aeabi_d2iz>
 800a828:	2200      	movs	r2, #0
 800a82a:	4682      	mov	sl, r0
 800a82c:	2300      	movs	r3, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f6 f8c3 	bl	80009bc <__aeabi_dcmplt>
 800a836:	b148      	cbz	r0, 800a84c <_dtoa_r+0x16c>
 800a838:	4650      	mov	r0, sl
 800a83a:	f7f5 fde3 	bl	8000404 <__aeabi_i2d>
 800a83e:	4632      	mov	r2, r6
 800a840:	463b      	mov	r3, r7
 800a842:	f7f6 f8b1 	bl	80009a8 <__aeabi_dcmpeq>
 800a846:	b908      	cbnz	r0, 800a84c <_dtoa_r+0x16c>
 800a848:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a84c:	f1ba 0f16 	cmp.w	sl, #22
 800a850:	d85a      	bhi.n	800a908 <_dtoa_r+0x228>
 800a852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a856:	496d      	ldr	r1, [pc, #436]	; (800aa0c <_dtoa_r+0x32c>)
 800a858:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a860:	f7f6 f8ca 	bl	80009f8 <__aeabi_dcmpgt>
 800a864:	2800      	cmp	r0, #0
 800a866:	d051      	beq.n	800a90c <_dtoa_r+0x22c>
 800a868:	2300      	movs	r3, #0
 800a86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a86e:	930d      	str	r3, [sp, #52]	; 0x34
 800a870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a872:	1b5d      	subs	r5, r3, r5
 800a874:	1e6b      	subs	r3, r5, #1
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	bf43      	ittte	mi
 800a87a:	2300      	movmi	r3, #0
 800a87c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a880:	9307      	strmi	r3, [sp, #28]
 800a882:	f04f 0900 	movpl.w	r9, #0
 800a886:	f1ba 0f00 	cmp.w	sl, #0
 800a88a:	db41      	blt.n	800a910 <_dtoa_r+0x230>
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a892:	4453      	add	r3, sl
 800a894:	9307      	str	r3, [sp, #28]
 800a896:	2300      	movs	r3, #0
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	f200 808f 	bhi.w	800a9c0 <_dtoa_r+0x2e0>
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	bfc4      	itt	gt
 800a8a6:	3b04      	subgt	r3, #4
 800a8a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a8aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8ac:	bfc8      	it	gt
 800a8ae:	2500      	movgt	r5, #0
 800a8b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a8b4:	bfd8      	it	le
 800a8b6:	2501      	movle	r5, #1
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	f200 808d 	bhi.w	800a9d8 <_dtoa_r+0x2f8>
 800a8be:	e8df f003 	tbb	[pc, r3]
 800a8c2:	7d7b      	.short	0x7d7b
 800a8c4:	6f2f      	.short	0x6f2f
 800a8c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a8ca:	441d      	add	r5, r3
 800a8cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a8d0:	2820      	cmp	r0, #32
 800a8d2:	dd13      	ble.n	800a8fc <_dtoa_r+0x21c>
 800a8d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	fa08 f800 	lsl.w	r8, r8, r0
 800a8de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a8e2:	fa23 f000 	lsr.w	r0, r3, r0
 800a8e6:	ea48 0000 	orr.w	r0, r8, r0
 800a8ea:	f7f5 fd7b 	bl	80003e4 <__aeabi_ui2d>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a8f6:	3d01      	subs	r5, #1
 800a8f8:	9310      	str	r3, [sp, #64]	; 0x40
 800a8fa:	e771      	b.n	800a7e0 <_dtoa_r+0x100>
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	f1c0 0020 	rsb	r0, r0, #32
 800a902:	fa03 f000 	lsl.w	r0, r3, r0
 800a906:	e7f0      	b.n	800a8ea <_dtoa_r+0x20a>
 800a908:	2301      	movs	r3, #1
 800a90a:	e7b0      	b.n	800a86e <_dtoa_r+0x18e>
 800a90c:	900d      	str	r0, [sp, #52]	; 0x34
 800a90e:	e7af      	b.n	800a870 <_dtoa_r+0x190>
 800a910:	f1ca 0300 	rsb	r3, sl, #0
 800a914:	9308      	str	r3, [sp, #32]
 800a916:	2300      	movs	r3, #0
 800a918:	eba9 090a 	sub.w	r9, r9, sl
 800a91c:	930c      	str	r3, [sp, #48]	; 0x30
 800a91e:	e7bc      	b.n	800a89a <_dtoa_r+0x1ba>
 800a920:	2301      	movs	r3, #1
 800a922:	9309      	str	r3, [sp, #36]	; 0x24
 800a924:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a926:	2b00      	cmp	r3, #0
 800a928:	dd74      	ble.n	800aa14 <_dtoa_r+0x334>
 800a92a:	4698      	mov	r8, r3
 800a92c:	9304      	str	r3, [sp, #16]
 800a92e:	2200      	movs	r2, #0
 800a930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a932:	6072      	str	r2, [r6, #4]
 800a934:	2204      	movs	r2, #4
 800a936:	f102 0014 	add.w	r0, r2, #20
 800a93a:	4298      	cmp	r0, r3
 800a93c:	6871      	ldr	r1, [r6, #4]
 800a93e:	d96e      	bls.n	800aa1e <_dtoa_r+0x33e>
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fcbb 	bl	800b2bc <_Balloc>
 800a946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a948:	6030      	str	r0, [r6, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f1b8 0f0e 	cmp.w	r8, #14
 800a950:	9306      	str	r3, [sp, #24]
 800a952:	f200 80ed 	bhi.w	800ab30 <_dtoa_r+0x450>
 800a956:	2d00      	cmp	r5, #0
 800a958:	f000 80ea 	beq.w	800ab30 <_dtoa_r+0x450>
 800a95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a960:	f1ba 0f00 	cmp.w	sl, #0
 800a964:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a968:	dd77      	ble.n	800aa5a <_dtoa_r+0x37a>
 800a96a:	4a28      	ldr	r2, [pc, #160]	; (800aa0c <_dtoa_r+0x32c>)
 800a96c:	f00a 030f 	and.w	r3, sl, #15
 800a970:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a974:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a978:	06f0      	lsls	r0, r6, #27
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a982:	d568      	bpl.n	800aa56 <_dtoa_r+0x376>
 800a984:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a988:	4b21      	ldr	r3, [pc, #132]	; (800aa10 <_dtoa_r+0x330>)
 800a98a:	2503      	movs	r5, #3
 800a98c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a990:	f7f5 fecc 	bl	800072c <__aeabi_ddiv>
 800a994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a998:	f006 060f 	and.w	r6, r6, #15
 800a99c:	4f1c      	ldr	r7, [pc, #112]	; (800aa10 <_dtoa_r+0x330>)
 800a99e:	e04f      	b.n	800aa40 <_dtoa_r+0x360>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9a6:	4453      	add	r3, sl
 800a9a8:	f103 0801 	add.w	r8, r3, #1
 800a9ac:	9304      	str	r3, [sp, #16]
 800a9ae:	4643      	mov	r3, r8
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	bfb8      	it	lt
 800a9b4:	2301      	movlt	r3, #1
 800a9b6:	e7ba      	b.n	800a92e <_dtoa_r+0x24e>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e7b2      	b.n	800a922 <_dtoa_r+0x242>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	e7f0      	b.n	800a9a2 <_dtoa_r+0x2c2>
 800a9c0:	2501      	movs	r5, #1
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9509      	str	r5, [sp, #36]	; 0x24
 800a9c6:	931e      	str	r3, [sp, #120]	; 0x78
 800a9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	9304      	str	r3, [sp, #16]
 800a9d0:	4698      	mov	r8, r3
 800a9d2:	2312      	movs	r3, #18
 800a9d4:	921f      	str	r2, [sp, #124]	; 0x7c
 800a9d6:	e7aa      	b.n	800a92e <_dtoa_r+0x24e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	9309      	str	r3, [sp, #36]	; 0x24
 800a9dc:	e7f4      	b.n	800a9c8 <_dtoa_r+0x2e8>
 800a9de:	bf00      	nop
 800a9e0:	636f4361 	.word	0x636f4361
 800a9e4:	3fd287a7 	.word	0x3fd287a7
 800a9e8:	8b60c8b3 	.word	0x8b60c8b3
 800a9ec:	3fc68a28 	.word	0x3fc68a28
 800a9f0:	509f79fb 	.word	0x509f79fb
 800a9f4:	3fd34413 	.word	0x3fd34413
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	0800d7d1 	.word	0x0800d7d1
 800aa00:	0800d7c8 	.word	0x0800d7c8
 800aa04:	0800d7a5 	.word	0x0800d7a5
 800aa08:	3ff80000 	.word	0x3ff80000
 800aa0c:	0800d808 	.word	0x0800d808
 800aa10:	0800d7e0 	.word	0x0800d7e0
 800aa14:	2301      	movs	r3, #1
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	4698      	mov	r8, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	e7da      	b.n	800a9d4 <_dtoa_r+0x2f4>
 800aa1e:	3101      	adds	r1, #1
 800aa20:	6071      	str	r1, [r6, #4]
 800aa22:	0052      	lsls	r2, r2, #1
 800aa24:	e787      	b.n	800a936 <_dtoa_r+0x256>
 800aa26:	07f1      	lsls	r1, r6, #31
 800aa28:	d508      	bpl.n	800aa3c <_dtoa_r+0x35c>
 800aa2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa32:	f7f5 fd51 	bl	80004d8 <__aeabi_dmul>
 800aa36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa3a:	3501      	adds	r5, #1
 800aa3c:	1076      	asrs	r6, r6, #1
 800aa3e:	3708      	adds	r7, #8
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	d1f0      	bne.n	800aa26 <_dtoa_r+0x346>
 800aa44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa4c:	f7f5 fe6e 	bl	800072c <__aeabi_ddiv>
 800aa50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa54:	e01b      	b.n	800aa8e <_dtoa_r+0x3ae>
 800aa56:	2502      	movs	r5, #2
 800aa58:	e7a0      	b.n	800a99c <_dtoa_r+0x2bc>
 800aa5a:	f000 80a4 	beq.w	800aba6 <_dtoa_r+0x4c6>
 800aa5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aa62:	f1ca 0600 	rsb	r6, sl, #0
 800aa66:	4ba0      	ldr	r3, [pc, #640]	; (800ace8 <_dtoa_r+0x608>)
 800aa68:	f006 020f 	and.w	r2, r6, #15
 800aa6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fd30 	bl	80004d8 <__aeabi_dmul>
 800aa78:	2502      	movs	r5, #2
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa80:	4f9a      	ldr	r7, [pc, #616]	; (800acec <_dtoa_r+0x60c>)
 800aa82:	1136      	asrs	r6, r6, #4
 800aa84:	2e00      	cmp	r6, #0
 800aa86:	f040 8083 	bne.w	800ab90 <_dtoa_r+0x4b0>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e0      	bne.n	800aa50 <_dtoa_r+0x370>
 800aa8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 808a 	beq.w	800abaa <_dtoa_r+0x4ca>
 800aa96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aa9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4b92      	ldr	r3, [pc, #584]	; (800acf0 <_dtoa_r+0x610>)
 800aaa6:	f7f5 ff89 	bl	80009bc <__aeabi_dcmplt>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d07d      	beq.n	800abaa <_dtoa_r+0x4ca>
 800aaae:	f1b8 0f00 	cmp.w	r8, #0
 800aab2:	d07a      	beq.n	800abaa <_dtoa_r+0x4ca>
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	dd36      	ble.n	800ab28 <_dtoa_r+0x448>
 800aaba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aabe:	2200      	movs	r2, #0
 800aac0:	4b8c      	ldr	r3, [pc, #560]	; (800acf4 <_dtoa_r+0x614>)
 800aac2:	f7f5 fd09 	bl	80004d8 <__aeabi_dmul>
 800aac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaca:	9e04      	ldr	r6, [sp, #16]
 800aacc:	f10a 37ff 	add.w	r7, sl, #4294967295
 800aad0:	3501      	adds	r5, #1
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7f5 fc96 	bl	8000404 <__aeabi_i2d>
 800aad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aadc:	f7f5 fcfc 	bl	80004d8 <__aeabi_dmul>
 800aae0:	2200      	movs	r2, #0
 800aae2:	4b85      	ldr	r3, [pc, #532]	; (800acf8 <_dtoa_r+0x618>)
 800aae4:	f7f5 fb42 	bl	800016c <__adddf3>
 800aae8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800aaec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aaf0:	950b      	str	r5, [sp, #44]	; 0x2c
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d15c      	bne.n	800abb0 <_dtoa_r+0x4d0>
 800aaf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <_dtoa_r+0x61c>)
 800aafe:	f7f5 fb33 	bl	8000168 <__aeabi_dsub>
 800ab02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab04:	462b      	mov	r3, r5
 800ab06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0a:	f7f5 ff75 	bl	80009f8 <__aeabi_dcmpgt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f040 8281 	bne.w	800b016 <_dtoa_r+0x936>
 800ab14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ab1e:	f7f5 ff4d 	bl	80009bc <__aeabi_dcmplt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	f040 8275 	bne.w	800b012 <_dtoa_r+0x932>
 800ab28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f2c0 814b 	blt.w	800adce <_dtoa_r+0x6ee>
 800ab38:	f1ba 0f0e 	cmp.w	sl, #14
 800ab3c:	f300 8147 	bgt.w	800adce <_dtoa_r+0x6ee>
 800ab40:	4b69      	ldr	r3, [pc, #420]	; (800ace8 <_dtoa_r+0x608>)
 800ab42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f280 80d7 	bge.w	800ad04 <_dtoa_r+0x624>
 800ab56:	f1b8 0f00 	cmp.w	r8, #0
 800ab5a:	f300 80d3 	bgt.w	800ad04 <_dtoa_r+0x624>
 800ab5e:	f040 8257 	bne.w	800b010 <_dtoa_r+0x930>
 800ab62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab66:	2200      	movs	r2, #0
 800ab68:	4b64      	ldr	r3, [pc, #400]	; (800acfc <_dtoa_r+0x61c>)
 800ab6a:	f7f5 fcb5 	bl	80004d8 <__aeabi_dmul>
 800ab6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab72:	f7f5 ff37 	bl	80009e4 <__aeabi_dcmpge>
 800ab76:	4646      	mov	r6, r8
 800ab78:	4647      	mov	r7, r8
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f040 822d 	bne.w	800afda <_dtoa_r+0x8fa>
 800ab80:	9b06      	ldr	r3, [sp, #24]
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	1c5d      	adds	r5, r3, #1
 800ab86:	2331      	movs	r3, #49	; 0x31
 800ab88:	f10a 0a01 	add.w	sl, sl, #1
 800ab8c:	7013      	strb	r3, [r2, #0]
 800ab8e:	e228      	b.n	800afe2 <_dtoa_r+0x902>
 800ab90:	07f2      	lsls	r2, r6, #31
 800ab92:	d505      	bpl.n	800aba0 <_dtoa_r+0x4c0>
 800ab94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab98:	f7f5 fc9e 	bl	80004d8 <__aeabi_dmul>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	3501      	adds	r5, #1
 800aba0:	1076      	asrs	r6, r6, #1
 800aba2:	3708      	adds	r7, #8
 800aba4:	e76e      	b.n	800aa84 <_dtoa_r+0x3a4>
 800aba6:	2502      	movs	r5, #2
 800aba8:	e771      	b.n	800aa8e <_dtoa_r+0x3ae>
 800abaa:	4657      	mov	r7, sl
 800abac:	4646      	mov	r6, r8
 800abae:	e790      	b.n	800aad2 <_dtoa_r+0x3f2>
 800abb0:	4b4d      	ldr	r3, [pc, #308]	; (800ace8 <_dtoa_r+0x608>)
 800abb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800abba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d048      	beq.n	800ac52 <_dtoa_r+0x572>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	2000      	movs	r0, #0
 800abc6:	494e      	ldr	r1, [pc, #312]	; (800ad00 <_dtoa_r+0x620>)
 800abc8:	f7f5 fdb0 	bl	800072c <__aeabi_ddiv>
 800abcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abd0:	f7f5 faca 	bl	8000168 <__aeabi_dsub>
 800abd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800abd8:	9d06      	ldr	r5, [sp, #24]
 800abda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abde:	f7f5 ff2b 	bl	8000a38 <__aeabi_d2iz>
 800abe2:	9011      	str	r0, [sp, #68]	; 0x44
 800abe4:	f7f5 fc0e 	bl	8000404 <__aeabi_i2d>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf0:	f7f5 faba 	bl	8000168 <__aeabi_dsub>
 800abf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abfa:	3330      	adds	r3, #48	; 0x30
 800abfc:	f805 3b01 	strb.w	r3, [r5], #1
 800ac00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac04:	f7f5 feda 	bl	80009bc <__aeabi_dcmplt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d163      	bne.n	800acd4 <_dtoa_r+0x5f4>
 800ac0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac10:	2000      	movs	r0, #0
 800ac12:	4937      	ldr	r1, [pc, #220]	; (800acf0 <_dtoa_r+0x610>)
 800ac14:	f7f5 faa8 	bl	8000168 <__aeabi_dsub>
 800ac18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac1c:	f7f5 fece 	bl	80009bc <__aeabi_dcmplt>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f040 80b5 	bne.w	800ad90 <_dtoa_r+0x6b0>
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	1aeb      	subs	r3, r5, r3
 800ac2a:	429e      	cmp	r6, r3
 800ac2c:	f77f af7c 	ble.w	800ab28 <_dtoa_r+0x448>
 800ac30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac34:	2200      	movs	r2, #0
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <_dtoa_r+0x614>)
 800ac38:	f7f5 fc4e 	bl	80004d8 <__aeabi_dmul>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac46:	4b2b      	ldr	r3, [pc, #172]	; (800acf4 <_dtoa_r+0x614>)
 800ac48:	f7f5 fc46 	bl	80004d8 <__aeabi_dmul>
 800ac4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac50:	e7c3      	b.n	800abda <_dtoa_r+0x4fa>
 800ac52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac56:	f7f5 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac60:	199d      	adds	r5, r3, r6
 800ac62:	461e      	mov	r6, r3
 800ac64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac68:	f7f5 fee6 	bl	8000a38 <__aeabi_d2iz>
 800ac6c:	9011      	str	r0, [sp, #68]	; 0x44
 800ac6e:	f7f5 fbc9 	bl	8000404 <__aeabi_i2d>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac7a:	f7f5 fa75 	bl	8000168 <__aeabi_dsub>
 800ac7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac84:	3330      	adds	r3, #48	; 0x30
 800ac86:	f806 3b01 	strb.w	r3, [r6], #1
 800ac8a:	42ae      	cmp	r6, r5
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d124      	bne.n	800acdc <_dtoa_r+0x5fc>
 800ac92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <_dtoa_r+0x620>)
 800ac98:	f7f5 fa68 	bl	800016c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca4:	f7f5 fea8 	bl	80009f8 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d171      	bne.n	800ad90 <_dtoa_r+0x6b0>
 800acac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acb0:	2000      	movs	r0, #0
 800acb2:	4913      	ldr	r1, [pc, #76]	; (800ad00 <_dtoa_r+0x620>)
 800acb4:	f7f5 fa58 	bl	8000168 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc0:	f7f5 fe7c 	bl	80009bc <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af2f 	beq.w	800ab28 <_dtoa_r+0x448>
 800acca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acce:	1e6a      	subs	r2, r5, #1
 800acd0:	2b30      	cmp	r3, #48	; 0x30
 800acd2:	d001      	beq.n	800acd8 <_dtoa_r+0x5f8>
 800acd4:	46ba      	mov	sl, r7
 800acd6:	e04a      	b.n	800ad6e <_dtoa_r+0x68e>
 800acd8:	4615      	mov	r5, r2
 800acda:	e7f6      	b.n	800acca <_dtoa_r+0x5ea>
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <_dtoa_r+0x614>)
 800acde:	f7f5 fbfb 	bl	80004d8 <__aeabi_dmul>
 800ace2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace6:	e7bd      	b.n	800ac64 <_dtoa_r+0x584>
 800ace8:	0800d808 	.word	0x0800d808
 800acec:	0800d7e0 	.word	0x0800d7e0
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40240000 	.word	0x40240000
 800acf8:	401c0000 	.word	0x401c0000
 800acfc:	40140000 	.word	0x40140000
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	9d06      	ldr	r5, [sp, #24]
 800ad06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	f7f5 fd0b 	bl	800072c <__aeabi_ddiv>
 800ad16:	f7f5 fe8f 	bl	8000a38 <__aeabi_d2iz>
 800ad1a:	4681      	mov	r9, r0
 800ad1c:	f7f5 fb72 	bl	8000404 <__aeabi_i2d>
 800ad20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fa1a 	bl	8000168 <__aeabi_dsub>
 800ad34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ad38:	f805 6b01 	strb.w	r6, [r5], #1
 800ad3c:	9e06      	ldr	r6, [sp, #24]
 800ad3e:	4602      	mov	r2, r0
 800ad40:	1bae      	subs	r6, r5, r6
 800ad42:	45b0      	cmp	r8, r6
 800ad44:	460b      	mov	r3, r1
 800ad46:	d135      	bne.n	800adb4 <_dtoa_r+0x6d4>
 800ad48:	f7f5 fa10 	bl	800016c <__adddf3>
 800ad4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	f7f5 fe50 	bl	80009f8 <__aeabi_dcmpgt>
 800ad58:	b9c8      	cbnz	r0, 800ad8e <_dtoa_r+0x6ae>
 800ad5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 fe21 	bl	80009a8 <__aeabi_dcmpeq>
 800ad66:	b110      	cbz	r0, 800ad6e <_dtoa_r+0x68e>
 800ad68:	f019 0f01 	tst.w	r9, #1
 800ad6c:	d10f      	bne.n	800ad8e <_dtoa_r+0x6ae>
 800ad6e:	4659      	mov	r1, fp
 800ad70:	4620      	mov	r0, r4
 800ad72:	f000 fad7 	bl	800b324 <_Bfree>
 800ad76:	2300      	movs	r3, #0
 800ad78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad7a:	702b      	strb	r3, [r5, #0]
 800ad7c:	f10a 0301 	add.w	r3, sl, #1
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f43f acf3 	beq.w	800a770 <_dtoa_r+0x90>
 800ad8a:	601d      	str	r5, [r3, #0]
 800ad8c:	e4f0      	b.n	800a770 <_dtoa_r+0x90>
 800ad8e:	4657      	mov	r7, sl
 800ad90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad94:	1e6b      	subs	r3, r5, #1
 800ad96:	2a39      	cmp	r2, #57	; 0x39
 800ad98:	d106      	bne.n	800ada8 <_dtoa_r+0x6c8>
 800ad9a:	9a06      	ldr	r2, [sp, #24]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d107      	bne.n	800adb0 <_dtoa_r+0x6d0>
 800ada0:	2330      	movs	r3, #48	; 0x30
 800ada2:	7013      	strb	r3, [r2, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	3701      	adds	r7, #1
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	3201      	adds	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	e791      	b.n	800acd4 <_dtoa_r+0x5f4>
 800adb0:	461d      	mov	r5, r3
 800adb2:	e7ed      	b.n	800ad90 <_dtoa_r+0x6b0>
 800adb4:	2200      	movs	r2, #0
 800adb6:	4b99      	ldr	r3, [pc, #612]	; (800b01c <_dtoa_r+0x93c>)
 800adb8:	f7f5 fb8e 	bl	80004d8 <__aeabi_dmul>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	4606      	mov	r6, r0
 800adc2:	460f      	mov	r7, r1
 800adc4:	f7f5 fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d09e      	beq.n	800ad0a <_dtoa_r+0x62a>
 800adcc:	e7cf      	b.n	800ad6e <_dtoa_r+0x68e>
 800adce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add0:	2a00      	cmp	r2, #0
 800add2:	f000 8088 	beq.w	800aee6 <_dtoa_r+0x806>
 800add6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800add8:	2a01      	cmp	r2, #1
 800adda:	dc6d      	bgt.n	800aeb8 <_dtoa_r+0x7d8>
 800addc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d066      	beq.n	800aeb0 <_dtoa_r+0x7d0>
 800ade2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ade6:	464d      	mov	r5, r9
 800ade8:	9e08      	ldr	r6, [sp, #32]
 800adea:	9a07      	ldr	r2, [sp, #28]
 800adec:	2101      	movs	r1, #1
 800adee:	441a      	add	r2, r3
 800adf0:	4620      	mov	r0, r4
 800adf2:	4499      	add	r9, r3
 800adf4:	9207      	str	r2, [sp, #28]
 800adf6:	f000 fb35 	bl	800b464 <__i2b>
 800adfa:	4607      	mov	r7, r0
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	dd0b      	ble.n	800ae18 <_dtoa_r+0x738>
 800ae00:	9b07      	ldr	r3, [sp, #28]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dd08      	ble.n	800ae18 <_dtoa_r+0x738>
 800ae06:	42ab      	cmp	r3, r5
 800ae08:	bfa8      	it	ge
 800ae0a:	462b      	movge	r3, r5
 800ae0c:	9a07      	ldr	r2, [sp, #28]
 800ae0e:	eba9 0903 	sub.w	r9, r9, r3
 800ae12:	1aed      	subs	r5, r5, r3
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	9b08      	ldr	r3, [sp, #32]
 800ae1a:	b1eb      	cbz	r3, 800ae58 <_dtoa_r+0x778>
 800ae1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d065      	beq.n	800aeee <_dtoa_r+0x80e>
 800ae22:	b18e      	cbz	r6, 800ae48 <_dtoa_r+0x768>
 800ae24:	4639      	mov	r1, r7
 800ae26:	4632      	mov	r2, r6
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 fbb9 	bl	800b5a0 <__pow5mult>
 800ae2e:	465a      	mov	r2, fp
 800ae30:	4601      	mov	r1, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fb1e 	bl	800b476 <__multiply>
 800ae3a:	4659      	mov	r1, fp
 800ae3c:	900a      	str	r0, [sp, #40]	; 0x28
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fa70 	bl	800b324 <_Bfree>
 800ae44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae46:	469b      	mov	fp, r3
 800ae48:	9b08      	ldr	r3, [sp, #32]
 800ae4a:	1b9a      	subs	r2, r3, r6
 800ae4c:	d004      	beq.n	800ae58 <_dtoa_r+0x778>
 800ae4e:	4659      	mov	r1, fp
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fba5 	bl	800b5a0 <__pow5mult>
 800ae56:	4683      	mov	fp, r0
 800ae58:	2101      	movs	r1, #1
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fb02 	bl	800b464 <__i2b>
 800ae60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae62:	4606      	mov	r6, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 81c6 	beq.w	800b1f6 <_dtoa_r+0xb16>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 fb96 	bl	800b5a0 <__pow5mult>
 800ae74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae76:	4606      	mov	r6, r0
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	dc3e      	bgt.n	800aefa <_dtoa_r+0x81a>
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d137      	bne.n	800aef2 <_dtoa_r+0x812>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d134      	bne.n	800aef6 <_dtoa_r+0x816>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae92:	0d1b      	lsrs	r3, r3, #20
 800ae94:	051b      	lsls	r3, r3, #20
 800ae96:	b12b      	cbz	r3, 800aea4 <_dtoa_r+0x7c4>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	f109 0901 	add.w	r9, r9, #1
 800ae9e:	3301      	adds	r3, #1
 800aea0:	9307      	str	r3, [sp, #28]
 800aea2:	2301      	movs	r3, #1
 800aea4:	9308      	str	r3, [sp, #32]
 800aea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d128      	bne.n	800aefe <_dtoa_r+0x81e>
 800aeac:	2001      	movs	r0, #1
 800aeae:	e02e      	b.n	800af0e <_dtoa_r+0x82e>
 800aeb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeb6:	e796      	b.n	800ade6 <_dtoa_r+0x706>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	f108 36ff 	add.w	r6, r8, #4294967295
 800aebe:	42b3      	cmp	r3, r6
 800aec0:	bfb7      	itett	lt
 800aec2:	9b08      	ldrlt	r3, [sp, #32]
 800aec4:	1b9e      	subge	r6, r3, r6
 800aec6:	1af2      	sublt	r2, r6, r3
 800aec8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800aeca:	bfbf      	itttt	lt
 800aecc:	9608      	strlt	r6, [sp, #32]
 800aece:	189b      	addlt	r3, r3, r2
 800aed0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800aed2:	2600      	movlt	r6, #0
 800aed4:	f1b8 0f00 	cmp.w	r8, #0
 800aed8:	bfb9      	ittee	lt
 800aeda:	eba9 0508 	sublt.w	r5, r9, r8
 800aede:	2300      	movlt	r3, #0
 800aee0:	464d      	movge	r5, r9
 800aee2:	4643      	movge	r3, r8
 800aee4:	e781      	b.n	800adea <_dtoa_r+0x70a>
 800aee6:	9e08      	ldr	r6, [sp, #32]
 800aee8:	464d      	mov	r5, r9
 800aeea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aeec:	e786      	b.n	800adfc <_dtoa_r+0x71c>
 800aeee:	9a08      	ldr	r2, [sp, #32]
 800aef0:	e7ad      	b.n	800ae4e <_dtoa_r+0x76e>
 800aef2:	2300      	movs	r3, #0
 800aef4:	e7d6      	b.n	800aea4 <_dtoa_r+0x7c4>
 800aef6:	9b02      	ldr	r3, [sp, #8]
 800aef8:	e7d4      	b.n	800aea4 <_dtoa_r+0x7c4>
 800aefa:	2300      	movs	r3, #0
 800aefc:	9308      	str	r3, [sp, #32]
 800aefe:	6933      	ldr	r3, [r6, #16]
 800af00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af04:	6918      	ldr	r0, [r3, #16]
 800af06:	f000 fa5f 	bl	800b3c8 <__hi0bits>
 800af0a:	f1c0 0020 	rsb	r0, r0, #32
 800af0e:	9b07      	ldr	r3, [sp, #28]
 800af10:	4418      	add	r0, r3
 800af12:	f010 001f 	ands.w	r0, r0, #31
 800af16:	d047      	beq.n	800afa8 <_dtoa_r+0x8c8>
 800af18:	f1c0 0320 	rsb	r3, r0, #32
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	dd3b      	ble.n	800af98 <_dtoa_r+0x8b8>
 800af20:	9b07      	ldr	r3, [sp, #28]
 800af22:	f1c0 001c 	rsb	r0, r0, #28
 800af26:	4481      	add	r9, r0
 800af28:	4405      	add	r5, r0
 800af2a:	4403      	add	r3, r0
 800af2c:	9307      	str	r3, [sp, #28]
 800af2e:	f1b9 0f00 	cmp.w	r9, #0
 800af32:	dd05      	ble.n	800af40 <_dtoa_r+0x860>
 800af34:	4659      	mov	r1, fp
 800af36:	464a      	mov	r2, r9
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 fb7f 	bl	800b63c <__lshift>
 800af3e:	4683      	mov	fp, r0
 800af40:	9b07      	ldr	r3, [sp, #28]
 800af42:	2b00      	cmp	r3, #0
 800af44:	dd05      	ble.n	800af52 <_dtoa_r+0x872>
 800af46:	4631      	mov	r1, r6
 800af48:	461a      	mov	r2, r3
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fb76 	bl	800b63c <__lshift>
 800af50:	4606      	mov	r6, r0
 800af52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af54:	b353      	cbz	r3, 800afac <_dtoa_r+0x8cc>
 800af56:	4631      	mov	r1, r6
 800af58:	4658      	mov	r0, fp
 800af5a:	f000 fbc3 	bl	800b6e4 <__mcmp>
 800af5e:	2800      	cmp	r0, #0
 800af60:	da24      	bge.n	800afac <_dtoa_r+0x8cc>
 800af62:	2300      	movs	r3, #0
 800af64:	4659      	mov	r1, fp
 800af66:	220a      	movs	r2, #10
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 f9f2 	bl	800b352 <__multadd>
 800af6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af70:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af74:	4683      	mov	fp, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 8144 	beq.w	800b204 <_dtoa_r+0xb24>
 800af7c:	2300      	movs	r3, #0
 800af7e:	4639      	mov	r1, r7
 800af80:	220a      	movs	r2, #10
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f9e5 	bl	800b352 <__multadd>
 800af88:	9b04      	ldr	r3, [sp, #16]
 800af8a:	4607      	mov	r7, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dc4d      	bgt.n	800b02c <_dtoa_r+0x94c>
 800af90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af92:	2b02      	cmp	r3, #2
 800af94:	dd4a      	ble.n	800b02c <_dtoa_r+0x94c>
 800af96:	e011      	b.n	800afbc <_dtoa_r+0x8dc>
 800af98:	d0c9      	beq.n	800af2e <_dtoa_r+0x84e>
 800af9a:	9a07      	ldr	r2, [sp, #28]
 800af9c:	331c      	adds	r3, #28
 800af9e:	441a      	add	r2, r3
 800afa0:	4499      	add	r9, r3
 800afa2:	441d      	add	r5, r3
 800afa4:	4613      	mov	r3, r2
 800afa6:	e7c1      	b.n	800af2c <_dtoa_r+0x84c>
 800afa8:	4603      	mov	r3, r0
 800afaa:	e7f6      	b.n	800af9a <_dtoa_r+0x8ba>
 800afac:	f1b8 0f00 	cmp.w	r8, #0
 800afb0:	dc36      	bgt.n	800b020 <_dtoa_r+0x940>
 800afb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	dd33      	ble.n	800b020 <_dtoa_r+0x940>
 800afb8:	f8cd 8010 	str.w	r8, [sp, #16]
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	b963      	cbnz	r3, 800afda <_dtoa_r+0x8fa>
 800afc0:	4631      	mov	r1, r6
 800afc2:	2205      	movs	r2, #5
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 f9c4 	bl	800b352 <__multadd>
 800afca:	4601      	mov	r1, r0
 800afcc:	4606      	mov	r6, r0
 800afce:	4658      	mov	r0, fp
 800afd0:	f000 fb88 	bl	800b6e4 <__mcmp>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f73f add3 	bgt.w	800ab80 <_dtoa_r+0x4a0>
 800afda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afdc:	9d06      	ldr	r5, [sp, #24]
 800afde:	ea6f 0a03 	mvn.w	sl, r3
 800afe2:	f04f 0900 	mov.w	r9, #0
 800afe6:	4631      	mov	r1, r6
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 f99b 	bl	800b324 <_Bfree>
 800afee:	2f00      	cmp	r7, #0
 800aff0:	f43f aebd 	beq.w	800ad6e <_dtoa_r+0x68e>
 800aff4:	f1b9 0f00 	cmp.w	r9, #0
 800aff8:	d005      	beq.n	800b006 <_dtoa_r+0x926>
 800affa:	45b9      	cmp	r9, r7
 800affc:	d003      	beq.n	800b006 <_dtoa_r+0x926>
 800affe:	4649      	mov	r1, r9
 800b000:	4620      	mov	r0, r4
 800b002:	f000 f98f 	bl	800b324 <_Bfree>
 800b006:	4639      	mov	r1, r7
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 f98b 	bl	800b324 <_Bfree>
 800b00e:	e6ae      	b.n	800ad6e <_dtoa_r+0x68e>
 800b010:	2600      	movs	r6, #0
 800b012:	4637      	mov	r7, r6
 800b014:	e7e1      	b.n	800afda <_dtoa_r+0x8fa>
 800b016:	46ba      	mov	sl, r7
 800b018:	4637      	mov	r7, r6
 800b01a:	e5b1      	b.n	800ab80 <_dtoa_r+0x4a0>
 800b01c:	40240000 	.word	0x40240000
 800b020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b022:	f8cd 8010 	str.w	r8, [sp, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80f3 	beq.w	800b212 <_dtoa_r+0xb32>
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	dd05      	ble.n	800b03c <_dtoa_r+0x95c>
 800b030:	4639      	mov	r1, r7
 800b032:	462a      	mov	r2, r5
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fb01 	bl	800b63c <__lshift>
 800b03a:	4607      	mov	r7, r0
 800b03c:	9b08      	ldr	r3, [sp, #32]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d04c      	beq.n	800b0dc <_dtoa_r+0x9fc>
 800b042:	6879      	ldr	r1, [r7, #4]
 800b044:	4620      	mov	r0, r4
 800b046:	f000 f939 	bl	800b2bc <_Balloc>
 800b04a:	4605      	mov	r5, r0
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	f107 010c 	add.w	r1, r7, #12
 800b052:	3202      	adds	r2, #2
 800b054:	0092      	lsls	r2, r2, #2
 800b056:	300c      	adds	r0, #12
 800b058:	f7fe fd9e 	bl	8009b98 <memcpy>
 800b05c:	2201      	movs	r2, #1
 800b05e:	4629      	mov	r1, r5
 800b060:	4620      	mov	r0, r4
 800b062:	f000 faeb 	bl	800b63c <__lshift>
 800b066:	46b9      	mov	r9, r7
 800b068:	4607      	mov	r7, r0
 800b06a:	9b06      	ldr	r3, [sp, #24]
 800b06c:	9307      	str	r3, [sp, #28]
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	9308      	str	r3, [sp, #32]
 800b076:	4631      	mov	r1, r6
 800b078:	4658      	mov	r0, fp
 800b07a:	f7ff faa1 	bl	800a5c0 <quorem>
 800b07e:	4649      	mov	r1, r9
 800b080:	4605      	mov	r5, r0
 800b082:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b086:	4658      	mov	r0, fp
 800b088:	f000 fb2c 	bl	800b6e4 <__mcmp>
 800b08c:	463a      	mov	r2, r7
 800b08e:	9002      	str	r0, [sp, #8]
 800b090:	4631      	mov	r1, r6
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fb40 	bl	800b718 <__mdiff>
 800b098:	68c3      	ldr	r3, [r0, #12]
 800b09a:	4602      	mov	r2, r0
 800b09c:	bb03      	cbnz	r3, 800b0e0 <_dtoa_r+0xa00>
 800b09e:	4601      	mov	r1, r0
 800b0a0:	9009      	str	r0, [sp, #36]	; 0x24
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 fb1e 	bl	800b6e4 <__mcmp>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b2:	f000 f937 	bl	800b324 <_Bfree>
 800b0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b8:	b9a3      	cbnz	r3, 800b0e4 <_dtoa_r+0xa04>
 800b0ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0bc:	b992      	cbnz	r2, 800b0e4 <_dtoa_r+0xa04>
 800b0be:	9a08      	ldr	r2, [sp, #32]
 800b0c0:	b982      	cbnz	r2, 800b0e4 <_dtoa_r+0xa04>
 800b0c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0c6:	d029      	beq.n	800b11c <_dtoa_r+0xa3c>
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dd01      	ble.n	800b0d2 <_dtoa_r+0x9f2>
 800b0ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b0d2:	9b07      	ldr	r3, [sp, #28]
 800b0d4:	1c5d      	adds	r5, r3, #1
 800b0d6:	f883 8000 	strb.w	r8, [r3]
 800b0da:	e784      	b.n	800afe6 <_dtoa_r+0x906>
 800b0dc:	4638      	mov	r0, r7
 800b0de:	e7c2      	b.n	800b066 <_dtoa_r+0x986>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7e3      	b.n	800b0ac <_dtoa_r+0x9cc>
 800b0e4:	9a02      	ldr	r2, [sp, #8]
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	db04      	blt.n	800b0f4 <_dtoa_r+0xa14>
 800b0ea:	d123      	bne.n	800b134 <_dtoa_r+0xa54>
 800b0ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0ee:	bb0a      	cbnz	r2, 800b134 <_dtoa_r+0xa54>
 800b0f0:	9a08      	ldr	r2, [sp, #32]
 800b0f2:	b9fa      	cbnz	r2, 800b134 <_dtoa_r+0xa54>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	ddec      	ble.n	800b0d2 <_dtoa_r+0x9f2>
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fa9d 	bl	800b63c <__lshift>
 800b102:	4631      	mov	r1, r6
 800b104:	4683      	mov	fp, r0
 800b106:	f000 faed 	bl	800b6e4 <__mcmp>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	dc03      	bgt.n	800b116 <_dtoa_r+0xa36>
 800b10e:	d1e0      	bne.n	800b0d2 <_dtoa_r+0x9f2>
 800b110:	f018 0f01 	tst.w	r8, #1
 800b114:	d0dd      	beq.n	800b0d2 <_dtoa_r+0x9f2>
 800b116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b11a:	d1d8      	bne.n	800b0ce <_dtoa_r+0x9ee>
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	9a07      	ldr	r2, [sp, #28]
 800b120:	1c5d      	adds	r5, r3, #1
 800b122:	2339      	movs	r3, #57	; 0x39
 800b124:	7013      	strb	r3, [r2, #0]
 800b126:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b12a:	1e6a      	subs	r2, r5, #1
 800b12c:	2b39      	cmp	r3, #57	; 0x39
 800b12e:	d04d      	beq.n	800b1cc <_dtoa_r+0xaec>
 800b130:	3301      	adds	r3, #1
 800b132:	e052      	b.n	800b1da <_dtoa_r+0xafa>
 800b134:	9a07      	ldr	r2, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f102 0501 	add.w	r5, r2, #1
 800b13c:	dd06      	ble.n	800b14c <_dtoa_r+0xa6c>
 800b13e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b142:	d0eb      	beq.n	800b11c <_dtoa_r+0xa3c>
 800b144:	f108 0801 	add.w	r8, r8, #1
 800b148:	9b07      	ldr	r3, [sp, #28]
 800b14a:	e7c4      	b.n	800b0d6 <_dtoa_r+0x9f6>
 800b14c:	9b06      	ldr	r3, [sp, #24]
 800b14e:	9a04      	ldr	r2, [sp, #16]
 800b150:	1aeb      	subs	r3, r5, r3
 800b152:	4293      	cmp	r3, r2
 800b154:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b158:	d021      	beq.n	800b19e <_dtoa_r+0xabe>
 800b15a:	4659      	mov	r1, fp
 800b15c:	2300      	movs	r3, #0
 800b15e:	220a      	movs	r2, #10
 800b160:	4620      	mov	r0, r4
 800b162:	f000 f8f6 	bl	800b352 <__multadd>
 800b166:	45b9      	cmp	r9, r7
 800b168:	4683      	mov	fp, r0
 800b16a:	f04f 0300 	mov.w	r3, #0
 800b16e:	f04f 020a 	mov.w	r2, #10
 800b172:	4649      	mov	r1, r9
 800b174:	4620      	mov	r0, r4
 800b176:	d105      	bne.n	800b184 <_dtoa_r+0xaa4>
 800b178:	f000 f8eb 	bl	800b352 <__multadd>
 800b17c:	4681      	mov	r9, r0
 800b17e:	4607      	mov	r7, r0
 800b180:	9507      	str	r5, [sp, #28]
 800b182:	e778      	b.n	800b076 <_dtoa_r+0x996>
 800b184:	f000 f8e5 	bl	800b352 <__multadd>
 800b188:	4639      	mov	r1, r7
 800b18a:	4681      	mov	r9, r0
 800b18c:	2300      	movs	r3, #0
 800b18e:	220a      	movs	r2, #10
 800b190:	4620      	mov	r0, r4
 800b192:	f000 f8de 	bl	800b352 <__multadd>
 800b196:	4607      	mov	r7, r0
 800b198:	e7f2      	b.n	800b180 <_dtoa_r+0xaa0>
 800b19a:	f04f 0900 	mov.w	r9, #0
 800b19e:	4659      	mov	r1, fp
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 fa4a 	bl	800b63c <__lshift>
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4683      	mov	fp, r0
 800b1ac:	f000 fa9a 	bl	800b6e4 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	dcb8      	bgt.n	800b126 <_dtoa_r+0xa46>
 800b1b4:	d102      	bne.n	800b1bc <_dtoa_r+0xadc>
 800b1b6:	f018 0f01 	tst.w	r8, #1
 800b1ba:	d1b4      	bne.n	800b126 <_dtoa_r+0xa46>
 800b1bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1c0:	1e6a      	subs	r2, r5, #1
 800b1c2:	2b30      	cmp	r3, #48	; 0x30
 800b1c4:	f47f af0f 	bne.w	800afe6 <_dtoa_r+0x906>
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	e7f7      	b.n	800b1bc <_dtoa_r+0xadc>
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d105      	bne.n	800b1de <_dtoa_r+0xafe>
 800b1d2:	2331      	movs	r3, #49	; 0x31
 800b1d4:	9a06      	ldr	r2, [sp, #24]
 800b1d6:	f10a 0a01 	add.w	sl, sl, #1
 800b1da:	7013      	strb	r3, [r2, #0]
 800b1dc:	e703      	b.n	800afe6 <_dtoa_r+0x906>
 800b1de:	4615      	mov	r5, r2
 800b1e0:	e7a1      	b.n	800b126 <_dtoa_r+0xa46>
 800b1e2:	4b17      	ldr	r3, [pc, #92]	; (800b240 <_dtoa_r+0xb60>)
 800b1e4:	f7ff bae1 	b.w	800a7aa <_dtoa_r+0xca>
 800b1e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f47f aabb 	bne.w	800a766 <_dtoa_r+0x86>
 800b1f0:	4b14      	ldr	r3, [pc, #80]	; (800b244 <_dtoa_r+0xb64>)
 800b1f2:	f7ff bada 	b.w	800a7aa <_dtoa_r+0xca>
 800b1f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	f77f ae3f 	ble.w	800ae7c <_dtoa_r+0x79c>
 800b1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b200:	9308      	str	r3, [sp, #32]
 800b202:	e653      	b.n	800aeac <_dtoa_r+0x7cc>
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dc03      	bgt.n	800b212 <_dtoa_r+0xb32>
 800b20a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	f73f aed5 	bgt.w	800afbc <_dtoa_r+0x8dc>
 800b212:	9d06      	ldr	r5, [sp, #24]
 800b214:	4631      	mov	r1, r6
 800b216:	4658      	mov	r0, fp
 800b218:	f7ff f9d2 	bl	800a5c0 <quorem>
 800b21c:	9b06      	ldr	r3, [sp, #24]
 800b21e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b222:	f805 8b01 	strb.w	r8, [r5], #1
 800b226:	9a04      	ldr	r2, [sp, #16]
 800b228:	1aeb      	subs	r3, r5, r3
 800b22a:	429a      	cmp	r2, r3
 800b22c:	ddb5      	ble.n	800b19a <_dtoa_r+0xaba>
 800b22e:	4659      	mov	r1, fp
 800b230:	2300      	movs	r3, #0
 800b232:	220a      	movs	r2, #10
 800b234:	4620      	mov	r0, r4
 800b236:	f000 f88c 	bl	800b352 <__multadd>
 800b23a:	4683      	mov	fp, r0
 800b23c:	e7ea      	b.n	800b214 <_dtoa_r+0xb34>
 800b23e:	bf00      	nop
 800b240:	0800d7a4 	.word	0x0800d7a4
 800b244:	0800d7c8 	.word	0x0800d7c8

0800b248 <__locale_ctype_ptr_l>:
 800b248:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b24c:	4770      	bx	lr
	...

0800b250 <_localeconv_r>:
 800b250:	4b04      	ldr	r3, [pc, #16]	; (800b264 <_localeconv_r+0x14>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6a18      	ldr	r0, [r3, #32]
 800b256:	4b04      	ldr	r3, [pc, #16]	; (800b268 <_localeconv_r+0x18>)
 800b258:	2800      	cmp	r0, #0
 800b25a:	bf08      	it	eq
 800b25c:	4618      	moveq	r0, r3
 800b25e:	30f0      	adds	r0, #240	; 0xf0
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20000014 	.word	0x20000014
 800b268:	20000078 	.word	0x20000078

0800b26c <malloc>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <malloc+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f000 bb59 	b.w	800b928 <_malloc_r>
 800b276:	bf00      	nop
 800b278:	20000014 	.word	0x20000014

0800b27c <__ascii_mbtowc>:
 800b27c:	b082      	sub	sp, #8
 800b27e:	b901      	cbnz	r1, 800b282 <__ascii_mbtowc+0x6>
 800b280:	a901      	add	r1, sp, #4
 800b282:	b142      	cbz	r2, 800b296 <__ascii_mbtowc+0x1a>
 800b284:	b14b      	cbz	r3, 800b29a <__ascii_mbtowc+0x1e>
 800b286:	7813      	ldrb	r3, [r2, #0]
 800b288:	600b      	str	r3, [r1, #0]
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	1c10      	adds	r0, r2, #0
 800b28e:	bf18      	it	ne
 800b290:	2001      	movne	r0, #1
 800b292:	b002      	add	sp, #8
 800b294:	4770      	bx	lr
 800b296:	4610      	mov	r0, r2
 800b298:	e7fb      	b.n	800b292 <__ascii_mbtowc+0x16>
 800b29a:	f06f 0001 	mvn.w	r0, #1
 800b29e:	e7f8      	b.n	800b292 <__ascii_mbtowc+0x16>

0800b2a0 <memchr>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	b2c9      	uxtb	r1, r1
 800b2a4:	4402      	add	r2, r0
 800b2a6:	4290      	cmp	r0, r2
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	d101      	bne.n	800b2b0 <memchr+0x10>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e003      	b.n	800b2b8 <memchr+0x18>
 800b2b0:	781c      	ldrb	r4, [r3, #0]
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	428c      	cmp	r4, r1
 800b2b6:	d1f6      	bne.n	800b2a6 <memchr+0x6>
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	bd10      	pop	{r4, pc}

0800b2bc <_Balloc>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	460e      	mov	r6, r1
 800b2c4:	b93d      	cbnz	r5, 800b2d6 <_Balloc+0x1a>
 800b2c6:	2010      	movs	r0, #16
 800b2c8:	f7ff ffd0 	bl	800b26c <malloc>
 800b2cc:	6260      	str	r0, [r4, #36]	; 0x24
 800b2ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2d2:	6005      	str	r5, [r0, #0]
 800b2d4:	60c5      	str	r5, [r0, #12]
 800b2d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b2d8:	68eb      	ldr	r3, [r5, #12]
 800b2da:	b183      	cbz	r3, 800b2fe <_Balloc+0x42>
 800b2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2e4:	b9b8      	cbnz	r0, 800b316 <_Balloc+0x5a>
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	fa01 f506 	lsl.w	r5, r1, r6
 800b2ec:	1d6a      	adds	r2, r5, #5
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fabe 	bl	800b872 <_calloc_r>
 800b2f6:	b160      	cbz	r0, 800b312 <_Balloc+0x56>
 800b2f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b2fc:	e00e      	b.n	800b31c <_Balloc+0x60>
 800b2fe:	2221      	movs	r2, #33	; 0x21
 800b300:	2104      	movs	r1, #4
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fab5 	bl	800b872 <_calloc_r>
 800b308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b30a:	60e8      	str	r0, [r5, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e4      	bne.n	800b2dc <_Balloc+0x20>
 800b312:	2000      	movs	r0, #0
 800b314:	bd70      	pop	{r4, r5, r6, pc}
 800b316:	6802      	ldr	r2, [r0, #0]
 800b318:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b31c:	2300      	movs	r3, #0
 800b31e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b322:	e7f7      	b.n	800b314 <_Balloc+0x58>

0800b324 <_Bfree>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b328:	4606      	mov	r6, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	b93c      	cbnz	r4, 800b33e <_Bfree+0x1a>
 800b32e:	2010      	movs	r0, #16
 800b330:	f7ff ff9c 	bl	800b26c <malloc>
 800b334:	6270      	str	r0, [r6, #36]	; 0x24
 800b336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b33a:	6004      	str	r4, [r0, #0]
 800b33c:	60c4      	str	r4, [r0, #12]
 800b33e:	b13d      	cbz	r5, 800b350 <_Bfree+0x2c>
 800b340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b342:	686a      	ldr	r2, [r5, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b34a:	6029      	str	r1, [r5, #0]
 800b34c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b350:	bd70      	pop	{r4, r5, r6, pc}

0800b352 <__multadd>:
 800b352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	461f      	mov	r7, r3
 800b358:	4606      	mov	r6, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	2300      	movs	r3, #0
 800b35e:	690d      	ldr	r5, [r1, #16]
 800b360:	f101 0c14 	add.w	ip, r1, #20
 800b364:	f8dc 0000 	ldr.w	r0, [ip]
 800b368:	3301      	adds	r3, #1
 800b36a:	b281      	uxth	r1, r0
 800b36c:	fb02 7101 	mla	r1, r2, r1, r7
 800b370:	0c00      	lsrs	r0, r0, #16
 800b372:	0c0f      	lsrs	r7, r1, #16
 800b374:	fb02 7000 	mla	r0, r2, r0, r7
 800b378:	b289      	uxth	r1, r1
 800b37a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b37e:	429d      	cmp	r5, r3
 800b380:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b384:	f84c 1b04 	str.w	r1, [ip], #4
 800b388:	dcec      	bgt.n	800b364 <__multadd+0x12>
 800b38a:	b1d7      	cbz	r7, 800b3c2 <__multadd+0x70>
 800b38c:	68a3      	ldr	r3, [r4, #8]
 800b38e:	42ab      	cmp	r3, r5
 800b390:	dc12      	bgt.n	800b3b8 <__multadd+0x66>
 800b392:	6861      	ldr	r1, [r4, #4]
 800b394:	4630      	mov	r0, r6
 800b396:	3101      	adds	r1, #1
 800b398:	f7ff ff90 	bl	800b2bc <_Balloc>
 800b39c:	4680      	mov	r8, r0
 800b39e:	6922      	ldr	r2, [r4, #16]
 800b3a0:	f104 010c 	add.w	r1, r4, #12
 800b3a4:	3202      	adds	r2, #2
 800b3a6:	0092      	lsls	r2, r2, #2
 800b3a8:	300c      	adds	r0, #12
 800b3aa:	f7fe fbf5 	bl	8009b98 <memcpy>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff ffb7 	bl	800b324 <_Bfree>
 800b3b6:	4644      	mov	r4, r8
 800b3b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3bc:	3501      	adds	r5, #1
 800b3be:	615f      	str	r7, [r3, #20]
 800b3c0:	6125      	str	r5, [r4, #16]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3c8 <__hi0bits>:
 800b3c8:	0c02      	lsrs	r2, r0, #16
 800b3ca:	0412      	lsls	r2, r2, #16
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	b9b2      	cbnz	r2, 800b3fe <__hi0bits+0x36>
 800b3d0:	0403      	lsls	r3, r0, #16
 800b3d2:	2010      	movs	r0, #16
 800b3d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3d8:	bf04      	itt	eq
 800b3da:	021b      	lsleq	r3, r3, #8
 800b3dc:	3008      	addeq	r0, #8
 800b3de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3e2:	bf04      	itt	eq
 800b3e4:	011b      	lsleq	r3, r3, #4
 800b3e6:	3004      	addeq	r0, #4
 800b3e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3ec:	bf04      	itt	eq
 800b3ee:	009b      	lsleq	r3, r3, #2
 800b3f0:	3002      	addeq	r0, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	db06      	blt.n	800b404 <__hi0bits+0x3c>
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	d503      	bpl.n	800b402 <__hi0bits+0x3a>
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	4770      	bx	lr
 800b3fe:	2000      	movs	r0, #0
 800b400:	e7e8      	b.n	800b3d4 <__hi0bits+0xc>
 800b402:	2020      	movs	r0, #32
 800b404:	4770      	bx	lr

0800b406 <__lo0bits>:
 800b406:	6803      	ldr	r3, [r0, #0]
 800b408:	4601      	mov	r1, r0
 800b40a:	f013 0207 	ands.w	r2, r3, #7
 800b40e:	d00b      	beq.n	800b428 <__lo0bits+0x22>
 800b410:	07da      	lsls	r2, r3, #31
 800b412:	d423      	bmi.n	800b45c <__lo0bits+0x56>
 800b414:	0798      	lsls	r0, r3, #30
 800b416:	bf49      	itett	mi
 800b418:	085b      	lsrmi	r3, r3, #1
 800b41a:	089b      	lsrpl	r3, r3, #2
 800b41c:	2001      	movmi	r0, #1
 800b41e:	600b      	strmi	r3, [r1, #0]
 800b420:	bf5c      	itt	pl
 800b422:	600b      	strpl	r3, [r1, #0]
 800b424:	2002      	movpl	r0, #2
 800b426:	4770      	bx	lr
 800b428:	b298      	uxth	r0, r3
 800b42a:	b9a8      	cbnz	r0, 800b458 <__lo0bits+0x52>
 800b42c:	2010      	movs	r0, #16
 800b42e:	0c1b      	lsrs	r3, r3, #16
 800b430:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b434:	bf04      	itt	eq
 800b436:	0a1b      	lsreq	r3, r3, #8
 800b438:	3008      	addeq	r0, #8
 800b43a:	071a      	lsls	r2, r3, #28
 800b43c:	bf04      	itt	eq
 800b43e:	091b      	lsreq	r3, r3, #4
 800b440:	3004      	addeq	r0, #4
 800b442:	079a      	lsls	r2, r3, #30
 800b444:	bf04      	itt	eq
 800b446:	089b      	lsreq	r3, r3, #2
 800b448:	3002      	addeq	r0, #2
 800b44a:	07da      	lsls	r2, r3, #31
 800b44c:	d402      	bmi.n	800b454 <__lo0bits+0x4e>
 800b44e:	085b      	lsrs	r3, r3, #1
 800b450:	d006      	beq.n	800b460 <__lo0bits+0x5a>
 800b452:	3001      	adds	r0, #1
 800b454:	600b      	str	r3, [r1, #0]
 800b456:	4770      	bx	lr
 800b458:	4610      	mov	r0, r2
 800b45a:	e7e9      	b.n	800b430 <__lo0bits+0x2a>
 800b45c:	2000      	movs	r0, #0
 800b45e:	4770      	bx	lr
 800b460:	2020      	movs	r0, #32
 800b462:	4770      	bx	lr

0800b464 <__i2b>:
 800b464:	b510      	push	{r4, lr}
 800b466:	460c      	mov	r4, r1
 800b468:	2101      	movs	r1, #1
 800b46a:	f7ff ff27 	bl	800b2bc <_Balloc>
 800b46e:	2201      	movs	r2, #1
 800b470:	6144      	str	r4, [r0, #20]
 800b472:	6102      	str	r2, [r0, #16]
 800b474:	bd10      	pop	{r4, pc}

0800b476 <__multiply>:
 800b476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47a:	4614      	mov	r4, r2
 800b47c:	690a      	ldr	r2, [r1, #16]
 800b47e:	6923      	ldr	r3, [r4, #16]
 800b480:	4688      	mov	r8, r1
 800b482:	429a      	cmp	r2, r3
 800b484:	bfbe      	ittt	lt
 800b486:	460b      	movlt	r3, r1
 800b488:	46a0      	movlt	r8, r4
 800b48a:	461c      	movlt	r4, r3
 800b48c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b490:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b494:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b49c:	eb07 0609 	add.w	r6, r7, r9
 800b4a0:	42b3      	cmp	r3, r6
 800b4a2:	bfb8      	it	lt
 800b4a4:	3101      	addlt	r1, #1
 800b4a6:	f7ff ff09 	bl	800b2bc <_Balloc>
 800b4aa:	f100 0514 	add.w	r5, r0, #20
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b4b6:	4573      	cmp	r3, lr
 800b4b8:	d316      	bcc.n	800b4e8 <__multiply+0x72>
 800b4ba:	f104 0214 	add.w	r2, r4, #20
 800b4be:	f108 0114 	add.w	r1, r8, #20
 800b4c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b4c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	9201      	str	r2, [sp, #4]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d80c      	bhi.n	800b4ee <__multiply+0x78>
 800b4d4:	2e00      	cmp	r6, #0
 800b4d6:	dd03      	ble.n	800b4e0 <__multiply+0x6a>
 800b4d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d05d      	beq.n	800b59c <__multiply+0x126>
 800b4e0:	6106      	str	r6, [r0, #16]
 800b4e2:	b003      	add	sp, #12
 800b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e8:	f843 2b04 	str.w	r2, [r3], #4
 800b4ec:	e7e3      	b.n	800b4b6 <__multiply+0x40>
 800b4ee:	f8b2 b000 	ldrh.w	fp, [r2]
 800b4f2:	f1bb 0f00 	cmp.w	fp, #0
 800b4f6:	d023      	beq.n	800b540 <__multiply+0xca>
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	46ac      	mov	ip, r5
 800b4fc:	f04f 0800 	mov.w	r8, #0
 800b500:	f859 4b04 	ldr.w	r4, [r9], #4
 800b504:	f8dc a000 	ldr.w	sl, [ip]
 800b508:	b2a3      	uxth	r3, r4
 800b50a:	fa1f fa8a 	uxth.w	sl, sl
 800b50e:	fb0b a303 	mla	r3, fp, r3, sl
 800b512:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b516:	f8dc 4000 	ldr.w	r4, [ip]
 800b51a:	4443      	add	r3, r8
 800b51c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b520:	fb0b 840a 	mla	r4, fp, sl, r8
 800b524:	46e2      	mov	sl, ip
 800b526:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b530:	454f      	cmp	r7, r9
 800b532:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b536:	f84a 3b04 	str.w	r3, [sl], #4
 800b53a:	d82b      	bhi.n	800b594 <__multiply+0x11e>
 800b53c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	3204      	adds	r2, #4
 800b544:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b548:	f1ba 0f00 	cmp.w	sl, #0
 800b54c:	d020      	beq.n	800b590 <__multiply+0x11a>
 800b54e:	4689      	mov	r9, r1
 800b550:	46a8      	mov	r8, r5
 800b552:	f04f 0b00 	mov.w	fp, #0
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	f8b9 c000 	ldrh.w	ip, [r9]
 800b55c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b560:	b29b      	uxth	r3, r3
 800b562:	fb0a 440c 	mla	r4, sl, ip, r4
 800b566:	46c4      	mov	ip, r8
 800b568:	445c      	add	r4, fp
 800b56a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b56e:	f84c 3b04 	str.w	r3, [ip], #4
 800b572:	f859 3b04 	ldr.w	r3, [r9], #4
 800b576:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b57a:	0c1b      	lsrs	r3, r3, #16
 800b57c:	fb0a b303 	mla	r3, sl, r3, fp
 800b580:	454f      	cmp	r7, r9
 800b582:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b586:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b58a:	d805      	bhi.n	800b598 <__multiply+0x122>
 800b58c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b590:	3504      	adds	r5, #4
 800b592:	e79b      	b.n	800b4cc <__multiply+0x56>
 800b594:	46d4      	mov	ip, sl
 800b596:	e7b3      	b.n	800b500 <__multiply+0x8a>
 800b598:	46e0      	mov	r8, ip
 800b59a:	e7dd      	b.n	800b558 <__multiply+0xe2>
 800b59c:	3e01      	subs	r6, #1
 800b59e:	e799      	b.n	800b4d4 <__multiply+0x5e>

0800b5a0 <__pow5mult>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	4615      	mov	r5, r2
 800b5a6:	f012 0203 	ands.w	r2, r2, #3
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	d007      	beq.n	800b5c0 <__pow5mult+0x20>
 800b5b0:	4c21      	ldr	r4, [pc, #132]	; (800b638 <__pow5mult+0x98>)
 800b5b2:	3a01      	subs	r2, #1
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5ba:	f7ff feca 	bl	800b352 <__multadd>
 800b5be:	4607      	mov	r7, r0
 800b5c0:	10ad      	asrs	r5, r5, #2
 800b5c2:	d035      	beq.n	800b630 <__pow5mult+0x90>
 800b5c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5c6:	b93c      	cbnz	r4, 800b5d8 <__pow5mult+0x38>
 800b5c8:	2010      	movs	r0, #16
 800b5ca:	f7ff fe4f 	bl	800b26c <malloc>
 800b5ce:	6270      	str	r0, [r6, #36]	; 0x24
 800b5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5d4:	6004      	str	r4, [r0, #0]
 800b5d6:	60c4      	str	r4, [r0, #12]
 800b5d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5e0:	b94c      	cbnz	r4, 800b5f6 <__pow5mult+0x56>
 800b5e2:	f240 2171 	movw	r1, #625	; 0x271
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ff3c 	bl	800b464 <__i2b>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5f4:	6003      	str	r3, [r0, #0]
 800b5f6:	f04f 0800 	mov.w	r8, #0
 800b5fa:	07eb      	lsls	r3, r5, #31
 800b5fc:	d50a      	bpl.n	800b614 <__pow5mult+0x74>
 800b5fe:	4639      	mov	r1, r7
 800b600:	4622      	mov	r2, r4
 800b602:	4630      	mov	r0, r6
 800b604:	f7ff ff37 	bl	800b476 <__multiply>
 800b608:	4681      	mov	r9, r0
 800b60a:	4639      	mov	r1, r7
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff fe89 	bl	800b324 <_Bfree>
 800b612:	464f      	mov	r7, r9
 800b614:	106d      	asrs	r5, r5, #1
 800b616:	d00b      	beq.n	800b630 <__pow5mult+0x90>
 800b618:	6820      	ldr	r0, [r4, #0]
 800b61a:	b938      	cbnz	r0, 800b62c <__pow5mult+0x8c>
 800b61c:	4622      	mov	r2, r4
 800b61e:	4621      	mov	r1, r4
 800b620:	4630      	mov	r0, r6
 800b622:	f7ff ff28 	bl	800b476 <__multiply>
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	f8c0 8000 	str.w	r8, [r0]
 800b62c:	4604      	mov	r4, r0
 800b62e:	e7e4      	b.n	800b5fa <__pow5mult+0x5a>
 800b630:	4638      	mov	r0, r7
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	bf00      	nop
 800b638:	0800d8d0 	.word	0x0800d8d0

0800b63c <__lshift>:
 800b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	4607      	mov	r7, r0
 800b644:	4616      	mov	r6, r2
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b64c:	eb0a 0903 	add.w	r9, sl, r3
 800b650:	6849      	ldr	r1, [r1, #4]
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	f109 0501 	add.w	r5, r9, #1
 800b658:	42ab      	cmp	r3, r5
 800b65a:	db32      	blt.n	800b6c2 <__lshift+0x86>
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff fe2d 	bl	800b2bc <_Balloc>
 800b662:	2300      	movs	r3, #0
 800b664:	4680      	mov	r8, r0
 800b666:	461a      	mov	r2, r3
 800b668:	f100 0114 	add.w	r1, r0, #20
 800b66c:	4553      	cmp	r3, sl
 800b66e:	db2b      	blt.n	800b6c8 <__lshift+0x8c>
 800b670:	6920      	ldr	r0, [r4, #16]
 800b672:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b676:	f104 0314 	add.w	r3, r4, #20
 800b67a:	f016 021f 	ands.w	r2, r6, #31
 800b67e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b682:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b686:	d025      	beq.n	800b6d4 <__lshift+0x98>
 800b688:	2000      	movs	r0, #0
 800b68a:	f1c2 0e20 	rsb	lr, r2, #32
 800b68e:	468a      	mov	sl, r1
 800b690:	681e      	ldr	r6, [r3, #0]
 800b692:	4096      	lsls	r6, r2
 800b694:	4330      	orrs	r0, r6
 800b696:	f84a 0b04 	str.w	r0, [sl], #4
 800b69a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b69e:	459c      	cmp	ip, r3
 800b6a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b6a4:	d814      	bhi.n	800b6d0 <__lshift+0x94>
 800b6a6:	6048      	str	r0, [r1, #4]
 800b6a8:	b108      	cbz	r0, 800b6ae <__lshift+0x72>
 800b6aa:	f109 0502 	add.w	r5, r9, #2
 800b6ae:	3d01      	subs	r5, #1
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	f7ff fe34 	bl	800b324 <_Bfree>
 800b6bc:	4640      	mov	r0, r8
 800b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c2:	3101      	adds	r1, #1
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	e7c7      	b.n	800b658 <__lshift+0x1c>
 800b6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	e7cd      	b.n	800b66c <__lshift+0x30>
 800b6d0:	4651      	mov	r1, sl
 800b6d2:	e7dc      	b.n	800b68e <__lshift+0x52>
 800b6d4:	3904      	subs	r1, #4
 800b6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6da:	459c      	cmp	ip, r3
 800b6dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e0:	d8f9      	bhi.n	800b6d6 <__lshift+0x9a>
 800b6e2:	e7e4      	b.n	800b6ae <__lshift+0x72>

0800b6e4 <__mcmp>:
 800b6e4:	6903      	ldr	r3, [r0, #16]
 800b6e6:	690a      	ldr	r2, [r1, #16]
 800b6e8:	b530      	push	{r4, r5, lr}
 800b6ea:	1a9b      	subs	r3, r3, r2
 800b6ec:	d10c      	bne.n	800b708 <__mcmp+0x24>
 800b6ee:	0092      	lsls	r2, r2, #2
 800b6f0:	3014      	adds	r0, #20
 800b6f2:	3114      	adds	r1, #20
 800b6f4:	1884      	adds	r4, r0, r2
 800b6f6:	4411      	add	r1, r2
 800b6f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b700:	4295      	cmp	r5, r2
 800b702:	d003      	beq.n	800b70c <__mcmp+0x28>
 800b704:	d305      	bcc.n	800b712 <__mcmp+0x2e>
 800b706:	2301      	movs	r3, #1
 800b708:	4618      	mov	r0, r3
 800b70a:	bd30      	pop	{r4, r5, pc}
 800b70c:	42a0      	cmp	r0, r4
 800b70e:	d3f3      	bcc.n	800b6f8 <__mcmp+0x14>
 800b710:	e7fa      	b.n	800b708 <__mcmp+0x24>
 800b712:	f04f 33ff 	mov.w	r3, #4294967295
 800b716:	e7f7      	b.n	800b708 <__mcmp+0x24>

0800b718 <__mdiff>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	460d      	mov	r5, r1
 800b71e:	4607      	mov	r7, r0
 800b720:	4611      	mov	r1, r2
 800b722:	4628      	mov	r0, r5
 800b724:	4614      	mov	r4, r2
 800b726:	f7ff ffdd 	bl	800b6e4 <__mcmp>
 800b72a:	1e06      	subs	r6, r0, #0
 800b72c:	d108      	bne.n	800b740 <__mdiff+0x28>
 800b72e:	4631      	mov	r1, r6
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff fdc3 	bl	800b2bc <_Balloc>
 800b736:	2301      	movs	r3, #1
 800b738:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b740:	bfa4      	itt	ge
 800b742:	4623      	movge	r3, r4
 800b744:	462c      	movge	r4, r5
 800b746:	4638      	mov	r0, r7
 800b748:	6861      	ldr	r1, [r4, #4]
 800b74a:	bfa6      	itte	ge
 800b74c:	461d      	movge	r5, r3
 800b74e:	2600      	movge	r6, #0
 800b750:	2601      	movlt	r6, #1
 800b752:	f7ff fdb3 	bl	800b2bc <_Balloc>
 800b756:	f04f 0e00 	mov.w	lr, #0
 800b75a:	60c6      	str	r6, [r0, #12]
 800b75c:	692b      	ldr	r3, [r5, #16]
 800b75e:	6926      	ldr	r6, [r4, #16]
 800b760:	f104 0214 	add.w	r2, r4, #20
 800b764:	f105 0914 	add.w	r9, r5, #20
 800b768:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b76c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b770:	f100 0114 	add.w	r1, r0, #20
 800b774:	f852 ab04 	ldr.w	sl, [r2], #4
 800b778:	f859 5b04 	ldr.w	r5, [r9], #4
 800b77c:	fa1f f38a 	uxth.w	r3, sl
 800b780:	4473      	add	r3, lr
 800b782:	b2ac      	uxth	r4, r5
 800b784:	1b1b      	subs	r3, r3, r4
 800b786:	0c2c      	lsrs	r4, r5, #16
 800b788:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b78c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b790:	b29b      	uxth	r3, r3
 800b792:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b796:	45c8      	cmp	r8, r9
 800b798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b79c:	4694      	mov	ip, r2
 800b79e:	f841 4b04 	str.w	r4, [r1], #4
 800b7a2:	d8e7      	bhi.n	800b774 <__mdiff+0x5c>
 800b7a4:	45bc      	cmp	ip, r7
 800b7a6:	d304      	bcc.n	800b7b2 <__mdiff+0x9a>
 800b7a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7ac:	b183      	cbz	r3, 800b7d0 <__mdiff+0xb8>
 800b7ae:	6106      	str	r6, [r0, #16]
 800b7b0:	e7c4      	b.n	800b73c <__mdiff+0x24>
 800b7b2:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b7b6:	b2a2      	uxth	r2, r4
 800b7b8:	4472      	add	r2, lr
 800b7ba:	1413      	asrs	r3, r2, #16
 800b7bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b7c0:	b292      	uxth	r2, r2
 800b7c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7c6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b7ca:	f841 2b04 	str.w	r2, [r1], #4
 800b7ce:	e7e9      	b.n	800b7a4 <__mdiff+0x8c>
 800b7d0:	3e01      	subs	r6, #1
 800b7d2:	e7e9      	b.n	800b7a8 <__mdiff+0x90>

0800b7d4 <__d2b>:
 800b7d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b7d8:	461c      	mov	r4, r3
 800b7da:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4690      	mov	r8, r2
 800b7e2:	f7ff fd6b 	bl	800b2bc <_Balloc>
 800b7e6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b7ea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	bb34      	cbnz	r4, 800b840 <__d2b+0x6c>
 800b7f2:	9201      	str	r2, [sp, #4]
 800b7f4:	f1b8 0200 	subs.w	r2, r8, #0
 800b7f8:	d027      	beq.n	800b84a <__d2b+0x76>
 800b7fa:	a802      	add	r0, sp, #8
 800b7fc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b800:	f7ff fe01 	bl	800b406 <__lo0bits>
 800b804:	9900      	ldr	r1, [sp, #0]
 800b806:	b1f0      	cbz	r0, 800b846 <__d2b+0x72>
 800b808:	9a01      	ldr	r2, [sp, #4]
 800b80a:	f1c0 0320 	rsb	r3, r0, #32
 800b80e:	fa02 f303 	lsl.w	r3, r2, r3
 800b812:	430b      	orrs	r3, r1
 800b814:	40c2      	lsrs	r2, r0
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	9201      	str	r2, [sp, #4]
 800b81a:	9b01      	ldr	r3, [sp, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bf14      	ite	ne
 800b820:	2102      	movne	r1, #2
 800b822:	2101      	moveq	r1, #1
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	6139      	str	r1, [r7, #16]
 800b828:	b1c4      	cbz	r4, 800b85c <__d2b+0x88>
 800b82a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b82e:	4404      	add	r4, r0
 800b830:	6034      	str	r4, [r6, #0]
 800b832:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b836:	6028      	str	r0, [r5, #0]
 800b838:	4638      	mov	r0, r7
 800b83a:	b002      	add	sp, #8
 800b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b840:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b844:	e7d5      	b.n	800b7f2 <__d2b+0x1e>
 800b846:	6179      	str	r1, [r7, #20]
 800b848:	e7e7      	b.n	800b81a <__d2b+0x46>
 800b84a:	a801      	add	r0, sp, #4
 800b84c:	f7ff fddb 	bl	800b406 <__lo0bits>
 800b850:	2101      	movs	r1, #1
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	6139      	str	r1, [r7, #16]
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	3020      	adds	r0, #32
 800b85a:	e7e5      	b.n	800b828 <__d2b+0x54>
 800b85c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b860:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b864:	6030      	str	r0, [r6, #0]
 800b866:	6918      	ldr	r0, [r3, #16]
 800b868:	f7ff fdae 	bl	800b3c8 <__hi0bits>
 800b86c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b870:	e7e1      	b.n	800b836 <__d2b+0x62>

0800b872 <_calloc_r>:
 800b872:	b538      	push	{r3, r4, r5, lr}
 800b874:	fb02 f401 	mul.w	r4, r2, r1
 800b878:	4621      	mov	r1, r4
 800b87a:	f000 f855 	bl	800b928 <_malloc_r>
 800b87e:	4605      	mov	r5, r0
 800b880:	b118      	cbz	r0, 800b88a <_calloc_r+0x18>
 800b882:	4622      	mov	r2, r4
 800b884:	2100      	movs	r1, #0
 800b886:	f7fe f992 	bl	8009bae <memset>
 800b88a:	4628      	mov	r0, r5
 800b88c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b890 <_free_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4605      	mov	r5, r0
 800b894:	2900      	cmp	r1, #0
 800b896:	d043      	beq.n	800b920 <_free_r+0x90>
 800b898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b89c:	1f0c      	subs	r4, r1, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfb8      	it	lt
 800b8a2:	18e4      	addlt	r4, r4, r3
 800b8a4:	f000 fa22 	bl	800bcec <__malloc_lock>
 800b8a8:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <_free_r+0x94>)
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	b933      	cbnz	r3, 800b8be <_free_r+0x2e>
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	6014      	str	r4, [r2, #0]
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ba:	f000 ba18 	b.w	800bcee <__malloc_unlock>
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d90b      	bls.n	800b8da <_free_r+0x4a>
 800b8c2:	6821      	ldr	r1, [r4, #0]
 800b8c4:	1862      	adds	r2, r4, r1
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	bf01      	itttt	eq
 800b8ca:	681a      	ldreq	r2, [r3, #0]
 800b8cc:	685b      	ldreq	r3, [r3, #4]
 800b8ce:	1852      	addeq	r2, r2, r1
 800b8d0:	6022      	streq	r2, [r4, #0]
 800b8d2:	6063      	str	r3, [r4, #4]
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	e7ed      	b.n	800b8b4 <_free_r+0x24>
 800b8d8:	4613      	mov	r3, r2
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	b10a      	cbz	r2, 800b8e2 <_free_r+0x52>
 800b8de:	42a2      	cmp	r2, r4
 800b8e0:	d9fa      	bls.n	800b8d8 <_free_r+0x48>
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	1858      	adds	r0, r3, r1
 800b8e6:	42a0      	cmp	r0, r4
 800b8e8:	d10b      	bne.n	800b902 <_free_r+0x72>
 800b8ea:	6820      	ldr	r0, [r4, #0]
 800b8ec:	4401      	add	r1, r0
 800b8ee:	1858      	adds	r0, r3, r1
 800b8f0:	4282      	cmp	r2, r0
 800b8f2:	6019      	str	r1, [r3, #0]
 800b8f4:	d1de      	bne.n	800b8b4 <_free_r+0x24>
 800b8f6:	6810      	ldr	r0, [r2, #0]
 800b8f8:	6852      	ldr	r2, [r2, #4]
 800b8fa:	4401      	add	r1, r0
 800b8fc:	6019      	str	r1, [r3, #0]
 800b8fe:	605a      	str	r2, [r3, #4]
 800b900:	e7d8      	b.n	800b8b4 <_free_r+0x24>
 800b902:	d902      	bls.n	800b90a <_free_r+0x7a>
 800b904:	230c      	movs	r3, #12
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	e7d4      	b.n	800b8b4 <_free_r+0x24>
 800b90a:	6820      	ldr	r0, [r4, #0]
 800b90c:	1821      	adds	r1, r4, r0
 800b90e:	428a      	cmp	r2, r1
 800b910:	bf01      	itttt	eq
 800b912:	6811      	ldreq	r1, [r2, #0]
 800b914:	6852      	ldreq	r2, [r2, #4]
 800b916:	1809      	addeq	r1, r1, r0
 800b918:	6021      	streq	r1, [r4, #0]
 800b91a:	6062      	str	r2, [r4, #4]
 800b91c:	605c      	str	r4, [r3, #4]
 800b91e:	e7c9      	b.n	800b8b4 <_free_r+0x24>
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	bf00      	nop
 800b924:	20003e30 	.word	0x20003e30

0800b928 <_malloc_r>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	1ccd      	adds	r5, r1, #3
 800b92c:	f025 0503 	bic.w	r5, r5, #3
 800b930:	3508      	adds	r5, #8
 800b932:	2d0c      	cmp	r5, #12
 800b934:	bf38      	it	cc
 800b936:	250c      	movcc	r5, #12
 800b938:	2d00      	cmp	r5, #0
 800b93a:	4606      	mov	r6, r0
 800b93c:	db01      	blt.n	800b942 <_malloc_r+0x1a>
 800b93e:	42a9      	cmp	r1, r5
 800b940:	d903      	bls.n	800b94a <_malloc_r+0x22>
 800b942:	230c      	movs	r3, #12
 800b944:	6033      	str	r3, [r6, #0]
 800b946:	2000      	movs	r0, #0
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	f000 f9cf 	bl	800bcec <__malloc_lock>
 800b94e:	4a21      	ldr	r2, [pc, #132]	; (800b9d4 <_malloc_r+0xac>)
 800b950:	6814      	ldr	r4, [r2, #0]
 800b952:	4621      	mov	r1, r4
 800b954:	b991      	cbnz	r1, 800b97c <_malloc_r+0x54>
 800b956:	4c20      	ldr	r4, [pc, #128]	; (800b9d8 <_malloc_r+0xb0>)
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	b91b      	cbnz	r3, 800b964 <_malloc_r+0x3c>
 800b95c:	4630      	mov	r0, r6
 800b95e:	f000 f98f 	bl	800bc80 <_sbrk_r>
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	4629      	mov	r1, r5
 800b966:	4630      	mov	r0, r6
 800b968:	f000 f98a 	bl	800bc80 <_sbrk_r>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d124      	bne.n	800b9ba <_malloc_r+0x92>
 800b970:	230c      	movs	r3, #12
 800b972:	4630      	mov	r0, r6
 800b974:	6033      	str	r3, [r6, #0]
 800b976:	f000 f9ba 	bl	800bcee <__malloc_unlock>
 800b97a:	e7e4      	b.n	800b946 <_malloc_r+0x1e>
 800b97c:	680b      	ldr	r3, [r1, #0]
 800b97e:	1b5b      	subs	r3, r3, r5
 800b980:	d418      	bmi.n	800b9b4 <_malloc_r+0x8c>
 800b982:	2b0b      	cmp	r3, #11
 800b984:	d90f      	bls.n	800b9a6 <_malloc_r+0x7e>
 800b986:	600b      	str	r3, [r1, #0]
 800b988:	18cc      	adds	r4, r1, r3
 800b98a:	50cd      	str	r5, [r1, r3]
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f9ae 	bl	800bcee <__malloc_unlock>
 800b992:	f104 000b 	add.w	r0, r4, #11
 800b996:	1d23      	adds	r3, r4, #4
 800b998:	f020 0007 	bic.w	r0, r0, #7
 800b99c:	1ac3      	subs	r3, r0, r3
 800b99e:	d0d3      	beq.n	800b948 <_malloc_r+0x20>
 800b9a0:	425a      	negs	r2, r3
 800b9a2:	50e2      	str	r2, [r4, r3]
 800b9a4:	e7d0      	b.n	800b948 <_malloc_r+0x20>
 800b9a6:	684b      	ldr	r3, [r1, #4]
 800b9a8:	428c      	cmp	r4, r1
 800b9aa:	bf16      	itet	ne
 800b9ac:	6063      	strne	r3, [r4, #4]
 800b9ae:	6013      	streq	r3, [r2, #0]
 800b9b0:	460c      	movne	r4, r1
 800b9b2:	e7eb      	b.n	800b98c <_malloc_r+0x64>
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	6849      	ldr	r1, [r1, #4]
 800b9b8:	e7cc      	b.n	800b954 <_malloc_r+0x2c>
 800b9ba:	1cc4      	adds	r4, r0, #3
 800b9bc:	f024 0403 	bic.w	r4, r4, #3
 800b9c0:	42a0      	cmp	r0, r4
 800b9c2:	d005      	beq.n	800b9d0 <_malloc_r+0xa8>
 800b9c4:	1a21      	subs	r1, r4, r0
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f000 f95a 	bl	800bc80 <_sbrk_r>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d0cf      	beq.n	800b970 <_malloc_r+0x48>
 800b9d0:	6025      	str	r5, [r4, #0]
 800b9d2:	e7db      	b.n	800b98c <_malloc_r+0x64>
 800b9d4:	20003e30 	.word	0x20003e30
 800b9d8:	20003e34 	.word	0x20003e34

0800b9dc <__ssputs_r>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	688e      	ldr	r6, [r1, #8]
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	429e      	cmp	r6, r3
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4690      	mov	r8, r2
 800b9ea:	4699      	mov	r9, r3
 800b9ec:	d837      	bhi.n	800ba5e <__ssputs_r+0x82>
 800b9ee:	898a      	ldrh	r2, [r1, #12]
 800b9f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9f4:	d031      	beq.n	800ba5a <__ssputs_r+0x7e>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	6909      	ldr	r1, [r1, #16]
 800b9fc:	1a6f      	subs	r7, r5, r1
 800b9fe:	6965      	ldr	r5, [r4, #20]
 800ba00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba04:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba08:	f109 0301 	add.w	r3, r9, #1
 800ba0c:	443b      	add	r3, r7
 800ba0e:	429d      	cmp	r5, r3
 800ba10:	bf38      	it	cc
 800ba12:	461d      	movcc	r5, r3
 800ba14:	0553      	lsls	r3, r2, #21
 800ba16:	d530      	bpl.n	800ba7a <__ssputs_r+0x9e>
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7ff ff85 	bl	800b928 <_malloc_r>
 800ba1e:	4606      	mov	r6, r0
 800ba20:	b950      	cbnz	r0, 800ba38 <__ssputs_r+0x5c>
 800ba22:	230c      	movs	r3, #12
 800ba24:	f04f 30ff 	mov.w	r0, #4294967295
 800ba28:	f8ca 3000 	str.w	r3, [sl]
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba38:	463a      	mov	r2, r7
 800ba3a:	6921      	ldr	r1, [r4, #16]
 800ba3c:	f7fe f8ac 	bl	8009b98 <memcpy>
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	6126      	str	r6, [r4, #16]
 800ba4e:	443e      	add	r6, r7
 800ba50:	6026      	str	r6, [r4, #0]
 800ba52:	464e      	mov	r6, r9
 800ba54:	6165      	str	r5, [r4, #20]
 800ba56:	1bed      	subs	r5, r5, r7
 800ba58:	60a5      	str	r5, [r4, #8]
 800ba5a:	454e      	cmp	r6, r9
 800ba5c:	d900      	bls.n	800ba60 <__ssputs_r+0x84>
 800ba5e:	464e      	mov	r6, r9
 800ba60:	4632      	mov	r2, r6
 800ba62:	4641      	mov	r1, r8
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	f000 f928 	bl	800bcba <memmove>
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	1b9b      	subs	r3, r3, r6
 800ba70:	60a3      	str	r3, [r4, #8]
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	441e      	add	r6, r3
 800ba76:	6026      	str	r6, [r4, #0]
 800ba78:	e7dc      	b.n	800ba34 <__ssputs_r+0x58>
 800ba7a:	462a      	mov	r2, r5
 800ba7c:	f000 f938 	bl	800bcf0 <_realloc_r>
 800ba80:	4606      	mov	r6, r0
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d1e2      	bne.n	800ba4c <__ssputs_r+0x70>
 800ba86:	6921      	ldr	r1, [r4, #16]
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f7ff ff01 	bl	800b890 <_free_r>
 800ba8e:	e7c8      	b.n	800ba22 <__ssputs_r+0x46>

0800ba90 <_svfiprintf_r>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	461d      	mov	r5, r3
 800ba96:	898b      	ldrh	r3, [r1, #12]
 800ba98:	b09d      	sub	sp, #116	; 0x74
 800ba9a:	061f      	lsls	r7, r3, #24
 800ba9c:	4680      	mov	r8, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	4616      	mov	r6, r2
 800baa2:	d50f      	bpl.n	800bac4 <_svfiprintf_r+0x34>
 800baa4:	690b      	ldr	r3, [r1, #16]
 800baa6:	b96b      	cbnz	r3, 800bac4 <_svfiprintf_r+0x34>
 800baa8:	2140      	movs	r1, #64	; 0x40
 800baaa:	f7ff ff3d 	bl	800b928 <_malloc_r>
 800baae:	6020      	str	r0, [r4, #0]
 800bab0:	6120      	str	r0, [r4, #16]
 800bab2:	b928      	cbnz	r0, 800bac0 <_svfiprintf_r+0x30>
 800bab4:	230c      	movs	r3, #12
 800bab6:	f8c8 3000 	str.w	r3, [r8]
 800baba:	f04f 30ff 	mov.w	r0, #4294967295
 800babe:	e0c8      	b.n	800bc52 <_svfiprintf_r+0x1c2>
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	6163      	str	r3, [r4, #20]
 800bac4:	2300      	movs	r3, #0
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	2320      	movs	r3, #32
 800baca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bace:	2330      	movs	r3, #48	; 0x30
 800bad0:	f04f 0b01 	mov.w	fp, #1
 800bad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad8:	9503      	str	r5, [sp, #12]
 800bada:	4637      	mov	r7, r6
 800badc:	463d      	mov	r5, r7
 800bade:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bae2:	b10b      	cbz	r3, 800bae8 <_svfiprintf_r+0x58>
 800bae4:	2b25      	cmp	r3, #37	; 0x25
 800bae6:	d13e      	bne.n	800bb66 <_svfiprintf_r+0xd6>
 800bae8:	ebb7 0a06 	subs.w	sl, r7, r6
 800baec:	d00b      	beq.n	800bb06 <_svfiprintf_r+0x76>
 800baee:	4653      	mov	r3, sl
 800baf0:	4632      	mov	r2, r6
 800baf2:	4621      	mov	r1, r4
 800baf4:	4640      	mov	r0, r8
 800baf6:	f7ff ff71 	bl	800b9dc <__ssputs_r>
 800bafa:	3001      	adds	r0, #1
 800bafc:	f000 80a4 	beq.w	800bc48 <_svfiprintf_r+0x1b8>
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	4453      	add	r3, sl
 800bb04:	9309      	str	r3, [sp, #36]	; 0x24
 800bb06:	783b      	ldrb	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 809d 	beq.w	800bc48 <_svfiprintf_r+0x1b8>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295
 800bb14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	9307      	str	r3, [sp, #28]
 800bb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb20:	931a      	str	r3, [sp, #104]	; 0x68
 800bb22:	462f      	mov	r7, r5
 800bb24:	2205      	movs	r2, #5
 800bb26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb2a:	4850      	ldr	r0, [pc, #320]	; (800bc6c <_svfiprintf_r+0x1dc>)
 800bb2c:	f7ff fbb8 	bl	800b2a0 <memchr>
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	b9d0      	cbnz	r0, 800bb6a <_svfiprintf_r+0xda>
 800bb34:	06d9      	lsls	r1, r3, #27
 800bb36:	bf44      	itt	mi
 800bb38:	2220      	movmi	r2, #32
 800bb3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb3e:	071a      	lsls	r2, r3, #28
 800bb40:	bf44      	itt	mi
 800bb42:	222b      	movmi	r2, #43	; 0x2b
 800bb44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb48:	782a      	ldrb	r2, [r5, #0]
 800bb4a:	2a2a      	cmp	r2, #42	; 0x2a
 800bb4c:	d015      	beq.n	800bb7a <_svfiprintf_r+0xea>
 800bb4e:	462f      	mov	r7, r5
 800bb50:	2000      	movs	r0, #0
 800bb52:	250a      	movs	r5, #10
 800bb54:	9a07      	ldr	r2, [sp, #28]
 800bb56:	4639      	mov	r1, r7
 800bb58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb5c:	3b30      	subs	r3, #48	; 0x30
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d94d      	bls.n	800bbfe <_svfiprintf_r+0x16e>
 800bb62:	b1b8      	cbz	r0, 800bb94 <_svfiprintf_r+0x104>
 800bb64:	e00f      	b.n	800bb86 <_svfiprintf_r+0xf6>
 800bb66:	462f      	mov	r7, r5
 800bb68:	e7b8      	b.n	800badc <_svfiprintf_r+0x4c>
 800bb6a:	4a40      	ldr	r2, [pc, #256]	; (800bc6c <_svfiprintf_r+0x1dc>)
 800bb6c:	463d      	mov	r5, r7
 800bb6e:	1a80      	subs	r0, r0, r2
 800bb70:	fa0b f000 	lsl.w	r0, fp, r0
 800bb74:	4318      	orrs	r0, r3
 800bb76:	9004      	str	r0, [sp, #16]
 800bb78:	e7d3      	b.n	800bb22 <_svfiprintf_r+0x92>
 800bb7a:	9a03      	ldr	r2, [sp, #12]
 800bb7c:	1d11      	adds	r1, r2, #4
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	9103      	str	r1, [sp, #12]
 800bb82:	2a00      	cmp	r2, #0
 800bb84:	db01      	blt.n	800bb8a <_svfiprintf_r+0xfa>
 800bb86:	9207      	str	r2, [sp, #28]
 800bb88:	e004      	b.n	800bb94 <_svfiprintf_r+0x104>
 800bb8a:	4252      	negs	r2, r2
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	9207      	str	r2, [sp, #28]
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	783b      	ldrb	r3, [r7, #0]
 800bb96:	2b2e      	cmp	r3, #46	; 0x2e
 800bb98:	d10c      	bne.n	800bbb4 <_svfiprintf_r+0x124>
 800bb9a:	787b      	ldrb	r3, [r7, #1]
 800bb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb9e:	d133      	bne.n	800bc08 <_svfiprintf_r+0x178>
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	3702      	adds	r7, #2
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	9203      	str	r2, [sp, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfb8      	it	lt
 800bbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbb2:	9305      	str	r3, [sp, #20]
 800bbb4:	4d2e      	ldr	r5, [pc, #184]	; (800bc70 <_svfiprintf_r+0x1e0>)
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	7839      	ldrb	r1, [r7, #0]
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7ff fb70 	bl	800b2a0 <memchr>
 800bbc0:	b138      	cbz	r0, 800bbd2 <_svfiprintf_r+0x142>
 800bbc2:	2340      	movs	r3, #64	; 0x40
 800bbc4:	1b40      	subs	r0, r0, r5
 800bbc6:	fa03 f000 	lsl.w	r0, r3, r0
 800bbca:	9b04      	ldr	r3, [sp, #16]
 800bbcc:	3701      	adds	r7, #1
 800bbce:	4303      	orrs	r3, r0
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	7839      	ldrb	r1, [r7, #0]
 800bbd4:	2206      	movs	r2, #6
 800bbd6:	4827      	ldr	r0, [pc, #156]	; (800bc74 <_svfiprintf_r+0x1e4>)
 800bbd8:	1c7e      	adds	r6, r7, #1
 800bbda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbde:	f7ff fb5f 	bl	800b2a0 <memchr>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d038      	beq.n	800bc58 <_svfiprintf_r+0x1c8>
 800bbe6:	4b24      	ldr	r3, [pc, #144]	; (800bc78 <_svfiprintf_r+0x1e8>)
 800bbe8:	bb13      	cbnz	r3, 800bc30 <_svfiprintf_r+0x1a0>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	3307      	adds	r3, #7
 800bbee:	f023 0307 	bic.w	r3, r3, #7
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	9303      	str	r3, [sp, #12]
 800bbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf8:	444b      	add	r3, r9
 800bbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfc:	e76d      	b.n	800bada <_svfiprintf_r+0x4a>
 800bbfe:	fb05 3202 	mla	r2, r5, r2, r3
 800bc02:	2001      	movs	r0, #1
 800bc04:	460f      	mov	r7, r1
 800bc06:	e7a6      	b.n	800bb56 <_svfiprintf_r+0xc6>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	250a      	movs	r5, #10
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	3701      	adds	r7, #1
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	4638      	mov	r0, r7
 800bc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc18:	3a30      	subs	r2, #48	; 0x30
 800bc1a:	2a09      	cmp	r2, #9
 800bc1c:	d903      	bls.n	800bc26 <_svfiprintf_r+0x196>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0c8      	beq.n	800bbb4 <_svfiprintf_r+0x124>
 800bc22:	9105      	str	r1, [sp, #20]
 800bc24:	e7c6      	b.n	800bbb4 <_svfiprintf_r+0x124>
 800bc26:	fb05 2101 	mla	r1, r5, r1, r2
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	e7f0      	b.n	800bc12 <_svfiprintf_r+0x182>
 800bc30:	ab03      	add	r3, sp, #12
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	4622      	mov	r2, r4
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <_svfiprintf_r+0x1ec>)
 800bc38:	a904      	add	r1, sp, #16
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	f7fe f850 	bl	8009ce0 <_printf_float>
 800bc40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc44:	4681      	mov	r9, r0
 800bc46:	d1d6      	bne.n	800bbf6 <_svfiprintf_r+0x166>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	065b      	lsls	r3, r3, #25
 800bc4c:	f53f af35 	bmi.w	800baba <_svfiprintf_r+0x2a>
 800bc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc52:	b01d      	add	sp, #116	; 0x74
 800bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc58:	ab03      	add	r3, sp, #12
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	4b07      	ldr	r3, [pc, #28]	; (800bc7c <_svfiprintf_r+0x1ec>)
 800bc60:	a904      	add	r1, sp, #16
 800bc62:	4640      	mov	r0, r8
 800bc64:	f7fe fae8 	bl	800a238 <_printf_i>
 800bc68:	e7ea      	b.n	800bc40 <_svfiprintf_r+0x1b0>
 800bc6a:	bf00      	nop
 800bc6c:	0800d8dc 	.word	0x0800d8dc
 800bc70:	0800d8e2 	.word	0x0800d8e2
 800bc74:	0800d8e6 	.word	0x0800d8e6
 800bc78:	08009ce1 	.word	0x08009ce1
 800bc7c:	0800b9dd 	.word	0x0800b9dd

0800bc80 <_sbrk_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	2300      	movs	r3, #0
 800bc84:	4c05      	ldr	r4, [pc, #20]	; (800bc9c <_sbrk_r+0x1c>)
 800bc86:	4605      	mov	r5, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	f7f8 faa6 	bl	80041dc <_sbrk>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d102      	bne.n	800bc9a <_sbrk_r+0x1a>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	b103      	cbz	r3, 800bc9a <_sbrk_r+0x1a>
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	200040b8 	.word	0x200040b8

0800bca0 <__ascii_wctomb>:
 800bca0:	b149      	cbz	r1, 800bcb6 <__ascii_wctomb+0x16>
 800bca2:	2aff      	cmp	r2, #255	; 0xff
 800bca4:	bf8b      	itete	hi
 800bca6:	238a      	movhi	r3, #138	; 0x8a
 800bca8:	700a      	strbls	r2, [r1, #0]
 800bcaa:	6003      	strhi	r3, [r0, #0]
 800bcac:	2001      	movls	r0, #1
 800bcae:	bf88      	it	hi
 800bcb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcb4:	4770      	bx	lr
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	4770      	bx	lr

0800bcba <memmove>:
 800bcba:	4288      	cmp	r0, r1
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	eb01 0302 	add.w	r3, r1, r2
 800bcc2:	d807      	bhi.n	800bcd4 <memmove+0x1a>
 800bcc4:	1e42      	subs	r2, r0, #1
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	d00a      	beq.n	800bce0 <memmove+0x26>
 800bcca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcce:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bcd2:	e7f8      	b.n	800bcc6 <memmove+0xc>
 800bcd4:	4283      	cmp	r3, r0
 800bcd6:	d9f5      	bls.n	800bcc4 <memmove+0xa>
 800bcd8:	1881      	adds	r1, r0, r2
 800bcda:	1ad2      	subs	r2, r2, r3
 800bcdc:	42d3      	cmn	r3, r2
 800bcde:	d100      	bne.n	800bce2 <memmove+0x28>
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bce6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bcea:	e7f7      	b.n	800bcdc <memmove+0x22>

0800bcec <__malloc_lock>:
 800bcec:	4770      	bx	lr

0800bcee <__malloc_unlock>:
 800bcee:	4770      	bx	lr

0800bcf0 <_realloc_r>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	4614      	mov	r4, r2
 800bcf6:	460e      	mov	r6, r1
 800bcf8:	b921      	cbnz	r1, 800bd04 <_realloc_r+0x14>
 800bcfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcfe:	4611      	mov	r1, r2
 800bd00:	f7ff be12 	b.w	800b928 <_malloc_r>
 800bd04:	b922      	cbnz	r2, 800bd10 <_realloc_r+0x20>
 800bd06:	f7ff fdc3 	bl	800b890 <_free_r>
 800bd0a:	4625      	mov	r5, r4
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd10:	f000 f814 	bl	800bd3c <_malloc_usable_size_r>
 800bd14:	42a0      	cmp	r0, r4
 800bd16:	d20f      	bcs.n	800bd38 <_realloc_r+0x48>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f7ff fe04 	bl	800b928 <_malloc_r>
 800bd20:	4605      	mov	r5, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0f2      	beq.n	800bd0c <_realloc_r+0x1c>
 800bd26:	4631      	mov	r1, r6
 800bd28:	4622      	mov	r2, r4
 800bd2a:	f7fd ff35 	bl	8009b98 <memcpy>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7ff fdad 	bl	800b890 <_free_r>
 800bd36:	e7e9      	b.n	800bd0c <_realloc_r+0x1c>
 800bd38:	4635      	mov	r5, r6
 800bd3a:	e7e7      	b.n	800bd0c <_realloc_r+0x1c>

0800bd3c <_malloc_usable_size_r>:
 800bd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd40:	1f18      	subs	r0, r3, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfbc      	itt	lt
 800bd46:	580b      	ldrlt	r3, [r1, r0]
 800bd48:	18c0      	addlt	r0, r0, r3
 800bd4a:	4770      	bx	lr

0800bd4c <cos>:
 800bd4c:	b530      	push	{r4, r5, lr}
 800bd4e:	4a18      	ldr	r2, [pc, #96]	; (800bdb0 <cos+0x64>)
 800bd50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd54:	4293      	cmp	r3, r2
 800bd56:	b087      	sub	sp, #28
 800bd58:	dc04      	bgt.n	800bd64 <cos+0x18>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f000 fc37 	bl	800c5d0 <__kernel_cos>
 800bd62:	e006      	b.n	800bd72 <cos+0x26>
 800bd64:	4a13      	ldr	r2, [pc, #76]	; (800bdb4 <cos+0x68>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	dd05      	ble.n	800bd76 <cos+0x2a>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	f7f4 f9fb 	bl	8000168 <__aeabi_dsub>
 800bd72:	b007      	add	sp, #28
 800bd74:	bd30      	pop	{r4, r5, pc}
 800bd76:	aa02      	add	r2, sp, #8
 800bd78:	f000 f98e 	bl	800c098 <__ieee754_rem_pio2>
 800bd7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd80:	f000 0403 	and.w	r4, r0, #3
 800bd84:	2c01      	cmp	r4, #1
 800bd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8a:	d008      	beq.n	800bd9e <cos+0x52>
 800bd8c:	2c02      	cmp	r4, #2
 800bd8e:	d00c      	beq.n	800bdaa <cos+0x5e>
 800bd90:	2c00      	cmp	r4, #0
 800bd92:	d0e4      	beq.n	800bd5e <cos+0x12>
 800bd94:	2401      	movs	r4, #1
 800bd96:	9400      	str	r4, [sp, #0]
 800bd98:	f001 f822 	bl	800cde0 <__kernel_sin>
 800bd9c:	e7e9      	b.n	800bd72 <cos+0x26>
 800bd9e:	9400      	str	r4, [sp, #0]
 800bda0:	f001 f81e 	bl	800cde0 <__kernel_sin>
 800bda4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bda8:	e7e3      	b.n	800bd72 <cos+0x26>
 800bdaa:	f000 fc11 	bl	800c5d0 <__kernel_cos>
 800bdae:	e7f9      	b.n	800bda4 <cos+0x58>
 800bdb0:	3fe921fb 	.word	0x3fe921fb
 800bdb4:	7fefffff 	.word	0x7fefffff

0800bdb8 <sin>:
 800bdb8:	b530      	push	{r4, r5, lr}
 800bdba:	4a1a      	ldr	r2, [pc, #104]	; (800be24 <sin+0x6c>)
 800bdbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	b087      	sub	sp, #28
 800bdc4:	dc06      	bgt.n	800bdd4 <sin+0x1c>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f001 f807 	bl	800cde0 <__kernel_sin>
 800bdd2:	e006      	b.n	800bde2 <sin+0x2a>
 800bdd4:	4a14      	ldr	r2, [pc, #80]	; (800be28 <sin+0x70>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	dd05      	ble.n	800bde6 <sin+0x2e>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	f7f4 f9c3 	bl	8000168 <__aeabi_dsub>
 800bde2:	b007      	add	sp, #28
 800bde4:	bd30      	pop	{r4, r5, pc}
 800bde6:	aa02      	add	r2, sp, #8
 800bde8:	f000 f956 	bl	800c098 <__ieee754_rem_pio2>
 800bdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf0:	f000 0403 	and.w	r4, r0, #3
 800bdf4:	2c01      	cmp	r4, #1
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	d005      	beq.n	800be08 <sin+0x50>
 800bdfc:	2c02      	cmp	r4, #2
 800bdfe:	d006      	beq.n	800be0e <sin+0x56>
 800be00:	b964      	cbnz	r4, 800be1c <sin+0x64>
 800be02:	2401      	movs	r4, #1
 800be04:	9400      	str	r4, [sp, #0]
 800be06:	e7e2      	b.n	800bdce <sin+0x16>
 800be08:	f000 fbe2 	bl	800c5d0 <__kernel_cos>
 800be0c:	e7e9      	b.n	800bde2 <sin+0x2a>
 800be0e:	2401      	movs	r4, #1
 800be10:	9400      	str	r4, [sp, #0]
 800be12:	f000 ffe5 	bl	800cde0 <__kernel_sin>
 800be16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be1a:	e7e2      	b.n	800bde2 <sin+0x2a>
 800be1c:	f000 fbd8 	bl	800c5d0 <__kernel_cos>
 800be20:	e7f9      	b.n	800be16 <sin+0x5e>
 800be22:	bf00      	nop
 800be24:	3fe921fb 	.word	0x3fe921fb
 800be28:	7fefffff 	.word	0x7fefffff

0800be2c <atan2>:
 800be2c:	f000 b854 	b.w	800bed8 <__ieee754_atan2>

0800be30 <sqrt>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	b08b      	sub	sp, #44	; 0x2c
 800be36:	4604      	mov	r4, r0
 800be38:	460d      	mov	r5, r1
 800be3a:	f000 fb1d 	bl	800c478 <__ieee754_sqrt>
 800be3e:	4b24      	ldr	r3, [pc, #144]	; (800bed0 <sqrt+0xa0>)
 800be40:	4680      	mov	r8, r0
 800be42:	f993 a000 	ldrsb.w	sl, [r3]
 800be46:	4689      	mov	r9, r1
 800be48:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be4c:	d02b      	beq.n	800bea6 <sqrt+0x76>
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	4620      	mov	r0, r4
 800be54:	4629      	mov	r1, r5
 800be56:	f7f4 fdd9 	bl	8000a0c <__aeabi_dcmpun>
 800be5a:	4683      	mov	fp, r0
 800be5c:	bb18      	cbnz	r0, 800bea6 <sqrt+0x76>
 800be5e:	2600      	movs	r6, #0
 800be60:	2700      	movs	r7, #0
 800be62:	4632      	mov	r2, r6
 800be64:	463b      	mov	r3, r7
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fda7 	bl	80009bc <__aeabi_dcmplt>
 800be6e:	b1d0      	cbz	r0, 800bea6 <sqrt+0x76>
 800be70:	2301      	movs	r3, #1
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	4b17      	ldr	r3, [pc, #92]	; (800bed4 <sqrt+0xa4>)
 800be76:	f8cd b020 	str.w	fp, [sp, #32]
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800be80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800be84:	f1ba 0f00 	cmp.w	sl, #0
 800be88:	d112      	bne.n	800beb0 <sqrt+0x80>
 800be8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be8e:	4668      	mov	r0, sp
 800be90:	f001 fa72 	bl	800d378 <matherr>
 800be94:	b1b8      	cbz	r0, 800bec6 <sqrt+0x96>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	b11b      	cbz	r3, 800bea2 <sqrt+0x72>
 800be9a:	f7fd fe53 	bl	8009b44 <__errno>
 800be9e:	9b08      	ldr	r3, [sp, #32]
 800bea0:	6003      	str	r3, [r0, #0]
 800bea2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	b00b      	add	sp, #44	; 0x2c
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fc38 	bl	800072c <__aeabi_ddiv>
 800bebc:	f1ba 0f02 	cmp.w	sl, #2
 800bec0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bec4:	d1e3      	bne.n	800be8e <sqrt+0x5e>
 800bec6:	f7fd fe3d 	bl	8009b44 <__errno>
 800beca:	2321      	movs	r3, #33	; 0x21
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	e7e2      	b.n	800be96 <sqrt+0x66>
 800bed0:	200001e4 	.word	0x200001e4
 800bed4:	0800d9ee 	.word	0x0800d9ee

0800bed8 <__ieee754_atan2>:
 800bed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	4256      	negs	r6, r2
 800bede:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800bee2:	4316      	orrs	r6, r2
 800bee4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800c090 <__ieee754_atan2+0x1b8>
 800bee8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800beec:	454e      	cmp	r6, r9
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	469e      	mov	lr, r3
 800bef4:	d808      	bhi.n	800bf08 <__ieee754_atan2+0x30>
 800bef6:	4246      	negs	r6, r0
 800bef8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800befc:	4306      	orrs	r6, r0
 800befe:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800bf02:	454e      	cmp	r6, r9
 800bf04:	4688      	mov	r8, r1
 800bf06:	d906      	bls.n	800bf16 <__ieee754_atan2+0x3e>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f7f4 f92e 	bl	800016c <__adddf3>
 800bf10:	4604      	mov	r4, r0
 800bf12:	460d      	mov	r5, r1
 800bf14:	e030      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bf16:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800bf1a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bf1e:	4316      	orrs	r6, r2
 800bf20:	d103      	bne.n	800bf2a <__ieee754_atan2+0x52>
 800bf22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf26:	f001 b813 	b.w	800cf50 <atan>
 800bf2a:	179e      	asrs	r6, r3, #30
 800bf2c:	f006 0602 	and.w	r6, r6, #2
 800bf30:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bf34:	ea57 0100 	orrs.w	r1, r7, r0
 800bf38:	d107      	bne.n	800bf4a <__ieee754_atan2+0x72>
 800bf3a:	2e02      	cmp	r6, #2
 800bf3c:	d079      	beq.n	800c032 <__ieee754_atan2+0x15a>
 800bf3e:	2e03      	cmp	r6, #3
 800bf40:	d11a      	bne.n	800bf78 <__ieee754_atan2+0xa0>
 800bf42:	a541      	add	r5, pc, #260	; (adr r5, 800c048 <__ieee754_atan2+0x170>)
 800bf44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf48:	e016      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bf4a:	ea5c 0102 	orrs.w	r1, ip, r2
 800bf4e:	d106      	bne.n	800bf5e <__ieee754_atan2+0x86>
 800bf50:	f1b8 0f00 	cmp.w	r8, #0
 800bf54:	da71      	bge.n	800c03a <__ieee754_atan2+0x162>
 800bf56:	a53e      	add	r5, pc, #248	; (adr r5, 800c050 <__ieee754_atan2+0x178>)
 800bf58:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf5c:	e00c      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bf5e:	45cc      	cmp	ip, r9
 800bf60:	d123      	bne.n	800bfaa <__ieee754_atan2+0xd2>
 800bf62:	4567      	cmp	r7, ip
 800bf64:	d114      	bne.n	800bf90 <__ieee754_atan2+0xb8>
 800bf66:	2e02      	cmp	r6, #2
 800bf68:	d00a      	beq.n	800bf80 <__ieee754_atan2+0xa8>
 800bf6a:	2e03      	cmp	r6, #3
 800bf6c:	d00c      	beq.n	800bf88 <__ieee754_atan2+0xb0>
 800bf6e:	2e01      	cmp	r6, #1
 800bf70:	d15b      	bne.n	800c02a <__ieee754_atan2+0x152>
 800bf72:	a539      	add	r5, pc, #228	; (adr r5, 800c058 <__ieee754_atan2+0x180>)
 800bf74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf80:	a537      	add	r5, pc, #220	; (adr r5, 800c060 <__ieee754_atan2+0x188>)
 800bf82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf86:	e7f7      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bf88:	a537      	add	r5, pc, #220	; (adr r5, 800c068 <__ieee754_atan2+0x190>)
 800bf8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf8e:	e7f3      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bf90:	2e02      	cmp	r6, #2
 800bf92:	d04e      	beq.n	800c032 <__ieee754_atan2+0x15a>
 800bf94:	2e03      	cmp	r6, #3
 800bf96:	d0d4      	beq.n	800bf42 <__ieee754_atan2+0x6a>
 800bf98:	2e01      	cmp	r6, #1
 800bf9a:	f04f 0400 	mov.w	r4, #0
 800bf9e:	d102      	bne.n	800bfa6 <__ieee754_atan2+0xce>
 800bfa0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bfa4:	e7e8      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bfa6:	2500      	movs	r5, #0
 800bfa8:	e7e6      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800bfaa:	454f      	cmp	r7, r9
 800bfac:	d0d0      	beq.n	800bf50 <__ieee754_atan2+0x78>
 800bfae:	eba7 070c 	sub.w	r7, r7, ip
 800bfb2:	153f      	asrs	r7, r7, #20
 800bfb4:	2f3c      	cmp	r7, #60	; 0x3c
 800bfb6:	dc1e      	bgt.n	800bff6 <__ieee754_atan2+0x11e>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da01      	bge.n	800bfc0 <__ieee754_atan2+0xe8>
 800bfbc:	373c      	adds	r7, #60	; 0x3c
 800bfbe:	db1e      	blt.n	800bffe <__ieee754_atan2+0x126>
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f7f4 fbb2 	bl	800072c <__aeabi_ddiv>
 800bfc8:	f001 f94c 	bl	800d264 <fabs>
 800bfcc:	f000 ffc0 	bl	800cf50 <atan>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	2e01      	cmp	r6, #1
 800bfd6:	d015      	beq.n	800c004 <__ieee754_atan2+0x12c>
 800bfd8:	2e02      	cmp	r6, #2
 800bfda:	d017      	beq.n	800c00c <__ieee754_atan2+0x134>
 800bfdc:	2e00      	cmp	r6, #0
 800bfde:	d0cb      	beq.n	800bf78 <__ieee754_atan2+0xa0>
 800bfe0:	a323      	add	r3, pc, #140	; (adr r3, 800c070 <__ieee754_atan2+0x198>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 f8bd 	bl	8000168 <__aeabi_dsub>
 800bfee:	a322      	add	r3, pc, #136	; (adr r3, 800c078 <__ieee754_atan2+0x1a0>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	e016      	b.n	800c024 <__ieee754_atan2+0x14c>
 800bff6:	a522      	add	r5, pc, #136	; (adr r5, 800c080 <__ieee754_atan2+0x1a8>)
 800bff8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bffc:	e7ea      	b.n	800bfd4 <__ieee754_atan2+0xfc>
 800bffe:	2400      	movs	r4, #0
 800c000:	2500      	movs	r5, #0
 800c002:	e7e7      	b.n	800bfd4 <__ieee754_atan2+0xfc>
 800c004:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c008:	461d      	mov	r5, r3
 800c00a:	e7b5      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800c00c:	a318      	add	r3, pc, #96	; (adr r3, 800c070 <__ieee754_atan2+0x198>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	4620      	mov	r0, r4
 800c014:	4629      	mov	r1, r5
 800c016:	f7f4 f8a7 	bl	8000168 <__aeabi_dsub>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	a116      	add	r1, pc, #88	; (adr r1, 800c078 <__ieee754_atan2+0x1a0>)
 800c020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c024:	f7f4 f8a0 	bl	8000168 <__aeabi_dsub>
 800c028:	e772      	b.n	800bf10 <__ieee754_atan2+0x38>
 800c02a:	a517      	add	r5, pc, #92	; (adr r5, 800c088 <__ieee754_atan2+0x1b0>)
 800c02c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c030:	e7a2      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800c032:	a511      	add	r5, pc, #68	; (adr r5, 800c078 <__ieee754_atan2+0x1a0>)
 800c034:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c038:	e79e      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800c03a:	a511      	add	r5, pc, #68	; (adr r5, 800c080 <__ieee754_atan2+0x1a8>)
 800c03c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c040:	e79a      	b.n	800bf78 <__ieee754_atan2+0xa0>
 800c042:	bf00      	nop
 800c044:	f3af 8000 	nop.w
 800c048:	54442d18 	.word	0x54442d18
 800c04c:	c00921fb 	.word	0xc00921fb
 800c050:	54442d18 	.word	0x54442d18
 800c054:	bff921fb 	.word	0xbff921fb
 800c058:	54442d18 	.word	0x54442d18
 800c05c:	bfe921fb 	.word	0xbfe921fb
 800c060:	7f3321d2 	.word	0x7f3321d2
 800c064:	4002d97c 	.word	0x4002d97c
 800c068:	7f3321d2 	.word	0x7f3321d2
 800c06c:	c002d97c 	.word	0xc002d97c
 800c070:	33145c07 	.word	0x33145c07
 800c074:	3ca1a626 	.word	0x3ca1a626
 800c078:	54442d18 	.word	0x54442d18
 800c07c:	400921fb 	.word	0x400921fb
 800c080:	54442d18 	.word	0x54442d18
 800c084:	3ff921fb 	.word	0x3ff921fb
 800c088:	54442d18 	.word	0x54442d18
 800c08c:	3fe921fb 	.word	0x3fe921fb
 800c090:	7ff00000 	.word	0x7ff00000
 800c094:	00000000 	.word	0x00000000

0800c098 <__ieee754_rem_pio2>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	4614      	mov	r4, r2
 800c09e:	4ac2      	ldr	r2, [pc, #776]	; (800c3a8 <__ieee754_rem_pio2+0x310>)
 800c0a0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c0a4:	4592      	cmp	sl, r2
 800c0a6:	b08d      	sub	sp, #52	; 0x34
 800c0a8:	468b      	mov	fp, r1
 800c0aa:	dc07      	bgt.n	800c0bc <__ieee754_rem_pio2+0x24>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e9c4 0100 	strd	r0, r1, [r4]
 800c0b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c0b8:	2500      	movs	r5, #0
 800c0ba:	e023      	b.n	800c104 <__ieee754_rem_pio2+0x6c>
 800c0bc:	4abb      	ldr	r2, [pc, #748]	; (800c3ac <__ieee754_rem_pio2+0x314>)
 800c0be:	4592      	cmp	sl, r2
 800c0c0:	dc71      	bgt.n	800c1a6 <__ieee754_rem_pio2+0x10e>
 800c0c2:	a3ab      	add	r3, pc, #684	; (adr r3, 800c370 <__ieee754_rem_pio2+0x2d8>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	4db9      	ldr	r5, [pc, #740]	; (800c3b0 <__ieee754_rem_pio2+0x318>)
 800c0cc:	dd36      	ble.n	800c13c <__ieee754_rem_pio2+0xa4>
 800c0ce:	f7f4 f84b 	bl	8000168 <__aeabi_dsub>
 800c0d2:	45aa      	cmp	sl, r5
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	460f      	mov	r7, r1
 800c0d8:	d018      	beq.n	800c10c <__ieee754_rem_pio2+0x74>
 800c0da:	a3a7      	add	r3, pc, #668	; (adr r3, 800c378 <__ieee754_rem_pio2+0x2e0>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f842 	bl	8000168 <__aeabi_dsub>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	e9c4 2300 	strd	r2, r3, [r4]
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 f83a 	bl	8000168 <__aeabi_dsub>
 800c0f4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c378 <__ieee754_rem_pio2+0x2e0>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 f835 	bl	8000168 <__aeabi_dsub>
 800c0fe:	2501      	movs	r5, #1
 800c100:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c104:	4628      	mov	r0, r5
 800c106:	b00d      	add	sp, #52	; 0x34
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10c:	a39c      	add	r3, pc, #624	; (adr r3, 800c380 <__ieee754_rem_pio2+0x2e8>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f829 	bl	8000168 <__aeabi_dsub>
 800c116:	a39c      	add	r3, pc, #624	; (adr r3, 800c388 <__ieee754_rem_pio2+0x2f0>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	f7f4 f822 	bl	8000168 <__aeabi_dsub>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	4630      	mov	r0, r6
 800c12a:	e9c4 2300 	strd	r2, r3, [r4]
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 f81a 	bl	8000168 <__aeabi_dsub>
 800c134:	a394      	add	r3, pc, #592	; (adr r3, 800c388 <__ieee754_rem_pio2+0x2f0>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	e7de      	b.n	800c0fa <__ieee754_rem_pio2+0x62>
 800c13c:	f7f4 f816 	bl	800016c <__adddf3>
 800c140:	45aa      	cmp	sl, r5
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	d016      	beq.n	800c176 <__ieee754_rem_pio2+0xde>
 800c148:	a38b      	add	r3, pc, #556	; (adr r3, 800c378 <__ieee754_rem_pio2+0x2e0>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f7f4 f80d 	bl	800016c <__adddf3>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4630      	mov	r0, r6
 800c158:	e9c4 2300 	strd	r2, r3, [r4]
 800c15c:	4639      	mov	r1, r7
 800c15e:	f7f4 f803 	bl	8000168 <__aeabi_dsub>
 800c162:	a385      	add	r3, pc, #532	; (adr r3, 800c378 <__ieee754_rem_pio2+0x2e0>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 f800 	bl	800016c <__adddf3>
 800c16c:	f04f 35ff 	mov.w	r5, #4294967295
 800c170:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c174:	e7c6      	b.n	800c104 <__ieee754_rem_pio2+0x6c>
 800c176:	a382      	add	r3, pc, #520	; (adr r3, 800c380 <__ieee754_rem_pio2+0x2e8>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f7f3 fff6 	bl	800016c <__adddf3>
 800c180:	a381      	add	r3, pc, #516	; (adr r3, 800c388 <__ieee754_rem_pio2+0x2f0>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	f7f3 ffef 	bl	800016c <__adddf3>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4630      	mov	r0, r6
 800c194:	e9c4 2300 	strd	r2, r3, [r4]
 800c198:	4639      	mov	r1, r7
 800c19a:	f7f3 ffe5 	bl	8000168 <__aeabi_dsub>
 800c19e:	a37a      	add	r3, pc, #488	; (adr r3, 800c388 <__ieee754_rem_pio2+0x2f0>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	e7e0      	b.n	800c168 <__ieee754_rem_pio2+0xd0>
 800c1a6:	4a83      	ldr	r2, [pc, #524]	; (800c3b4 <__ieee754_rem_pio2+0x31c>)
 800c1a8:	4592      	cmp	sl, r2
 800c1aa:	f300 80d2 	bgt.w	800c352 <__ieee754_rem_pio2+0x2ba>
 800c1ae:	f001 f859 	bl	800d264 <fabs>
 800c1b2:	a377      	add	r3, pc, #476	; (adr r3, 800c390 <__ieee754_rem_pio2+0x2f8>)
 800c1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	f7f4 f98c 	bl	80004d8 <__aeabi_dmul>
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b7d      	ldr	r3, [pc, #500]	; (800c3b8 <__ieee754_rem_pio2+0x320>)
 800c1c4:	f7f3 ffd2 	bl	800016c <__adddf3>
 800c1c8:	f7f4 fc36 	bl	8000a38 <__aeabi_d2iz>
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	f7f4 f919 	bl	8000404 <__aeabi_i2d>
 800c1d2:	a367      	add	r3, pc, #412	; (adr r3, 800c370 <__ieee754_rem_pio2+0x2d8>)
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1dc:	f7f4 f97c 	bl	80004d8 <__aeabi_dmul>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	f7f3 ffbe 	bl	8000168 <__aeabi_dsub>
 800c1ec:	a362      	add	r3, pc, #392	; (adr r3, 800c378 <__ieee754_rem_pio2+0x2e0>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460f      	mov	r7, r1
 800c1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fa:	f7f4 f96d 	bl	80004d8 <__aeabi_dmul>
 800c1fe:	2d1f      	cmp	r5, #31
 800c200:	4680      	mov	r8, r0
 800c202:	4689      	mov	r9, r1
 800c204:	dc0e      	bgt.n	800c224 <__ieee754_rem_pio2+0x18c>
 800c206:	4b6d      	ldr	r3, [pc, #436]	; (800c3bc <__ieee754_rem_pio2+0x324>)
 800c208:	1e6a      	subs	r2, r5, #1
 800c20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20e:	4553      	cmp	r3, sl
 800c210:	d008      	beq.n	800c224 <__ieee754_rem_pio2+0x18c>
 800c212:	4642      	mov	r2, r8
 800c214:	464b      	mov	r3, r9
 800c216:	4630      	mov	r0, r6
 800c218:	4639      	mov	r1, r7
 800c21a:	f7f3 ffa5 	bl	8000168 <__aeabi_dsub>
 800c21e:	e9c4 0100 	strd	r0, r1, [r4]
 800c222:	e011      	b.n	800c248 <__ieee754_rem_pio2+0x1b0>
 800c224:	464b      	mov	r3, r9
 800c226:	4642      	mov	r2, r8
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f3 ff9c 	bl	8000168 <__aeabi_dsub>
 800c230:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c238:	ebaa 0303 	sub.w	r3, sl, r3
 800c23c:	2b10      	cmp	r3, #16
 800c23e:	dc1f      	bgt.n	800c280 <__ieee754_rem_pio2+0x1e8>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	e9c4 2300 	strd	r2, r3, [r4]
 800c248:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c24c:	4630      	mov	r0, r6
 800c24e:	4653      	mov	r3, sl
 800c250:	4639      	mov	r1, r7
 800c252:	f7f3 ff89 	bl	8000168 <__aeabi_dsub>
 800c256:	4642      	mov	r2, r8
 800c258:	464b      	mov	r3, r9
 800c25a:	f7f3 ff85 	bl	8000168 <__aeabi_dsub>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	f1bb 0f00 	cmp.w	fp, #0
 800c266:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c26a:	f6bf af4b 	bge.w	800c104 <__ieee754_rem_pio2+0x6c>
 800c26e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c272:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800c276:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c27a:	60e1      	str	r1, [r4, #12]
 800c27c:	426d      	negs	r5, r5
 800c27e:	e741      	b.n	800c104 <__ieee754_rem_pio2+0x6c>
 800c280:	a33f      	add	r3, pc, #252	; (adr r3, 800c380 <__ieee754_rem_pio2+0x2e8>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28a:	f7f4 f925 	bl	80004d8 <__aeabi_dmul>
 800c28e:	4680      	mov	r8, r0
 800c290:	4689      	mov	r9, r1
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4630      	mov	r0, r6
 800c298:	4639      	mov	r1, r7
 800c29a:	f7f3 ff65 	bl	8000168 <__aeabi_dsub>
 800c29e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	f7f3 ff5d 	bl	8000168 <__aeabi_dsub>
 800c2ae:	4642      	mov	r2, r8
 800c2b0:	464b      	mov	r3, r9
 800c2b2:	f7f3 ff59 	bl	8000168 <__aeabi_dsub>
 800c2b6:	a334      	add	r3, pc, #208	; (adr r3, 800c388 <__ieee754_rem_pio2+0x2f0>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c4:	f7f4 f908 	bl	80004d8 <__aeabi_dmul>
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	f7f3 ff4c 	bl	8000168 <__aeabi_dsub>
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	4689      	mov	r9, r1
 800c2d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2dc:	f7f3 ff44 	bl	8000168 <__aeabi_dsub>
 800c2e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2e4:	ebaa 0a03 	sub.w	sl, sl, r3
 800c2e8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800c2ec:	dc06      	bgt.n	800c2fc <__ieee754_rem_pio2+0x264>
 800c2ee:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	e9c4 2300 	strd	r2, r3, [r4]
 800c2fa:	e7a5      	b.n	800c248 <__ieee754_rem_pio2+0x1b0>
 800c2fc:	a326      	add	r3, pc, #152	; (adr r3, 800c398 <__ieee754_rem_pio2+0x300>)
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c306:	f7f4 f8e7 	bl	80004d8 <__aeabi_dmul>
 800c30a:	4680      	mov	r8, r0
 800c30c:	4689      	mov	r9, r1
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c316:	f7f3 ff27 	bl	8000168 <__aeabi_dsub>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4606      	mov	r6, r0
 800c320:	460f      	mov	r7, r1
 800c322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c326:	f7f3 ff1f 	bl	8000168 <__aeabi_dsub>
 800c32a:	4642      	mov	r2, r8
 800c32c:	464b      	mov	r3, r9
 800c32e:	f7f3 ff1b 	bl	8000168 <__aeabi_dsub>
 800c332:	a31b      	add	r3, pc, #108	; (adr r3, 800c3a0 <__ieee754_rem_pio2+0x308>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4680      	mov	r8, r0
 800c33a:	4689      	mov	r9, r1
 800c33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c340:	f7f4 f8ca 	bl	80004d8 <__aeabi_dmul>
 800c344:	4642      	mov	r2, r8
 800c346:	464b      	mov	r3, r9
 800c348:	f7f3 ff0e 	bl	8000168 <__aeabi_dsub>
 800c34c:	4680      	mov	r8, r0
 800c34e:	4689      	mov	r9, r1
 800c350:	e75f      	b.n	800c212 <__ieee754_rem_pio2+0x17a>
 800c352:	4a1b      	ldr	r2, [pc, #108]	; (800c3c0 <__ieee754_rem_pio2+0x328>)
 800c354:	4592      	cmp	sl, r2
 800c356:	dd35      	ble.n	800c3c4 <__ieee754_rem_pio2+0x32c>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	f7f3 ff04 	bl	8000168 <__aeabi_dsub>
 800c360:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c364:	e9c4 0100 	strd	r0, r1, [r4]
 800c368:	e6a6      	b.n	800c0b8 <__ieee754_rem_pio2+0x20>
 800c36a:	bf00      	nop
 800c36c:	f3af 8000 	nop.w
 800c370:	54400000 	.word	0x54400000
 800c374:	3ff921fb 	.word	0x3ff921fb
 800c378:	1a626331 	.word	0x1a626331
 800c37c:	3dd0b461 	.word	0x3dd0b461
 800c380:	1a600000 	.word	0x1a600000
 800c384:	3dd0b461 	.word	0x3dd0b461
 800c388:	2e037073 	.word	0x2e037073
 800c38c:	3ba3198a 	.word	0x3ba3198a
 800c390:	6dc9c883 	.word	0x6dc9c883
 800c394:	3fe45f30 	.word	0x3fe45f30
 800c398:	2e000000 	.word	0x2e000000
 800c39c:	3ba3198a 	.word	0x3ba3198a
 800c3a0:	252049c1 	.word	0x252049c1
 800c3a4:	397b839a 	.word	0x397b839a
 800c3a8:	3fe921fb 	.word	0x3fe921fb
 800c3ac:	4002d97b 	.word	0x4002d97b
 800c3b0:	3ff921fb 	.word	0x3ff921fb
 800c3b4:	413921fb 	.word	0x413921fb
 800c3b8:	3fe00000 	.word	0x3fe00000
 800c3bc:	0800d9f4 	.word	0x0800d9f4
 800c3c0:	7fefffff 	.word	0x7fefffff
 800c3c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c3c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c3cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c3d0:	460f      	mov	r7, r1
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	f7f4 fb30 	bl	8000a38 <__aeabi_d2iz>
 800c3d8:	f7f4 f814 	bl	8000404 <__aeabi_i2d>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3e8:	f7f3 febe 	bl	8000168 <__aeabi_dsub>
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	4b20      	ldr	r3, [pc, #128]	; (800c470 <__ieee754_rem_pio2+0x3d8>)
 800c3f0:	f7f4 f872 	bl	80004d8 <__aeabi_dmul>
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	f7f4 fb1e 	bl	8000a38 <__aeabi_d2iz>
 800c3fc:	f7f4 f802 	bl	8000404 <__aeabi_i2d>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4630      	mov	r0, r6
 800c406:	4639      	mov	r1, r7
 800c408:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c40c:	f7f3 feac 	bl	8000168 <__aeabi_dsub>
 800c410:	2200      	movs	r2, #0
 800c412:	4b17      	ldr	r3, [pc, #92]	; (800c470 <__ieee754_rem_pio2+0x3d8>)
 800c414:	f7f4 f860 	bl	80004d8 <__aeabi_dmul>
 800c418:	f04f 0803 	mov.w	r8, #3
 800c41c:	2600      	movs	r6, #0
 800c41e:	2700      	movs	r7, #0
 800c420:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c424:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c428:	4632      	mov	r2, r6
 800c42a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c42e:	463b      	mov	r3, r7
 800c430:	f108 3aff 	add.w	sl, r8, #4294967295
 800c434:	f7f4 fab8 	bl	80009a8 <__aeabi_dcmpeq>
 800c438:	b9b8      	cbnz	r0, 800c46a <__ieee754_rem_pio2+0x3d2>
 800c43a:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <__ieee754_rem_pio2+0x3dc>)
 800c43c:	462a      	mov	r2, r5
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	2302      	movs	r3, #2
 800c442:	4621      	mov	r1, r4
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	a806      	add	r0, sp, #24
 800c448:	4643      	mov	r3, r8
 800c44a:	f000 f97f 	bl	800c74c <__kernel_rem_pio2>
 800c44e:	f1bb 0f00 	cmp.w	fp, #0
 800c452:	4605      	mov	r5, r0
 800c454:	f6bf ae56 	bge.w	800c104 <__ieee754_rem_pio2+0x6c>
 800c458:	6863      	ldr	r3, [r4, #4]
 800c45a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c45e:	6063      	str	r3, [r4, #4]
 800c460:	68e3      	ldr	r3, [r4, #12]
 800c462:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c466:	60e3      	str	r3, [r4, #12]
 800c468:	e708      	b.n	800c27c <__ieee754_rem_pio2+0x1e4>
 800c46a:	46d0      	mov	r8, sl
 800c46c:	e7dc      	b.n	800c428 <__ieee754_rem_pio2+0x390>
 800c46e:	bf00      	nop
 800c470:	41700000 	.word	0x41700000
 800c474:	0800da74 	.word	0x0800da74

0800c478 <__ieee754_sqrt>:
 800c478:	4b54      	ldr	r3, [pc, #336]	; (800c5cc <__ieee754_sqrt+0x154>)
 800c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47e:	438b      	bics	r3, r1
 800c480:	4606      	mov	r6, r0
 800c482:	460d      	mov	r5, r1
 800c484:	460a      	mov	r2, r1
 800c486:	460c      	mov	r4, r1
 800c488:	d10f      	bne.n	800c4aa <__ieee754_sqrt+0x32>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	f7f4 f823 	bl	80004d8 <__aeabi_dmul>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4630      	mov	r0, r6
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f3 fe67 	bl	800016c <__adddf3>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460d      	mov	r5, r1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	dc0e      	bgt.n	800c4d0 <__ieee754_sqrt+0x58>
 800c4b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c4b6:	ea5c 0707 	orrs.w	r7, ip, r7
 800c4ba:	d0f2      	beq.n	800c4a2 <__ieee754_sqrt+0x2a>
 800c4bc:	b141      	cbz	r1, 800c4d0 <__ieee754_sqrt+0x58>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	f7f3 fe51 	bl	8000168 <__aeabi_dsub>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	f7f4 f92f 	bl	800072c <__aeabi_ddiv>
 800c4ce:	e7e6      	b.n	800c49e <__ieee754_sqrt+0x26>
 800c4d0:	1512      	asrs	r2, r2, #20
 800c4d2:	d074      	beq.n	800c5be <__ieee754_sqrt+0x146>
 800c4d4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c4d8:	07d5      	lsls	r5, r2, #31
 800c4da:	f04f 0500 	mov.w	r5, #0
 800c4de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4e2:	bf48      	it	mi
 800c4e4:	0fd9      	lsrmi	r1, r3, #31
 800c4e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c4ea:	bf44      	itt	mi
 800c4ec:	005b      	lslmi	r3, r3, #1
 800c4ee:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c4f2:	1051      	asrs	r1, r2, #1
 800c4f4:	0fda      	lsrs	r2, r3, #31
 800c4f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	2216      	movs	r2, #22
 800c4fe:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	1987      	adds	r7, r0, r6
 800c506:	42a7      	cmp	r7, r4
 800c508:	bfde      	ittt	le
 800c50a:	19b8      	addle	r0, r7, r6
 800c50c:	1be4      	suble	r4, r4, r7
 800c50e:	19ad      	addle	r5, r5, r6
 800c510:	0fdf      	lsrs	r7, r3, #31
 800c512:	3a01      	subs	r2, #1
 800c514:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c518:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c51c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c520:	d1f0      	bne.n	800c504 <__ieee754_sqrt+0x8c>
 800c522:	f04f 0c20 	mov.w	ip, #32
 800c526:	4696      	mov	lr, r2
 800c528:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c52c:	4284      	cmp	r4, r0
 800c52e:	eb06 070e 	add.w	r7, r6, lr
 800c532:	dc02      	bgt.n	800c53a <__ieee754_sqrt+0xc2>
 800c534:	d112      	bne.n	800c55c <__ieee754_sqrt+0xe4>
 800c536:	429f      	cmp	r7, r3
 800c538:	d810      	bhi.n	800c55c <__ieee754_sqrt+0xe4>
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	eb07 0e06 	add.w	lr, r7, r6
 800c540:	da42      	bge.n	800c5c8 <__ieee754_sqrt+0x150>
 800c542:	f1be 0f00 	cmp.w	lr, #0
 800c546:	db3f      	blt.n	800c5c8 <__ieee754_sqrt+0x150>
 800c548:	f100 0801 	add.w	r8, r0, #1
 800c54c:	1a24      	subs	r4, r4, r0
 800c54e:	4640      	mov	r0, r8
 800c550:	429f      	cmp	r7, r3
 800c552:	bf88      	it	hi
 800c554:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800c558:	1bdb      	subs	r3, r3, r7
 800c55a:	4432      	add	r2, r6
 800c55c:	0064      	lsls	r4, r4, #1
 800c55e:	f1bc 0c01 	subs.w	ip, ip, #1
 800c562:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c566:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c56a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c56e:	d1dd      	bne.n	800c52c <__ieee754_sqrt+0xb4>
 800c570:	4323      	orrs	r3, r4
 800c572:	d006      	beq.n	800c582 <__ieee754_sqrt+0x10a>
 800c574:	1c54      	adds	r4, r2, #1
 800c576:	bf0b      	itete	eq
 800c578:	4662      	moveq	r2, ip
 800c57a:	3201      	addne	r2, #1
 800c57c:	3501      	addeq	r5, #1
 800c57e:	f022 0201 	bicne.w	r2, r2, #1
 800c582:	106b      	asrs	r3, r5, #1
 800c584:	0852      	lsrs	r2, r2, #1
 800c586:	07e8      	lsls	r0, r5, #31
 800c588:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c58c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c590:	bf48      	it	mi
 800c592:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c596:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c59a:	4616      	mov	r6, r2
 800c59c:	e781      	b.n	800c4a2 <__ieee754_sqrt+0x2a>
 800c59e:	0adc      	lsrs	r4, r3, #11
 800c5a0:	3915      	subs	r1, #21
 800c5a2:	055b      	lsls	r3, r3, #21
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d0fa      	beq.n	800c59e <__ieee754_sqrt+0x126>
 800c5a8:	02e6      	lsls	r6, r4, #11
 800c5aa:	d50a      	bpl.n	800c5c2 <__ieee754_sqrt+0x14a>
 800c5ac:	f1c2 0020 	rsb	r0, r2, #32
 800c5b0:	fa23 f000 	lsr.w	r0, r3, r0
 800c5b4:	1e55      	subs	r5, r2, #1
 800c5b6:	4093      	lsls	r3, r2
 800c5b8:	4304      	orrs	r4, r0
 800c5ba:	1b4a      	subs	r2, r1, r5
 800c5bc:	e78a      	b.n	800c4d4 <__ieee754_sqrt+0x5c>
 800c5be:	4611      	mov	r1, r2
 800c5c0:	e7f0      	b.n	800c5a4 <__ieee754_sqrt+0x12c>
 800c5c2:	0064      	lsls	r4, r4, #1
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	e7ef      	b.n	800c5a8 <__ieee754_sqrt+0x130>
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	e7bf      	b.n	800c54c <__ieee754_sqrt+0xd4>
 800c5cc:	7ff00000 	.word	0x7ff00000

0800c5d0 <__kernel_cos>:
 800c5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c5d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c5dc:	4680      	mov	r8, r0
 800c5de:	460f      	mov	r7, r1
 800c5e0:	e9cd 2300 	strd	r2, r3, [sp]
 800c5e4:	da04      	bge.n	800c5f0 <__kernel_cos+0x20>
 800c5e6:	f7f4 fa27 	bl	8000a38 <__aeabi_d2iz>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f000 8086 	beq.w	800c6fc <__kernel_cos+0x12c>
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f3 ff6e 	bl	80004d8 <__aeabi_dmul>
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	4b4e      	ldr	r3, [pc, #312]	; (800c738 <__kernel_cos+0x168>)
 800c600:	4604      	mov	r4, r0
 800c602:	460d      	mov	r5, r1
 800c604:	f7f3 ff68 	bl	80004d8 <__aeabi_dmul>
 800c608:	a33f      	add	r3, pc, #252	; (adr r3, 800c708 <__kernel_cos+0x138>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	4682      	mov	sl, r0
 800c610:	468b      	mov	fp, r1
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f7f3 ff5f 	bl	80004d8 <__aeabi_dmul>
 800c61a:	a33d      	add	r3, pc, #244	; (adr r3, 800c710 <__kernel_cos+0x140>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fda4 	bl	800016c <__adddf3>
 800c624:	4622      	mov	r2, r4
 800c626:	462b      	mov	r3, r5
 800c628:	f7f3 ff56 	bl	80004d8 <__aeabi_dmul>
 800c62c:	a33a      	add	r3, pc, #232	; (adr r3, 800c718 <__kernel_cos+0x148>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fd99 	bl	8000168 <__aeabi_dsub>
 800c636:	4622      	mov	r2, r4
 800c638:	462b      	mov	r3, r5
 800c63a:	f7f3 ff4d 	bl	80004d8 <__aeabi_dmul>
 800c63e:	a338      	add	r3, pc, #224	; (adr r3, 800c720 <__kernel_cos+0x150>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 fd92 	bl	800016c <__adddf3>
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	f7f3 ff44 	bl	80004d8 <__aeabi_dmul>
 800c650:	a335      	add	r3, pc, #212	; (adr r3, 800c728 <__kernel_cos+0x158>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	f7f3 fd87 	bl	8000168 <__aeabi_dsub>
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	f7f3 ff3b 	bl	80004d8 <__aeabi_dmul>
 800c662:	a333      	add	r3, pc, #204	; (adr r3, 800c730 <__kernel_cos+0x160>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	f7f3 fd80 	bl	800016c <__adddf3>
 800c66c:	4622      	mov	r2, r4
 800c66e:	462b      	mov	r3, r5
 800c670:	f7f3 ff32 	bl	80004d8 <__aeabi_dmul>
 800c674:	4622      	mov	r2, r4
 800c676:	462b      	mov	r3, r5
 800c678:	f7f3 ff2e 	bl	80004d8 <__aeabi_dmul>
 800c67c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	4640      	mov	r0, r8
 800c686:	4639      	mov	r1, r7
 800c688:	f7f3 ff26 	bl	80004d8 <__aeabi_dmul>
 800c68c:	460b      	mov	r3, r1
 800c68e:	4602      	mov	r2, r0
 800c690:	4629      	mov	r1, r5
 800c692:	4620      	mov	r0, r4
 800c694:	f7f3 fd68 	bl	8000168 <__aeabi_dsub>
 800c698:	4b28      	ldr	r3, [pc, #160]	; (800c73c <__kernel_cos+0x16c>)
 800c69a:	4680      	mov	r8, r0
 800c69c:	429e      	cmp	r6, r3
 800c69e:	4689      	mov	r9, r1
 800c6a0:	dc0e      	bgt.n	800c6c0 <__kernel_cos+0xf0>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	4659      	mov	r1, fp
 800c6aa:	f7f3 fd5d 	bl	8000168 <__aeabi_dsub>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4922      	ldr	r1, [pc, #136]	; (800c740 <__kernel_cos+0x170>)
 800c6b6:	f7f3 fd57 	bl	8000168 <__aeabi_dsub>
 800c6ba:	b003      	add	sp, #12
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c0:	2400      	movs	r4, #0
 800c6c2:	4b20      	ldr	r3, [pc, #128]	; (800c744 <__kernel_cos+0x174>)
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	429e      	cmp	r6, r3
 800c6c8:	bfcc      	ite	gt
 800c6ca:	4d1f      	ldrgt	r5, [pc, #124]	; (800c748 <__kernel_cos+0x178>)
 800c6cc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c6d0:	462b      	mov	r3, r5
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	491a      	ldr	r1, [pc, #104]	; (800c740 <__kernel_cos+0x170>)
 800c6d6:	f7f3 fd47 	bl	8000168 <__aeabi_dsub>
 800c6da:	4622      	mov	r2, r4
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	4659      	mov	r1, fp
 800c6e6:	f7f3 fd3f 	bl	8000168 <__aeabi_dsub>
 800c6ea:	4642      	mov	r2, r8
 800c6ec:	464b      	mov	r3, r9
 800c6ee:	f7f3 fd3b 	bl	8000168 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	e7dc      	b.n	800c6b6 <__kernel_cos+0xe6>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	4910      	ldr	r1, [pc, #64]	; (800c740 <__kernel_cos+0x170>)
 800c700:	e7db      	b.n	800c6ba <__kernel_cos+0xea>
 800c702:	bf00      	nop
 800c704:	f3af 8000 	nop.w
 800c708:	be8838d4 	.word	0xbe8838d4
 800c70c:	bda8fae9 	.word	0xbda8fae9
 800c710:	bdb4b1c4 	.word	0xbdb4b1c4
 800c714:	3e21ee9e 	.word	0x3e21ee9e
 800c718:	809c52ad 	.word	0x809c52ad
 800c71c:	3e927e4f 	.word	0x3e927e4f
 800c720:	19cb1590 	.word	0x19cb1590
 800c724:	3efa01a0 	.word	0x3efa01a0
 800c728:	16c15177 	.word	0x16c15177
 800c72c:	3f56c16c 	.word	0x3f56c16c
 800c730:	5555554c 	.word	0x5555554c
 800c734:	3fa55555 	.word	0x3fa55555
 800c738:	3fe00000 	.word	0x3fe00000
 800c73c:	3fd33332 	.word	0x3fd33332
 800c740:	3ff00000 	.word	0x3ff00000
 800c744:	3fe90000 	.word	0x3fe90000
 800c748:	3fd20000 	.word	0x3fd20000

0800c74c <__kernel_rem_pio2>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c754:	9307      	str	r3, [sp, #28]
 800c756:	9104      	str	r1, [sp, #16]
 800c758:	4bbf      	ldr	r3, [pc, #764]	; (800ca58 <__kernel_rem_pio2+0x30c>)
 800c75a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c75c:	1ed4      	subs	r4, r2, #3
 800c75e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c762:	2500      	movs	r5, #0
 800c764:	9302      	str	r3, [sp, #8]
 800c766:	9b07      	ldr	r3, [sp, #28]
 800c768:	9008      	str	r0, [sp, #32]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	9306      	str	r3, [sp, #24]
 800c76e:	2318      	movs	r3, #24
 800c770:	fb94 f4f3 	sdiv	r4, r4, r3
 800c774:	f06f 0317 	mvn.w	r3, #23
 800c778:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c77c:	fb04 3303 	mla	r3, r4, r3, r3
 800c780:	eb03 0a02 	add.w	sl, r3, r2
 800c784:	9a06      	ldr	r2, [sp, #24]
 800c786:	9b02      	ldr	r3, [sp, #8]
 800c788:	1aa7      	subs	r7, r4, r2
 800c78a:	eb03 0802 	add.w	r8, r3, r2
 800c78e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c790:	2200      	movs	r2, #0
 800c792:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c796:	2300      	movs	r3, #0
 800c798:	ae1e      	add	r6, sp, #120	; 0x78
 800c79a:	4545      	cmp	r5, r8
 800c79c:	dd14      	ble.n	800c7c8 <__kernel_rem_pio2+0x7c>
 800c79e:	2600      	movs	r6, #0
 800c7a0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	429e      	cmp	r6, r3
 800c7a8:	dc39      	bgt.n	800c81e <__kernel_rem_pio2+0xd2>
 800c7aa:	9b08      	ldr	r3, [sp, #32]
 800c7ac:	f04f 0800 	mov.w	r8, #0
 800c7b0:	3b08      	subs	r3, #8
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	9b07      	ldr	r3, [sp, #28]
 800c7b6:	f04f 0900 	mov.w	r9, #0
 800c7ba:	199d      	adds	r5, r3, r6
 800c7bc:	ab20      	add	r3, sp, #128	; 0x80
 800c7be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c7c2:	9305      	str	r3, [sp, #20]
 800c7c4:	2700      	movs	r7, #0
 800c7c6:	e023      	b.n	800c810 <__kernel_rem_pio2+0xc4>
 800c7c8:	42ef      	cmn	r7, r5
 800c7ca:	d40b      	bmi.n	800c7e4 <__kernel_rem_pio2+0x98>
 800c7cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c7d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c7d4:	f7f3 fe16 	bl	8000404 <__aeabi_i2d>
 800c7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7dc:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	e7da      	b.n	800c79a <__kernel_rem_pio2+0x4e>
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	e7f8      	b.n	800c7dc <__kernel_rem_pio2+0x90>
 800c7ea:	9905      	ldr	r1, [sp, #20]
 800c7ec:	9d00      	ldr	r5, [sp, #0]
 800c7ee:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c7f2:	9105      	str	r1, [sp, #20]
 800c7f4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c7f8:	9500      	str	r5, [sp, #0]
 800c7fa:	f7f3 fe6d 	bl	80004d8 <__aeabi_dmul>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4640      	mov	r0, r8
 800c804:	4649      	mov	r1, r9
 800c806:	f7f3 fcb1 	bl	800016c <__adddf3>
 800c80a:	4680      	mov	r8, r0
 800c80c:	4689      	mov	r9, r1
 800c80e:	3701      	adds	r7, #1
 800c810:	9b06      	ldr	r3, [sp, #24]
 800c812:	429f      	cmp	r7, r3
 800c814:	dde9      	ble.n	800c7ea <__kernel_rem_pio2+0x9e>
 800c816:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c81a:	3601      	adds	r6, #1
 800c81c:	e7c2      	b.n	800c7a4 <__kernel_rem_pio2+0x58>
 800c81e:	9b02      	ldr	r3, [sp, #8]
 800c820:	aa0c      	add	r2, sp, #48	; 0x30
 800c822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c826:	930b      	str	r3, [sp, #44]	; 0x2c
 800c828:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c82a:	9f02      	ldr	r7, [sp, #8]
 800c82c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c830:	930a      	str	r3, [sp, #40]	; 0x28
 800c832:	2600      	movs	r6, #0
 800c834:	ab98      	add	r3, sp, #608	; 0x260
 800c836:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800c83a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c83e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c842:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c846:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c84a:	ab98      	add	r3, sp, #608	; 0x260
 800c84c:	445b      	add	r3, fp
 800c84e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800c852:	1bbb      	subs	r3, r7, r6
 800c854:	2b00      	cmp	r3, #0
 800c856:	dc71      	bgt.n	800c93c <__kernel_rem_pio2+0x1f0>
 800c858:	4652      	mov	r2, sl
 800c85a:	4640      	mov	r0, r8
 800c85c:	4649      	mov	r1, r9
 800c85e:	f000 fd8f 	bl	800d380 <scalbn>
 800c862:	2200      	movs	r2, #0
 800c864:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c868:	4604      	mov	r4, r0
 800c86a:	460d      	mov	r5, r1
 800c86c:	f7f3 fe34 	bl	80004d8 <__aeabi_dmul>
 800c870:	f000 fcfe 	bl	800d270 <floor>
 800c874:	2200      	movs	r2, #0
 800c876:	4b79      	ldr	r3, [pc, #484]	; (800ca5c <__kernel_rem_pio2+0x310>)
 800c878:	f7f3 fe2e 	bl	80004d8 <__aeabi_dmul>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4620      	mov	r0, r4
 800c882:	4629      	mov	r1, r5
 800c884:	f7f3 fc70 	bl	8000168 <__aeabi_dsub>
 800c888:	460d      	mov	r5, r1
 800c88a:	4604      	mov	r4, r0
 800c88c:	f7f4 f8d4 	bl	8000a38 <__aeabi_d2iz>
 800c890:	9005      	str	r0, [sp, #20]
 800c892:	f7f3 fdb7 	bl	8000404 <__aeabi_i2d>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4620      	mov	r0, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	f7f3 fc63 	bl	8000168 <__aeabi_dsub>
 800c8a2:	f1ba 0f00 	cmp.w	sl, #0
 800c8a6:	4680      	mov	r8, r0
 800c8a8:	4689      	mov	r9, r1
 800c8aa:	dd6c      	ble.n	800c986 <__kernel_rem_pio2+0x23a>
 800c8ac:	1e7a      	subs	r2, r7, #1
 800c8ae:	ab0c      	add	r3, sp, #48	; 0x30
 800c8b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c8b4:	f1ca 0118 	rsb	r1, sl, #24
 800c8b8:	9c05      	ldr	r4, [sp, #20]
 800c8ba:	fa40 f301 	asr.w	r3, r0, r1
 800c8be:	441c      	add	r4, r3
 800c8c0:	408b      	lsls	r3, r1
 800c8c2:	1ac0      	subs	r0, r0, r3
 800c8c4:	ab0c      	add	r3, sp, #48	; 0x30
 800c8c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c8ca:	f1ca 0317 	rsb	r3, sl, #23
 800c8ce:	9405      	str	r4, [sp, #20]
 800c8d0:	fa40 f303 	asr.w	r3, r0, r3
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	dd62      	ble.n	800c9a2 <__kernel_rem_pio2+0x256>
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	9b05      	ldr	r3, [sp, #20]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	9305      	str	r3, [sp, #20]
 800c8ea:	4297      	cmp	r7, r2
 800c8ec:	f300 809f 	bgt.w	800ca2e <__kernel_rem_pio2+0x2e2>
 800c8f0:	f1ba 0f00 	cmp.w	sl, #0
 800c8f4:	dd07      	ble.n	800c906 <__kernel_rem_pio2+0x1ba>
 800c8f6:	f1ba 0f01 	cmp.w	sl, #1
 800c8fa:	f000 80bb 	beq.w	800ca74 <__kernel_rem_pio2+0x328>
 800c8fe:	f1ba 0f02 	cmp.w	sl, #2
 800c902:	f000 80c1 	beq.w	800ca88 <__kernel_rem_pio2+0x33c>
 800c906:	9b00      	ldr	r3, [sp, #0]
 800c908:	2b02      	cmp	r3, #2
 800c90a:	d14a      	bne.n	800c9a2 <__kernel_rem_pio2+0x256>
 800c90c:	4642      	mov	r2, r8
 800c90e:	464b      	mov	r3, r9
 800c910:	2000      	movs	r0, #0
 800c912:	4953      	ldr	r1, [pc, #332]	; (800ca60 <__kernel_rem_pio2+0x314>)
 800c914:	f7f3 fc28 	bl	8000168 <__aeabi_dsub>
 800c918:	4680      	mov	r8, r0
 800c91a:	4689      	mov	r9, r1
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	d040      	beq.n	800c9a2 <__kernel_rem_pio2+0x256>
 800c920:	4652      	mov	r2, sl
 800c922:	2000      	movs	r0, #0
 800c924:	494e      	ldr	r1, [pc, #312]	; (800ca60 <__kernel_rem_pio2+0x314>)
 800c926:	f000 fd2b 	bl	800d380 <scalbn>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fc19 	bl	8000168 <__aeabi_dsub>
 800c936:	4680      	mov	r8, r0
 800c938:	4689      	mov	r9, r1
 800c93a:	e032      	b.n	800c9a2 <__kernel_rem_pio2+0x256>
 800c93c:	2200      	movs	r2, #0
 800c93e:	4b49      	ldr	r3, [pc, #292]	; (800ca64 <__kernel_rem_pio2+0x318>)
 800c940:	4640      	mov	r0, r8
 800c942:	4649      	mov	r1, r9
 800c944:	f7f3 fdc8 	bl	80004d8 <__aeabi_dmul>
 800c948:	f7f4 f876 	bl	8000a38 <__aeabi_d2iz>
 800c94c:	f7f3 fd5a 	bl	8000404 <__aeabi_i2d>
 800c950:	2200      	movs	r2, #0
 800c952:	4b45      	ldr	r3, [pc, #276]	; (800ca68 <__kernel_rem_pio2+0x31c>)
 800c954:	e9cd 0100 	strd	r0, r1, [sp]
 800c958:	f7f3 fdbe 	bl	80004d8 <__aeabi_dmul>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f3 fc00 	bl	8000168 <__aeabi_dsub>
 800c968:	f7f4 f866 	bl	8000a38 <__aeabi_d2iz>
 800c96c:	ab0c      	add	r3, sp, #48	; 0x30
 800c96e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c972:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c97a:	f7f3 fbf7 	bl	800016c <__adddf3>
 800c97e:	3601      	adds	r6, #1
 800c980:	4680      	mov	r8, r0
 800c982:	4689      	mov	r9, r1
 800c984:	e765      	b.n	800c852 <__kernel_rem_pio2+0x106>
 800c986:	d105      	bne.n	800c994 <__kernel_rem_pio2+0x248>
 800c988:	1e7b      	subs	r3, r7, #1
 800c98a:	aa0c      	add	r2, sp, #48	; 0x30
 800c98c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c990:	15c3      	asrs	r3, r0, #23
 800c992:	e79f      	b.n	800c8d4 <__kernel_rem_pio2+0x188>
 800c994:	2200      	movs	r2, #0
 800c996:	4b35      	ldr	r3, [pc, #212]	; (800ca6c <__kernel_rem_pio2+0x320>)
 800c998:	f7f4 f824 	bl	80009e4 <__aeabi_dcmpge>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d143      	bne.n	800ca28 <__kernel_rem_pio2+0x2dc>
 800c9a0:	9000      	str	r0, [sp, #0]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f3 fffd 	bl	80009a8 <__aeabi_dcmpeq>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f000 80c3 	beq.w	800cb3a <__kernel_rem_pio2+0x3ee>
 800c9b4:	1e7c      	subs	r4, r7, #1
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	9902      	ldr	r1, [sp, #8]
 800c9bc:	428b      	cmp	r3, r1
 800c9be:	da6a      	bge.n	800ca96 <__kernel_rem_pio2+0x34a>
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	f000 8084 	beq.w	800cace <__kernel_rem_pio2+0x382>
 800c9c6:	ab0c      	add	r3, sp, #48	; 0x30
 800c9c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 80b0 	beq.w	800cb36 <__kernel_rem_pio2+0x3ea>
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4921      	ldr	r1, [pc, #132]	; (800ca60 <__kernel_rem_pio2+0x314>)
 800c9dc:	f000 fcd0 	bl	800d380 <scalbn>
 800c9e0:	4625      	mov	r5, r4
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460f      	mov	r7, r1
 800c9e6:	f04f 0a00 	mov.w	sl, #0
 800c9ea:	00e3      	lsls	r3, r4, #3
 800c9ec:	aa98      	add	r2, sp, #608	; 0x260
 800c9ee:	eb02 0803 	add.w	r8, r2, r3
 800c9f2:	f8df b070 	ldr.w	fp, [pc, #112]	; 800ca64 <__kernel_rem_pio2+0x318>
 800c9f6:	9306      	str	r3, [sp, #24]
 800c9f8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	f280 80d2 	bge.w	800cba6 <__kernel_rem_pio2+0x45a>
 800ca02:	2500      	movs	r5, #0
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	ab98      	add	r3, sp, #608	; 0x260
 800ca08:	189e      	adds	r6, r3, r2
 800ca0a:	3ea8      	subs	r6, #168	; 0xa8
 800ca0c:	1b63      	subs	r3, r4, r5
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f2c0 80f9 	blt.w	800cc06 <__kernel_rem_pio2+0x4ba>
 800ca14:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800ca70 <__kernel_rem_pio2+0x324>
 800ca18:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800ca1c:	f04f 0a00 	mov.w	sl, #0
 800ca20:	f04f 0b00 	mov.w	fp, #0
 800ca24:	2700      	movs	r7, #0
 800ca26:	e0e2      	b.n	800cbee <__kernel_rem_pio2+0x4a2>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	e756      	b.n	800c8dc <__kernel_rem_pio2+0x190>
 800ca2e:	ab0c      	add	r3, sp, #48	; 0x30
 800ca30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca34:	b94c      	cbnz	r4, 800ca4a <__kernel_rem_pio2+0x2fe>
 800ca36:	b12b      	cbz	r3, 800ca44 <__kernel_rem_pio2+0x2f8>
 800ca38:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ca3c:	a80c      	add	r0, sp, #48	; 0x30
 800ca3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ca42:	2301      	movs	r3, #1
 800ca44:	3201      	adds	r2, #1
 800ca46:	461c      	mov	r4, r3
 800ca48:	e74f      	b.n	800c8ea <__kernel_rem_pio2+0x19e>
 800ca4a:	1acb      	subs	r3, r1, r3
 800ca4c:	a80c      	add	r0, sp, #48	; 0x30
 800ca4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ca52:	4623      	mov	r3, r4
 800ca54:	e7f6      	b.n	800ca44 <__kernel_rem_pio2+0x2f8>
 800ca56:	bf00      	nop
 800ca58:	0800dbc0 	.word	0x0800dbc0
 800ca5c:	40200000 	.word	0x40200000
 800ca60:	3ff00000 	.word	0x3ff00000
 800ca64:	3e700000 	.word	0x3e700000
 800ca68:	41700000 	.word	0x41700000
 800ca6c:	3fe00000 	.word	0x3fe00000
 800ca70:	0800db78 	.word	0x0800db78
 800ca74:	1e7a      	subs	r2, r7, #1
 800ca76:	ab0c      	add	r3, sp, #48	; 0x30
 800ca78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca80:	a90c      	add	r1, sp, #48	; 0x30
 800ca82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ca86:	e73e      	b.n	800c906 <__kernel_rem_pio2+0x1ba>
 800ca88:	1e7a      	subs	r2, r7, #1
 800ca8a:	ab0c      	add	r3, sp, #48	; 0x30
 800ca8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca94:	e7f4      	b.n	800ca80 <__kernel_rem_pio2+0x334>
 800ca96:	a90c      	add	r1, sp, #48	; 0x30
 800ca98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	e78b      	b.n	800c9ba <__kernel_rem_pio2+0x26e>
 800caa2:	3401      	adds	r4, #1
 800caa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800caa8:	2a00      	cmp	r2, #0
 800caaa:	d0fa      	beq.n	800caa2 <__kernel_rem_pio2+0x356>
 800caac:	ab98      	add	r3, sp, #608	; 0x260
 800caae:	449b      	add	fp, r3
 800cab0:	9b07      	ldr	r3, [sp, #28]
 800cab2:	1c7e      	adds	r6, r7, #1
 800cab4:	19dd      	adds	r5, r3, r7
 800cab6:	ab98      	add	r3, sp, #608	; 0x260
 800cab8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cabc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800cac0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800cac4:	443c      	add	r4, r7
 800cac6:	42b4      	cmp	r4, r6
 800cac8:	da04      	bge.n	800cad4 <__kernel_rem_pio2+0x388>
 800caca:	4627      	mov	r7, r4
 800cacc:	e6b1      	b.n	800c832 <__kernel_rem_pio2+0xe6>
 800cace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad0:	2401      	movs	r4, #1
 800cad2:	e7e7      	b.n	800caa4 <__kernel_rem_pio2+0x358>
 800cad4:	f105 0308 	add.w	r3, r5, #8
 800cad8:	9309      	str	r3, [sp, #36]	; 0x24
 800cada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cadc:	2700      	movs	r7, #0
 800cade:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cae2:	f7f3 fc8f 	bl	8000404 <__aeabi_i2d>
 800cae6:	f04f 0800 	mov.w	r8, #0
 800caea:	f04f 0900 	mov.w	r9, #0
 800caee:	9b08      	ldr	r3, [sp, #32]
 800caf0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800caf4:	3b08      	subs	r3, #8
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	f105 0310 	add.w	r3, r5, #16
 800cafc:	9305      	str	r3, [sp, #20]
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	429f      	cmp	r7, r3
 800cb02:	dd04      	ble.n	800cb0e <__kernel_rem_pio2+0x3c2>
 800cb04:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800cb08:	3601      	adds	r6, #1
 800cb0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cb0c:	e7db      	b.n	800cac6 <__kernel_rem_pio2+0x37a>
 800cb0e:	9905      	ldr	r1, [sp, #20]
 800cb10:	9d00      	ldr	r5, [sp, #0]
 800cb12:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cb16:	9105      	str	r1, [sp, #20]
 800cb18:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800cb1c:	9500      	str	r5, [sp, #0]
 800cb1e:	f7f3 fcdb 	bl	80004d8 <__aeabi_dmul>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4640      	mov	r0, r8
 800cb28:	4649      	mov	r1, r9
 800cb2a:	f7f3 fb1f 	bl	800016c <__adddf3>
 800cb2e:	3701      	adds	r7, #1
 800cb30:	4680      	mov	r8, r0
 800cb32:	4689      	mov	r9, r1
 800cb34:	e7e3      	b.n	800cafe <__kernel_rem_pio2+0x3b2>
 800cb36:	3c01      	subs	r4, #1
 800cb38:	e745      	b.n	800c9c6 <__kernel_rem_pio2+0x27a>
 800cb3a:	f1ca 0200 	rsb	r2, sl, #0
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4649      	mov	r1, r9
 800cb42:	f000 fc1d 	bl	800d380 <scalbn>
 800cb46:	2200      	movs	r2, #0
 800cb48:	4ba3      	ldr	r3, [pc, #652]	; (800cdd8 <__kernel_rem_pio2+0x68c>)
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	f7f3 ff49 	bl	80009e4 <__aeabi_dcmpge>
 800cb52:	b1f8      	cbz	r0, 800cb94 <__kernel_rem_pio2+0x448>
 800cb54:	2200      	movs	r2, #0
 800cb56:	4ba1      	ldr	r3, [pc, #644]	; (800cddc <__kernel_rem_pio2+0x690>)
 800cb58:	4620      	mov	r0, r4
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f7f3 fcbc 	bl	80004d8 <__aeabi_dmul>
 800cb60:	f7f3 ff6a 	bl	8000a38 <__aeabi_d2iz>
 800cb64:	4606      	mov	r6, r0
 800cb66:	f7f3 fc4d 	bl	8000404 <__aeabi_i2d>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4b9a      	ldr	r3, [pc, #616]	; (800cdd8 <__kernel_rem_pio2+0x68c>)
 800cb6e:	f7f3 fcb3 	bl	80004d8 <__aeabi_dmul>
 800cb72:	460b      	mov	r3, r1
 800cb74:	4602      	mov	r2, r0
 800cb76:	4629      	mov	r1, r5
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f7f3 faf5 	bl	8000168 <__aeabi_dsub>
 800cb7e:	f7f3 ff5b 	bl	8000a38 <__aeabi_d2iz>
 800cb82:	1c7c      	adds	r4, r7, #1
 800cb84:	ab0c      	add	r3, sp, #48	; 0x30
 800cb86:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cb8a:	f10a 0a18 	add.w	sl, sl, #24
 800cb8e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800cb92:	e720      	b.n	800c9d6 <__kernel_rem_pio2+0x28a>
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 ff4e 	bl	8000a38 <__aeabi_d2iz>
 800cb9c:	ab0c      	add	r3, sp, #48	; 0x30
 800cb9e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cba2:	463c      	mov	r4, r7
 800cba4:	e717      	b.n	800c9d6 <__kernel_rem_pio2+0x28a>
 800cba6:	ab0c      	add	r3, sp, #48	; 0x30
 800cba8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbac:	f7f3 fc2a 	bl	8000404 <__aeabi_i2d>
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	463b      	mov	r3, r7
 800cbb4:	f7f3 fc90 	bl	80004d8 <__aeabi_dmul>
 800cbb8:	4652      	mov	r2, sl
 800cbba:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cbbe:	465b      	mov	r3, fp
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 fc88 	bl	80004d8 <__aeabi_dmul>
 800cbc8:	3d01      	subs	r5, #1
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460f      	mov	r7, r1
 800cbce:	e715      	b.n	800c9fc <__kernel_rem_pio2+0x2b0>
 800cbd0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800cbd4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cbd8:	f7f3 fc7e 	bl	80004d8 <__aeabi_dmul>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4659      	mov	r1, fp
 800cbe4:	f7f3 fac2 	bl	800016c <__adddf3>
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	3701      	adds	r7, #1
 800cbee:	9b02      	ldr	r3, [sp, #8]
 800cbf0:	429f      	cmp	r7, r3
 800cbf2:	dc01      	bgt.n	800cbf8 <__kernel_rem_pio2+0x4ac>
 800cbf4:	42bd      	cmp	r5, r7
 800cbf6:	daeb      	bge.n	800cbd0 <__kernel_rem_pio2+0x484>
 800cbf8:	ab48      	add	r3, sp, #288	; 0x120
 800cbfa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cbfe:	e9c3 ab00 	strd	sl, fp, [r3]
 800cc02:	3501      	adds	r5, #1
 800cc04:	e702      	b.n	800ca0c <__kernel_rem_pio2+0x2c0>
 800cc06:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d86c      	bhi.n	800cce6 <__kernel_rem_pio2+0x59a>
 800cc0c:	e8df f003 	tbb	[pc, r3]
 800cc10:	022f2f59 	.word	0x022f2f59
 800cc14:	9a06      	ldr	r2, [sp, #24]
 800cc16:	ab48      	add	r3, sp, #288	; 0x120
 800cc18:	189d      	adds	r5, r3, r2
 800cc1a:	46aa      	mov	sl, r5
 800cc1c:	46a3      	mov	fp, r4
 800cc1e:	f1bb 0f00 	cmp.w	fp, #0
 800cc22:	f300 8087 	bgt.w	800cd34 <__kernel_rem_pio2+0x5e8>
 800cc26:	46a2      	mov	sl, r4
 800cc28:	f1ba 0f01 	cmp.w	sl, #1
 800cc2c:	f300 809f 	bgt.w	800cd6e <__kernel_rem_pio2+0x622>
 800cc30:	2700      	movs	r7, #0
 800cc32:	463e      	mov	r6, r7
 800cc34:	9d06      	ldr	r5, [sp, #24]
 800cc36:	ab48      	add	r3, sp, #288	; 0x120
 800cc38:	3508      	adds	r5, #8
 800cc3a:	441d      	add	r5, r3
 800cc3c:	2c01      	cmp	r4, #1
 800cc3e:	f300 80b3 	bgt.w	800cda8 <__kernel_rem_pio2+0x65c>
 800cc42:	9b00      	ldr	r3, [sp, #0]
 800cc44:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800cc46:	9849      	ldr	r0, [sp, #292]	; 0x124
 800cc48:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800cc4a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 80b5 	bne.w	800cdbc <__kernel_rem_pio2+0x670>
 800cc52:	4603      	mov	r3, r0
 800cc54:	462a      	mov	r2, r5
 800cc56:	9804      	ldr	r0, [sp, #16]
 800cc58:	e9c0 2300 	strd	r2, r3, [r0]
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	460b      	mov	r3, r1
 800cc60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc64:	463a      	mov	r2, r7
 800cc66:	4633      	mov	r3, r6
 800cc68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cc6c:	e03b      	b.n	800cce6 <__kernel_rem_pio2+0x59a>
 800cc6e:	f04f 0c00 	mov.w	ip, #0
 800cc72:	4626      	mov	r6, r4
 800cc74:	4667      	mov	r7, ip
 800cc76:	9d06      	ldr	r5, [sp, #24]
 800cc78:	ab48      	add	r3, sp, #288	; 0x120
 800cc7a:	3508      	adds	r5, #8
 800cc7c:	441d      	add	r5, r3
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	da42      	bge.n	800cd08 <__kernel_rem_pio2+0x5bc>
 800cc82:	9b00      	ldr	r3, [sp, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d049      	beq.n	800cd1c <__kernel_rem_pio2+0x5d0>
 800cc88:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800cc8c:	4662      	mov	r2, ip
 800cc8e:	460b      	mov	r3, r1
 800cc90:	9904      	ldr	r1, [sp, #16]
 800cc92:	2601      	movs	r6, #1
 800cc94:	e9c1 2300 	strd	r2, r3, [r1]
 800cc98:	a948      	add	r1, sp, #288	; 0x120
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca0:	f7f3 fa62 	bl	8000168 <__aeabi_dsub>
 800cca4:	4684      	mov	ip, r0
 800cca6:	460f      	mov	r7, r1
 800cca8:	ad48      	add	r5, sp, #288	; 0x120
 800ccaa:	42b4      	cmp	r4, r6
 800ccac:	da38      	bge.n	800cd20 <__kernel_rem_pio2+0x5d4>
 800ccae:	9b00      	ldr	r3, [sp, #0]
 800ccb0:	b10b      	cbz	r3, 800ccb6 <__kernel_rem_pio2+0x56a>
 800ccb2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ccb6:	4662      	mov	r2, ip
 800ccb8:	463b      	mov	r3, r7
 800ccba:	9904      	ldr	r1, [sp, #16]
 800ccbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ccc0:	e011      	b.n	800cce6 <__kernel_rem_pio2+0x59a>
 800ccc2:	2700      	movs	r7, #0
 800ccc4:	463d      	mov	r5, r7
 800ccc6:	9b06      	ldr	r3, [sp, #24]
 800ccc8:	aa98      	add	r2, sp, #608	; 0x260
 800ccca:	4413      	add	r3, r2
 800cccc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800ccd0:	2c00      	cmp	r4, #0
 800ccd2:	da0f      	bge.n	800ccf4 <__kernel_rem_pio2+0x5a8>
 800ccd4:	9b00      	ldr	r3, [sp, #0]
 800ccd6:	b10b      	cbz	r3, 800ccdc <__kernel_rem_pio2+0x590>
 800ccd8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800ccdc:	463a      	mov	r2, r7
 800ccde:	462b      	mov	r3, r5
 800cce0:	9904      	ldr	r1, [sp, #16]
 800cce2:	e9c1 2300 	strd	r2, r3, [r1]
 800cce6:	9b05      	ldr	r3, [sp, #20]
 800cce8:	f003 0007 	and.w	r0, r3, #7
 800ccec:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7f3 fa36 	bl	800016c <__adddf3>
 800cd00:	3c01      	subs	r4, #1
 800cd02:	4607      	mov	r7, r0
 800cd04:	460d      	mov	r5, r1
 800cd06:	e7e3      	b.n	800ccd0 <__kernel_rem_pio2+0x584>
 800cd08:	4660      	mov	r0, ip
 800cd0a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cd0e:	4639      	mov	r1, r7
 800cd10:	f7f3 fa2c 	bl	800016c <__adddf3>
 800cd14:	3e01      	subs	r6, #1
 800cd16:	4684      	mov	ip, r0
 800cd18:	460f      	mov	r7, r1
 800cd1a:	e7b0      	b.n	800cc7e <__kernel_rem_pio2+0x532>
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	e7b5      	b.n	800cc8c <__kernel_rem_pio2+0x540>
 800cd20:	4660      	mov	r0, ip
 800cd22:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cd26:	4639      	mov	r1, r7
 800cd28:	f7f3 fa20 	bl	800016c <__adddf3>
 800cd2c:	3601      	adds	r6, #1
 800cd2e:	4684      	mov	ip, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	e7ba      	b.n	800ccaa <__kernel_rem_pio2+0x55e>
 800cd34:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800cd38:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	4649      	mov	r1, r9
 800cd40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd44:	f7f3 fa12 	bl	800016c <__adddf3>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	460f      	mov	r7, r1
 800cd50:	4640      	mov	r0, r8
 800cd52:	4649      	mov	r1, r9
 800cd54:	f7f3 fa08 	bl	8000168 <__aeabi_dsub>
 800cd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd5c:	f7f3 fa06 	bl	800016c <__adddf3>
 800cd60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd68:	e9ca 6700 	strd	r6, r7, [sl]
 800cd6c:	e757      	b.n	800cc1e <__kernel_rem_pio2+0x4d2>
 800cd6e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800cd72:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800cd76:	4630      	mov	r0, r6
 800cd78:	4639      	mov	r1, r7
 800cd7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd7e:	f7f3 f9f5 	bl	800016c <__adddf3>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4680      	mov	r8, r0
 800cd88:	4689      	mov	r9, r1
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	f7f3 f9eb 	bl	8000168 <__aeabi_dsub>
 800cd92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd96:	f7f3 f9e9 	bl	800016c <__adddf3>
 800cd9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd9e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cda2:	e9c5 8900 	strd	r8, r9, [r5]
 800cda6:	e73f      	b.n	800cc28 <__kernel_rem_pio2+0x4dc>
 800cda8:	4638      	mov	r0, r7
 800cdaa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cdae:	4631      	mov	r1, r6
 800cdb0:	f7f3 f9dc 	bl	800016c <__adddf3>
 800cdb4:	3c01      	subs	r4, #1
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	460e      	mov	r6, r1
 800cdba:	e73f      	b.n	800cc3c <__kernel_rem_pio2+0x4f0>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cdc2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cdc6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cdca:	601d      	str	r5, [r3, #0]
 800cdcc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cdd0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cdd4:	615e      	str	r6, [r3, #20]
 800cdd6:	e786      	b.n	800cce6 <__kernel_rem_pio2+0x59a>
 800cdd8:	41700000 	.word	0x41700000
 800cddc:	3e700000 	.word	0x3e700000

0800cde0 <__kernel_sin>:
 800cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	b086      	sub	sp, #24
 800cde6:	e9cd 2300 	strd	r2, r3, [sp]
 800cdea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cdf2:	4682      	mov	sl, r0
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cdf8:	da03      	bge.n	800ce02 <__kernel_sin+0x22>
 800cdfa:	f7f3 fe1d 	bl	8000a38 <__aeabi_d2iz>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d050      	beq.n	800cea4 <__kernel_sin+0xc4>
 800ce02:	4652      	mov	r2, sl
 800ce04:	4623      	mov	r3, r4
 800ce06:	4650      	mov	r0, sl
 800ce08:	4621      	mov	r1, r4
 800ce0a:	f7f3 fb65 	bl	80004d8 <__aeabi_dmul>
 800ce0e:	4606      	mov	r6, r0
 800ce10:	460f      	mov	r7, r1
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4650      	mov	r0, sl
 800ce18:	4621      	mov	r1, r4
 800ce1a:	f7f3 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ce1e:	a33e      	add	r3, pc, #248	; (adr r3, 800cf18 <__kernel_sin+0x138>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	4680      	mov	r8, r0
 800ce26:	4689      	mov	r9, r1
 800ce28:	4630      	mov	r0, r6
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	f7f3 fb54 	bl	80004d8 <__aeabi_dmul>
 800ce30:	a33b      	add	r3, pc, #236	; (adr r3, 800cf20 <__kernel_sin+0x140>)
 800ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce36:	f7f3 f997 	bl	8000168 <__aeabi_dsub>
 800ce3a:	4632      	mov	r2, r6
 800ce3c:	463b      	mov	r3, r7
 800ce3e:	f7f3 fb4b 	bl	80004d8 <__aeabi_dmul>
 800ce42:	a339      	add	r3, pc, #228	; (adr r3, 800cf28 <__kernel_sin+0x148>)
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	f7f3 f990 	bl	800016c <__adddf3>
 800ce4c:	4632      	mov	r2, r6
 800ce4e:	463b      	mov	r3, r7
 800ce50:	f7f3 fb42 	bl	80004d8 <__aeabi_dmul>
 800ce54:	a336      	add	r3, pc, #216	; (adr r3, 800cf30 <__kernel_sin+0x150>)
 800ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5a:	f7f3 f985 	bl	8000168 <__aeabi_dsub>
 800ce5e:	4632      	mov	r2, r6
 800ce60:	463b      	mov	r3, r7
 800ce62:	f7f3 fb39 	bl	80004d8 <__aeabi_dmul>
 800ce66:	a334      	add	r3, pc, #208	; (adr r3, 800cf38 <__kernel_sin+0x158>)
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	f7f3 f97e 	bl	800016c <__adddf3>
 800ce70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce74:	b9dd      	cbnz	r5, 800ceae <__kernel_sin+0xce>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	4639      	mov	r1, r7
 800ce7e:	f7f3 fb2b 	bl	80004d8 <__aeabi_dmul>
 800ce82:	a32f      	add	r3, pc, #188	; (adr r3, 800cf40 <__kernel_sin+0x160>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f7f3 f96e 	bl	8000168 <__aeabi_dsub>
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	f7f3 fb22 	bl	80004d8 <__aeabi_dmul>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	4650      	mov	r0, sl
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	f7f3 f966 	bl	800016c <__adddf3>
 800cea0:	4682      	mov	sl, r0
 800cea2:	460c      	mov	r4, r1
 800cea4:	4650      	mov	r0, sl
 800cea6:	4621      	mov	r1, r4
 800cea8:	b006      	add	sp, #24
 800ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceae:	2200      	movs	r2, #0
 800ceb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceb4:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <__kernel_sin+0x168>)
 800ceb6:	f7f3 fb0f 	bl	80004d8 <__aeabi_dmul>
 800ceba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cec2:	4640      	mov	r0, r8
 800cec4:	4649      	mov	r1, r9
 800cec6:	f7f3 fb07 	bl	80004d8 <__aeabi_dmul>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ced2:	f7f3 f949 	bl	8000168 <__aeabi_dsub>
 800ced6:	4632      	mov	r2, r6
 800ced8:	463b      	mov	r3, r7
 800ceda:	f7f3 fafd 	bl	80004d8 <__aeabi_dmul>
 800cede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cee2:	f7f3 f941 	bl	8000168 <__aeabi_dsub>
 800cee6:	a316      	add	r3, pc, #88	; (adr r3, 800cf40 <__kernel_sin+0x160>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	4606      	mov	r6, r0
 800ceee:	460f      	mov	r7, r1
 800cef0:	4640      	mov	r0, r8
 800cef2:	4649      	mov	r1, r9
 800cef4:	f7f3 faf0 	bl	80004d8 <__aeabi_dmul>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 f934 	bl	800016c <__adddf3>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4650      	mov	r0, sl
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	f7f3 f92c 	bl	8000168 <__aeabi_dsub>
 800cf10:	e7c6      	b.n	800cea0 <__kernel_sin+0xc0>
 800cf12:	bf00      	nop
 800cf14:	f3af 8000 	nop.w
 800cf18:	5acfd57c 	.word	0x5acfd57c
 800cf1c:	3de5d93a 	.word	0x3de5d93a
 800cf20:	8a2b9ceb 	.word	0x8a2b9ceb
 800cf24:	3e5ae5e6 	.word	0x3e5ae5e6
 800cf28:	57b1fe7d 	.word	0x57b1fe7d
 800cf2c:	3ec71de3 	.word	0x3ec71de3
 800cf30:	19c161d5 	.word	0x19c161d5
 800cf34:	3f2a01a0 	.word	0x3f2a01a0
 800cf38:	1110f8a6 	.word	0x1110f8a6
 800cf3c:	3f811111 	.word	0x3f811111
 800cf40:	55555549 	.word	0x55555549
 800cf44:	3fc55555 	.word	0x3fc55555
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <atan>:
 800cf50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	4bb6      	ldr	r3, [pc, #728]	; (800d230 <atan+0x2e0>)
 800cf56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf5a:	429e      	cmp	r6, r3
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	460d      	mov	r5, r1
 800cf60:	468b      	mov	fp, r1
 800cf62:	dd17      	ble.n	800cf94 <atan+0x44>
 800cf64:	4bb3      	ldr	r3, [pc, #716]	; (800d234 <atan+0x2e4>)
 800cf66:	429e      	cmp	r6, r3
 800cf68:	dc01      	bgt.n	800cf6e <atan+0x1e>
 800cf6a:	d109      	bne.n	800cf80 <atan+0x30>
 800cf6c:	b140      	cbz	r0, 800cf80 <atan+0x30>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	4620      	mov	r0, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	f7f3 f8f9 	bl	800016c <__adddf3>
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	460d      	mov	r5, r1
 800cf7e:	e005      	b.n	800cf8c <atan+0x3c>
 800cf80:	f1bb 0f00 	cmp.w	fp, #0
 800cf84:	4cac      	ldr	r4, [pc, #688]	; (800d238 <atan+0x2e8>)
 800cf86:	f340 8121 	ble.w	800d1cc <atan+0x27c>
 800cf8a:	4dac      	ldr	r5, [pc, #688]	; (800d23c <atan+0x2ec>)
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf94:	4baa      	ldr	r3, [pc, #680]	; (800d240 <atan+0x2f0>)
 800cf96:	429e      	cmp	r6, r3
 800cf98:	dc11      	bgt.n	800cfbe <atan+0x6e>
 800cf9a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cf9e:	429e      	cmp	r6, r3
 800cfa0:	dc0a      	bgt.n	800cfb8 <atan+0x68>
 800cfa2:	a38b      	add	r3, pc, #556	; (adr r3, 800d1d0 <atan+0x280>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f7f3 f8e0 	bl	800016c <__adddf3>
 800cfac:	2200      	movs	r2, #0
 800cfae:	4ba5      	ldr	r3, [pc, #660]	; (800d244 <atan+0x2f4>)
 800cfb0:	f7f3 fd22 	bl	80009f8 <__aeabi_dcmpgt>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1e9      	bne.n	800cf8c <atan+0x3c>
 800cfb8:	f04f 3aff 	mov.w	sl, #4294967295
 800cfbc:	e027      	b.n	800d00e <atan+0xbe>
 800cfbe:	f000 f951 	bl	800d264 <fabs>
 800cfc2:	4ba1      	ldr	r3, [pc, #644]	; (800d248 <atan+0x2f8>)
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	429e      	cmp	r6, r3
 800cfc8:	460d      	mov	r5, r1
 800cfca:	f300 80b8 	bgt.w	800d13e <atan+0x1ee>
 800cfce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cfd2:	429e      	cmp	r6, r3
 800cfd4:	f300 809c 	bgt.w	800d110 <atan+0x1c0>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	f7f3 f8c6 	bl	800016c <__adddf3>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4b98      	ldr	r3, [pc, #608]	; (800d244 <atan+0x2f4>)
 800cfe4:	f7f3 f8c0 	bl	8000168 <__aeabi_dsub>
 800cfe8:	2200      	movs	r2, #0
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	f7f3 f8b9 	bl	800016c <__adddf3>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	f7f3 fb93 	bl	800072c <__aeabi_ddiv>
 800d006:	f04f 0a00 	mov.w	sl, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	460d      	mov	r5, r1
 800d00e:	4622      	mov	r2, r4
 800d010:	462b      	mov	r3, r5
 800d012:	4620      	mov	r0, r4
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 fa5f 	bl	80004d8 <__aeabi_dmul>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4680      	mov	r8, r0
 800d020:	4689      	mov	r9, r1
 800d022:	f7f3 fa59 	bl	80004d8 <__aeabi_dmul>
 800d026:	a36c      	add	r3, pc, #432	; (adr r3, 800d1d8 <atan+0x288>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	4606      	mov	r6, r0
 800d02e:	460f      	mov	r7, r1
 800d030:	f7f3 fa52 	bl	80004d8 <__aeabi_dmul>
 800d034:	a36a      	add	r3, pc, #424	; (adr r3, 800d1e0 <atan+0x290>)
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	f7f3 f897 	bl	800016c <__adddf3>
 800d03e:	4632      	mov	r2, r6
 800d040:	463b      	mov	r3, r7
 800d042:	f7f3 fa49 	bl	80004d8 <__aeabi_dmul>
 800d046:	a368      	add	r3, pc, #416	; (adr r3, 800d1e8 <atan+0x298>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 f88e 	bl	800016c <__adddf3>
 800d050:	4632      	mov	r2, r6
 800d052:	463b      	mov	r3, r7
 800d054:	f7f3 fa40 	bl	80004d8 <__aeabi_dmul>
 800d058:	a365      	add	r3, pc, #404	; (adr r3, 800d1f0 <atan+0x2a0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 f885 	bl	800016c <__adddf3>
 800d062:	4632      	mov	r2, r6
 800d064:	463b      	mov	r3, r7
 800d066:	f7f3 fa37 	bl	80004d8 <__aeabi_dmul>
 800d06a:	a363      	add	r3, pc, #396	; (adr r3, 800d1f8 <atan+0x2a8>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	f7f3 f87c 	bl	800016c <__adddf3>
 800d074:	4632      	mov	r2, r6
 800d076:	463b      	mov	r3, r7
 800d078:	f7f3 fa2e 	bl	80004d8 <__aeabi_dmul>
 800d07c:	a360      	add	r3, pc, #384	; (adr r3, 800d200 <atan+0x2b0>)
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	f7f3 f873 	bl	800016c <__adddf3>
 800d086:	4642      	mov	r2, r8
 800d088:	464b      	mov	r3, r9
 800d08a:	f7f3 fa25 	bl	80004d8 <__aeabi_dmul>
 800d08e:	a35e      	add	r3, pc, #376	; (adr r3, 800d208 <atan+0x2b8>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	4680      	mov	r8, r0
 800d096:	4689      	mov	r9, r1
 800d098:	4630      	mov	r0, r6
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7f3 fa1c 	bl	80004d8 <__aeabi_dmul>
 800d0a0:	a35b      	add	r3, pc, #364	; (adr r3, 800d210 <atan+0x2c0>)
 800d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a6:	f7f3 f85f 	bl	8000168 <__aeabi_dsub>
 800d0aa:	4632      	mov	r2, r6
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	f7f3 fa13 	bl	80004d8 <__aeabi_dmul>
 800d0b2:	a359      	add	r3, pc, #356	; (adr r3, 800d218 <atan+0x2c8>)
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f7f3 f856 	bl	8000168 <__aeabi_dsub>
 800d0bc:	4632      	mov	r2, r6
 800d0be:	463b      	mov	r3, r7
 800d0c0:	f7f3 fa0a 	bl	80004d8 <__aeabi_dmul>
 800d0c4:	a356      	add	r3, pc, #344	; (adr r3, 800d220 <atan+0x2d0>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 f84d 	bl	8000168 <__aeabi_dsub>
 800d0ce:	4632      	mov	r2, r6
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	f7f3 fa01 	bl	80004d8 <__aeabi_dmul>
 800d0d6:	a354      	add	r3, pc, #336	; (adr r3, 800d228 <atan+0x2d8>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	f7f3 f844 	bl	8000168 <__aeabi_dsub>
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	463b      	mov	r3, r7
 800d0e4:	f7f3 f9f8 	bl	80004d8 <__aeabi_dmul>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	f7f3 f83c 	bl	800016c <__adddf3>
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	462b      	mov	r3, r5
 800d0f8:	f7f3 f9ee 	bl	80004d8 <__aeabi_dmul>
 800d0fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	d144      	bne.n	800d190 <atan+0x240>
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 f82d 	bl	8000168 <__aeabi_dsub>
 800d10e:	e734      	b.n	800cf7a <atan+0x2a>
 800d110:	2200      	movs	r2, #0
 800d112:	4b4c      	ldr	r3, [pc, #304]	; (800d244 <atan+0x2f4>)
 800d114:	f7f3 f828 	bl	8000168 <__aeabi_dsub>
 800d118:	2200      	movs	r2, #0
 800d11a:	4606      	mov	r6, r0
 800d11c:	460f      	mov	r7, r1
 800d11e:	4b49      	ldr	r3, [pc, #292]	; (800d244 <atan+0x2f4>)
 800d120:	4620      	mov	r0, r4
 800d122:	4629      	mov	r1, r5
 800d124:	f7f3 f822 	bl	800016c <__adddf3>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	f7f3 fafc 	bl	800072c <__aeabi_ddiv>
 800d134:	f04f 0a01 	mov.w	sl, #1
 800d138:	4604      	mov	r4, r0
 800d13a:	460d      	mov	r5, r1
 800d13c:	e767      	b.n	800d00e <atan+0xbe>
 800d13e:	4b43      	ldr	r3, [pc, #268]	; (800d24c <atan+0x2fc>)
 800d140:	429e      	cmp	r6, r3
 800d142:	dc1a      	bgt.n	800d17a <atan+0x22a>
 800d144:	2200      	movs	r2, #0
 800d146:	4b42      	ldr	r3, [pc, #264]	; (800d250 <atan+0x300>)
 800d148:	f7f3 f80e 	bl	8000168 <__aeabi_dsub>
 800d14c:	2200      	movs	r2, #0
 800d14e:	4606      	mov	r6, r0
 800d150:	460f      	mov	r7, r1
 800d152:	4b3f      	ldr	r3, [pc, #252]	; (800d250 <atan+0x300>)
 800d154:	4620      	mov	r0, r4
 800d156:	4629      	mov	r1, r5
 800d158:	f7f3 f9be 	bl	80004d8 <__aeabi_dmul>
 800d15c:	2200      	movs	r2, #0
 800d15e:	4b39      	ldr	r3, [pc, #228]	; (800d244 <atan+0x2f4>)
 800d160:	f7f3 f804 	bl	800016c <__adddf3>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	4630      	mov	r0, r6
 800d16a:	4639      	mov	r1, r7
 800d16c:	f7f3 fade 	bl	800072c <__aeabi_ddiv>
 800d170:	f04f 0a02 	mov.w	sl, #2
 800d174:	4604      	mov	r4, r0
 800d176:	460d      	mov	r5, r1
 800d178:	e749      	b.n	800d00e <atan+0xbe>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	2000      	movs	r0, #0
 800d180:	4934      	ldr	r1, [pc, #208]	; (800d254 <atan+0x304>)
 800d182:	f7f3 fad3 	bl	800072c <__aeabi_ddiv>
 800d186:	f04f 0a03 	mov.w	sl, #3
 800d18a:	4604      	mov	r4, r0
 800d18c:	460d      	mov	r5, r1
 800d18e:	e73e      	b.n	800d00e <atan+0xbe>
 800d190:	4b31      	ldr	r3, [pc, #196]	; (800d258 <atan+0x308>)
 800d192:	4e32      	ldr	r6, [pc, #200]	; (800d25c <atan+0x30c>)
 800d194:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d198:	4456      	add	r6, sl
 800d19a:	449a      	add	sl, r3
 800d19c:	e9da 2300 	ldrd	r2, r3, [sl]
 800d1a0:	f7f2 ffe2 	bl	8000168 <__aeabi_dsub>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	f7f2 ffde 	bl	8000168 <__aeabi_dsub>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1b4:	f7f2 ffd8 	bl	8000168 <__aeabi_dsub>
 800d1b8:	f1bb 0f00 	cmp.w	fp, #0
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	f6bf aee4 	bge.w	800cf8c <atan+0x3c>
 800d1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1c8:	461d      	mov	r5, r3
 800d1ca:	e6df      	b.n	800cf8c <atan+0x3c>
 800d1cc:	4d24      	ldr	r5, [pc, #144]	; (800d260 <atan+0x310>)
 800d1ce:	e6dd      	b.n	800cf8c <atan+0x3c>
 800d1d0:	8800759c 	.word	0x8800759c
 800d1d4:	7e37e43c 	.word	0x7e37e43c
 800d1d8:	e322da11 	.word	0xe322da11
 800d1dc:	3f90ad3a 	.word	0x3f90ad3a
 800d1e0:	24760deb 	.word	0x24760deb
 800d1e4:	3fa97b4b 	.word	0x3fa97b4b
 800d1e8:	a0d03d51 	.word	0xa0d03d51
 800d1ec:	3fb10d66 	.word	0x3fb10d66
 800d1f0:	c54c206e 	.word	0xc54c206e
 800d1f4:	3fb745cd 	.word	0x3fb745cd
 800d1f8:	920083ff 	.word	0x920083ff
 800d1fc:	3fc24924 	.word	0x3fc24924
 800d200:	5555550d 	.word	0x5555550d
 800d204:	3fd55555 	.word	0x3fd55555
 800d208:	2c6a6c2f 	.word	0x2c6a6c2f
 800d20c:	bfa2b444 	.word	0xbfa2b444
 800d210:	52defd9a 	.word	0x52defd9a
 800d214:	3fadde2d 	.word	0x3fadde2d
 800d218:	af749a6d 	.word	0xaf749a6d
 800d21c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d220:	fe231671 	.word	0xfe231671
 800d224:	3fbc71c6 	.word	0x3fbc71c6
 800d228:	9998ebc4 	.word	0x9998ebc4
 800d22c:	3fc99999 	.word	0x3fc99999
 800d230:	440fffff 	.word	0x440fffff
 800d234:	7ff00000 	.word	0x7ff00000
 800d238:	54442d18 	.word	0x54442d18
 800d23c:	3ff921fb 	.word	0x3ff921fb
 800d240:	3fdbffff 	.word	0x3fdbffff
 800d244:	3ff00000 	.word	0x3ff00000
 800d248:	3ff2ffff 	.word	0x3ff2ffff
 800d24c:	40037fff 	.word	0x40037fff
 800d250:	3ff80000 	.word	0x3ff80000
 800d254:	bff00000 	.word	0xbff00000
 800d258:	0800dbf0 	.word	0x0800dbf0
 800d25c:	0800dbd0 	.word	0x0800dbd0
 800d260:	bff921fb 	.word	0xbff921fb

0800d264 <fabs>:
 800d264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d268:	4619      	mov	r1, r3
 800d26a:	4770      	bx	lr
 800d26c:	0000      	movs	r0, r0
	...

0800d270 <floor>:
 800d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d274:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d278:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d27c:	2e13      	cmp	r6, #19
 800d27e:	4607      	mov	r7, r0
 800d280:	460b      	mov	r3, r1
 800d282:	460c      	mov	r4, r1
 800d284:	4605      	mov	r5, r0
 800d286:	dc35      	bgt.n	800d2f4 <floor+0x84>
 800d288:	2e00      	cmp	r6, #0
 800d28a:	da16      	bge.n	800d2ba <floor+0x4a>
 800d28c:	a336      	add	r3, pc, #216	; (adr r3, 800d368 <floor+0xf8>)
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	f7f2 ff6b 	bl	800016c <__adddf3>
 800d296:	2200      	movs	r2, #0
 800d298:	2300      	movs	r3, #0
 800d29a:	f7f3 fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800d29e:	b148      	cbz	r0, 800d2b4 <floor+0x44>
 800d2a0:	2c00      	cmp	r4, #0
 800d2a2:	da5b      	bge.n	800d35c <floor+0xec>
 800d2a4:	2500      	movs	r5, #0
 800d2a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d2aa:	4a31      	ldr	r2, [pc, #196]	; (800d370 <floor+0x100>)
 800d2ac:	433b      	orrs	r3, r7
 800d2ae:	42ab      	cmp	r3, r5
 800d2b0:	bf18      	it	ne
 800d2b2:	4614      	movne	r4, r2
 800d2b4:	4623      	mov	r3, r4
 800d2b6:	462f      	mov	r7, r5
 800d2b8:	e026      	b.n	800d308 <floor+0x98>
 800d2ba:	4a2e      	ldr	r2, [pc, #184]	; (800d374 <floor+0x104>)
 800d2bc:	fa42 f806 	asr.w	r8, r2, r6
 800d2c0:	ea01 0208 	and.w	r2, r1, r8
 800d2c4:	4302      	orrs	r2, r0
 800d2c6:	d01f      	beq.n	800d308 <floor+0x98>
 800d2c8:	a327      	add	r3, pc, #156	; (adr r3, 800d368 <floor+0xf8>)
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	f7f2 ff4d 	bl	800016c <__adddf3>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f7f3 fb8f 	bl	80009f8 <__aeabi_dcmpgt>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d0ea      	beq.n	800d2b4 <floor+0x44>
 800d2de:	2c00      	cmp	r4, #0
 800d2e0:	bfbe      	ittt	lt
 800d2e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d2e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d2ea:	19a4      	addlt	r4, r4, r6
 800d2ec:	ea24 0408 	bic.w	r4, r4, r8
 800d2f0:	2500      	movs	r5, #0
 800d2f2:	e7df      	b.n	800d2b4 <floor+0x44>
 800d2f4:	2e33      	cmp	r6, #51	; 0x33
 800d2f6:	dd0b      	ble.n	800d310 <floor+0xa0>
 800d2f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2fc:	d104      	bne.n	800d308 <floor+0x98>
 800d2fe:	4602      	mov	r2, r0
 800d300:	f7f2 ff34 	bl	800016c <__adddf3>
 800d304:	4607      	mov	r7, r0
 800d306:	460b      	mov	r3, r1
 800d308:	4638      	mov	r0, r7
 800d30a:	4619      	mov	r1, r3
 800d30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d318:	fa22 f808 	lsr.w	r8, r2, r8
 800d31c:	ea18 0f00 	tst.w	r8, r0
 800d320:	d0f2      	beq.n	800d308 <floor+0x98>
 800d322:	a311      	add	r3, pc, #68	; (adr r3, 800d368 <floor+0xf8>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	f7f2 ff20 	bl	800016c <__adddf3>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2300      	movs	r3, #0
 800d330:	f7f3 fb62 	bl	80009f8 <__aeabi_dcmpgt>
 800d334:	2800      	cmp	r0, #0
 800d336:	d0bd      	beq.n	800d2b4 <floor+0x44>
 800d338:	2c00      	cmp	r4, #0
 800d33a:	da02      	bge.n	800d342 <floor+0xd2>
 800d33c:	2e14      	cmp	r6, #20
 800d33e:	d103      	bne.n	800d348 <floor+0xd8>
 800d340:	3401      	adds	r4, #1
 800d342:	ea25 0508 	bic.w	r5, r5, r8
 800d346:	e7b5      	b.n	800d2b4 <floor+0x44>
 800d348:	2301      	movs	r3, #1
 800d34a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d34e:	fa03 f606 	lsl.w	r6, r3, r6
 800d352:	4435      	add	r5, r6
 800d354:	42bd      	cmp	r5, r7
 800d356:	bf38      	it	cc
 800d358:	18e4      	addcc	r4, r4, r3
 800d35a:	e7f2      	b.n	800d342 <floor+0xd2>
 800d35c:	2500      	movs	r5, #0
 800d35e:	462c      	mov	r4, r5
 800d360:	e7a8      	b.n	800d2b4 <floor+0x44>
 800d362:	bf00      	nop
 800d364:	f3af 8000 	nop.w
 800d368:	8800759c 	.word	0x8800759c
 800d36c:	7e37e43c 	.word	0x7e37e43c
 800d370:	bff00000 	.word	0xbff00000
 800d374:	000fffff 	.word	0x000fffff

0800d378 <matherr>:
 800d378:	2000      	movs	r0, #0
 800d37a:	4770      	bx	lr
 800d37c:	0000      	movs	r0, r0
	...

0800d380 <scalbn>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	4616      	mov	r6, r2
 800d384:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d388:	4604      	mov	r4, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	460b      	mov	r3, r1
 800d38e:	b982      	cbnz	r2, 800d3b2 <scalbn+0x32>
 800d390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d394:	4303      	orrs	r3, r0
 800d396:	d034      	beq.n	800d402 <scalbn+0x82>
 800d398:	4b2d      	ldr	r3, [pc, #180]	; (800d450 <scalbn+0xd0>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	f7f3 f89c 	bl	80004d8 <__aeabi_dmul>
 800d3a0:	4b2c      	ldr	r3, [pc, #176]	; (800d454 <scalbn+0xd4>)
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	429e      	cmp	r6, r3
 800d3a6:	460d      	mov	r5, r1
 800d3a8:	da0d      	bge.n	800d3c6 <scalbn+0x46>
 800d3aa:	a325      	add	r3, pc, #148	; (adr r3, 800d440 <scalbn+0xc0>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	e01c      	b.n	800d3ec <scalbn+0x6c>
 800d3b2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d3b6:	42ba      	cmp	r2, r7
 800d3b8:	d109      	bne.n	800d3ce <scalbn+0x4e>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	f7f2 fed6 	bl	800016c <__adddf3>
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	460d      	mov	r5, r1
 800d3c4:	e01d      	b.n	800d402 <scalbn+0x82>
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d3cc:	3a36      	subs	r2, #54	; 0x36
 800d3ce:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d3d2:	4432      	add	r2, r6
 800d3d4:	428a      	cmp	r2, r1
 800d3d6:	dd0c      	ble.n	800d3f2 <scalbn+0x72>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	462b      	mov	r3, r5
 800d3dc:	a11a      	add	r1, pc, #104	; (adr r1, 800d448 <scalbn+0xc8>)
 800d3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3e2:	f000 f83b 	bl	800d45c <copysign>
 800d3e6:	a318      	add	r3, pc, #96	; (adr r3, 800d448 <scalbn+0xc8>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f3 f874 	bl	80004d8 <__aeabi_dmul>
 800d3f0:	e7e6      	b.n	800d3c0 <scalbn+0x40>
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	dd08      	ble.n	800d408 <scalbn+0x88>
 800d3f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d402:	4620      	mov	r0, r4
 800d404:	4629      	mov	r1, r5
 800d406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d408:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d40c:	da0b      	bge.n	800d426 <scalbn+0xa6>
 800d40e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d412:	429e      	cmp	r6, r3
 800d414:	4622      	mov	r2, r4
 800d416:	462b      	mov	r3, r5
 800d418:	dce0      	bgt.n	800d3dc <scalbn+0x5c>
 800d41a:	a109      	add	r1, pc, #36	; (adr r1, 800d440 <scalbn+0xc0>)
 800d41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d420:	f000 f81c 	bl	800d45c <copysign>
 800d424:	e7c1      	b.n	800d3aa <scalbn+0x2a>
 800d426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d42a:	3236      	adds	r2, #54	; 0x36
 800d42c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d430:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d434:	4620      	mov	r0, r4
 800d436:	4629      	mov	r1, r5
 800d438:	2200      	movs	r2, #0
 800d43a:	4b07      	ldr	r3, [pc, #28]	; (800d458 <scalbn+0xd8>)
 800d43c:	e7d6      	b.n	800d3ec <scalbn+0x6c>
 800d43e:	bf00      	nop
 800d440:	c2f8f359 	.word	0xc2f8f359
 800d444:	01a56e1f 	.word	0x01a56e1f
 800d448:	8800759c 	.word	0x8800759c
 800d44c:	7e37e43c 	.word	0x7e37e43c
 800d450:	43500000 	.word	0x43500000
 800d454:	ffff3cb0 	.word	0xffff3cb0
 800d458:	3c900000 	.word	0x3c900000

0800d45c <copysign>:
 800d45c:	b530      	push	{r4, r5, lr}
 800d45e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d466:	ea42 0503 	orr.w	r5, r2, r3
 800d46a:	4629      	mov	r1, r5
 800d46c:	bd30      	pop	{r4, r5, pc}
	...

0800d470 <_init>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	bf00      	nop
 800d474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d476:	bc08      	pop	{r3}
 800d478:	469e      	mov	lr, r3
 800d47a:	4770      	bx	lr

0800d47c <_fini>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	bf00      	nop
 800d480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d482:	bc08      	pop	{r3}
 800d484:	469e      	mov	lr, r3
 800d486:	4770      	bx	lr
