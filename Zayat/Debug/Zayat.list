
Zayat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d628  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800d738  0800d738  0001d738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df30  0800df30  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800df30  0800df30  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df30  0800df30  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df30  0800df30  0001df30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df34  0800df34  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800df38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ed4  200001e8  0800e120  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040bc  0800e120  000240bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfc4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000366c  00000000  00000000  0003c1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001648  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00040e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ad0  00000000  00000000  00042370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126a5  00000000  00000000  00058e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ef6a  00000000  00000000  0006b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d8c  00000000  00000000  000ea4cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d720 	.word	0x0800d720

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800d720 	.word	0x0800d720

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <ARM_Motors>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;
extern TIM_OC_InitTypeDef sConfigOCZayat;

void ARM_Motors(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	sConfigOCZayat.Pulse = 1.2 * ONE_MS;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <ARM_Motors+0x80>)
 80011a2:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80011a6:	605a      	str	r2, [r3, #4]
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	2200      	movs	r2, #0
 80011aa:	491c      	ldr	r1, [pc, #112]	; (800121c <ARM_Motors+0x80>)
 80011ac:	481c      	ldr	r0, [pc, #112]	; (8001220 <ARM_Motors+0x84>)
 80011ae:	f005 f955 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <ARM_Motors+0x20>
   {
	 Error_Handler();
 80011b8:	f002 f8d0 	bl	800335c <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 80011bc:	2204      	movs	r2, #4
 80011be:	4917      	ldr	r1, [pc, #92]	; (800121c <ARM_Motors+0x80>)
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <ARM_Motors+0x84>)
 80011c2:	f005 f94b 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <ARM_Motors+0x34>
   {
	 Error_Handler();
 80011cc:	f002 f8c6 	bl	800335c <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	2208      	movs	r2, #8
 80011d2:	4912      	ldr	r1, [pc, #72]	; (800121c <ARM_Motors+0x80>)
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <ARM_Motors+0x84>)
 80011d6:	f005 f941 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <ARM_Motors+0x48>
   {
	 Error_Handler();
 80011e0:	f002 f8bc 	bl	800335c <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 80011e4:	220c      	movs	r2, #12
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <ARM_Motors+0x80>)
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <ARM_Motors+0x84>)
 80011ea:	f005 f937 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <ARM_Motors+0x5c>
   {
	 Error_Handler();
 80011f4:	f002 f8b2 	bl	800335c <Error_Handler>
   }
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <ARM_Motors+0x84>)
 80011fc:	f004 fff4 	bl	80061e8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001200:	2108      	movs	r1, #8
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <ARM_Motors+0x84>)
 8001204:	f004 fff0 	bl	80061e8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001208:	2104      	movs	r1, #4
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <ARM_Motors+0x84>)
 800120c:	f004 ffec 	bl	80061e8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001210:	210c      	movs	r1, #12
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <ARM_Motors+0x84>)
 8001214:	f004 ffe8 	bl	80061e8 <HAL_TIM_PWM_Start>

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000228 	.word	0x20000228
 8001220:	20003fb4 	.word	0x20003fb4

08001224 <PWM>:
	 * 		-Motor 4 = CHANNEL_1						 /  \
	 * 													3    4
	 *
	 */
void PWM(u16 dutyCycle, u8 motorNumber)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	4613      	mov	r3, r2
 8001232:	717b      	strb	r3, [r7, #5]
	u16 temp = dutyCycle * ONE_MS / 100 + ONE_MS;
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	4a2d      	ldr	r2, [pc, #180]	; (80012f4 <PWM+0xd0>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	1152      	asrs	r2, r2, #5
 8001246:	17db      	asrs	r3, r3, #31
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001250:	81fb      	strh	r3, [r7, #14]

	switch(motorNumber)
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	3b01      	subs	r3, #1
 8001256:	2b03      	cmp	r3, #3
 8001258:	d846      	bhi.n	80012e8 <PWM+0xc4>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <PWM+0x3c>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	0800128f 	.word	0x0800128f
 8001268:	080012ad 	.word	0x080012ad
 800126c:	080012cb 	.word	0x080012cb
	{
	case 1:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_1) != HAL_OK)
 8001270:	2200      	movs	r2, #0
 8001272:	4921      	ldr	r1, [pc, #132]	; (80012f8 <PWM+0xd4>)
 8001274:	4821      	ldr	r0, [pc, #132]	; (80012fc <PWM+0xd8>)
 8001276:	f005 f8f1 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <PWM+0x60>
		   {
			 Error_Handler();
 8001280:	f002 f86c 	bl	800335c <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	481d      	ldr	r0, [pc, #116]	; (80012fc <PWM+0xd8>)
 8001288:	f004 ffae 	bl	80061e8 <HAL_TIM_PWM_Start>
		   break;
 800128c:	e02e      	b.n	80012ec <PWM+0xc8>
	case 2:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_2) != HAL_OK)
 800128e:	2204      	movs	r2, #4
 8001290:	4919      	ldr	r1, [pc, #100]	; (80012f8 <PWM+0xd4>)
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <PWM+0xd8>)
 8001294:	f005 f8e2 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <PWM+0x7e>
		   {
			 Error_Handler();
 800129e:	f002 f85d 	bl	800335c <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4815      	ldr	r0, [pc, #84]	; (80012fc <PWM+0xd8>)
 80012a6:	f004 ff9f 	bl	80061e8 <HAL_TIM_PWM_Start>
		   break;
 80012aa:	e01f      	b.n	80012ec <PWM+0xc8>
	case 3:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_3) != HAL_OK)
 80012ac:	2208      	movs	r2, #8
 80012ae:	4912      	ldr	r1, [pc, #72]	; (80012f8 <PWM+0xd4>)
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <PWM+0xd8>)
 80012b2:	f005 f8d3 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <PWM+0x9c>
		   {
			 Error_Handler();
 80012bc:	f002 f84e 	bl	800335c <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012c0:	2108      	movs	r1, #8
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <PWM+0xd8>)
 80012c4:	f004 ff90 	bl	80061e8 <HAL_TIM_PWM_Start>
		   break;
 80012c8:	e010      	b.n	80012ec <PWM+0xc8>
	case 4:
		   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOCZayat, TIM_CHANNEL_4) != HAL_OK)
 80012ca:	220c      	movs	r2, #12
 80012cc:	490a      	ldr	r1, [pc, #40]	; (80012f8 <PWM+0xd4>)
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <PWM+0xd8>)
 80012d0:	f005 f8c4 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <PWM+0xba>
		   {
			 Error_Handler();
 80012da:	f002 f83f 	bl	800335c <Error_Handler>
		   }
		   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012de:	210c      	movs	r1, #12
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <PWM+0xd8>)
 80012e2:	f004 ff81 	bl	80061e8 <HAL_TIM_PWM_Start>
		   break;
 80012e6:	e001      	b.n	80012ec <PWM+0xc8>
	default:
		ARM_Motors();
 80012e8:	f7ff ff58 	bl	800119c <ARM_Motors>
	}
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	51eb851f 	.word	0x51eb851f
 80012f8:	20000228 	.word	0x20000228
 80012fc:	20003fb4 	.word	0x20003fb4

08001300 <Read_Accel_Values>:
		errory=errory/3000.0;
		errorz=errorz/3000.0;

}
void Read_Accel_Values(parameters *p)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]

	buf[0]=ACCEL_XOUT_H;
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <Read_Accel_Values+0xf4>)
 800130a:	223b      	movs	r2, #59	; 0x3b
 800130c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <Read_Accel_Values+0xf4>)
 8001318:	21d0      	movs	r1, #208	; 0xd0
 800131a:	4837      	ldr	r0, [pc, #220]	; (80013f8 <Read_Accel_Values+0xf8>)
 800131c:	f003 fc3c 	bl	8004b98 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2306      	movs	r3, #6
 8001328:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <Read_Accel_Values+0xf4>)
 800132a:	21d0      	movs	r1, #208	; 0xd0
 800132c:	4832      	ldr	r0, [pc, #200]	; (80013f8 <Read_Accel_Values+0xf8>)
 800132e:	f003 fd31 	bl	8004d94 <HAL_I2C_Master_Receive>
		int16_t temp1,temp2,temp3;
		temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <Read_Accel_Values+0xf4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <Read_Accel_Values+0xf4>)
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	81fb      	strh	r3, [r7, #14]
		temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <Read_Accel_Values+0xf4>)
 8001346:	789b      	ldrb	r3, [r3, #2]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <Read_Accel_Values+0xf4>)
 800134e:	78db      	ldrb	r3, [r3, #3]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	81bb      	strh	r3, [r7, #12]
		temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <Read_Accel_Values+0xf4>)
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Read_Accel_Values+0xf4>)
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	817b      	strh	r3, [r7, #10]
	p->x_dot_dot = (temp1-errorxbody)/2048.0;
 8001368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fcb5 	bl	8000cdc <__aeabi_i2f>
 8001372:	4602      	mov	r2, r0
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <Read_Accel_Values+0xfc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fbf8 	bl	8000b70 <__aeabi_fsub>
 8001380:	4603      	mov	r3, r0
 8001382:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fdb0 	bl	8000eec <__aeabi_fdiv>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
	p->y_dot_dot = (temp2-errorybody)/2048.0;
 8001394:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc9f 	bl	8000cdc <__aeabi_i2f>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <Read_Accel_Values+0x100>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f7ff fbe2 	bl	8000b70 <__aeabi_fsub>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fd9a 	bl	8000eec <__aeabi_fdiv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	61da      	str	r2, [r3, #28]
	p->z_dot_dot = (temp3-errorzbody)/2048.0;
 80013c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc89 	bl	8000cdc <__aeabi_i2f>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <Read_Accel_Values+0x104>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f7ff fbcc 	bl	8000b70 <__aeabi_fsub>
 80013d8:	4603      	mov	r3, r0
 80013da:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fd84 	bl	8000eec <__aeabi_fdiv>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	621a      	str	r2, [r3, #32]

}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20003e38 	.word	0x20003e38
 80013f8:	20003f04 	.word	0x20003f04
 80013fc:	2000021c 	.word	0x2000021c
 8001400:	20000220 	.word	0x20000220
 8001404:	20000224 	.word	0x20000224

08001408 <Read_Gyro_Values>:

void Read_Gyro_Values(parameters *p, f32 RT)
{
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

		RT=0.01;
 8001412:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <Read_Gyro_Values+0x2b0>)
 8001414:	603b      	str	r3, [r7, #0]
		buf[0]=GYRO_XOUT_H;
 8001416:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001418:	2243      	movs	r2, #67	; 0x43
 800141a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, 0xD0, buf, 1, HAL_MAX_DELAY);
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	4aa5      	ldr	r2, [pc, #660]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001426:	21d0      	movs	r1, #208	; 0xd0
 8001428:	48a5      	ldr	r0, [pc, #660]	; (80016c0 <Read_Gyro_Values+0x2b8>)
 800142a:	f003 fbb5 	bl	8004b98 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, 0xD0, buf, 6, HAL_MAX_DELAY);
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2306      	movs	r3, #6
 8001436:	4aa1      	ldr	r2, [pc, #644]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001438:	21d0      	movs	r1, #208	; 0xd0
 800143a:	48a1      	ldr	r0, [pc, #644]	; (80016c0 <Read_Gyro_Values+0x2b8>)
 800143c:	f003 fcaa 	bl	8004d94 <HAL_I2C_Master_Receive>


		int16_t temp1,temp2,temp3;
					temp1 = ((int16_t)buf[0]<<8) | (buf[1]);
 8001440:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <Read_Gyro_Values+0x2b4>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	83fb      	strh	r3, [r7, #30]
					temp2 = ((int16_t)buf[2]<<8) | (buf[3]);
 8001452:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b98      	ldr	r3, [pc, #608]	; (80016bc <Read_Gyro_Values+0x2b4>)
 800145c:	78db      	ldrb	r3, [r3, #3]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	83bb      	strh	r3, [r7, #28]
					temp3 = ((int16_t)buf[4]<<8) | (buf[5]);
 8001464:	4b95      	ldr	r3, [pc, #596]	; (80016bc <Read_Gyro_Values+0x2b4>)
 8001466:	791b      	ldrb	r3, [r3, #4]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b93      	ldr	r3, [pc, #588]	; (80016bc <Read_Gyro_Values+0x2b4>)
 800146e:	795b      	ldrb	r3, [r3, #5]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	837b      	strh	r3, [r7, #26]

						p->p = temp1/1.0f;
 8001476:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc2e 	bl	8000cdc <__aeabi_i2f>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	649a      	str	r2, [r3, #72]	; 0x48

						p->q = temp2/1.0f;
 8001486:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc26 	bl	8000cdc <__aeabi_i2f>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c

						p->r = temp3/1.0f;
 8001496:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc1e 	bl	8000cdc <__aeabi_i2f>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	651a      	str	r2, [r3, #80]	; 0x50
		p->p = ((p->p-errorp)/16.4);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014aa:	4b86      	ldr	r3, [pc, #536]	; (80016c4 <Read_Gyro_Values+0x2bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4610      	mov	r0, r2
 80014b2:	f7ff fb5d 	bl	8000b70 <__aeabi_fsub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	a37a      	add	r3, pc, #488	; (adr r3, 80016a8 <Read_Gyro_Values+0x2a0>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f932 	bl	800072c <__aeabi_ddiv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4618      	mov	r0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	f7ff fafa 	bl	8000ac8 <__aeabi_d2f>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	649a      	str	r2, [r3, #72]	; 0x48
		p->q = ((p->q-errorq)/16.4);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <Read_Gyro_Values+0x2c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f7ff fb43 	bl	8000b70 <__aeabi_fsub>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff9b 	bl	8000428 <__aeabi_f2d>
 80014f2:	a36d      	add	r3, pc, #436	; (adr r3, 80016a8 <Read_Gyro_Values+0x2a0>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f918 	bl	800072c <__aeabi_ddiv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4618      	mov	r0, r3
 8001502:	4621      	mov	r1, r4
 8001504:	f7ff fae0 	bl	8000ac8 <__aeabi_d2f>
 8001508:	4602      	mov	r2, r0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	64da      	str	r2, [r3, #76]	; 0x4c
		p->r = ((p->r-errorr)/16.4);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001512:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <Read_Gyro_Values+0x2c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f7ff fb29 	bl	8000b70 <__aeabi_fsub>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	a360      	add	r3, pc, #384	; (adr r3, 80016a8 <Read_Gyro_Values+0x2a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f8fe 	bl	800072c <__aeabi_ddiv>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	4618      	mov	r0, r3
 8001536:	4621      	mov	r1, r4
 8001538:	f7ff fac6 	bl	8000ac8 <__aeabi_d2f>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	651a      	str	r2, [r3, #80]	; 0x50
	//Body frame phi and theta
	p->phib = p->phib+RT*p->p ;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc19 	bl	8000d84 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	4619      	mov	r1, r3
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fb0c 	bl	8000b74 <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
	p->thetab = p->thetab+RT*p->q;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc08 	bl	8000d84 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4619      	mov	r1, r3
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff fafb 	bl	8000b74 <__addsf3>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
	p->psib = p->psib+RT*p->r;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fbf7 	bl	8000d84 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff faea 	bl	8000b74 <__addsf3>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38

	f32 first_term;
	f32 second_term;
	first_term = 0.98;
 80015a8:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <Read_Gyro_Values+0x2c8>)
 80015aa:	617b      	str	r3, [r7, #20]
	second_term = 0.02;
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <Read_Gyro_Values+0x2cc>)
 80015ae:	613b      	str	r3, [r7, #16]
	f32 accelPhi;
	f32 acceltheta;


    accelPhi = atan2(p->y_dot_dot,sqrt(p->x_dot_dot * p->x_dot_dot + p->z_dot_dot* p->z_dot_dot)) * 57.3;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff37 	bl	8000428 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fbdb 	bl	8000d84 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461e      	mov	r6, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7ff fbd1 	bl	8000d84 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4630      	mov	r0, r6
 80015e8:	f7ff fac4 	bl	8000b74 <__addsf3>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f00a fd70 	bl	800c0e0 <sqrt>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f00a fd68 	bl	800c0dc <atan2>
 800160c:	a328      	add	r3, pc, #160	; (adr r3, 80016b0 <Read_Gyro_Values+0x2a8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ff61 	bl	80004d8 <__aeabi_dmul>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	4618      	mov	r0, r3
 800161c:	4621      	mov	r1, r4
 800161e:	f7ff fa53 	bl	8000ac8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]
   acceltheta = atan2(-p->x_dot_dot, sqrt(p->y_dot_dot * p->y_dot_dot + p->z_dot_dot * p->z_dot_dot)) * 57.3;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fefa 	bl	8000428 <__aeabi_f2d>
 8001634:	4604      	mov	r4, r0
 8001636:	460d      	mov	r5, r1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f7ff fb9e 	bl	8000d84 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	461e      	mov	r6, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff fb94 	bl	8000d84 <__aeabi_fmul>
 800165c:	4603      	mov	r3, r0
 800165e:	4619      	mov	r1, r3
 8001660:	4630      	mov	r0, r6
 8001662:	f7ff fa87 	bl	8000b74 <__addsf3>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fedd 	bl	8000428 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f00a fd33 	bl	800c0e0 <sqrt>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f00a fd2b 	bl	800c0dc <atan2>
 8001686:	a30a      	add	r3, pc, #40	; (adr r3, 80016b0 <Read_Gyro_Values+0x2a8>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff24 	bl	80004d8 <__aeabi_dmul>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	f7ff fa16 	bl	8000ac8 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	60bb      	str	r3, [r7, #8]


   p->phib = first_term * p->phib + second_term * accelPhi;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	e019      	b.n	80016d8 <Read_Gyro_Values+0x2d0>
 80016a4:	f3af 8000 	nop.w
 80016a8:	66666666 	.word	0x66666666
 80016ac:	40306666 	.word	0x40306666
 80016b0:	66666666 	.word	0x66666666
 80016b4:	404ca666 	.word	0x404ca666
 80016b8:	3c23d70a 	.word	0x3c23d70a
 80016bc:	20003e38 	.word	0x20003e38
 80016c0:	20003f04 	.word	0x20003f04
 80016c4:	20000204 	.word	0x20000204
 80016c8:	20000208 	.word	0x20000208
 80016cc:	2000020c 	.word	0x2000020c
 80016d0:	3f7ae148 	.word	0x3f7ae148
 80016d4:	3ca3d70a 	.word	0x3ca3d70a
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	6979      	ldr	r1, [r7, #20]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb51 	bl	8000d84 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461c      	mov	r4, r3
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	6938      	ldr	r0, [r7, #16]
 80016ea:	f7ff fb4b 	bl	8000d84 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fa3e 	bl	8000b74 <__addsf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
    p->thetab = first_term * p->thetab + second_term * acceltheta;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb3c 	bl	8000d84 <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	461c      	mov	r4, r3
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f7ff fb36 	bl	8000d84 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa29 	bl	8000b74 <__addsf3>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	635a      	str	r2, [r3, #52]	; 0x34
	if(p->psib > 180.0)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	4914      	ldr	r1, [pc, #80]	; (8001780 <Read_Gyro_Values+0x378>)
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fce3 	bl	80010fc <__aeabi_fcmpgt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d009      	beq.n	8001750 <Read_Gyro_Values+0x348>
		p->psib -= 360;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <Read_Gyro_Values+0x37c>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fa14 	bl	8000b70 <__aeabi_fsub>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
	if(p->psib < -180.0)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <Read_Gyro_Values+0x380>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fcb2 	bl	80010c0 <__aeabi_fcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <Read_Gyro_Values+0x35c>
		p->psib += 360;

}
 8001762:	e009      	b.n	8001778 <Read_Gyro_Values+0x370>
		p->psib += 360;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <Read_Gyro_Values+0x37c>)
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa02 	bl	8000b74 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001778:	bf00      	nop
 800177a:	3724      	adds	r7, #36	; 0x24
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001780:	43340000 	.word	0x43340000
 8001784:	43b40000 	.word	0x43b40000
 8001788:	c3340000 	.word	0xc3340000
 800178c:	00000000 	.word	0x00000000

08001790 <imu_Comp_Filter>:

void imu_Comp_Filter(parameters *p, f32 RT)
{
 8001790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001794:	b099      	sub	sp, #100	; 0x64
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	RT=0.01;
 800179c:	4ba8      	ldr	r3, [pc, #672]	; (8001a40 <imu_Comp_Filter+0x2b0>)
 800179e:	603b      	str	r3, [r7, #0]
	f32 first_term;
	f32 second_term;
	f32 accelPhi;
	f32 acceltheta;
	//euler[0] = p->phi; euler[1] = p->theta; euler[2] = p->psi;
	euler[0]= p->phib;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	euler[1]= p->thetab;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
	euler[2]= p->psib;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34

	Quaternion(q, euler);
 80017b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80017b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fdd3 	bl	8003368 <Quaternion>
	ang_vel[0] = p->p; ang_vel[1] = p->q; ang_vel[2] = p->r;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 acc_vel[3];
	acc_vel[0]= p->x_dot_dot;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	617b      	str	r3, [r7, #20]
	acc_vel[1]= p->y_dot_dot;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	61bb      	str	r3, [r7, #24]
	acc_vel[2]= p->z_dot_dot;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	61fb      	str	r3, [r7, #28]
	Rotate_BtoW(ang_vel,q);
 80017e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f831 	bl	8003858 <Rotate_BtoW>
//----------------------------------------------------------------------------

	//Quaternion(q, euler);
	//idk khaled told me to add them idk what they do but seems like they use rotated accel
	f32 acc[3] = {p->x_dot_dot, p->y_dot_dot, p->z_dot_dot};
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	613b      	str	r3, [r7, #16]
	Rotate_BtoW_acc(acc, q); // there was a line to get q but i believe it's already there
 8001808:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 f9cc 	bl	8003bb0 <Rotate_BtoW_acc>

	acc[0] -= errorx;
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <imu_Comp_Filter+0x2b4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff f9a5 	bl	8000b70 <__aeabi_fsub>
 8001826:	4603      	mov	r3, r0
 8001828:	60bb      	str	r3, [r7, #8]
	acc[1]  -= errory;
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <imu_Comp_Filter+0x2b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff f99c 	bl	8000b70 <__aeabi_fsub>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
	acc[2]  -= errorz;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4b83      	ldr	r3, [pc, #524]	; (8001a4c <imu_Comp_Filter+0x2bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f7ff f993 	bl	8000b70 <__aeabi_fsub>
 800184a:	4603      	mov	r3, r0
 800184c:	613b      	str	r3, [r7, #16]

	p->x += RT * p->x_dot;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681c      	ldr	r4, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa93 	bl	8000d84 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f986 	bl	8000b74 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
	p->y += RT * p->y_dot;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685c      	ldr	r4, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa82 	bl	8000d84 <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff f975 	bl	8000b74 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]
	p->z += RT * p->z_dot;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689c      	ldr	r4, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa71 	bl	8000d84 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff f964 	bl	8000b74 <__addsf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]

	p->x_dot += RT * (acc[0] ) * 9.812;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdb5 	bl	8000428 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fa5c 	bl	8000d84 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdaa 	bl	8000428 <__aeabi_f2d>
 80018d4:	a356      	add	r3, pc, #344	; (adr r3, 8001a30 <imu_Comp_Filter+0x2a0>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fdfd 	bl	80004d8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fc41 	bl	800016c <__adddf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	4618      	mov	r0, r3
 80018f0:	4621      	mov	r1, r4
 80018f2:	f7ff f8e9 	bl	8000ac8 <__aeabi_d2f>
 80018f6:	4602      	mov	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60da      	str	r2, [r3, #12]
	p->y_dot += RT * (acc[1] ) * 9.812;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fd91 	bl	8000428 <__aeabi_f2d>
 8001906:	4604      	mov	r4, r0
 8001908:	460d      	mov	r5, r1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fa38 	bl	8000d84 <__aeabi_fmul>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	a344      	add	r3, pc, #272	; (adr r3, 8001a30 <imu_Comp_Filter+0x2a0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fdd9 	bl	80004d8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fc1d 	bl	800016c <__adddf3>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f8c5 	bl	8000ac8 <__aeabi_d2f>
 800193e:	4602      	mov	r2, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]
	p->z_dot += RT * (acc[2] ) * 9.812;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd6d 	bl	8000428 <__aeabi_f2d>
 800194e:	4604      	mov	r4, r0
 8001950:	460d      	mov	r5, r1
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fa14 	bl	8000d84 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd62 	bl	8000428 <__aeabi_f2d>
 8001964:	a332      	add	r3, pc, #200	; (adr r3, 8001a30 <imu_Comp_Filter+0x2a0>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fdb5 	bl	80004d8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fbf9 	bl	800016c <__adddf3>
 800197a:	4603      	mov	r3, r0
 800197c:	460c      	mov	r4, r1
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	f7ff f8a1 	bl	8000ac8 <__aeabi_d2f>
 8001986:	4602      	mov	r2, r0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	615a      	str	r2, [r3, #20]


	// Integrating the p q r to get angles
	p->phi = p->phi +ang_vel[0]*RT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9f5 	bl	8000d84 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff f8e8 	bl	8000b74 <__addsf3>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
	p->theta =p->theta+ ang_vel[1]*RT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9e5 	bl	8000d84 <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4619      	mov	r1, r3
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff f8d8 	bl	8000b74 <__addsf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
	p->psi=p->psib;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
	//p->psi =p->psi+ ang_vel[2]*RT;

	// Accelometer from body to world
	f32 temp1 = cos(-p->psi*0.0174532)*p->x_dot_dot + sin(-p->psi*0.0174532)*p->y_dot_dot;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd23 	bl	8000428 <__aeabi_f2d>
 80019e2:	a315      	add	r3, pc, #84	; (adr r3, 8001a38 <imu_Comp_Filter+0x2a8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fd76 	bl	80004d8 <__aeabi_dmul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f00a fb02 	bl	800bffc <cos>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd11 	bl	8000428 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fd63 	bl	80004d8 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	4625      	mov	r5, r4
 8001a18:	461c      	mov	r4, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd00 	bl	8000428 <__aeabi_f2d>
 8001a28:	e012      	b.n	8001a50 <imu_Comp_Filter+0x2c0>
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	76c8b439 	.word	0x76c8b439
 8001a34:	40239fbe 	.word	0x40239fbe
 8001a38:	6cd799af 	.word	0x6cd799af
 8001a3c:	3f91df40 	.word	0x3f91df40
 8001a40:	3c23d70a 	.word	0x3c23d70a
 8001a44:	20000210 	.word	0x20000210
 8001a48:	20000214 	.word	0x20000214
 8001a4c:	20000218 	.word	0x20000218
 8001a50:	a3a3      	add	r3, pc, #652	; (adr r3, 8001ce0 <imu_Comp_Filter+0x550>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fd3f 	bl	80004d8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f00a fb01 	bl	800c068 <sin>
 8001a66:	4680      	mov	r8, r0
 8001a68:	4689      	mov	r9, r1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcda 	bl	8000428 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	f7fe fd2c 	bl	80004d8 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fb70 	bl	800016c <__adddf3>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4618      	mov	r0, r3
 8001a92:	4621      	mov	r1, r4
 8001a94:	f7ff f818 	bl	8000ac8 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
	f32 temp2 = -sin(-p->psi*0.0174532)*p->x_dot_dot + cos(-p->psi*0.0174532)*p->y_dot_dot;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcc1 	bl	8000428 <__aeabi_f2d>
 8001aa6:	a38e      	add	r3, pc, #568	; (adr r3, 8001ce0 <imu_Comp_Filter+0x550>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd14 	bl	80004d8 <__aeabi_dmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	f00a fad6 	bl	800c068 <sin>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcaf 	bl	8000428 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fd01 	bl	80004d8 <__aeabi_dmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	4625      	mov	r5, r4
 8001adc:	461c      	mov	r4, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc9e 	bl	8000428 <__aeabi_f2d>
 8001aec:	a37c      	add	r3, pc, #496	; (adr r3, 8001ce0 <imu_Comp_Filter+0x550>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fcf1 	bl	80004d8 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f00a fa7d 	bl	800bffc <cos>
 8001b02:	4680      	mov	r8, r0
 8001b04:	4689      	mov	r9, r1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fc8c 	bl	8000428 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4640      	mov	r0, r8
 8001b16:	4649      	mov	r1, r9
 8001b18:	f7fe fcde 	bl	80004d8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fb22 	bl	800016c <__adddf3>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4621      	mov	r1, r4
 8001b30:	f7fe ffca 	bl	8000ac8 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	65bb      	str	r3, [r7, #88]	; 0x58
	acc_vel[0]=temp1;
 8001b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3a:	617b      	str	r3, [r7, #20]
	acc_vel[1]=temp2;
 8001b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b3e:	61bb      	str	r3, [r7, #24]


	// Angles from Acc
    accelPhi = atan2(acc_vel[1],sqrt(acc_vel[0] * acc_vel[0] + acc_vel[2]* acc_vel[2])) * 57.3;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc70 	bl	8000428 <__aeabi_f2d>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f916 	bl	8000d84 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461e      	mov	r6, r3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f90e 	bl	8000d84 <__aeabi_fmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f7ff f801 	bl	8000b74 <__addsf3>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc57 	bl	8000428 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f00a faad 	bl	800c0e0 <sqrt>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f00a faa5 	bl	800c0dc <atan2>
 8001b92:	a355      	add	r3, pc, #340	; (adr r3, 8001ce8 <imu_Comp_Filter+0x558>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fc9e 	bl	80004d8 <__aeabi_dmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7fe ff90 	bl	8000ac8 <__aeabi_d2f>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	657b      	str	r3, [r7, #84]	; 0x54
   acceltheta = atan2(-acc_vel[0], sqrt(acc_vel[1] * acc_vel[1] + acc_vel[2] * acc_vel[2])) * 57.3;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc38 	bl	8000428 <__aeabi_f2d>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	460d      	mov	r5, r1
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8de 	bl	8000d84 <__aeabi_fmul>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461e      	mov	r6, r3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8d6 	bl	8000d84 <__aeabi_fmul>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f7fe ffc9 	bl	8000b74 <__addsf3>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc1f 	bl	8000428 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f00a fa75 	bl	800c0e0 <sqrt>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f00a fa6d 	bl	800c0dc <atan2>
 8001c02:	a339      	add	r3, pc, #228	; (adr r3, 8001ce8 <imu_Comp_Filter+0x558>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fc66 	bl	80004d8 <__aeabi_dmul>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4618      	mov	r0, r3
 8001c12:	4621      	mov	r1, r4
 8001c14:	f7fe ff58 	bl	8000ac8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50

	 first_term = 0.98; ////////////////////
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <imu_Comp_Filter+0x560>)
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	 second_term = 0.02; //////////////////
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <imu_Comp_Filter+0x564>)
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48

   // Comp Filter
    p->phi = first_term * p->phi + second_term * accelPhi;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f8aa 	bl	8000d84 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461c      	mov	r4, r3
 8001c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c38:	f7ff f8a4 	bl	8000d84 <__aeabi_fmul>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7fe ff97 	bl	8000b74 <__addsf3>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    p->theta = first_term * p->theta + second_term * acceltheta;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f895 	bl	8000d84 <__aeabi_fmul>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c62:	f7ff f88f 	bl	8000d84 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7fe ff82 	bl	8000b74 <__addsf3>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
	if(p->psi > 180.0)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	491e      	ldr	r1, [pc, #120]	; (8001cf8 <imu_Comp_Filter+0x568>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fa3c 	bl	80010fc <__aeabi_fcmpgt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <imu_Comp_Filter+0x50e>
		p->psi -= 360;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <imu_Comp_Filter+0x56c>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff6d 	bl	8000b70 <__aeabi_fsub>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	if(p->psi < -180.0)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	4917      	ldr	r1, [pc, #92]	; (8001d00 <imu_Comp_Filter+0x570>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fa0b 	bl	80010c0 <__aeabi_fcmplt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <imu_Comp_Filter+0x534>
		p->psi += 360;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	4911      	ldr	r1, [pc, #68]	; (8001cfc <imu_Comp_Filter+0x56c>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ff5c 	bl	8000b74 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c


	p->x_dot_dot = acc[0];
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
	p->y_dot_dot = acc[1];
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	61da      	str	r2, [r3, #28]
	p->z_dot_dot = acc[2];
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	621a      	str	r2, [r3, #32]


}
 8001cd6:	bf00      	nop
 8001cd8:	3764      	adds	r7, #100	; 0x64
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce0:	6cd799af 	.word	0x6cd799af
 8001ce4:	3f91df40 	.word	0x3f91df40
 8001ce8:	66666666 	.word	0x66666666
 8001cec:	404ca666 	.word	0x404ca666
 8001cf0:	3f7ae148 	.word	0x3f7ae148
 8001cf4:	3ca3d70a 	.word	0x3ca3d70a
 8001cf8:	43340000 	.word	0x43340000
 8001cfc:	43b40000 	.word	0x43b40000
 8001d00:	c3340000 	.word	0xc3340000

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d08:	f002 fb9a 	bl	8004440 <HAL_Init>

  /* USER CODE BEGIN Init */
  vInitPARAMETERS(&parameter);
 8001d0c:	483d      	ldr	r0, [pc, #244]	; (8001e04 <main+0x100>)
 8001d0e:	f000 fb3d 	bl	800238c <vInitPARAMETERS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d12:	f000 f8b9 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d16:	f000 fa25 	bl	8002164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d1a:	f000 f8fd 	bl	8001f18 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d1e:	f000 f929 	bl	8001f74 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001d22:	f000 f9cb 	bl	80020bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d26:	f000 f9f3 	bl	8002110 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4836      	ldr	r0, [pc, #216]	; (8001e08 <main+0x104>)
 8001d2e:	f004 fa5b 	bl	80061e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d32:	f005 fadf 	bl	80072f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BODY_RATES */
  BODY_RATESHandle = osThreadNew(BodyRate, (void*) p, &BODY_RATES_attributes);
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <main+0x108>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <main+0x10c>)
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4835      	ldr	r0, [pc, #212]	; (8001e14 <main+0x110>)
 8001d40:	f005 fb66 	bl	8007410 <osThreadNew>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <main+0x114>)
 8001d48:	601a      	str	r2, [r3, #0]

  /* creation of DRONE_START */
  DRONE_STARTHandle = osThreadNew(DroneStart, (void*) p, &DRONE_START_attributes);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <main+0x108>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <main+0x118>)
 8001d50:	4619      	mov	r1, r3
 8001d52:	4833      	ldr	r0, [pc, #204]	; (8001e20 <main+0x11c>)
 8001d54:	f005 fb5c 	bl	8007410 <osThreadNew>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <main+0x120>)
 8001d5c:	601a      	str	r2, [r3, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(MPU, (void*) p, &IMU_attributes);
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <main+0x108>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <main+0x124>)
 8001d64:	4619      	mov	r1, r3
 8001d66:	4831      	ldr	r0, [pc, #196]	; (8001e2c <main+0x128>)
 8001d68:	f005 fb52 	bl	8007410 <osThreadNew>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <main+0x12c>)
 8001d70:	601a      	str	r2, [r3, #0]

  /* creation of PRINT_TTL */
  PRINT_TTLHandle = osThreadNew(PrintPARAMS, (void*) p, &PRINT_TTL_attributes);
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <main+0x108>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <main+0x130>)
 8001d78:	4619      	mov	r1, r3
 8001d7a:	482f      	ldr	r0, [pc, #188]	; (8001e38 <main+0x134>)
 8001d7c:	f005 fb48 	bl	8007410 <osThreadNew>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <main+0x138>)
 8001d84:	601a      	str	r2, [r3, #0]

  /* creation of INSERT_PARAMETE */
  INSERT_PARAMETEHandle = osThreadNew(insertPARAMS, (void*) p, &INSERT_PARAMETE_attributes);
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <main+0x108>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <main+0x13c>)
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	482d      	ldr	r0, [pc, #180]	; (8001e44 <main+0x140>)
 8001d90:	f005 fb3e 	bl	8007410 <osThreadNew>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <main+0x144>)
 8001d98:	601a      	str	r2, [r3, #0]

  /* creation of OUTPUT_THRUST */
  OUTPUT_THRUSTHandle = osThreadNew(outputTHRUST, (void*) p, &OUTPUT_THRUST_attributes);
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <main+0x108>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <main+0x148>)
 8001da0:	4619      	mov	r1, r3
 8001da2:	482b      	ldr	r0, [pc, #172]	; (8001e50 <main+0x14c>)
 8001da4:	f005 fb34 	bl	8007410 <osThreadNew>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <main+0x150>)
 8001dac:	601a      	str	r2, [r3, #0]

  /* creation of ROLL_PITCH */
  ROLL_PITCHHandle = osThreadNew(RollPitch, (void*) p, &ROLL_PITCH_attributes);
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <main+0x108>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <main+0x154>)
 8001db4:	4619      	mov	r1, r3
 8001db6:	4829      	ldr	r0, [pc, #164]	; (8001e5c <main+0x158>)
 8001db8:	f005 fb2a 	bl	8007410 <osThreadNew>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <main+0x15c>)
 8001dc0:	601a      	str	r2, [r3, #0]

  /* creation of YAW */
  YAWHandle = osThreadNew(YawCONTROLLER, (void*) p, &YAW_attributes);
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <main+0x108>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <main+0x160>)
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4827      	ldr	r0, [pc, #156]	; (8001e68 <main+0x164>)
 8001dcc:	f005 fb20 	bl	8007410 <osThreadNew>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <main+0x168>)
 8001dd4:	601a      	str	r2, [r3, #0]

  /* creation of ALTITUDE_CONTRO */
  ALTITUDE_CONTROHandle = osThreadNew(Altitude, (void*) p, &ALTITUDE_CONTRO_attributes);
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <main+0x108>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <main+0x16c>)
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4825      	ldr	r0, [pc, #148]	; (8001e74 <main+0x170>)
 8001de0:	f005 fb16 	bl	8007410 <osThreadNew>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <main+0x174>)
 8001de8:	601a      	str	r2, [r3, #0]

  /* creation of LATERAL_CONTROL */
  LATERAL_CONTROLHandle = osThreadNew(lateral, (void*) p, &LATERAL_CONTROL_attributes);
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <main+0x108>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <main+0x178>)
 8001df0:	4619      	mov	r1, r3
 8001df2:	4823      	ldr	r0, [pc, #140]	; (8001e80 <main+0x17c>)
 8001df4:	f005 fb0c 	bl	8007410 <osThreadNew>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <main+0x180>)
 8001dfc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001dfe:	f005 faab 	bl	8007358 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <main+0xfe>
 8001e04:	20003e50 	.word	0x20003e50
 8001e08:	20003fb4 	.word	0x20003fb4
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	0800d930 	.word	0x0800d930
 8001e14:	08002531 	.word	0x08002531
 8001e18:	20003e48 	.word	0x20003e48
 8001e1c:	0800d954 	.word	0x0800d954
 8001e20:	08002649 	.word	0x08002649
 8001e24:	20003fac 	.word	0x20003fac
 8001e28:	0800d978 	.word	0x0800d978
 8001e2c:	080026e9 	.word	0x080026e9
 8001e30:	20003f5c 	.word	0x20003f5c
 8001e34:	0800d99c 	.word	0x0800d99c
 8001e38:	08002775 	.word	0x08002775
 8001e3c:	20003fa0 	.word	0x20003fa0
 8001e40:	0800d9c0 	.word	0x0800d9c0
 8001e44:	08002899 	.word	0x08002899
 8001e48:	20003f58 	.word	0x20003f58
 8001e4c:	0800d9e4 	.word	0x0800d9e4
 8001e50:	08002bc1 	.word	0x08002bc1
 8001e54:	20003fa8 	.word	0x20003fa8
 8001e58:	0800da08 	.word	0x0800da08
 8001e5c:	08002df9 	.word	0x08002df9
 8001e60:	20003fa4 	.word	0x20003fa4
 8001e64:	0800da2c 	.word	0x0800da2c
 8001e68:	08003131 	.word	0x08003131
 8001e6c:	20003fb0 	.word	0x20003fb0
 8001e70:	0800da50 	.word	0x0800da50
 8001e74:	08003171 	.word	0x08003171
 8001e78:	20003e44 	.word	0x20003e44
 8001e7c:	0800da74 	.word	0x0800da74
 8001e80:	08003289 	.word	0x08003289
 8001e84:	20003e4c 	.word	0x20003e4c

08001e88 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b090      	sub	sp, #64	; 0x40
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2228      	movs	r2, #40	; 0x28
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f007 ffe1 	bl	8009e5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ec6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fc95 	bl	8005800 <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001edc:	f001 fa3e 	bl	800335c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 ff00 	bl	8005d00 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f06:	f001 fa29 	bl	800335c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001f0a:	f003 ffe3 	bl	8005ed4 <HAL_RCC_EnableCSS>
}
 8001f0e:	bf00      	nop
 8001f10:	3740      	adds	r7, #64	; 0x40
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <MX_I2C1_Init+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_I2C1_Init+0x58>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f56:	f002 fcf7 	bl	8004948 <HAL_I2C_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f60:	f001 f9fc 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20003f04 	.word	0x20003f04
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	000186a0 	.word	0x000186a0

08001f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60;
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fae:	223c      	movs	r2, #60	; 0x3c
 8001fb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fba:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8001fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fcc:	4839      	ldr	r0, [pc, #228]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fce:	f004 f889 	bl	80060e4 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fd8:	f001 f9c0 	bl	800335c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4832      	ldr	r0, [pc, #200]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001fea:	f004 fafd 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ff4:	f001 f9b2 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ff8:	482e      	ldr	r0, [pc, #184]	; (80020b4 <MX_TIM2_Init+0x140>)
 8001ffa:	f004 f8c1 	bl	8006180 <HAL_TIM_PWM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002004:	f001 f9aa 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4619      	mov	r1, r3
 8002016:	4827      	ldr	r0, [pc, #156]	; (80020b4 <MX_TIM2_Init+0x140>)
 8002018:	f004 fe66 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002022:	f001 f99b 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002026:	2360      	movs	r3, #96	; 0x60
 8002028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	481d      	ldr	r0, [pc, #116]	; (80020b4 <MX_TIM2_Init+0x140>)
 800203e:	f004 fa0d 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002048:	f001 f988 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800204c:	2304      	movs	r3, #4
 800204e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2204      	movs	r2, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4817      	ldr	r0, [pc, #92]	; (80020b4 <MX_TIM2_Init+0x140>)
 8002058:	f004 fa00 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002062:	f001 f97b 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2208      	movs	r2, #8
 800206a:	4619      	mov	r1, r3
 800206c:	4811      	ldr	r0, [pc, #68]	; (80020b4 <MX_TIM2_Init+0x140>)
 800206e:	f004 f9f5 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002078:	f001 f970 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	220c      	movs	r2, #12
 8002080:	4619      	mov	r1, r3
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_TIM2_Init+0x140>)
 8002084:	f004 f9ea 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 800208e:	f001 f965 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOCZayat = sConfigOC;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_TIM2_Init+0x144>)
 8002094:	461d      	mov	r5, r3
 8002096:	1d3c      	adds	r4, r7, #4
 8002098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM2_Init+0x140>)
 80020a6:	f001 ffe7 	bl	8004078 <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3738      	adds	r7, #56	; 0x38
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdb0      	pop	{r4, r5, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20003fb4 	.word	0x20003fb4
 80020b8:	20000228 	.word	0x20000228

080020bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_USART1_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020f4:	f004 fe4e 	bl	8006d94 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f001 f92d 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20003f60 	.word	0x20003f60
 800210c:	40013800 	.word	0x40013800

08002110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_USART2_UART_Init+0x50>)
 8002118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002148:	f004 fe24 	bl	8006d94 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002152:	f001 f903 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20003ff4 	.word	0x20003ff4
 8002160:	40004400 	.word	0x40004400

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_GPIO_Init+0xa8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <MX_GPIO_Init+0xa8>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_GPIO_Init+0xa8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_GPIO_Init+0xa8>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <MX_GPIO_Init+0xa8>)
 8002196:	f043 0320 	orr.w	r3, r3, #32
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_GPIO_Init+0xa8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_GPIO_Init+0xa8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <MX_GPIO_Init+0xa8>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <MX_GPIO_Init+0xa8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_GPIO_Init+0xa8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <MX_GPIO_Init+0xa8>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_GPIO_Init+0xa8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021de:	480c      	ldr	r0, [pc, #48]	; (8002210 <MX_GPIO_Init+0xac>)
 80021e0:	f002 fb9a 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4619      	mov	r1, r3
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_GPIO_Init+0xac>)
 80021fe:	f002 fa31 	bl	8004664 <HAL_GPIO_Init>

}
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40011000 	.word	0x40011000

08002214 <fview>:

/* USER CODE BEGIN 4 */
void fview(uint8_t type, float argument, char * line)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b08f      	sub	sp, #60	; 0x3c
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[25];
	if(type == PRINT_FLOAT_NO_TAB || type == PRINT_FLOAT_WITH_TAB)						//0 for printing variables, else for simple print
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <fview+0x1a>
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d14b      	bne.n	80022c6 <fview+0xb2>
	{
		int32_t x = argument *100;
 800222e:	493a      	ldr	r1, [pc, #232]	; (8002318 <fview+0x104>)
 8002230:	68b8      	ldr	r0, [r7, #8]
 8002232:	f7fe fda7 	bl	8000d84 <__aeabi_fmul>
 8002236:	4603      	mov	r3, r0
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ff69 	bl	8001110 <__aeabi_f2iz>
 800223e:	4603      	mov	r3, r0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
		x = abs(x);
 8002242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002244:	2b00      	cmp	r3, #0
 8002246:	bfb8      	it	lt
 8002248:	425b      	neglt	r3, r3
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t y = x%100;
 800224c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <fview+0x108>)
 8002250:	fb83 1302 	smull	r1, r3, r3, r2
 8002254:	1159      	asrs	r1, r3, #5
 8002256:	17d3      	asrs	r3, r2, #31
 8002258:	1acb      	subs	r3, r1, r3
 800225a:	2164      	movs	r1, #100	; 0x64
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
		(type == PRINT_FLOAT_NO_TAB)? strcat(line, "%02d.%02u\r\n") : strcat(line, "%02d.%02u\t");
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <fview+0x74>
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fd ff70 	bl	8000150 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <fview+0x10c>)
 800227a:	461c      	mov	r4, r3
 800227c:	4613      	mov	r3, r2
 800227e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002280:	6020      	str	r0, [r4, #0]
 8002282:	6061      	str	r1, [r4, #4]
 8002284:	60a2      	str	r2, [r4, #8]
 8002286:	e010      	b.n	80022aa <fview+0x96>
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fd ff61 	bl	8000150 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4923      	ldr	r1, [pc, #140]	; (8002324 <fview+0x110>)
 8002298:	461a      	mov	r2, r3
 800229a:	460b      	mov	r3, r1
 800229c:	cb03      	ldmia	r3!, {r0, r1}
 800229e:	6010      	str	r0, [r2, #0]
 80022a0:	6051      	str	r1, [r2, #4]
 80022a2:	8819      	ldrh	r1, [r3, #0]
 80022a4:	789b      	ldrb	r3, [r3, #2]
 80022a6:	8111      	strh	r1, [r2, #8]
 80022a8:	7293      	strb	r3, [r2, #10]
		sprintf((char*)buffer,line, x/100,y);
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <fview+0x108>)
 80022ae:	fb82 1203 	smull	r1, r2, r2, r3
 80022b2:	1152      	asrs	r2, r2, #5
 80022b4:	17db      	asrs	r3, r3, #31
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	f107 0014 	add.w	r0, r7, #20
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f008 fa24 	bl	800a70c <siprintf>
	{
 80022c4:	e015      	b.n	80022f2 <fview+0xde>
	}
	else
	{
		strcat(line, "%d\r\n");
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fd ff42 	bl	8000150 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <fview+0x114>)
 80022d6:	6810      	ldr	r0, [r2, #0]
 80022d8:	6018      	str	r0, [r3, #0]
 80022da:	7912      	ldrb	r2, [r2, #4]
 80022dc:	711a      	strb	r2, [r3, #4]
		sprintf((char*)buffer, line, (uint32_t)argument);
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f7fe ff3c 	bl	800115c <__aeabi_f2uiz>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f008 fa0d 	bl	800a70c <siprintf>
	}
	HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd ff2a 	bl	8000150 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f107 0114 	add.w	r1, r7, #20
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <fview+0x118>)
 800230a:	f004 fd90 	bl	8006e2e <HAL_UART_Transmit>
}
 800230e:	bf00      	nop
 8002310:	373c      	adds	r7, #60	; 0x3c
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	42c80000 	.word	0x42c80000
 800231c:	51eb851f 	.word	0x51eb851f
 8002320:	0800d7b0 	.word	0x0800d7b0
 8002324:	0800d7bc 	.word	0x0800d7bc
 8002328:	0800d7c8 	.word	0x0800d7c8
 800232c:	20003f60 	.word	0x20003f60

08002330 <string_receive>:
void string_receive(char* buffer)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(&huart1, &buffer[i], 1, HAL_MAX_DELAY);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	18d1      	adds	r1, r2, r3
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	2201      	movs	r2, #1
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <string_receive+0x58>)
 800234a:	f004 fe09 	bl	8006f60 <HAL_UART_Receive>
	while(buffer[i]!='#')
 800234e:	e00b      	b.n	8002368 <string_receive+0x38>
	{
		i++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive(&huart1, (uint8_t*)&buffer[i], 1, HAL_MAX_DELAY);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	18d1      	adds	r1, r2, r3
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	2201      	movs	r2, #1
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <string_receive+0x58>)
 8002364:	f004 fdfc 	bl	8006f60 <HAL_UART_Receive>
	while(buffer[i]!='#')
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b23      	cmp	r3, #35	; 0x23
 8002372:	d1ed      	bne.n	8002350 <string_receive+0x20>
	}
	buffer[i] = '\0';
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20003f60 	.word	0x20003f60

0800238c <vInitPARAMETERS>:
void vInitPARAMETERS(parameters *ptr)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	/***********************************/
	/*TO INITIALIZE ALL PARAMETERS TO 0*/
	/***********************************/
	ptr->x = ptr->y = ptr->z = 0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
	ptr->x_dot = ptr->y_dot = ptr->z_dot = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
	ptr->x_dot_dot = ptr->y_dot_dot = ptr->z_dot_dot = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	61da      	str	r2, [r3, #28]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
	ptr->phi = ptr->theta = ptr->psi = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
	ptr->phi_dot = ptr->theta_dot = ptr->psi_dot = 0;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c
	ptr->p = ptr->q = ptr->r = 0;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	651a      	str	r2, [r3, #80]	; 0x50
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	64da      	str	r2, [r3, #76]	; 0x4c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
	ptr->p_dot = ptr->q_dot = ptr->r_dot = 0;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	; 0x58
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
	ptr->x_cmd = ptr->y_cmd = ptr->z_cmd = 0;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	669a      	str	r2, [r3, #104]	; 0x68
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	665a      	str	r2, [r3, #100]	; 0x64
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
	ptr->x_dot_cmd = ptr->y_dot_cmd = ptr->z_dot_cmd = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	675a      	str	r2, [r3, #116]	; 0x74
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	671a      	str	r2, [r3, #112]	; 0x70
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	66da      	str	r2, [r3, #108]	; 0x6c
	ptr->x_dot_dot_cmd = ptr->y_dot_dot_cmd = ptr->z_dot_dot_cmd = 0;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->psi_cmd = ptr->p_cmd = ptr->q_cmd = ptr->r_cmd = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ptr->u1 = ptr->u2 = ptr->u3 = ptr->u4 = 0;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ptr->cmd_thrust[0] = 0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = 0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ptr-> phib=ptr-> thetab=ptr-> psib=0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <BodyRate>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_BodyRate */
void BodyRate(void *argument)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	parameters* ptr = argument;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */

  for(;;)
  {
		f32 p_error,q_error,r_error;
		p_error = ptr->p_cmd - ptr->p;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe fb11 	bl	8000b70 <__aeabi_fsub>
 800254e:	4603      	mov	r3, r0
 8002550:	613b      	str	r3, [r7, #16]
		q_error = ptr->q_cmd - ptr->q;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7fe fb06 	bl	8000b70 <__aeabi_fsub>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
		r_error = ptr->r_cmd - ptr->r;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7fe fafb 	bl	8000b70 <__aeabi_fsub>
 800257a:	4603      	mov	r3, r0
 800257c:	60bb      	str	r3, [r7, #8]
		ptr->p_dot = kp_p * p_error;
 800257e:	4930      	ldr	r1, [pc, #192]	; (8002640 <BodyRate+0x110>)
 8002580:	6938      	ldr	r0, [r7, #16]
 8002582:	f7fe fbff 	bl	8000d84 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
		ptr->q_dot = kp_q * q_error;
 800258e:	492c      	ldr	r1, [pc, #176]	; (8002640 <BodyRate+0x110>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7fe fbf7 	bl	8000d84 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	659a      	str	r2, [r3, #88]	; 0x58
		ptr->r_dot = kp_r * r_error;
 800259e:	4929      	ldr	r1, [pc, #164]	; (8002644 <BodyRate+0x114>)
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	f7fe fbef 	bl	8000d84 <__aeabi_fmul>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c
		ptr->u2 = Ixx * ptr->p_dot;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff38 	bl	8000428 <__aeabi_f2d>
 80025b8:	a31d      	add	r3, pc, #116	; (adr r3, 8002630 <BodyRate+0x100>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd ff8b 	bl	80004d8 <__aeabi_dmul>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	4618      	mov	r0, r3
 80025c8:	4621      	mov	r1, r4
 80025ca:	f7fe fa7d 	bl	8000ac8 <__aeabi_d2f>
 80025ce:	4602      	mov	r2, r0
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		ptr->u3 = Iyy * ptr->q_dot;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff24 	bl	8000428 <__aeabi_f2d>
 80025e0:	a313      	add	r3, pc, #76	; (adr r3, 8002630 <BodyRate+0x100>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fd ff77 	bl	80004d8 <__aeabi_dmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	4618      	mov	r0, r3
 80025f0:	4621      	mov	r1, r4
 80025f2:	f7fe fa69 	bl	8000ac8 <__aeabi_d2f>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		ptr->u4 = Izz * ptr->r_dot;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff10 	bl	8000428 <__aeabi_f2d>
 8002608:	a30b      	add	r3, pc, #44	; (adr r3, 8002638 <BodyRate+0x108>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd ff63 	bl	80004d8 <__aeabi_dmul>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	f7fe fa55 	bl	8000ac8 <__aeabi_d2f>
 800261e:	4602      	mov	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		osDelay(20);
 8002626:	2014      	movs	r0, #20
 8002628:	f004 ff9c 	bl	8007564 <osDelay>
  {
 800262c:	e786      	b.n	800253c <BodyRate+0xc>
 800262e:	bf00      	nop
 8002630:	47ae147b 	.word	0x47ae147b
 8002634:	3fb47ae1 	.word	0x3fb47ae1
 8002638:	9142b303 	.word	0x9142b303
 800263c:	3f44e7ee 	.word	0x3f44e7ee
 8002640:	42a00000 	.word	0x42a00000
 8002644:	41700000 	.word	0x41700000

08002648 <DroneStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DroneStart */
void DroneStart(void *argument)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DroneStart */
	parameters* ptr = argument;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
	/*TO CALIBRATE DRONE MOTOR OR START*/
	//u8 buffer[25] = {"Calibrate = 0#\nDirect Start = 1#\n"};
	u8 buffer[] = {"Insert Psi command: \r\n"};
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <DroneStart+0x98>)
 8002656:	f107 040c 	add.w	r4, r7, #12
 800265a:	461d      	mov	r5, r3
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002664:	6020      	str	r0, [r4, #0]
 8002666:	3404      	adds	r4, #4
 8002668:	8021      	strh	r1, [r4, #0]
 800266a:	3402      	adds	r4, #2
 800266c:	0c0b      	lsrs	r3, r1, #16
 800266e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fd6b 	bl	8000150 <strlen>
 800267a:	4603      	mov	r3, r0
 800267c:	b29a      	uxth	r2, r3
 800267e:	f107 010c 	add.w	r1, r7, #12
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	4817      	ldr	r0, [pc, #92]	; (80026e4 <DroneStart+0x9c>)
 8002688:	f004 fbd1 	bl	8006e2e <HAL_UART_Transmit>
	string_receive(buffer);
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe4d 	bl	8002330 <string_receive>
	ptr->psi_cmd = atoi(buffer)/1.0f;
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4618      	mov	r0, r3
 800269c:	f007 fba6 	bl	8009dec <atoi>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fb1a 	bl	8000cdc <__aeabi_i2f>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Infinite loop */
  for(;;)
  {
	string_receive(buffer);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe3b 	bl	8002330 <string_receive>
	ptr->psi_cmd = atoi(buffer)/1.0f;
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fb94 	bl	8009dec <atoi>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fb08 	bl	8000cdc <__aeabi_i2f>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	default: vCalibrate_Motors();
		}
	vTaskDelete(NULL);
	*/

    osDelay(30000);
 80026d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80026d8:	f004 ff44 	bl	8007564 <osDelay>
	string_receive(buffer);
 80026dc:	e7e8      	b.n	80026b0 <DroneStart+0x68>
 80026de:	bf00      	nop
 80026e0:	0800d7d0 	.word	0x0800d7d0
 80026e4:	20003f60 	.word	0x20003f60

080026e8 <MPU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU */
void MPU(void *argument)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU */
	parameters *ptr = argument;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
	u32 tickzayat;
	  /* Infinite loop */
	  for(;;)
	  {
		tickzayat = osKernelGetTickCount();
 80026f4:	f004 fe64 	bl	80073c0 <osKernelGetTickCount>
 80026f8:	60b8      	str	r0, [r7, #8]

		Read_Accel_Values(ptr);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7fe fe00 	bl	8001300 <Read_Accel_Values>
		Read_Gyro_Values(ptr,INTEGRAL_DT);
 8002700:	4918      	ldr	r1, [pc, #96]	; (8002764 <MPU+0x7c>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7fe fe80 	bl	8001408 <Read_Gyro_Values>
		imu_Comp_Filter(ptr,INTEGRAL_DT);
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <MPU+0x7c>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff f840 	bl	8001790 <imu_Comp_Filter>
		fview(0,ptr->phi,"Value of phi = \r\n");
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <MPU+0x80>)
 8002716:	4619      	mov	r1, r3
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fd7b 	bl	8002214 <fview>
		fview(0,ptr->theta,"Value of theta = \r\n");
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <MPU+0x84>)
 8002724:	4619      	mov	r1, r3
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fd74 	bl	8002214 <fview>
		fview(0,ptr->psi, "Value of psi = \r\n");
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <MPU+0x88>)
 8002732:	4619      	mov	r1, r3
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff fd6d 	bl	8002214 <fview>

		tickzayat = osKernelGetTickCount() - tickzayat;
 800273a:	f004 fe41 	bl	80073c0 <osKernelGetTickCount>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	60bb      	str	r3, [r7, #8]
		tickzayat = 10 - tickzayat;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1c3 030a 	rsb	r3, r3, #10
 800274c:	60bb      	str	r3, [r7, #8]
		if(tickzayat < 0)Error_Handler();
		tickzayat = osKernelGetTickCount() + tickzayat;
 800274e:	f004 fe37 	bl	80073c0 <osKernelGetTickCount>
 8002752:	4602      	mov	r2, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4413      	add	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
		osDelayUntil(tickzayat);
 800275a:	68b8      	ldr	r0, [r7, #8]
 800275c:	f004 ff30 	bl	80075c0 <osDelayUntil>
		tickzayat = osKernelGetTickCount();
 8002760:	e7c8      	b.n	80026f4 <MPU+0xc>
 8002762:	bf00      	nop
 8002764:	3ca3d70a 	.word	0x3ca3d70a
 8002768:	0800d7e8 	.word	0x0800d7e8
 800276c:	0800d7fc 	.word	0x0800d7fc
 8002770:	0800d810 	.word	0x0800d810

08002774 <PrintPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PrintPARAMS */
void PrintPARAMS(void *argument)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b08b      	sub	sp, #44	; 0x2c
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PrintPARAMS */
	uint8_t buffer[25];
	parameters *ptr = argument;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  {
		/***********************************/
		/*TO READ FORCE VALS IN WORLD FRAME*/
		/***********************************/

	  fview(0, ptr->cmd_thrust[0], "Value of F1 = ");
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002786:	4a3c      	ldr	r2, [pc, #240]	; (8002878 <PrintPARAMS+0x104>)
 8002788:	4619      	mov	r1, r3
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fd42 	bl	8002214 <fview>
	  fview(0, ptr->cmd_thrust[1], "Value of F2 = ");
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <PrintPARAMS+0x108>)
 8002798:	4619      	mov	r1, r3
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff fd3a 	bl	8002214 <fview>
	  fview(0, ptr->cmd_thrust[2], "Value of F3 = ");
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <PrintPARAMS+0x10c>)
 80027a8:	4619      	mov	r1, r3
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff fd32 	bl	8002214 <fview>
	  fview(0, ptr->cmd_thrust[3], "Value of F4 = ");
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027b6:	4a33      	ldr	r2, [pc, #204]	; (8002884 <PrintPARAMS+0x110>)
 80027b8:	4619      	mov	r1, r3
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff fd2a 	bl	8002214 <fview>


sprintf((char*)buffer, "Value of F2 = %f\t", ptr->cmd_thrust[1]);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe2e 	bl	8000428 <__aeabi_f2d>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	f107 0008 	add.w	r0, r7, #8
 80027d4:	461a      	mov	r2, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	492b      	ldr	r1, [pc, #172]	; (8002888 <PrintPARAMS+0x114>)
 80027da:	f007 ff97 	bl	800a70c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fcb4 	bl	8000150 <strlen>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	f107 0108 	add.w	r1, r7, #8
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <PrintPARAMS+0x118>)
 80027f6:	f004 fb1a 	bl	8006e2e <HAL_UART_Transmit>

sprintf((char*)buffer, "Value of F3 = %f\n", ptr->cmd_thrust[2]);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fe11 	bl	8000428 <__aeabi_f2d>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	f107 0008 	add.w	r0, r7, #8
 800280e:	461a      	mov	r2, r3
 8002810:	4623      	mov	r3, r4
 8002812:	491f      	ldr	r1, [pc, #124]	; (8002890 <PrintPARAMS+0x11c>)
 8002814:	f007 ff7a 	bl	800a70c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fc97 	bl	8000150 <strlen>
 8002822:	4603      	mov	r3, r0
 8002824:	b29a      	uxth	r2, r3
 8002826:	f107 0108 	add.w	r1, r7, #8
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	4817      	ldr	r0, [pc, #92]	; (800288c <PrintPARAMS+0x118>)
 8002830:	f004 fafd 	bl	8006e2e <HAL_UART_Transmit>

sprintf((char*)buffer, "Value of F4 = %f\n", ptr->cmd_thrust[3]);
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fdf4 	bl	8000428 <__aeabi_f2d>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	f107 0008 	add.w	r0, r7, #8
 8002848:	461a      	mov	r2, r3
 800284a:	4623      	mov	r3, r4
 800284c:	4911      	ldr	r1, [pc, #68]	; (8002894 <PrintPARAMS+0x120>)
 800284e:	f007 ff5d 	bl	800a70c <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fc7a 	bl	8000150 <strlen>
 800285c:	4603      	mov	r3, r0
 800285e:	b29a      	uxth	r2, r3
 8002860:	f107 0108 	add.w	r1, r7, #8
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	4808      	ldr	r0, [pc, #32]	; (800288c <PrintPARAMS+0x118>)
 800286a:	f004 fae0 	bl	8006e2e <HAL_UART_Transmit>

	osDelay(40);
 800286e:	2028      	movs	r0, #40	; 0x28
 8002870:	f004 fe78 	bl	8007564 <osDelay>
	  fview(0, ptr->cmd_thrust[0], "Value of F1 = ");
 8002874:	e784      	b.n	8002780 <PrintPARAMS+0xc>
 8002876:	bf00      	nop
 8002878:	0800d824 	.word	0x0800d824
 800287c:	0800d834 	.word	0x0800d834
 8002880:	0800d844 	.word	0x0800d844
 8002884:	0800d854 	.word	0x0800d854
 8002888:	0800d864 	.word	0x0800d864
 800288c:	20003f60 	.word	0x20003f60
 8002890:	0800d878 	.word	0x0800d878
 8002894:	0800d88c 	.word	0x0800d88c

08002898 <insertPARAMS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_insertPARAMS */
void insertPARAMS(void *argument)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b08d      	sub	sp, #52	; 0x34
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN insertPARAMS */
	parameters *ptr = argument;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t buffer[25];
	uint8_t ok[] = {"OK"};
 80028a4:	4abc      	ldr	r2, [pc, #752]	; (8002b98 <insertPARAMS+0x300>)
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4611      	mov	r1, r2
 80028ae:	8019      	strh	r1, [r3, #0]
 80028b0:	3302      	adds	r3, #2
 80028b2:	0c12      	lsrs	r2, r2, #16
 80028b4:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		/*TO INSERT X Y Z TARGET TO PID BLK*/
	strcpy((char*)buffer, "Insert x\n");
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4ab8      	ldr	r2, [pc, #736]	; (8002b9c <insertPARAMS+0x304>)
 80028bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028be:	c303      	stmia	r3!, {r0, r1}
 80028c0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fc42 	bl	8000150 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f107 0110 	add.w	r1, r7, #16
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	48b1      	ldr	r0, [pc, #708]	; (8002ba0 <insertPARAMS+0x308>)
 80028da:	f004 faa8 	bl	8006e2e <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fd24 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fc2f 	bl	8000150 <strlen>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	f107 010c 	add.w	r1, r7, #12
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	48a8      	ldr	r0, [pc, #672]	; (8002ba0 <insertPARAMS+0x308>)
 8002900:	f004 fa95 	bl	8006e2e <HAL_UART_Transmit>

	ptr->x_cmd = atoi((char*)buffer);
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4618      	mov	r0, r3
 800290a:	f007 fa6f 	bl	8009dec <atoi>
 800290e:	4603      	mov	r3, r0
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f9e3 	bl	8000cdc <__aeabi_i2f>
 8002916:	4602      	mov	r2, r0
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	661a      	str	r2, [r3, #96]	; 0x60
	strcpy((char*)buffer, "Insert x dot\n");
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4aa0      	ldr	r2, [pc, #640]	; (8002ba4 <insertPARAMS+0x30c>)
 8002922:	461c      	mov	r4, r3
 8002924:	4613      	mov	r3, r2
 8002926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002928:	c407      	stmia	r4!, {r0, r1, r2}
 800292a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fc0d 	bl	8000150 <strlen>
 8002936:	4603      	mov	r3, r0
 8002938:	b29a      	uxth	r2, r3
 800293a:	f107 0110 	add.w	r1, r7, #16
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	4897      	ldr	r0, [pc, #604]	; (8002ba0 <insertPARAMS+0x308>)
 8002944:	f004 fa73 	bl	8006e2e <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fcef 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fbfa 	bl	8000150 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	b29a      	uxth	r2, r3
 8002960:	f107 010c 	add.w	r1, r7, #12
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	488d      	ldr	r0, [pc, #564]	; (8002ba0 <insertPARAMS+0x308>)
 800296a:	f004 fa60 	bl	8006e2e <HAL_UART_Transmit>

	ptr->x_dot_cmd = atoi((char*)buffer);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4618      	mov	r0, r3
 8002974:	f007 fa3a 	bl	8009dec <atoi>
 8002978:	4603      	mov	r3, r0
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f9ae 	bl	8000cdc <__aeabi_i2f>
 8002980:	4602      	mov	r2, r0
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	66da      	str	r2, [r3, #108]	; 0x6c
	strcpy((char*)buffer, "Insert y\n");
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <insertPARAMS+0x310>)
 800298c:	ca07      	ldmia	r2, {r0, r1, r2}
 800298e:	c303      	stmia	r3!, {r0, r1}
 8002990:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fbda 	bl	8000150 <strlen>
 800299c:	4603      	mov	r3, r0
 800299e:	b29a      	uxth	r2, r3
 80029a0:	f107 0110 	add.w	r1, r7, #16
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	487d      	ldr	r0, [pc, #500]	; (8002ba0 <insertPARAMS+0x308>)
 80029aa:	f004 fa40 	bl	8006e2e <HAL_UART_Transmit>
	string_receive((s8*)buffer);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fcbc 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fbc7 	bl	8000150 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 010c 	add.w	r1, r7, #12
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	4874      	ldr	r0, [pc, #464]	; (8002ba0 <insertPARAMS+0x308>)
 80029d0:	f004 fa2d 	bl	8006e2e <HAL_UART_Transmit>

	ptr->y_cmd = atoi(buffer);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f007 fa07 	bl	8009dec <atoi>
 80029de:	4603      	mov	r3, r0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe f97b 	bl	8000cdc <__aeabi_i2f>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	665a      	str	r2, [r3, #100]	; 0x64
	strcpy(buffer, "Insert y dot\n");
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4a6e      	ldr	r2, [pc, #440]	; (8002bac <insertPARAMS+0x314>)
 80029f2:	461c      	mov	r4, r3
 80029f4:	4613      	mov	r3, r2
 80029f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f8:	c407      	stmia	r4!, {r0, r1, r2}
 80029fa:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fba5 	bl	8000150 <strlen>
 8002a06:	4603      	mov	r3, r0
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	f107 0110 	add.w	r1, r7, #16
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	4863      	ldr	r0, [pc, #396]	; (8002ba0 <insertPARAMS+0x308>)
 8002a14:	f004 fa0b 	bl	8006e2e <HAL_UART_Transmit>
	string_receive(buffer);
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fc87 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fb92 	bl	8000150 <strlen>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	f107 010c 	add.w	r1, r7, #12
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	4859      	ldr	r0, [pc, #356]	; (8002ba0 <insertPARAMS+0x308>)
 8002a3a:	f004 f9f8 	bl	8006e2e <HAL_UART_Transmit>

	ptr->y_dot_cmd = atoi(buffer);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f007 f9d2 	bl	8009dec <atoi>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f946 	bl	8000cdc <__aeabi_i2f>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	671a      	str	r2, [r3, #112]	; 0x70
	strcpy(buffer, "Insert z\n");
 8002a56:	f107 0310 	add.w	r3, r7, #16
 8002a5a:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <insertPARAMS+0x318>)
 8002a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a5e:	c303      	stmia	r3!, {r0, r1}
 8002a60:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fb72 	bl	8000150 <strlen>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	f107 0110 	add.w	r1, r7, #16
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	4849      	ldr	r0, [pc, #292]	; (8002ba0 <insertPARAMS+0x308>)
 8002a7a:	f004 f9d8 	bl	8006e2e <HAL_UART_Transmit>
	string_receive(buffer);
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc54 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fb5f 	bl	8000150 <strlen>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	f107 010c 	add.w	r1, r7, #12
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	4840      	ldr	r0, [pc, #256]	; (8002ba0 <insertPARAMS+0x308>)
 8002aa0:	f004 f9c5 	bl	8006e2e <HAL_UART_Transmit>

	ptr->z_cmd = atoi(buffer);
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f007 f99f 	bl	8009dec <atoi>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe f913 	bl	8000cdc <__aeabi_i2f>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	669a      	str	r2, [r3, #104]	; 0x68
	strcpy(buffer, "Insert z dot\n");
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <insertPARAMS+0x31c>)
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac8:	c407      	stmia	r4!, {r0, r1, r2}
 8002aca:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fb3d 	bl	8000150 <strlen>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	f107 0110 	add.w	r1, r7, #16
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	482f      	ldr	r0, [pc, #188]	; (8002ba0 <insertPARAMS+0x308>)
 8002ae4:	f004 f9a3 	bl	8006e2e <HAL_UART_Transmit>
	string_receive(buffer);
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fc1f 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fb2a 	bl	8000150 <strlen>
 8002afc:	4603      	mov	r3, r0
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	f107 010c 	add.w	r1, r7, #12
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <insertPARAMS+0x308>)
 8002b0a:	f004 f990 	bl	8006e2e <HAL_UART_Transmit>

	ptr->z_dot_cmd = atoi(buffer);
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f007 f96a 	bl	8009dec <atoi>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe f8de 	bl	8000cdc <__aeabi_i2f>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	675a      	str	r2, [r3, #116]	; 0x74
	strcpy(buffer, "Insert psi\n");
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <insertPARAMS+0x320>)
 8002b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002b32:	f107 0310 	add.w	r3, r7, #16
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fb0a 	bl	8000150 <strlen>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f107 0110 	add.w	r1, r7, #16
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
 8002b48:	4815      	ldr	r0, [pc, #84]	; (8002ba0 <insertPARAMS+0x308>)
 8002b4a:	f004 f970 	bl	8006e2e <HAL_UART_Transmit>
	string_receive(buffer);
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fbec 	bl	8002330 <string_receive>
	HAL_UART_Transmit(&huart1, ok, strlen(ok), HAL_MAX_DELAY);
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd faf7 	bl	8000150 <strlen>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f107 010c 	add.w	r1, r7, #12
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <insertPARAMS+0x308>)
 8002b70:	f004 f95d 	bl	8006e2e <HAL_UART_Transmit>

	ptr->psi_cmd = atoi(buffer);
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f007 f937 	bl	8009dec <atoi>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f8ab 	bl	8000cdc <__aeabi_i2f>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	osDelay(60000);
 8002b8e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002b92:	f004 fce7 	bl	8007564 <osDelay>
  {
 8002b96:	e68e      	b.n	80028b6 <insertPARAMS+0x1e>
 8002b98:	0800d900 	.word	0x0800d900
 8002b9c:	0800d8a0 	.word	0x0800d8a0
 8002ba0:	20003f60 	.word	0x20003f60
 8002ba4:	0800d8ac 	.word	0x0800d8ac
 8002ba8:	0800d8bc 	.word	0x0800d8bc
 8002bac:	0800d8c8 	.word	0x0800d8c8
 8002bb0:	0800d8d8 	.word	0x0800d8d8
 8002bb4:	0800d8e4 	.word	0x0800d8e4
 8002bb8:	0800d8f4 	.word	0x0800d8f4
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <outputTHRUST>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_outputTHRUST */
void outputTHRUST(void *argument)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b08d      	sub	sp, #52	; 0x34
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN outputTHRUST */
	parameters *ptr = argument;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  for(;;)
  {

	f32 l = L/1.4142135623;
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <outputTHRUST+0x228>)
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
	f32 t1 = ptr->u2/ l;
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f987 	bl	8000eec <__aeabi_fdiv>
 8002bde:	4603      	mov	r3, r0
 8002be0:	623b      	str	r3, [r7, #32]
	f32 t2 = ptr->u3 / l;
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f97e 	bl	8000eec <__aeabi_fdiv>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	61fb      	str	r3, [r7, #28]
	f32 t3 = - ptr->u4/ k_thrust;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc12 	bl	8000428 <__aeabi_f2d>
 8002c04:	a376      	add	r3, pc, #472	; (adr r3, 8002de0 <outputTHRUST+0x220>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fd8f 	bl	800072c <__aeabi_ddiv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	4618      	mov	r0, r3
 8002c14:	4621      	mov	r1, r4
 8002c16:	f7fd ff57 	bl	8000ac8 <__aeabi_d2f>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	61bb      	str	r3, [r7, #24]
	f32 t4 = ptr->u1;
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c24:	617b      	str	r3, [r7, #20]
	ptr->cmd_thrust[0] = (t1 + t2 + t3 + t4)/4.f; // front left
 8002c26:	69f9      	ldr	r1, [r7, #28]
 8002c28:	6a38      	ldr	r0, [r7, #32]
 8002c2a:	f7fd ffa3 	bl	8000b74 <__addsf3>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd ff9e 	bl	8000b74 <__addsf3>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd ff99 	bl	8000b74 <__addsf3>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f94f 	bl	8000eec <__aeabi_fdiv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	ptr->cmd_thrust[1] = (-t1 + t2 - t3 + t4)/4.f; // front right
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	69f8      	ldr	r0, [r7, #28]
 8002c5c:	f7fd ff88 	bl	8000b70 <__aeabi_fsub>
 8002c60:	4603      	mov	r3, r0
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd ff83 	bl	8000b70 <__aeabi_fsub>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6979      	ldr	r1, [r7, #20]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd ff80 	bl	8000b74 <__addsf3>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f936 	bl	8000eec <__aeabi_fdiv>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	ptr->cmd_thrust[2] = (t1 - t2 - t3 + t4)/4.f ; // rear left
 8002c8a:	69f9      	ldr	r1, [r7, #28]
 8002c8c:	6a38      	ldr	r0, [r7, #32]
 8002c8e:	f7fd ff6f 	bl	8000b70 <__aeabi_fsub>
 8002c92:	4603      	mov	r3, r0
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd ff6a 	bl	8000b70 <__aeabi_fsub>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd ff67 	bl	8000b74 <__addsf3>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f91d 	bl	8000eec <__aeabi_fdiv>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ptr->cmd_thrust[3] = (-t1 - t2 + t3 + t4)/4.f; // rear right
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd ff53 	bl	8000b70 <__aeabi_fsub>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd ff50 	bl	8000b74 <__addsf3>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd ff4b 	bl	8000b74 <__addsf3>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f901 	bl	8000eec <__aeabi_fdiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/*************/
	/*PWM MAPPING*/
	/*************/
	u8 i;
	u16 speed_pwm[4];
	for(i=0 ; i<4;i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002cfa:	e067      	b.n	8002dcc <outputTHRUST+0x20c>
	{
		if (ptr->cmd_thrust[i] < F_min) ptr->cmd_thrust[i]=F_min;
 8002cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d02:	3328      	adds	r3, #40	; 0x28
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4938      	ldr	r1, [pc, #224]	; (8002dec <outputTHRUST+0x22c>)
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe f9d7 	bl	80010c0 <__aeabi_fcmplt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <outputTHRUST+0x168>
 8002d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d1e:	3328      	adds	r3, #40	; 0x28
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <outputTHRUST+0x22c>)
 8002d26:	605a      	str	r2, [r3, #4]
		if (ptr->cmd_thrust[i] > F_max) ptr->cmd_thrust[i]=F_max;
 8002d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	3328      	adds	r3, #40	; 0x28
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	492e      	ldr	r1, [pc, #184]	; (8002df0 <outputTHRUST+0x230>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe f9df 	bl	80010fc <__aeabi_fcmpgt>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <outputTHRUST+0x194>
 8002d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4a:	3328      	adds	r3, #40	; 0x28
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <outputTHRUST+0x230>)
 8002d52:	605a      	str	r2, [r3, #4]
		speed_pwm[i] = (1/(F_max-F_min))*ptr->cmd_thrust[i]*500.0;
 8002d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f80c 	bl	8000d84 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb5a 	bl	8000428 <__aeabi_f2d>
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <outputTHRUST+0x234>)
 8002d7a:	f7fd fbad 	bl	80004d8 <__aeabi_dmul>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd fe7b 	bl	8000a88 <__aeabi_d2uiz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	0063      	lsls	r3, r4, #1
 8002d98:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f823 2c24 	strh.w	r2, [r3, #-36]
		PWM(speed_pwm[i],i+1);
 8002da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002dac:	4413      	add	r3, r2
 8002dae:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002db6:	3301      	adds	r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe fa31 	bl	8001224 <PWM>
	for(i=0 ; i<4;i++)
 8002dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d993      	bls.n	8002cfc <outputTHRUST+0x13c>
	}
    osDelay(20);
 8002dd4:	2014      	movs	r0, #20
 8002dd6:	f004 fbc5 	bl	8007564 <osDelay>
  {
 8002dda:	e6f7      	b.n	8002bcc <outputTHRUST+0xc>
 8002ddc:	f3af 8000 	nop.w
 8002de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002de4:	3f90624d 	.word	0x3f90624d
 8002de8:	3f3504f3 	.word	0x3f3504f3
 8002dec:	c0400000 	.word	0xc0400000
 8002df0:	44160000 	.word	0x44160000
 8002df4:	407f4000 	.word	0x407f4000

08002df8 <RollPitch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RollPitch */
void RollPitch(void *argument)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RollPitch */
	parameters* ptr = argument;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	647b      	str	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {
	f32 b_x_dot_cmd, b_y_dot_cmd, taw=1/kp_bank;
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
	f32 R11 = 1;
 8002e0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 R12 = sin(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fb07 	bl	8000428 <__aeabi_f2d>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4621      	mov	r1, r4
 8002e22:	f009 f921 	bl	800c068 <sin>
 8002e26:	4604      	mov	r4, r0
 8002e28:	460d      	mov	r5, r1
 8002e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fafa 	bl	8000428 <__aeabi_f2d>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f009 f914 	bl	800c068 <sin>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fb46 	bl	80004d8 <__aeabi_dmul>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4625      	mov	r5, r4
 8002e52:	461c      	mov	r4, r3
 8002e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fae5 	bl	8000428 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f009 f8c9 	bl	800bffc <cos>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fc5b 	bl	800072c <__aeabi_ddiv>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f7fd fe23 	bl	8000ac8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
	f32 R13= cos(ptr->phi) * sin(ptr->theta) / cos(ptr->theta);
 8002e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd facc 	bl	8000428 <__aeabi_f2d>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4618      	mov	r0, r3
 8002e96:	4621      	mov	r1, r4
 8002e98:	f009 f8b0 	bl	800bffc <cos>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	460d      	mov	r5, r1
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fabf 	bl	8000428 <__aeabi_f2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f009 f8d9 	bl	800c068 <sin>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd fb0b 	bl	80004d8 <__aeabi_dmul>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	4625      	mov	r5, r4
 8002ec8:	461c      	mov	r4, r3
 8002eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd faaa 	bl	8000428 <__aeabi_f2d>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f009 f88e 	bl	800bffc <cos>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd fc20 	bl	800072c <__aeabi_ddiv>
 8002eec:	4603      	mov	r3, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	f7fd fde8 	bl	8000ac8 <__aeabi_d2f>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
	f32 R21 = 0;
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
	f32 R22 = cos(ptr->phi);
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fa8e 	bl	8000428 <__aeabi_f2d>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4618      	mov	r0, r3
 8002f12:	4621      	mov	r1, r4
 8002f14:	f009 f872 	bl	800bffc <cos>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4621      	mov	r1, r4
 8002f20:	f7fd fdd2 	bl	8000ac8 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
	f32 R23= -sin(ptr->phi);
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fa7b 	bl	8000428 <__aeabi_f2d>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	4618      	mov	r0, r3
 8002f38:	4621      	mov	r1, r4
 8002f3a:	f009 f895 	bl	800c068 <sin>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	4618      	mov	r0, r3
 8002f44:	4621      	mov	r1, r4
 8002f46:	f7fd fdbf 	bl	8000ac8 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
	f32 R31 = 0;
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
	f32 R32 = sin(ptr->phi) / cos(ptr->theta);
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fa63 	bl	8000428 <__aeabi_f2d>
 8002f62:	4603      	mov	r3, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	4618      	mov	r0, r3
 8002f68:	4621      	mov	r1, r4
 8002f6a:	f009 f87d 	bl	800c068 <sin>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	460d      	mov	r5, r1
 8002f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa56 	bl	8000428 <__aeabi_f2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f009 f83a 	bl	800bffc <cos>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	4629      	mov	r1, r5
 8002f90:	f7fd fbcc 	bl	800072c <__aeabi_ddiv>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f7fd fd94 	bl	8000ac8 <__aeabi_d2f>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	623b      	str	r3, [r7, #32]
	f32 R33 = cos(ptr->phi) / cos(ptr->theta);
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa3d 	bl	8000428 <__aeabi_f2d>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f009 f821 	bl	800bffc <cos>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa30 	bl	8000428 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f009 f814 	bl	800bffc <cos>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4629      	mov	r1, r5
 8002fdc:	f7fd fba6 	bl	800072c <__aeabi_ddiv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	f7fd fd6e 	bl	8000ac8 <__aeabi_d2f>
 8002fec:	4603      	mov	r3, r0
 8002fee:	61fb      	str	r3, [r7, #28]
	f32 R13_cmd= ptr->x_dot_dot_cmd*m/ptr->u1;
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fa17 	bl	8000428 <__aeabi_f2d>
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	; (800312c <RollPitch+0x334>)
 8003000:	f7fd fa6a 	bl	80004d8 <__aeabi_dmul>
 8003004:	4603      	mov	r3, r0
 8003006:	460c      	mov	r4, r1
 8003008:	4625      	mov	r5, r4
 800300a:	461c      	mov	r4, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fa08 	bl	8000428 <__aeabi_f2d>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd fb84 	bl	800072c <__aeabi_ddiv>
 8003024:	4603      	mov	r3, r0
 8003026:	460c      	mov	r4, r1
 8003028:	4618      	mov	r0, r3
 800302a:	4621      	mov	r1, r4
 800302c:	f7fd fd4c 	bl	8000ac8 <__aeabi_d2f>
 8003030:	4603      	mov	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]
	f32 R23_cmd= ptr->y_dot_dot_cmd*m/ptr->u1;
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd f9f5 	bl	8000428 <__aeabi_f2d>
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	4b3a      	ldr	r3, [pc, #232]	; (800312c <RollPitch+0x334>)
 8003044:	f7fd fa48 	bl	80004d8 <__aeabi_dmul>
 8003048:	4603      	mov	r3, r0
 800304a:	460c      	mov	r4, r1
 800304c:	4625      	mov	r5, r4
 800304e:	461c      	mov	r4, r3
 8003050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd f9e6 	bl	8000428 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4620      	mov	r0, r4
 8003062:	4629      	mov	r1, r5
 8003064:	f7fd fb62 	bl	800072c <__aeabi_ddiv>
 8003068:	4603      	mov	r3, r0
 800306a:	460c      	mov	r4, r1
 800306c:	4618      	mov	r0, r3
 800306e:	4621      	mov	r1, r4
 8003070:	f7fd fd2a 	bl	8000ac8 <__aeabi_d2f>
 8003074:	4603      	mov	r3, r0
 8003076:	617b      	str	r3, [r7, #20]
	b_x_dot_cmd= (R13-R13_cmd)/taw;
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800307c:	f7fd fd78 	bl	8000b70 <__aeabi_fsub>
 8003080:	4603      	mov	r3, r0
 8003082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd ff31 	bl	8000eec <__aeabi_fdiv>
 800308a:	4603      	mov	r3, r0
 800308c:	613b      	str	r3, [r7, #16]
	b_y_dot_cmd= (R23-R23_cmd)/taw;
 800308e:	6979      	ldr	r1, [r7, #20]
 8003090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003092:	f7fd fd6d 	bl	8000b70 <__aeabi_fsub>
 8003096:	4603      	mov	r3, r0
 8003098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff26 	bl	8000eec <__aeabi_fdiv>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]
	ptr->p_cmd = 1/R33 * (R21*b_x_dot_cmd - R11*b_y_dot_cmd);
 80030a4:	69f9      	ldr	r1, [r7, #28]
 80030a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030aa:	f7fd ff1f 	bl	8000eec <__aeabi_fdiv>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461c      	mov	r4, r3
 80030b2:	6939      	ldr	r1, [r7, #16]
 80030b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b6:	f7fd fe65 	bl	8000d84 <__aeabi_fmul>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461d      	mov	r5, r3
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030c2:	f7fd fe5f 	bl	8000d84 <__aeabi_fmul>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	4628      	mov	r0, r5
 80030cc:	f7fd fd50 	bl	8000b70 <__aeabi_fsub>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4619      	mov	r1, r3
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd fe55 	bl	8000d84 <__aeabi_fmul>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ptr->q_cmd = 1/R33 * (R22*b_x_dot_cmd - R12*b_y_dot_cmd);
 80030e4:	69f9      	ldr	r1, [r7, #28]
 80030e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030ea:	f7fd feff 	bl	8000eec <__aeabi_fdiv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461c      	mov	r4, r3
 80030f2:	6939      	ldr	r1, [r7, #16]
 80030f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030f6:	f7fd fe45 	bl	8000d84 <__aeabi_fmul>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461d      	mov	r5, r3
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003102:	f7fd fe3f 	bl	8000d84 <__aeabi_fmul>
 8003106:	4603      	mov	r3, r0
 8003108:	4619      	mov	r1, r3
 800310a:	4628      	mov	r0, r5
 800310c:	f7fd fd30 	bl	8000b70 <__aeabi_fsub>
 8003110:	4603      	mov	r3, r0
 8003112:	4619      	mov	r1, r3
 8003114:	4620      	mov	r0, r4
 8003116:	f7fd fe35 	bl	8000d84 <__aeabi_fmul>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	osDelay(20);
 8003124:	2014      	movs	r0, #20
 8003126:	f004 fa1d 	bl	8007564 <osDelay>
  {
 800312a:	e66b      	b.n	8002e04 <RollPitch+0xc>
 800312c:	3ff80000 	.word	0x3ff80000

08003130 <YawCONTROLLER>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_YawCONTROLLER */
void YawCONTROLLER(void *argument)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YawCONTROLLER */
	parameters* ptr = argument;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7fd fd11 	bl	8000b70 <__aeabi_fsub>
 800314e:	4603      	mov	r3, r0
 8003150:	4619      	mov	r1, r3
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fd0e 	bl	8000b74 <__addsf3>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	osDelay(20);
 8003162:	2014      	movs	r0, #20
 8003164:	f004 f9fe 	bl	8007564 <osDelay>
	ptr->r_cmd = kp_yaw*(ptr->psi_cmd - ptr->psi);
 8003168:	e7e8      	b.n	800313c <YawCONTROLLER+0xc>
 800316a:	0000      	movs	r0, r0
 800316c:	0000      	movs	r0, r0
	...

08003170 <Altitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Altitude */
void Altitude(void *argument)
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Altitude */
	parameters* ptr = argument;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	f32 R33 = cos(ptr->phi)/cos(ptr->theta);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f951 	bl	8000428 <__aeabi_f2d>
 8003186:	4603      	mov	r3, r0
 8003188:	460c      	mov	r4, r1
 800318a:	4618      	mov	r0, r3
 800318c:	4621      	mov	r1, r4
 800318e:	f008 ff35 	bl	800bffc <cos>
 8003192:	4604      	mov	r4, r0
 8003194:	460d      	mov	r5, r1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f944 	bl	8000428 <__aeabi_f2d>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f008 ff28 	bl	800bffc <cos>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd faba 	bl	800072c <__aeabi_ddiv>
 80031b8:	4603      	mov	r3, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4618      	mov	r0, r3
 80031be:	4621      	mov	r1, r4
 80031c0:	f7fd fc82 	bl	8000ac8 <__aeabi_d2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	60bb      	str	r3, [r7, #8]
	ptr->z_dot_dot_cmd= kp_z*(ptr->z_cmd- ptr->z) + kd_z*(ptr->z_dot_cmd-ptr->z_dot);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fd fccc 	bl	8000b70 <__aeabi_fsub>
 80031d8:	4603      	mov	r3, r0
 80031da:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fdd0 	bl	8000d84 <__aeabi_fmul>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461c      	mov	r4, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fd fcbc 	bl	8000b70 <__aeabi_fsub>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4921      	ldr	r1, [pc, #132]	; (8003280 <Altitude+0x110>)
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fdc1 	bl	8000d84 <__aeabi_fmul>
 8003202:	4603      	mov	r3, r0
 8003204:	4619      	mov	r1, r3
 8003206:	4620      	mov	r0, r4
 8003208:	f7fd fcb4 	bl	8000b74 <__addsf3>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ptr->u1 = m * (ptr->z_dot_dot_cmd - g)/R33;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f903 	bl	8000428 <__aeabi_f2d>
 8003222:	a315      	add	r3, pc, #84	; (adr r3, 8003278 <Altitude+0x108>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fc ff9e 	bl	8000168 <__aeabi_dsub>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <Altitude+0x114>)
 800323a:	f7fd f94d 	bl	80004d8 <__aeabi_dmul>
 800323e:	4603      	mov	r3, r0
 8003240:	460c      	mov	r4, r1
 8003242:	4625      	mov	r5, r4
 8003244:	461c      	mov	r4, r3
 8003246:	68b8      	ldr	r0, [r7, #8]
 8003248:	f7fd f8ee 	bl	8000428 <__aeabi_f2d>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fd fa6a 	bl	800072c <__aeabi_ddiv>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	4618      	mov	r0, r3
 800325e:	4621      	mov	r1, r4
 8003260:	f7fd fc32 	bl	8000ac8 <__aeabi_d2f>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	osDelay(20);
 800326c:	2014      	movs	r0, #20
 800326e:	f004 f979 	bl	8007564 <osDelay>
  {
 8003272:	e783      	b.n	800317c <Altitude+0xc>
 8003274:	f3af 8000 	nop.w
 8003278:	76c8b439 	.word	0x76c8b439
 800327c:	40239fbe 	.word	0x40239fbe
 8003280:	41400000 	.word	0x41400000
 8003284:	3ff80000 	.word	0x3ff80000

08003288 <lateral>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lateral */
void lateral(void *argument)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lateral */
	parameters* ptr = argument;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f7fd fc66 	bl	8000b70 <__aeabi_fsub>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fd6a 	bl	8000d84 <__aeabi_fmul>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461c      	mov	r4, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fd fc56 	bl	8000b70 <__aeabi_fsub>
 80032c4:	4603      	mov	r3, r0
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <lateral+0xac>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fd5b 	bl	8000d84 <__aeabi_fmul>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4619      	mov	r1, r3
 80032d2:	4620      	mov	r0, r4
 80032d4:	f7fd fc4e 	bl	8000b74 <__addsf3>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	679a      	str	r2, [r3, #120]	; 0x78
	ptr->y_dot_dot_cmd= kp_xy*(ptr->y_cmd- ptr->z) + kd_xy*(ptr->y_dot_cmd-ptr->y_dot);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f7fd fc40 	bl	8000b70 <__aeabi_fsub>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd fd44 	bl	8000d84 <__aeabi_fmul>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461c      	mov	r4, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fd fc30 	bl	8000b70 <__aeabi_fsub>
 8003310:	4603      	mov	r3, r0
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <lateral+0xac>)
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fd35 	bl	8000d84 <__aeabi_fmul>
 800331a:	4603      	mov	r3, r0
 800331c:	4619      	mov	r1, r3
 800331e:	4620      	mov	r0, r4
 8003320:	f7fd fc28 	bl	8000b74 <__addsf3>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	67da      	str	r2, [r3, #124]	; 0x7c

	osDelay(20);
 800332c:	2014      	movs	r0, #20
 800332e:	f004 f919 	bl	8007564 <osDelay>
	ptr->x_dot_dot_cmd= kp_xy*(ptr->x_cmd- ptr->z) + kd_xy*(ptr->x_dot_cmd-ptr->x_dot);
 8003332:	e7af      	b.n	8003294 <lateral+0xc>
 8003334:	41400000 	.word	0x41400000

08003338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800334a:	f001 f88f 	bl	800446c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40000800 	.word	0x40000800

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <Quaternion>:
        sqrt = ( number/temp + temp) / 2;
    }
return sqrt;
}*/
void Quaternion(f32 *q, f32 *euler)
{
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]


	euler[0]/=2;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fdb5 	bl	8000eec <__aeabi_fdiv>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	601a      	str	r2, [r3, #0]
	euler[1]/=2;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1d1e      	adds	r6, r3, #4
 8003394:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003398:	4610      	mov	r0, r2
 800339a:	f7fd fda7 	bl	8000eec <__aeabi_fdiv>
 800339e:	4603      	mov	r3, r0
 80033a0:	6033      	str	r3, [r6, #0]
	euler[2]/=2;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	3308      	adds	r3, #8
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f103 0608 	add.w	r6, r3, #8
 80033ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80033b2:	4610      	mov	r0, r2
 80033b4:	f7fd fd9a 	bl	8000eec <__aeabi_fdiv>
 80033b8:	4603      	mov	r3, r0
 80033ba:	6033      	str	r3, [r6, #0]
	euler[0]*=0.0174532;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd f831 	bl	8000428 <__aeabi_f2d>
 80033c6:	a3d6      	add	r3, pc, #856	; (adr r3, 8003720 <Quaternion+0x3b8>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f7fd f884 	bl	80004d8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fb76 	bl	8000ac8 <__aeabi_d2f>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	601a      	str	r2, [r3, #0]
	euler[1]*=0.0174532;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	3304      	adds	r3, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f81d 	bl	8000428 <__aeabi_f2d>
 80033ee:	a3cc      	add	r3, pc, #816	; (adr r3, 8003720 <Quaternion+0x3b8>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f870 	bl	80004d8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4611      	mov	r1, r2
 80033fe:	461a      	mov	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1d1e      	adds	r6, r3, #4
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	f7fd fb5e 	bl	8000ac8 <__aeabi_d2f>
 800340c:	4603      	mov	r3, r0
 800340e:	6033      	str	r3, [r6, #0]
	euler[2]*=0.0174532;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f806 	bl	8000428 <__aeabi_f2d>
 800341c:	a3c0      	add	r3, pc, #768	; (adr r3, 8003720 <Quaternion+0x3b8>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f859 	bl	80004d8 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f103 0608 	add.w	r6, r3, #8
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	f7fd fb46 	bl	8000ac8 <__aeabi_d2f>
 800343c:	4603      	mov	r3, r0
 800343e:	6033      	str	r3, [r6, #0]
	q[0] = cos(euler[0]) * cos(euler[1]) * cos(euler[2])   + sin(euler[0])  * sin(euler[1]) * sin(euler[2]);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fc ffef 	bl	8000428 <__aeabi_f2d>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f008 fdd3 	bl	800bffc <cos>
 8003456:	4680      	mov	r8, r0
 8003458:	4689      	mov	r9, r1
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	3304      	adds	r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fc ffe1 	bl	8000428 <__aeabi_f2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f008 fdc5 	bl	800bffc <cos>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4640      	mov	r0, r8
 8003478:	4649      	mov	r1, r9
 800347a:	f7fd f82d 	bl	80004d8 <__aeabi_dmul>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fc ffcb 	bl	8000428 <__aeabi_f2d>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f008 fdaf 	bl	800bffc <cos>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4640      	mov	r0, r8
 80034a4:	4649      	mov	r1, r9
 80034a6:	f7fd f817 	bl	80004d8 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4690      	mov	r8, r2
 80034b0:	4699      	mov	r9, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fc ffb6 	bl	8000428 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f008 fdd0 	bl	800c068 <sin>
 80034c8:	4682      	mov	sl, r0
 80034ca:	468b      	mov	fp, r1
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3304      	adds	r3, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fc ffa8 	bl	8000428 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f008 fdc2 	bl	800c068 <sin>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4650      	mov	r0, sl
 80034ea:	4659      	mov	r1, fp
 80034ec:	f7fc fff4 	bl	80004d8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4692      	mov	sl, r2
 80034f6:	469b      	mov	fp, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc ff92 	bl	8000428 <__aeabi_f2d>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f008 fdac 	bl	800c068 <sin>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4650      	mov	r0, sl
 8003516:	4659      	mov	r1, fp
 8003518:	f7fc ffde 	bl	80004d8 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fc fe22 	bl	800016c <__adddf3>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd faca 	bl	8000ac8 <__aeabi_d2f>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
	q[1] =-cos(euler[0]) * sin(euler[1]) * sin(euler[2])   + cos(euler[1]) * cos(euler[2])   * sin(euler[0]);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc ff72 	bl	8000428 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f008 fd56 	bl	800bffc <cos>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4614      	mov	r4, r2
 8003556:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff61 	bl	8000428 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f008 fd7b 	bl	800c068 <sin>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fc ffad 	bl	80004d8 <__aeabi_dmul>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	4625      	mov	r5, r4
 8003584:	461c      	mov	r4, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc ff4b 	bl	8000428 <__aeabi_f2d>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f008 fd65 	bl	800c068 <sin>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fc ff97 	bl	80004d8 <__aeabi_dmul>
 80035aa:	4603      	mov	r3, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	4625      	mov	r5, r4
 80035b0:	461c      	mov	r4, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3304      	adds	r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fc ff35 	bl	8000428 <__aeabi_f2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f008 fd19 	bl	800bffc <cos>
 80035ca:	4680      	mov	r8, r0
 80035cc:	4689      	mov	r9, r1
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff27 	bl	8000428 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f008 fd0b 	bl	800bffc <cos>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f7fc ff73 	bl	80004d8 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff12 	bl	8000428 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f008 fd2c 	bl	800c068 <sin>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4640      	mov	r0, r8
 8003616:	4649      	mov	r1, r9
 8003618:	f7fc ff5e 	bl	80004d8 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4620      	mov	r0, r4
 8003622:	4629      	mov	r1, r5
 8003624:	f7fc fda2 	bl	800016c <__adddf3>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	4619      	mov	r1, r3
 800362e:	4622      	mov	r2, r4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1d1c      	adds	r4, r3, #4
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	f7fd fa46 	bl	8000ac8 <__aeabi_d2f>
 800363c:	4603      	mov	r3, r0
 800363e:	6023      	str	r3, [r4, #0]
	q[2] = cos(euler[0]) * cos(euler[2])   * sin(euler[1]) + sin(euler[0])  * cos(euler[1]) * sin(euler[2]);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc feef 	bl	8000428 <__aeabi_f2d>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	4618      	mov	r0, r3
 8003650:	4621      	mov	r1, r4
 8003652:	f008 fcd3 	bl	800bffc <cos>
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fee1 	bl	8000428 <__aeabi_f2d>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f008 fcc5 	bl	800bffc <cos>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fc ff2d 	bl	80004d8 <__aeabi_dmul>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	4625      	mov	r5, r4
 8003684:	461c      	mov	r4, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	3304      	adds	r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc fecb 	bl	8000428 <__aeabi_f2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f008 fce5 	bl	800c068 <sin>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4620      	mov	r0, r4
 80036a4:	4629      	mov	r1, r5
 80036a6:	f7fc ff17 	bl	80004d8 <__aeabi_dmul>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	4625      	mov	r5, r4
 80036b0:	461c      	mov	r4, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc feb6 	bl	8000428 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	f008 fcd0 	bl	800c068 <sin>
 80036c8:	4680      	mov	r8, r0
 80036ca:	4689      	mov	r9, r1
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3304      	adds	r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fea8 	bl	8000428 <__aeabi_f2d>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	f008 fc8c 	bl	800bffc <cos>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4640      	mov	r0, r8
 80036ea:	4649      	mov	r1, r9
 80036ec:	f7fc fef4 	bl	80004d8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4690      	mov	r8, r2
 80036f6:	4699      	mov	r9, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc fe92 	bl	8000428 <__aeabi_f2d>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f008 fcac 	bl	800c068 <sin>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fc fede 	bl	80004d8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	e003      	b.n	8003728 <Quaternion+0x3c0>
 8003720:	6cd799af 	.word	0x6cd799af
 8003724:	3f91df40 	.word	0x3f91df40
 8003728:	460b      	mov	r3, r1
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	f7fc fd1d 	bl	800016c <__adddf3>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	4619      	mov	r1, r3
 8003738:	4622      	mov	r2, r4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0408 	add.w	r4, r3, #8
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	f7fd f9c0 	bl	8000ac8 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	6023      	str	r3, [r4, #0]
	q[3] = cos(euler[0]) * cos(euler[1]) * sin(euler[2])   - sin(euler[0])  * cos(euler[2])   * sin(euler[1]);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fe69 	bl	8000428 <__aeabi_f2d>
 8003756:	4603      	mov	r3, r0
 8003758:	460c      	mov	r4, r1
 800375a:	4618      	mov	r0, r3
 800375c:	4621      	mov	r1, r4
 800375e:	f008 fc4d 	bl	800bffc <cos>
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	3304      	adds	r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fe5b 	bl	8000428 <__aeabi_f2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f008 fc3f 	bl	800bffc <cos>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4620      	mov	r0, r4
 8003784:	4629      	mov	r1, r5
 8003786:	f7fc fea7 	bl	80004d8 <__aeabi_dmul>
 800378a:	4603      	mov	r3, r0
 800378c:	460c      	mov	r4, r1
 800378e:	4625      	mov	r5, r4
 8003790:	461c      	mov	r4, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fe45 	bl	8000428 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f008 fc5f 	bl	800c068 <sin>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7fc fe91 	bl	80004d8 <__aeabi_dmul>
 80037b6:	4603      	mov	r3, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	4625      	mov	r5, r4
 80037bc:	461c      	mov	r4, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fc fe30 	bl	8000428 <__aeabi_f2d>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f008 fc4a 	bl	800c068 <sin>
 80037d4:	4680      	mov	r8, r0
 80037d6:	4689      	mov	r9, r1
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe22 	bl	8000428 <__aeabi_f2d>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f008 fc06 	bl	800bffc <cos>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4640      	mov	r0, r8
 80037f6:	4649      	mov	r1, r9
 80037f8:	f7fc fe6e 	bl	80004d8 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4690      	mov	r8, r2
 8003802:	4699      	mov	r9, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3304      	adds	r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fe0c 	bl	8000428 <__aeabi_f2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f008 fc26 	bl	800c068 <sin>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fe58 	bl	80004d8 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fc9a 	bl	8000168 <__aeabi_dsub>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4619      	mov	r1, r3
 800383a:	4622      	mov	r2, r4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 040c 	add.w	r4, r3, #12
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	f7fd f93f 	bl	8000ac8 <__aeabi_d2f>
 800384a:	4603      	mov	r3, r0
 800384c:	6023      	str	r3, [r4, #0]

}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003858 <Rotate_BtoW>:
void Rotate_BtoW(f32 *acc, f32 *q)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b093      	sub	sp, #76	; 0x4c
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	f32 R[9];
	f32 x = q[1];
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
	f32 y = q[2];
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
	f32 z = q[3];
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
	f32 s = q[0];
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38



	 R[0] = 1 - 2*y*y - 2*z*z; R[1] = 2*x*y - 2*s*z;     R[2] = 2*x*z + 2*s*y;
 800387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387c:	4619      	mov	r1, r3
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd f978 	bl	8000b74 <__addsf3>
 8003884:	4603      	mov	r3, r0
 8003886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003888:	4618      	mov	r0, r3
 800388a:	f7fd fa7b 	bl	8000d84 <__aeabi_fmul>
 800388e:	4603      	mov	r3, r0
 8003890:	4619      	mov	r1, r3
 8003892:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003896:	f7fd f96b 	bl	8000b70 <__aeabi_fsub>
 800389a:	4603      	mov	r3, r0
 800389c:	461c      	mov	r4, r3
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	4619      	mov	r1, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd f966 	bl	8000b74 <__addsf3>
 80038a8:	4603      	mov	r3, r0
 80038aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa69 	bl	8000d84 <__aeabi_fmul>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fd f95a 	bl	8000b70 <__aeabi_fsub>
 80038bc:	4603      	mov	r3, r0
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	4619      	mov	r1, r3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd f955 	bl	8000b74 <__addsf3>
 80038ca:	4603      	mov	r3, r0
 80038cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fa58 	bl	8000d84 <__aeabi_fmul>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461c      	mov	r4, r3
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	4619      	mov	r1, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd f949 	bl	8000b74 <__addsf3>
 80038e2:	4603      	mov	r3, r0
 80038e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fa4c 	bl	8000d84 <__aeabi_fmul>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4619      	mov	r1, r3
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7fd f93d 	bl	8000b70 <__aeabi_fsub>
 80038f6:	4603      	mov	r3, r0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fc:	4619      	mov	r1, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd f938 	bl	8000b74 <__addsf3>
 8003904:	4603      	mov	r3, r0
 8003906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fa3b 	bl	8000d84 <__aeabi_fmul>
 800390e:	4603      	mov	r3, r0
 8003910:	461c      	mov	r4, r3
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	4619      	mov	r1, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f92c 	bl	8000b74 <__addsf3>
 800391c:	4603      	mov	r3, r0
 800391e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fa2f 	bl	8000d84 <__aeabi_fmul>
 8003926:	4603      	mov	r3, r0
 8003928:	4619      	mov	r1, r3
 800392a:	4620      	mov	r0, r4
 800392c:	f7fd f922 	bl	8000b74 <__addsf3>
 8003930:	4603      	mov	r3, r0
 8003932:	613b      	str	r3, [r7, #16]
	  R[3] = 2*x*y + 2*s*z;     R[4] = 1 - 2*x*x - 2*z*z; R[5] = 2*y*z - 2*s*x;
 8003934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003936:	4619      	mov	r1, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f91b 	bl	8000b74 <__addsf3>
 800393e:	4603      	mov	r3, r0
 8003940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fa1e 	bl	8000d84 <__aeabi_fmul>
 8003948:	4603      	mov	r3, r0
 800394a:	461c      	mov	r4, r3
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	4619      	mov	r1, r3
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd f90f 	bl	8000b74 <__addsf3>
 8003956:	4603      	mov	r3, r0
 8003958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fa12 	bl	8000d84 <__aeabi_fmul>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd f905 	bl	8000b74 <__addsf3>
 800396a:	4603      	mov	r3, r0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003970:	4619      	mov	r1, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd f8fe 	bl	8000b74 <__addsf3>
 8003978:	4603      	mov	r3, r0
 800397a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800397c:	4618      	mov	r0, r3
 800397e:	f7fd fa01 	bl	8000d84 <__aeabi_fmul>
 8003982:	4603      	mov	r3, r0
 8003984:	4619      	mov	r1, r3
 8003986:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800398a:	f7fd f8f1 	bl	8000b70 <__aeabi_fsub>
 800398e:	4603      	mov	r3, r0
 8003990:	461c      	mov	r4, r3
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	4619      	mov	r1, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f8ec 	bl	8000b74 <__addsf3>
 800399c:	4603      	mov	r3, r0
 800399e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd f9ef 	bl	8000d84 <__aeabi_fmul>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4619      	mov	r1, r3
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd f8e0 	bl	8000b70 <__aeabi_fsub>
 80039b0:	4603      	mov	r3, r0
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	4619      	mov	r1, r3
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd f8db 	bl	8000b74 <__addsf3>
 80039be:	4603      	mov	r3, r0
 80039c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f9de 	bl	8000d84 <__aeabi_fmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461c      	mov	r4, r3
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	4619      	mov	r1, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd f8cf 	bl	8000b74 <__addsf3>
 80039d6:	4603      	mov	r3, r0
 80039d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd f9d2 	bl	8000d84 <__aeabi_fmul>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4619      	mov	r1, r3
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7fd f8c3 	bl	8000b70 <__aeabi_fsub>
 80039ea:	4603      	mov	r3, r0
 80039ec:	61fb      	str	r3, [r7, #28]
	  R[6] = 2*x*z - 2*s*y;     R[7] = 2*y*z + 2*s*x;     R[8] = 1 - 2*x*x - 2*y*y;
 80039ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f0:	4619      	mov	r1, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd f8be 	bl	8000b74 <__addsf3>
 80039f8:	4603      	mov	r3, r0
 80039fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd f9c1 	bl	8000d84 <__aeabi_fmul>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461c      	mov	r4, r3
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd f8b2 	bl	8000b74 <__addsf3>
 8003a10:	4603      	mov	r3, r0
 8003a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd f9b5 	bl	8000d84 <__aeabi_fmul>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7fd f8a6 	bl	8000b70 <__aeabi_fsub>
 8003a24:	4603      	mov	r3, r0
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd f8a1 	bl	8000b74 <__addsf3>
 8003a32:	4603      	mov	r3, r0
 8003a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f9a4 	bl	8000d84 <__aeabi_fmul>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461c      	mov	r4, r3
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	4619      	mov	r1, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd f895 	bl	8000b74 <__addsf3>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd f998 	bl	8000d84 <__aeabi_fmul>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fd f88b 	bl	8000b74 <__addsf3>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a64:	4619      	mov	r1, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd f884 	bl	8000b74 <__addsf3>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fd f987 	bl	8000d84 <__aeabi_fmul>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a7e:	f7fd f877 	bl	8000b70 <__aeabi_fsub>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461c      	mov	r4, r3
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd f872 	bl	8000b74 <__addsf3>
 8003a90:	4603      	mov	r3, r0
 8003a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd f975 	bl	8000d84 <__aeabi_fmul>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7fd f866 	bl	8000b70 <__aeabi_fsub>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28





		f32 acc0 = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fd f967 	bl	8000d84 <__aeabi_fmul>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461c      	mov	r4, r3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fd f95d 	bl	8000d84 <__aeabi_fmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4619      	mov	r1, r3
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fd f850 	bl	8000b74 <__addsf3>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461c      	mov	r4, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3308      	adds	r3, #8
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fd f94e 	bl	8000d84 <__aeabi_fmul>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4619      	mov	r1, r3
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7fd f841 	bl	8000b74 <__addsf3>
 8003af2:	4603      	mov	r3, r0
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
		f32 acc1 = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7fd f940 	bl	8000d84 <__aeabi_fmul>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461c      	mov	r4, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f7fd f936 	bl	8000d84 <__aeabi_fmul>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7fd f829 	bl	8000b74 <__addsf3>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461c      	mov	r4, r3
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fd f927 	bl	8000d84 <__aeabi_fmul>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7fd f81a 	bl	8000b74 <__addsf3>
 8003b40:	4603      	mov	r3, r0
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
		f32 acc2 = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fd f919 	bl	8000d84 <__aeabi_fmul>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461c      	mov	r4, r3
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fd f90f 	bl	8000d84 <__aeabi_fmul>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7fd f802 	bl	8000b74 <__addsf3>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461c      	mov	r4, r3
 8003b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7fd f900 	bl	8000d84 <__aeabi_fmul>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4619      	mov	r1, r3
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7fc fff3 	bl	8000b74 <__addsf3>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
		acc[0]=acc0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b96:	601a      	str	r2, [r3, #0]
		acc[1]=acc1;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9e:	601a      	str	r2, [r3, #0]
		acc[2]=acc2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba6:	601a      	str	r2, [r3, #0]

}
 8003ba8:	bf00      	nop
 8003baa:	374c      	adds	r7, #76	; 0x4c
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}

08003bb0 <Rotate_BtoW_acc>:
void Rotate_BtoW_acc(f32 *acc, f32 *q)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b095      	sub	sp, #84	; 0x54
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	f32 q0 = -q[0];
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	f32 R[9];
	f32 acc2[3];
	f32 r0 = q0*q0;
 8003bc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003bc8:	f7fd f8dc 	bl	8000d84 <__aeabi_fmul>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
	f32 r1 = q[1]*q[1];
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7fd f8d0 	bl	8000d84 <__aeabi_fmul>
 8003be4:	4603      	mov	r3, r0
 8003be6:	647b      	str	r3, [r7, #68]	; 0x44
	f32 r2 = q[2]*q[2];
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fd f8c4 	bl	8000d84 <__aeabi_fmul>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40
	f32 r3 = q[3]*q[3];
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f7fd f8b8 	bl	8000d84 <__aeabi_fmul>
 8003c14:	4603      	mov	r3, r0
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
	R[0] = r0 + r1 - r2 - r3;
 8003c18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003c1c:	f7fc ffaa 	bl	8000b74 <__addsf3>
 8003c20:	4603      	mov	r3, r0
 8003c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fc ffa3 	bl	8000b70 <__aeabi_fsub>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc ff9e 	bl	8000b70 <__aeabi_fsub>
 8003c34:	4603      	mov	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]
	R[1] = 2*q[1]*q[2] + 2*q0*q[3];
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc ff97 	bl	8000b74 <__addsf3>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fd f896 	bl	8000d84 <__aeabi_fmul>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461c      	mov	r4, r3
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc ff87 	bl	8000b74 <__addsf3>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fd f886 	bl	8000d84 <__aeabi_fmul>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7fc ff79 	bl	8000b74 <__addsf3>
 8003c82:	4603      	mov	r3, r0
 8003c84:	61fb      	str	r3, [r7, #28]
	R[2] = 2*q[1]*q[3] - 2*q0*q[2];
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc ff70 	bl	8000b74 <__addsf3>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fd f86f 	bl	8000d84 <__aeabi_fmul>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461c      	mov	r4, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	4619      	mov	r1, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc ff60 	bl	8000b74 <__addsf3>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fd f85f 	bl	8000d84 <__aeabi_fmul>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7fc ff50 	bl	8000b70 <__aeabi_fsub>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	623b      	str	r3, [r7, #32]
	R[3] = 2*q[1]*q[2] - 2*q0*q[3];
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc ff49 	bl	8000b74 <__addsf3>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fd f848 	bl	8000d84 <__aeabi_fmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fc ff39 	bl	8000b74 <__addsf3>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7fd f838 	bl	8000d84 <__aeabi_fmul>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4619      	mov	r1, r3
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7fc ff29 	bl	8000b70 <__aeabi_fsub>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
	R[4] = r0 - r1 + r2 - r3;
 8003d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d24:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d26:	f7fc ff23 	bl	8000b70 <__aeabi_fsub>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc ff20 	bl	8000b74 <__addsf3>
 8003d34:	4603      	mov	r3, r0
 8003d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc ff19 	bl	8000b70 <__aeabi_fsub>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
	R[5] = 2*q[2]*q[3] + 2*q0*q[1];
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc ff12 	bl	8000b74 <__addsf3>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fd f811 	bl	8000d84 <__aeabi_fmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461c      	mov	r4, r3
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc ff02 	bl	8000b74 <__addsf3>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	3304      	adds	r3, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fd f801 	bl	8000d84 <__aeabi_fmul>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4619      	mov	r1, r3
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7fc fef4 	bl	8000b74 <__addsf3>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	R[6] = 2*q[1]*q[3] + 2*q0*q[2];
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	3304      	adds	r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc feeb 	bl	8000b74 <__addsf3>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461a      	mov	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fc ffea 	bl	8000d84 <__aeabi_fmul>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461c      	mov	r4, r3
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db6:	4619      	mov	r1, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fedb 	bl	8000b74 <__addsf3>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fc ffda 	bl	8000d84 <__aeabi_fmul>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f7fc fecd 	bl	8000b74 <__addsf3>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	633b      	str	r3, [r7, #48]	; 0x30
	R[7] = 2*q[2]*q[3] - 2*q0*q[1];
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fec4 	bl	8000b74 <__addsf3>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fc ffc3 	bl	8000d84 <__aeabi_fmul>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461c      	mov	r4, r3
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	4619      	mov	r1, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc feb4 	bl	8000b74 <__addsf3>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	3304      	adds	r3, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fc ffb3 	bl	8000d84 <__aeabi_fmul>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7fc fea4 	bl	8000b70 <__aeabi_fsub>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
	R[8] = r0 - r1 - r2 + r3;
 8003e2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e30:	f7fc fe9e 	bl	8000b70 <__aeabi_fsub>
 8003e34:	4603      	mov	r3, r0
 8003e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fe99 	bl	8000b70 <__aeabi_fsub>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fe96 	bl	8000b74 <__addsf3>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
	acc2[0] = R[0]*acc[0] + R[1]*acc[1] + R[2]*acc[2];
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fc ff95 	bl	8000d84 <__aeabi_fmul>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7fc ff8b 	bl	8000d84 <__aeabi_fmul>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4619      	mov	r1, r3
 8003e72:	4620      	mov	r0, r4
 8003e74:	f7fc fe7e 	bl	8000b74 <__addsf3>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3308      	adds	r3, #8
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fc ff7c 	bl	8000d84 <__aeabi_fmul>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7fc fe6f 	bl	8000b74 <__addsf3>
 8003e96:	4603      	mov	r3, r0
 8003e98:	60fb      	str	r3, [r7, #12]
	acc2[1] = R[3]*acc[0] + R[4]*acc[1] + R[5]*acc[2];
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7fc ff6e 	bl	8000d84 <__aeabi_fmul>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461c      	mov	r4, r3
 8003eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fc ff64 	bl	8000d84 <__aeabi_fmul>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7fc fe57 	bl	8000b74 <__addsf3>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461c      	mov	r4, r3
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fc ff55 	bl	8000d84 <__aeabi_fmul>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4619      	mov	r1, r3
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7fc fe48 	bl	8000b74 <__addsf3>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	613b      	str	r3, [r7, #16]
	acc2[2] = R[6]*acc[0] + R[7]*acc[1] + R[8]*acc[2];
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f7fc ff47 	bl	8000d84 <__aeabi_fmul>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461c      	mov	r4, r3
 8003efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fc ff3d 	bl	8000d84 <__aeabi_fmul>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7fc fe30 	bl	8000b74 <__addsf3>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461c      	mov	r4, r3
 8003f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7fc ff2e 	bl	8000d84 <__aeabi_fmul>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f7fc fe21 	bl	8000b74 <__addsf3>
 8003f32:	4603      	mov	r3, r0
 8003f34:	617b      	str	r3, [r7, #20]
	acc[0] = acc2[0];
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
	acc[1] = acc2[1];
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	601a      	str	r2, [r3, #0]
	acc[2] = acc2[2];
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3308      	adds	r3, #8
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	601a      	str	r2, [r3, #0]

}
 8003f4c:	bf00      	nop
 8003f4e:	3754      	adds	r7, #84	; 0x54
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_MspInit+0x68>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_MspInit+0x68>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6193      	str	r3, [r2, #24]
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_MspInit+0x68>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_MspInit+0x68>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_MspInit+0x68>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_MspInit+0x68>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	210f      	movs	r1, #15
 8003f8e:	f06f 0001 	mvn.w	r0, #1
 8003f92:	f000 fb3c 	bl	800460e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_MspInit+0x6c>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_MspInit+0x6c>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010000 	.word	0x40010000

08003fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <HAL_I2C_MspInit+0x70>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d123      	bne.n	800402c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_I2C_MspInit+0x74>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	; (8004038 <HAL_I2C_MspInit+0x74>)
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	6193      	str	r3, [r2, #24]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_I2C_MspInit+0x74>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ffc:	23c0      	movs	r3, #192	; 0xc0
 8003ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004000:	2312      	movs	r3, #18
 8004002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	4619      	mov	r1, r3
 800400e:	480b      	ldr	r0, [pc, #44]	; (800403c <HAL_I2C_MspInit+0x78>)
 8004010:	f000 fb28 	bl	8004664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_I2C_MspInit+0x74>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4a07      	ldr	r2, [pc, #28]	; (8004038 <HAL_I2C_MspInit+0x74>)
 800401a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800401e:	61d3      	str	r3, [r2, #28]
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_I2C_MspInit+0x74>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40005400 	.word	0x40005400
 8004038:	40021000 	.word	0x40021000
 800403c:	40010c00 	.word	0x40010c00

08004040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d10b      	bne.n	800406a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_TIM_Base_MspInit+0x34>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_TIM_Base_MspInit+0x34>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	61d3      	str	r3, [r2, #28]
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_TIM_Base_MspInit+0x34>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40021000 	.word	0x40021000

08004078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d142      	bne.n	800411e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 80040b6:	f043 0308 	orr.w	r3, r3, #8
 80040ba:	6193      	str	r3, [r2, #24]
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <HAL_TIM_MspPostInit+0xb0>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040c8:	2303      	movs	r3, #3
 80040ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2302      	movs	r3, #2
 80040d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	4814      	ldr	r0, [pc, #80]	; (800412c <HAL_TIM_MspPostInit+0xb4>)
 80040dc:	f000 fac2 	bl	8004664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ea:	2302      	movs	r3, #2
 80040ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4619      	mov	r1, r3
 80040f4:	480e      	ldr	r0, [pc, #56]	; (8004130 <HAL_TIM_MspPostInit+0xb8>)
 80040f6:	f000 fab5 	bl	8004664 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_TIM_MspPostInit+0xbc>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	4a06      	ldr	r2, [pc, #24]	; (8004134 <HAL_TIM_MspPostInit+0xbc>)
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800411e:	bf00      	nop
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	40010800 	.word	0x40010800
 8004130:	40010c00 	.word	0x40010c00
 8004134:	40010000 	.word	0x40010000

08004138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a37      	ldr	r2, [pc, #220]	; (8004230 <HAL_UART_MspInit+0xf8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d132      	bne.n	80041be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_UART_MspInit+0xfc>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4a35      	ldr	r2, [pc, #212]	; (8004234 <HAL_UART_MspInit+0xfc>)
 800415e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004162:	6193      	str	r3, [r2, #24]
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_UART_MspInit+0xfc>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_UART_MspInit+0xfc>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_UART_MspInit+0xfc>)
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	6193      	str	r3, [r2, #24]
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_UART_MspInit+0xfc>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800418c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418e:	2302      	movs	r3, #2
 8004190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 0318 	add.w	r3, r7, #24
 800419a:	4619      	mov	r1, r3
 800419c:	4826      	ldr	r0, [pc, #152]	; (8004238 <HAL_UART_MspInit+0x100>)
 800419e:	f000 fa61 	bl	8004664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	f107 0318 	add.w	r3, r7, #24
 80041b4:	4619      	mov	r1, r3
 80041b6:	4820      	ldr	r0, [pc, #128]	; (8004238 <HAL_UART_MspInit+0x100>)
 80041b8:	f000 fa54 	bl	8004664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041bc:	e034      	b.n	8004228 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_UART_MspInit+0x104>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d12f      	bne.n	8004228 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	61d3      	str	r3, [r2, #28]
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6193      	str	r3, [r2, #24]
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_UART_MspInit+0xfc>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041f8:	2304      	movs	r3, #4
 80041fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004200:	2303      	movs	r3, #3
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004204:	f107 0318 	add.w	r3, r7, #24
 8004208:	4619      	mov	r1, r3
 800420a:	480b      	ldr	r0, [pc, #44]	; (8004238 <HAL_UART_MspInit+0x100>)
 800420c:	f000 fa2a 	bl	8004664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004210:	2308      	movs	r3, #8
 8004212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421c:	f107 0318 	add.w	r3, r7, #24
 8004220:	4619      	mov	r1, r3
 8004222:	4805      	ldr	r0, [pc, #20]	; (8004238 <HAL_UART_MspInit+0x100>)
 8004224:	f000 fa1e 	bl	8004664 <HAL_GPIO_Init>
}
 8004228:	bf00      	nop
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40013800 	.word	0x40013800
 8004234:	40021000 	.word	0x40021000
 8004238:	40010800 	.word	0x40010800
 800423c:	40004400 	.word	0x40004400

08004240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8004250:	2200      	movs	r2, #0
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	201e      	movs	r0, #30
 8004256:	f000 f9da 	bl	800460e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800425a:	201e      	movs	r0, #30
 800425c:	f000 f9f3 	bl	8004646 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_InitTick+0xa0>)
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_InitTick+0xa0>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	61d3      	str	r3, [r2, #28]
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_InitTick+0xa0>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004278:	f107 0210 	add.w	r2, r7, #16
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fec6 	bl	8006014 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004288:	f001 fe9c 	bl	8005fc4 <HAL_RCC_GetPCLK1Freq>
 800428c:	4603      	mov	r3, r0
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_InitTick+0xa4>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	3b01      	subs	r3, #1
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_InitTick+0xa8>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <HAL_InitTick+0xac>)
 80042a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_InitTick+0xa8>)
 80042a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <HAL_InitTick+0xa8>)
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_InitTick+0xa8>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_InitTick+0xa8>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80042c0:	4809      	ldr	r0, [pc, #36]	; (80042e8 <HAL_InitTick+0xa8>)
 80042c2:	f001 ff0f 	bl	80060e4 <HAL_TIM_Base_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <HAL_InitTick+0xa8>)
 80042ce:	f001 ff34 	bl	800613a <HAL_TIM_Base_Start_IT>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e000      	b.n	80042d8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3730      	adds	r7, #48	; 0x30
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	20004034 	.word	0x20004034
 80042ec:	40000800 	.word	0x40000800

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80042f4:	f001 febe 	bl	8006074 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <HardFault_Handler+0x4>

08004302 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004306:	e7fe      	b.n	8004306 <MemManage_Handler+0x4>

08004308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800430c:	e7fe      	b.n	800430c <BusFault_Handler+0x4>

0800430e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004312:	e7fe      	b.n	8004312 <UsageFault_Handler+0x4>

08004314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <TIM4_IRQHandler+0x10>)
 8004326:	f001 ff91 	bl	800624c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20004034 	.word	0x20004034

08004334 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <_sbrk+0x50>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <_sbrk+0x16>
		heap_end = &end;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <_sbrk+0x50>)
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <_sbrk+0x54>)
 8004348:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <_sbrk+0x50>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <_sbrk+0x50>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	466a      	mov	r2, sp
 800435a:	4293      	cmp	r3, r2
 800435c:	d907      	bls.n	800436e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800435e:	f005 fd49 	bl	8009df4 <__errno>
 8004362:	4602      	mov	r2, r0
 8004364:	230c      	movs	r3, #12
 8004366:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	e006      	b.n	800437c <_sbrk+0x48>
	}

	heap_end += incr;
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <_sbrk+0x50>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <_sbrk+0x50>)
 8004378:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000244 	.word	0x20000244
 8004388:	200040c0 	.word	0x200040c0

0800438c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004390:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <SystemInit+0x5c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <SystemInit+0x5c>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <SystemInit+0x5c>)
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4911      	ldr	r1, [pc, #68]	; (80043e8 <SystemInit+0x5c>)
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <SystemInit+0x60>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <SystemInit+0x5c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <SystemInit+0x5c>)
 80043ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <SystemInit+0x5c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <SystemInit+0x5c>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <SystemInit+0x5c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <SystemInit+0x5c>)
 80043ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80043ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <SystemInit+0x5c>)
 80043d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80043d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <SystemInit+0x64>)
 80043da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043de:	609a      	str	r2, [r3, #8]
#endif 
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	40021000 	.word	0x40021000
 80043ec:	f8ff0000 	.word	0xf8ff0000
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80043f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80043f6:	e003      	b.n	8004400 <LoopCopyDataInit>

080043f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80043fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80043fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80043fe:	3104      	adds	r1, #4

08004400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004400:	480a      	ldr	r0, [pc, #40]	; (800442c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004408:	d3f6      	bcc.n	80043f8 <CopyDataInit>
  ldr r2, =_sbss
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800440c:	e002      	b.n	8004414 <LoopFillZerobss>

0800440e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004410:	f842 3b04 	str.w	r3, [r2], #4

08004414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004418:	d3f9      	bcc.n	800440e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800441a:	f7ff ffb7 	bl	800438c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800441e:	f005 fcef 	bl	8009e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004422:	f7fd fc6f 	bl	8001d04 <main>
  bx lr
 8004426:	4770      	bx	lr
  ldr r3, =_sidata
 8004428:	0800df38 	.word	0x0800df38
  ldr r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004430:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8004434:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8004438:	200040bc 	.word	0x200040bc

0800443c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800443c:	e7fe      	b.n	800443c <ADC1_2_IRQHandler>
	...

08004440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_Init+0x28>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_Init+0x28>)
 800444a:	f043 0310 	orr.w	r3, r3, #16
 800444e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004450:	2003      	movs	r0, #3
 8004452:	f000 f8d1 	bl	80045f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004456:	2000      	movs	r0, #0
 8004458:	f7ff fef2 	bl	8004240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800445c:	f7ff fd7a 	bl	8003f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_IncTick+0x1c>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_IncTick+0x20>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4413      	add	r3, r2
 800447c:	4a03      	ldr	r2, [pc, #12]	; (800448c <HAL_IncTick+0x20>)
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	2000000c 	.word	0x2000000c
 800448c:	20004074 	.word	0x20004074

08004490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return uwTick;
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <HAL_GetTick+0x10>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	20004074 	.word	0x20004074

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	60d3      	str	r3, [r2, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4906      	ldr	r1, [pc, #24]	; (800453c <__NVIC_EnableIRQ+0x34>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
         );
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff4f 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004620:	f7ff ff64 	bl	80044ec <__NVIC_GetPriorityGrouping>
 8004624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7ff ffb2 	bl	8004594 <NVIC_EncodePriority>
 8004630:	4602      	mov	r2, r0
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff81 	bl	8004540 <__NVIC_SetPriority>
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff57 	bl	8004508 <__NVIC_EnableIRQ>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004664:	b480      	push	{r7}
 8004666:	b08b      	sub	sp, #44	; 0x2c
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	e127      	b.n	80048c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004678:	2201      	movs	r2, #1
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	429a      	cmp	r2, r3
 8004692:	f040 8116 	bne.w	80048c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b12      	cmp	r3, #18
 800469c:	d034      	beq.n	8004708 <HAL_GPIO_Init+0xa4>
 800469e:	2b12      	cmp	r3, #18
 80046a0:	d80d      	bhi.n	80046be <HAL_GPIO_Init+0x5a>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d02b      	beq.n	80046fe <HAL_GPIO_Init+0x9a>
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d804      	bhi.n	80046b4 <HAL_GPIO_Init+0x50>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d031      	beq.n	8004712 <HAL_GPIO_Init+0xae>
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d01c      	beq.n	80046ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046b2:	e048      	b.n	8004746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d043      	beq.n	8004740 <HAL_GPIO_Init+0xdc>
 80046b8:	2b11      	cmp	r3, #17
 80046ba:	d01b      	beq.n	80046f4 <HAL_GPIO_Init+0x90>
          break;
 80046bc:	e043      	b.n	8004746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80046be:	4a89      	ldr	r2, [pc, #548]	; (80048e4 <HAL_GPIO_Init+0x280>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d026      	beq.n	8004712 <HAL_GPIO_Init+0xae>
 80046c4:	4a87      	ldr	r2, [pc, #540]	; (80048e4 <HAL_GPIO_Init+0x280>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d806      	bhi.n	80046d8 <HAL_GPIO_Init+0x74>
 80046ca:	4a87      	ldr	r2, [pc, #540]	; (80048e8 <HAL_GPIO_Init+0x284>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d020      	beq.n	8004712 <HAL_GPIO_Init+0xae>
 80046d0:	4a86      	ldr	r2, [pc, #536]	; (80048ec <HAL_GPIO_Init+0x288>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <HAL_GPIO_Init+0xae>
          break;
 80046d6:	e036      	b.n	8004746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80046d8:	4a85      	ldr	r2, [pc, #532]	; (80048f0 <HAL_GPIO_Init+0x28c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d019      	beq.n	8004712 <HAL_GPIO_Init+0xae>
 80046de:	4a85      	ldr	r2, [pc, #532]	; (80048f4 <HAL_GPIO_Init+0x290>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d016      	beq.n	8004712 <HAL_GPIO_Init+0xae>
 80046e4:	4a84      	ldr	r2, [pc, #528]	; (80048f8 <HAL_GPIO_Init+0x294>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_GPIO_Init+0xae>
          break;
 80046ea:	e02c      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	623b      	str	r3, [r7, #32]
          break;
 80046f2:	e028      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	623b      	str	r3, [r7, #32]
          break;
 80046fc:	e023      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	3308      	adds	r3, #8
 8004704:	623b      	str	r3, [r7, #32]
          break;
 8004706:	e01e      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	330c      	adds	r3, #12
 800470e:	623b      	str	r3, [r7, #32]
          break;
 8004710:	e019      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800471a:	2304      	movs	r3, #4
 800471c:	623b      	str	r3, [r7, #32]
          break;
 800471e:	e012      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004728:	2308      	movs	r3, #8
 800472a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	611a      	str	r2, [r3, #16]
          break;
 8004732:	e008      	b.n	8004746 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004734:	2308      	movs	r3, #8
 8004736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	615a      	str	r2, [r3, #20]
          break;
 800473e:	e002      	b.n	8004746 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004740:	2300      	movs	r3, #0
 8004742:	623b      	str	r3, [r7, #32]
          break;
 8004744:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2bff      	cmp	r3, #255	; 0xff
 800474a:	d801      	bhi.n	8004750 <HAL_GPIO_Init+0xec>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	e001      	b.n	8004754 <HAL_GPIO_Init+0xf0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2bff      	cmp	r3, #255	; 0xff
 800475a:	d802      	bhi.n	8004762 <HAL_GPIO_Init+0xfe>
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	e002      	b.n	8004768 <HAL_GPIO_Init+0x104>
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	3b08      	subs	r3, #8
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	210f      	movs	r1, #15
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	401a      	ands	r2, r3
 800477a:	6a39      	ldr	r1, [r7, #32]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	431a      	orrs	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8096 	beq.w	80048c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004796:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_GPIO_Init+0x298>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_GPIO_Init+0x298>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6193      	str	r3, [r2, #24]
 80047a2:	4b56      	ldr	r3, [pc, #344]	; (80048fc <HAL_GPIO_Init+0x298>)
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047ae:	4a54      	ldr	r2, [pc, #336]	; (8004900 <HAL_GPIO_Init+0x29c>)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4013      	ands	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4b      	ldr	r2, [pc, #300]	; (8004904 <HAL_GPIO_Init+0x2a0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0x19e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4a      	ldr	r2, [pc, #296]	; (8004908 <HAL_GPIO_Init+0x2a4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_Init+0x19a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a49      	ldr	r2, [pc, #292]	; (800490c <HAL_GPIO_Init+0x2a8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_Init+0x196>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a48      	ldr	r2, [pc, #288]	; (8004910 <HAL_GPIO_Init+0x2ac>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_Init+0x192>
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x1a0>
 80047f6:	2304      	movs	r3, #4
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x1a0>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x1a0>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x1a0>
 8004802:	2300      	movs	r3, #0
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	f002 0203 	and.w	r2, r2, #3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004814:	493a      	ldr	r1, [pc, #232]	; (8004900 <HAL_GPIO_Init+0x29c>)
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4938      	ldr	r1, [pc, #224]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
 800483a:	e006      	b.n	800484a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	43db      	mvns	r3, r3
 8004844:	4933      	ldr	r1, [pc, #204]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004846:	4013      	ands	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004856:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	492e      	ldr	r1, [pc, #184]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
 8004862:	e006      	b.n	8004872 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	43db      	mvns	r3, r3
 800486c:	4929      	ldr	r1, [pc, #164]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 800486e:	4013      	ands	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800487e:	4b25      	ldr	r3, [pc, #148]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4924      	ldr	r1, [pc, #144]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
 800488a:	e006      	b.n	800489a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	43db      	mvns	r3, r3
 8004894:	491f      	ldr	r1, [pc, #124]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 8004896:	4013      	ands	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048a6:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	491a      	ldr	r1, [pc, #104]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
 80048b2:	e006      	b.n	80048c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048b4:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	4915      	ldr	r1, [pc, #84]	; (8004914 <HAL_GPIO_Init+0x2b0>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f47f aed0 	bne.w	8004678 <HAL_GPIO_Init+0x14>
  }
}
 80048d8:	bf00      	nop
 80048da:	372c      	adds	r7, #44	; 0x2c
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	10210000 	.word	0x10210000
 80048e8:	10110000 	.word	0x10110000
 80048ec:	10120000 	.word	0x10120000
 80048f0:	10310000 	.word	0x10310000
 80048f4:	10320000 	.word	0x10320000
 80048f8:	10220000 	.word	0x10220000
 80048fc:	40021000 	.word	0x40021000
 8004900:	40010000 	.word	0x40010000
 8004904:	40010800 	.word	0x40010800
 8004908:	40010c00 	.word	0x40010c00
 800490c:	40011000 	.word	0x40011000
 8004910:	40011400 	.word	0x40011400
 8004914:	40010400 	.word	0x40010400

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e10f      	b.n	8004b7a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fb28 	bl	8003fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800498c:	f001 fb1a 	bl	8005fc4 <HAL_RCC_GetPCLK1Freq>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a7b      	ldr	r2, [pc, #492]	; (8004b84 <HAL_I2C_Init+0x23c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d807      	bhi.n	80049ac <HAL_I2C_Init+0x64>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a7a      	ldr	r2, [pc, #488]	; (8004b88 <HAL_I2C_Init+0x240>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e006      	b.n	80049ba <HAL_I2C_Init+0x72>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a77      	ldr	r2, [pc, #476]	; (8004b8c <HAL_I2C_Init+0x244>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bf94      	ite	ls
 80049b4:	2301      	movls	r3, #1
 80049b6:	2300      	movhi	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0db      	b.n	8004b7a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a72      	ldr	r2, [pc, #456]	; (8004b90 <HAL_I2C_Init+0x248>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a64      	ldr	r2, [pc, #400]	; (8004b84 <HAL_I2C_Init+0x23c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d802      	bhi.n	80049fc <HAL_I2C_Init+0xb4>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3301      	adds	r3, #1
 80049fa:	e009      	b.n	8004a10 <HAL_I2C_Init+0xc8>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a63      	ldr	r2, [pc, #396]	; (8004b94 <HAL_I2C_Init+0x24c>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	3301      	adds	r3, #1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4956      	ldr	r1, [pc, #344]	; (8004b84 <HAL_I2C_Init+0x23c>)
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d80d      	bhi.n	8004a4c <HAL_I2C_Init+0x104>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e59      	subs	r1, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	bf38      	it	cc
 8004a48:	2304      	movcc	r3, #4
 8004a4a:	e04f      	b.n	8004aec <HAL_I2C_Init+0x1a4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <HAL_I2C_Init+0x130>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e58      	subs	r0, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e012      	b.n	8004a9e <HAL_I2C_Init+0x156>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e58      	subs	r0, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	0099      	lsls	r1, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x15e>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e022      	b.n	8004aec <HAL_I2C_Init+0x1a4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10e      	bne.n	8004acc <HAL_I2C_Init+0x184>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1e58      	subs	r0, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	440b      	add	r3, r1
 8004abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	e00f      	b.n	8004aec <HAL_I2C_Init+0x1a4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e58      	subs	r0, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	0099      	lsls	r1, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6809      	ldr	r1, [r1, #0]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6911      	ldr	r1, [r2, #16]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	000186a0 	.word	0x000186a0
 8004b88:	001e847f 	.word	0x001e847f
 8004b8c:	003d08ff 	.word	0x003d08ff
 8004b90:	431bde83 	.word	0x431bde83
 8004b94:	10624dd3 	.word	0x10624dd3

08004b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	817b      	strh	r3, [r7, #10]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bac:	f7ff fc70 	bl	8004490 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 80e0 	bne.w	8004d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2319      	movs	r3, #25
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4970      	ldr	r1, [pc, #448]	; (8004d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fc3c 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0d3      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2C_Master_Transmit+0x50>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0cc      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d007      	beq.n	8004c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	; 0x21
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	893a      	ldrh	r2, [r7, #8]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a50      	ldr	r2, [pc, #320]	; (8004d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 faca 	bl	80051f0 <I2C_MasterRequestWrite>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08d      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c7c:	e066      	b.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fcb6 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fca6 	bl	8005676 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d107      	bne.n	8004d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01a      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d194      	bne.n	8004c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000

08004d94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	460b      	mov	r3, r1
 8004da2:	817b      	strh	r3, [r7, #10]
 8004da4:	4613      	mov	r3, r2
 8004da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004da8:	f7ff fb72 	bl	8004490 <HAL_GetTick>
 8004dac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	f040 8213 	bne.w	80051e2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2319      	movs	r3, #25
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	497e      	ldr	r1, [pc, #504]	; (8004fc0 <HAL_I2C_Master_Receive+0x22c>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb3e 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e206      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_I2C_Master_Receive+0x50>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e1ff      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d007      	beq.n	8004e0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2222      	movs	r2, #34	; 0x22
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2210      	movs	r2, #16
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a5e      	ldr	r2, [pc, #376]	; (8004fc4 <HAL_I2C_Master_Receive+0x230>)
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e4c:	8979      	ldrh	r1, [r7, #10]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fa42 	bl	80052dc <I2C_MasterRequestRead>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c0      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d113      	bne.n	8004e92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e194      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d11d      	bne.n	8004ed6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eaa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ed2:	b662      	cpsie	i
 8004ed4:	e172      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d11d      	bne.n	8004f1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f16:	b662      	cpsie	i
 8004f18:	e150      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f40:	e13c      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	f200 80f5 	bhi.w	8005136 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d123      	bne.n	8004f9c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fbcd 	bl	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e13d      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f9a:	e10f      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d150      	bne.n	8005046 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2200      	movs	r2, #0
 8004fac:	4906      	ldr	r1, [pc, #24]	; (8004fc8 <HAL_I2C_Master_Receive+0x234>)
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa4a 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e112      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
 8004fbe:	bf00      	nop
 8004fc0:	00100002 	.word	0x00100002
 8004fc4:	ffff0000 	.word	0xffff0000
 8004fc8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004fcc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fdc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005010:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005044:	e0ba      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2200      	movs	r2, #0
 800504e:	4967      	ldr	r1, [pc, #412]	; (80051ec <HAL_I2C_Master_Receive+0x458>)
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f9f9 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0c1      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005070:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2200      	movs	r2, #0
 80050ac:	494f      	ldr	r1, [pc, #316]	; (80051ec <HAL_I2C_Master_Receive+0x458>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f9ca 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e092      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005100:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005134:	e042      	b.n	80051bc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fadc 	bl	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e04c      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b04      	cmp	r3, #4
 8005188:	d118      	bne.n	80051bc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f47f aebe 	bne.w	8004f42 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3728      	adds	r7, #40	; 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	00010004 	.word	0x00010004

080051f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	460b      	mov	r3, r1
 80051fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d006      	beq.n	800521a <I2C_MasterRequestWrite+0x2a>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d003      	beq.n	800521a <I2C_MasterRequestWrite+0x2a>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005218:	d108      	bne.n	800522c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e00b      	b.n	8005244 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b12      	cmp	r3, #18
 8005232:	d107      	bne.n	8005244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f8f9 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e035      	b.n	80052cc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005268:	d108      	bne.n	800527c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005278:	611a      	str	r2, [r3, #16]
 800527a:	e01b      	b.n	80052b4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800527c:	897b      	ldrh	r3, [r7, #10]
 800527e:	11db      	asrs	r3, r3, #7
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0306 	and.w	r3, r3, #6
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f063 030f 	orn	r3, r3, #15
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <I2C_MasterRequestWrite+0xe4>)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f92b 	bl	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e010      	b.n	80052cc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4907      	ldr	r1, [pc, #28]	; (80052d8 <I2C_MasterRequestWrite+0xe8>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f91b 	bl	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	00010008 	.word	0x00010008
 80052d8:	00010002 	.word	0x00010002

080052dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	460b      	mov	r3, r1
 80052ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d006      	beq.n	8005316 <I2C_MasterRequestRead+0x3a>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d003      	beq.n	8005316 <I2C_MasterRequestRead+0x3a>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005314:	d108      	bne.n	8005328 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e00b      	b.n	8005340 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b11      	cmp	r3, #17
 800532e:	d107      	bne.n	8005340 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f87b 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e06d      	b.n	8005438 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005364:	d108      	bne.n	8005378 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]
 8005376:	e053      	b.n	8005420 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005378:	897b      	ldrh	r3, [r7, #10]
 800537a:	11db      	asrs	r3, r3, #7
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0306 	and.w	r3, r3, #6
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f063 030f 	orn	r3, r3, #15
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	492a      	ldr	r1, [pc, #168]	; (8005440 <I2C_MasterRequestRead+0x164>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f8ad 	bl	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e048      	b.n	8005438 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	4923      	ldr	r1, [pc, #140]	; (8005444 <I2C_MasterRequestRead+0x168>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f89d 	bl	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e038      	b.n	8005438 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f825 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e017      	b.n	8005438 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005408:	897b      	ldrh	r3, [r7, #10]
 800540a:	11db      	asrs	r3, r3, #7
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f063 030e 	orn	r3, r3, #14
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4907      	ldr	r1, [pc, #28]	; (8005444 <I2C_MasterRequestRead+0x168>)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f865 	bl	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00010008 	.word	0x00010008
 8005444:	00010002 	.word	0x00010002

08005448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005458:	e025      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d021      	beq.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7ff f815 	bl	8004490 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e023      	b.n	80054ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10d      	bne.n	80054cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	e00c      	b.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d0b6      	beq.n	800545a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005504:	e051      	b.n	80055aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005514:	d123      	bne.n	800555e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800552e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e046      	b.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d021      	beq.n	80055aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fe ff93 	bl	8004490 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d116      	bne.n	80055aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e020      	b.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10c      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	43da      	mvns	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e00b      	b.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	43da      	mvns	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d18d      	bne.n	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005600:	e02d      	b.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f8ce 	bl	80057a4 <I2C_IsAcknowledgeFailed>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02d      	b.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d021      	beq.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fe ff39 	bl	8004490 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e007      	b.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d1ca      	bne.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005682:	e02d      	b.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f88d 	bl	80057a4 <I2C_IsAcknowledgeFailed>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e02d      	b.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d021      	beq.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569c:	f7fe fef8 	bl	8004490 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d116      	bne.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e007      	b.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d1ca      	bne.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005704:	e042      	b.n	800578c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b10      	cmp	r3, #16
 8005712:	d119      	bne.n	8005748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0210 	mvn.w	r2, #16
 800571c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e029      	b.n	800579c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005748:	f7fe fea2 	bl	8004490 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d116      	bne.n	800578c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e007      	b.n	800579c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d1b5      	bne.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ba:	d11b      	bne.n	80057f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f043 0204 	orr.w	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e26c      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8087 	beq.w	800592e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005820:	4b92      	ldr	r3, [pc, #584]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 030c 	and.w	r3, r3, #12
 8005828:	2b04      	cmp	r3, #4
 800582a:	d00c      	beq.n	8005846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800582c:	4b8f      	ldr	r3, [pc, #572]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b08      	cmp	r3, #8
 8005836:	d112      	bne.n	800585e <HAL_RCC_OscConfig+0x5e>
 8005838:	4b8c      	ldr	r3, [pc, #560]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005844:	d10b      	bne.n	800585e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005846:	4b89      	ldr	r3, [pc, #548]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d06c      	beq.n	800592c <HAL_RCC_OscConfig+0x12c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d168      	bne.n	800592c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e246      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d106      	bne.n	8005876 <HAL_RCC_OscConfig+0x76>
 8005868:	4b80      	ldr	r3, [pc, #512]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7f      	ldr	r2, [pc, #508]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800586e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e02e      	b.n	80058d4 <HAL_RCC_OscConfig+0xd4>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x98>
 800587e:	4b7b      	ldr	r3, [pc, #492]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b78      	ldr	r3, [pc, #480]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a77      	ldr	r2, [pc, #476]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e01d      	b.n	80058d4 <HAL_RCC_OscConfig+0xd4>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0xbc>
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a71      	ldr	r2, [pc, #452]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6e      	ldr	r2, [pc, #440]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e00b      	b.n	80058d4 <HAL_RCC_OscConfig+0xd4>
 80058bc:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	4b68      	ldr	r3, [pc, #416]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a67      	ldr	r2, [pc, #412]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d013      	beq.n	8005904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fe fdd8 	bl	8004490 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fe fdd4 	bl	8004490 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e1fa      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0xe4>
 8005902:	e014      	b.n	800592e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fe fdc4 	bl	8004490 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590c:	f7fe fdc0 	bl	8004490 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e1e6      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x10c>
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d063      	beq.n	8005a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800593a:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005946:	4b49      	ldr	r3, [pc, #292]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b08      	cmp	r3, #8
 8005950:	d11c      	bne.n	800598c <HAL_RCC_OscConfig+0x18c>
 8005952:	4b46      	ldr	r3, [pc, #280]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595e:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_RCC_OscConfig+0x176>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e1ba      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4939      	ldr	r1, [pc, #228]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005986:	4313      	orrs	r3, r2
 8005988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598a:	e03a      	b.n	8005a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599a:	f7fe fd79 	bl	8004490 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a2:	f7fe fd75 	bl	8004490 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e19b      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b4:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c0:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4927      	ldr	r1, [pc, #156]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]
 80059d4:	e015      	b.n	8005a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe fd58 	bl	8004490 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e4:	f7fe fd54 	bl	8004490 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e17a      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03a      	beq.n	8005a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d019      	beq.n	8005a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a16:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <HAL_RCC_OscConfig+0x274>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1c:	f7fe fd38 	bl	8004490 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a24:	f7fe fd34 	bl	8004490 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e15a      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <HAL_RCC_OscConfig+0x26c>)
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a42:	2001      	movs	r0, #1
 8005a44:	f000 fb2a 	bl	800609c <RCC_Delay>
 8005a48:	e01c      	b.n	8005a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a50:	f7fe fd1e 	bl	8004490 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a56:	e00f      	b.n	8005a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a58:	f7fe fd1a 	bl	8004490 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d908      	bls.n	8005a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e140      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	42420000 	.word	0x42420000
 8005a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	4b9e      	ldr	r3, [pc, #632]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e9      	bne.n	8005a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a6 	beq.w	8005bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a96:	4b97      	ldr	r3, [pc, #604]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	4b94      	ldr	r3, [pc, #592]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	4a93      	ldr	r2, [pc, #588]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	61d3      	str	r3, [r2, #28]
 8005aae:	4b91      	ldr	r3, [pc, #580]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abe:	4b8e      	ldr	r3, [pc, #568]	; (8005cf8 <HAL_RCC_OscConfig+0x4f8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d118      	bne.n	8005afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aca:	4b8b      	ldr	r3, [pc, #556]	; (8005cf8 <HAL_RCC_OscConfig+0x4f8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a8a      	ldr	r2, [pc, #552]	; (8005cf8 <HAL_RCC_OscConfig+0x4f8>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad6:	f7fe fcdb 	bl	8004490 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ade:	f7fe fcd7 	bl	8004490 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b64      	cmp	r3, #100	; 0x64
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0fd      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af0:	4b81      	ldr	r3, [pc, #516]	; (8005cf8 <HAL_RCC_OscConfig+0x4f8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d106      	bne.n	8005b12 <HAL_RCC_OscConfig+0x312>
 8005b04:	4b7b      	ldr	r3, [pc, #492]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6213      	str	r3, [r2, #32]
 8005b10:	e02d      	b.n	8005b6e <HAL_RCC_OscConfig+0x36e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x334>
 8005b1a:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4a75      	ldr	r2, [pc, #468]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6213      	str	r3, [r2, #32]
 8005b26:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4a72      	ldr	r2, [pc, #456]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6213      	str	r3, [r2, #32]
 8005b32:	e01c      	b.n	8005b6e <HAL_RCC_OscConfig+0x36e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	d10c      	bne.n	8005b56 <HAL_RCC_OscConfig+0x356>
 8005b3c:	4b6d      	ldr	r3, [pc, #436]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4a6c      	ldr	r2, [pc, #432]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b42:	f043 0304 	orr.w	r3, r3, #4
 8005b46:	6213      	str	r3, [r2, #32]
 8005b48:	4b6a      	ldr	r3, [pc, #424]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	4a69      	ldr	r2, [pc, #420]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6213      	str	r3, [r2, #32]
 8005b54:	e00b      	b.n	8005b6e <HAL_RCC_OscConfig+0x36e>
 8005b56:	4b67      	ldr	r3, [pc, #412]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4a66      	ldr	r2, [pc, #408]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	6213      	str	r3, [r2, #32]
 8005b62:	4b64      	ldr	r3, [pc, #400]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4a63      	ldr	r2, [pc, #396]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d015      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b76:	f7fe fc8b 	bl	8004490 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fe fc87 	bl	8004490 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e0ab      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b94:	4b57      	ldr	r3, [pc, #348]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ee      	beq.n	8005b7e <HAL_RCC_OscConfig+0x37e>
 8005ba0:	e014      	b.n	8005bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba2:	f7fe fc75 	bl	8004490 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fe fc71 	bl	8004490 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e095      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc0:	4b4c      	ldr	r3, [pc, #304]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ee      	bne.n	8005baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd2:	4b48      	ldr	r3, [pc, #288]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	4a47      	ldr	r2, [pc, #284]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8081 	beq.w	8005cea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005be8:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d061      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d146      	bne.n	8005c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <HAL_RCC_OscConfig+0x4fc>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fe fc45 	bl	8004490 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0a:	f7fe fc41 	bl	8004490 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e067      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1c:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c30:	d108      	bne.n	8005c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c32:	4b30      	ldr	r3, [pc, #192]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	492d      	ldr	r1, [pc, #180]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a19      	ldr	r1, [r3, #32]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	430b      	orrs	r3, r1
 8005c56:	4927      	ldr	r1, [pc, #156]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c5c:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x4fc>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c62:	f7fe fc15 	bl	8004490 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6a:	f7fe fc11 	bl	8004490 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e037      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x46a>
 8005c88:	e02f      	b.n	8005cea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_RCC_OscConfig+0x4fc>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c90:	f7fe fbfe 	bl	8004490 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c98:	f7fe fbfa 	bl	8004490 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e020      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x498>
 8005cb6:	e018      	b.n	8005cea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e013      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_RCC_OscConfig+0x4f4>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d001      	beq.n	8005cea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40007000 	.word	0x40007000
 8005cfc:	42420060 	.word	0x42420060

08005d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0d0      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d14:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d910      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f023 0207 	bic.w	r2, r3, #7
 8005d2a:	4965      	ldr	r1, [pc, #404]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b63      	ldr	r3, [pc, #396]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0b8      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d020      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d5c:	4b59      	ldr	r3, [pc, #356]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a58      	ldr	r2, [pc, #352]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d74:	4b53      	ldr	r3, [pc, #332]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4a52      	ldr	r2, [pc, #328]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d80:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	494d      	ldr	r1, [pc, #308]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d040      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da6:	4b47      	ldr	r3, [pc, #284]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d115      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07f      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e073      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dce:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e06b      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dde:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f023 0203 	bic.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4936      	ldr	r1, [pc, #216]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df0:	f7fe fb4e 	bl	8004490 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df8:	f7fe fb4a 	bl	8004490 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e053      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	4b2d      	ldr	r3, [pc, #180]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 020c 	and.w	r2, r3, #12
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1eb      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d210      	bcs.n	8005e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 0207 	bic.w	r2, r3, #7
 8005e36:	4922      	ldr	r1, [pc, #136]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3e:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d001      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e032      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4916      	ldr	r1, [pc, #88]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	490e      	ldr	r1, [pc, #56]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e8e:	f000 f82d 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005e92:	4601      	mov	r1, r0
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
 8005ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <HAL_RCC_ClockConfig+0x1cc>)
 8005ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe f9c6 	bl	8004240 <HAL_InitTick>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40022000 	.word	0x40022000
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	0800da98 	.word	0x0800da98
 8005ecc:	20000004 	.word	0x20000004
 8005ed0:	20000008 	.word	0x20000008

08005ed4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005ed8:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <HAL_RCC_EnableCSS+0x14>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	4242004c 	.word	0x4242004c

08005eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eec:	b490      	push	{r4, r7}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ef4:	1d3c      	adds	r4, r7, #4
 8005ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f16:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d002      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x40>
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x46>
 8005f2a:	e02d      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f2c:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f2e:	623b      	str	r3, [r7, #32]
      break;
 8005f30:	e02d      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	0c9b      	lsrs	r3, r3, #18
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f3e:	4413      	add	r3, r2
 8005f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d013      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f50:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c5b      	lsrs	r3, r3, #17
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f5e:	4413      	add	r3, r2
 8005f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4a0f      	ldr	r2, [pc, #60]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f6a:	fb02 f203 	mul.w	r2, r2, r3
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	e004      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f7c:	fb02 f303 	mul.w	r3, r2, r3
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	623b      	str	r3, [r7, #32]
      break;
 8005f86:	e002      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f8a:	623b      	str	r3, [r7, #32]
      break;
 8005f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3728      	adds	r7, #40	; 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc90      	pop	{r4, r7}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	0800d904 	.word	0x0800d904
 8005fa0:	0800d914 	.word	0x0800d914
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	007a1200 	.word	0x007a1200
 8005fac:	003d0900 	.word	0x003d0900

08005fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fb4:	4b02      	ldr	r3, [pc, #8]	; (8005fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	20000004 	.word	0x20000004

08005fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fc8:	f7ff fff2 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4601      	mov	r1, r0
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	0800daa8 	.word	0x0800daa8

08005fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ff0:	f7ff ffde 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	0adb      	lsrs	r3, r3, #11
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4a03      	ldr	r2, [pc, #12]	; (8006010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40021000 	.word	0x40021000
 8006010:	0800daa8 	.word	0x0800daa8

08006014 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	220f      	movs	r2, #15
 8006022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <HAL_RCC_GetClockConfig+0x58>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f003 0203 	and.w	r2, r3, #3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <HAL_RCC_GetClockConfig+0x58>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCC_GetClockConfig+0x58>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <HAL_RCC_GetClockConfig+0x58>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	08db      	lsrs	r3, r3, #3
 800604e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006056:	4b06      	ldr	r3, [pc, #24]	; (8006070 <HAL_RCC_GetClockConfig+0x5c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0207 	and.w	r2, r3, #7
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr
 800606c:	40021000 	.word	0x40021000
 8006070:	40022000 	.word	0x40022000

08006074 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_RCC_NMI_IRQHandler+0x20>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d104      	bne.n	800608e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006084:	f000 f828 	bl	80060d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <HAL_RCC_NMI_IRQHandler+0x24>)
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	701a      	strb	r2, [r3, #0]
  }
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	4002100a 	.word	0x4002100a

0800609c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <RCC_Delay+0x34>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <RCC_Delay+0x38>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0a5b      	lsrs	r3, r3, #9
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
 80060b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060b8:	bf00      	nop
  }
  while (Delay --);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	60fa      	str	r2, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f9      	bne.n	80060b8 <RCC_Delay+0x1c>
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000004 	.word	0x20000004
 80060d4:	10624dd3 	.word	0x10624dd3

080060d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e01d      	b.n	8006132 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd ff98 	bl	8004040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f000 fb3c 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d007      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e01d      	b.n	80061ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f815 	bl	80061d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f000 faee 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fd50 	bl	8006ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a10      	ldr	r2, [pc, #64]	; (8006248 <HAL_TIM_PWM_Start+0x60>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d107      	bne.n	800621a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006218:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b06      	cmp	r3, #6
 800622a:	d007      	beq.n	800623c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00

0800624c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0202 	mvn.w	r2, #2
 8006278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa6a 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa5d 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa6c 	bl	800677a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0204 	mvn.w	r2, #4
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa40 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa33 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa42 	bl	800677a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b08      	cmp	r3, #8
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0208 	mvn.w	r2, #8
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa16 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa09 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fa18 	bl	800677a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b10      	cmp	r3, #16
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0210 	mvn.w	r2, #16
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2208      	movs	r2, #8
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9ec 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9df 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9ee 	bl	800677a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0201 	mvn.w	r2, #1
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc ffb4 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fcc3 	bl	8006d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d10e      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d107      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9b2 	bl	800678c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d10e      	bne.n	8006454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b20      	cmp	r3, #32
 8006442:	d107      	bne.n	8006454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0220 	mvn.w	r2, #32
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fc8e 	bl	8006d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006472:	2302      	movs	r3, #2
 8006474:	e0b4      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	f200 809f 	bhi.w	80065cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080065cd 	.word	0x080065cd
 800649c:	080065cd 	.word	0x080065cd
 80064a0:	080065cd 	.word	0x080065cd
 80064a4:	08006509 	.word	0x08006509
 80064a8:	080065cd 	.word	0x080065cd
 80064ac:	080065cd 	.word	0x080065cd
 80064b0:	080065cd 	.word	0x080065cd
 80064b4:	0800654b 	.word	0x0800654b
 80064b8:	080065cd 	.word	0x080065cd
 80064bc:	080065cd 	.word	0x080065cd
 80064c0:	080065cd 	.word	0x080065cd
 80064c4:	0800658b 	.word	0x0800658b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f9c8 	bl	8006864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	619a      	str	r2, [r3, #24]
      break;
 8006506:	e062      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa0e 	bl	8006930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e041      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa57 	bl	8006a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0204 	bic.w	r2, r2, #4
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
      break;
 8006588:	e021      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 faa1 	bl	8006ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	61da      	str	r2, [r3, #28]
      break;
 80065ca:	e000      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80065cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_ConfigClockSource+0x18>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0a6      	b.n	800674e <HAL_TIM_ConfigClockSource+0x166>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800661e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006626:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d067      	beq.n	8006708 <HAL_TIM_ConfigClockSource+0x120>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d80b      	bhi.n	8006654 <HAL_TIM_ConfigClockSource+0x6c>
 800663c:	2b10      	cmp	r3, #16
 800663e:	d073      	beq.n	8006728 <HAL_TIM_ConfigClockSource+0x140>
 8006640:	2b10      	cmp	r3, #16
 8006642:	d802      	bhi.n	800664a <HAL_TIM_ConfigClockSource+0x62>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d06f      	beq.n	8006728 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006648:	e078      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800664a:	2b20      	cmp	r3, #32
 800664c:	d06c      	beq.n	8006728 <HAL_TIM_ConfigClockSource+0x140>
 800664e:	2b30      	cmp	r3, #48	; 0x30
 8006650:	d06a      	beq.n	8006728 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006652:	e073      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006654:	2b70      	cmp	r3, #112	; 0x70
 8006656:	d00d      	beq.n	8006674 <HAL_TIM_ConfigClockSource+0x8c>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d804      	bhi.n	8006666 <HAL_TIM_ConfigClockSource+0x7e>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d033      	beq.n	80066c8 <HAL_TIM_ConfigClockSource+0xe0>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d041      	beq.n	80066e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006664:	e06a      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d066      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x152>
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d017      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006672:	e063      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6899      	ldr	r1, [r3, #8]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f000 faed 	bl	8006c62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006696:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	609a      	str	r2, [r3, #8]
      break;
 80066a0:	e04c      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6899      	ldr	r1, [r3, #8]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f000 fad6 	bl	8006c62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c4:	609a      	str	r2, [r3, #8]
      break;
 80066c6:	e039      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	461a      	mov	r2, r3
 80066d6:	f000 fa4d 	bl	8006b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2150      	movs	r1, #80	; 0x50
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 faa4 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80066e6:	e029      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	6859      	ldr	r1, [r3, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f000 fa6b 	bl	8006bd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2160      	movs	r1, #96	; 0x60
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fa94 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 8006706:	e019      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6859      	ldr	r1, [r3, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	461a      	mov	r2, r3
 8006716:	f000 fa2d 	bl	8006b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2140      	movs	r1, #64	; 0x40
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fa84 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 8006726:	e009      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f000 fa7b 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 8006738:	e000      	b.n	800673c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800673a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
	...

080067a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a29      	ldr	r2, [pc, #164]	; (8006858 <TIM_Base_SetConfig+0xb8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_Base_SetConfig+0x30>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d007      	beq.n	80067d0 <TIM_Base_SetConfig+0x30>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a26      	ldr	r2, [pc, #152]	; (800685c <TIM_Base_SetConfig+0xbc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0x30>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a25      	ldr	r2, [pc, #148]	; (8006860 <TIM_Base_SetConfig+0xc0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d108      	bne.n	80067e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <TIM_Base_SetConfig+0xb8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_Base_SetConfig+0x62>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d007      	beq.n	8006802 <TIM_Base_SetConfig+0x62>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a19      	ldr	r2, [pc, #100]	; (800685c <TIM_Base_SetConfig+0xbc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_Base_SetConfig+0x62>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a18      	ldr	r2, [pc, #96]	; (8006860 <TIM_Base_SetConfig+0xc0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d108      	bne.n	8006814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <TIM_Base_SetConfig+0xb8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d103      	bne.n	8006848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	615a      	str	r2, [r3, #20]
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr
 8006858:	40012c00 	.word	0x40012c00
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800

08006864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0302 	bic.w	r3, r3, #2
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1c      	ldr	r2, [pc, #112]	; (800692c <TIM_OC1_SetConfig+0xc8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10c      	bne.n	80068da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0308 	bic.w	r3, r3, #8
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 0304 	bic.w	r3, r3, #4
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <TIM_OC1_SetConfig+0xc8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d111      	bne.n	8006906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00

08006930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0210 	bic.w	r2, r3, #16
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f023 0320 	bic.w	r3, r3, #32
 800697a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <TIM_OC2_SetConfig+0xd0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10d      	bne.n	80069ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <TIM_OC2_SetConfig+0xd0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d113      	bne.n	80069dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00

08006a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <TIM_OC3_SetConfig+0xd0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10d      	bne.n	8006a7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <TIM_OC3_SetConfig+0xd0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d113      	bne.n	8006aae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00

08006ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <TIM_OC4_SetConfig+0x98>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d109      	bne.n	8006b4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr
 8006b70:	40012c00 	.word	0x40012c00

08006b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 030a 	bic.w	r3, r3, #10
 8006bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr

08006bd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f023 0210 	bic.w	r2, r3, #16
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	031b      	lsls	r3, r3, #12
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f043 0307 	orr.w	r3, r3, #7
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	021a      	lsls	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	609a      	str	r2, [r3, #8]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e032      	b.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d38:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e03f      	b.n	8006e26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fd f9bc 	bl	8004138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2224      	movs	r2, #36	; 0x24
 8006dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9b1 	bl	8007140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_UART_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b088      	sub	sp, #32
 8006e32:	af02      	add	r7, sp, #8
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	f040 8083 	bne.w	8006f56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_UART_Transmit+0x2e>
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e07b      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Transmit+0x40>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e074      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2221      	movs	r2, #33	; 0x21
 8006e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e84:	f7fd fb04 	bl	8004490 <HAL_GetTick>
 8006e88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e96:	e042      	b.n	8006f1e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	d122      	bne.n	8006ef6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2180      	movs	r1, #128	; 0x80
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f8f6 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e046      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006edc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	3302      	adds	r3, #2
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	e017      	b.n	8006f1e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	e013      	b.n	8006f1e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2200      	movs	r2, #0
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f8d3 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e023      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	60ba      	str	r2, [r7, #8]
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1b7      	bne.n	8006e98 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f8ba 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e00a      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006f56:	2302      	movs	r3, #2
  }
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	f040 8090 	bne.w	80070a2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_UART_Receive+0x2e>
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e088      	b.n	80070a4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_UART_Receive+0x40>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e081      	b.n	80070a4 <HAL_UART_Receive+0x144>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2222      	movs	r2, #34	; 0x22
 8006fb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006fb6:	f7fd fa6b 	bl	8004490 <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006fc8:	e05c      	b.n	8007084 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d12b      	bne.n	800703a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2120      	movs	r1, #32
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f85d 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e053      	b.n	80070a4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	b29a      	uxth	r2, r3
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	3302      	adds	r3, #2
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	e030      	b.n	8007084 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	b29b      	uxth	r3, r3
 800702a:	b2db      	uxtb	r3, r3
 800702c:	b29a      	uxth	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3301      	adds	r3, #1
 8007036:	60bb      	str	r3, [r7, #8]
 8007038:	e024      	b.n	8007084 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2200      	movs	r2, #0
 8007042:	2120      	movs	r1, #32
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f831 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e027      	b.n	80070a4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d108      	bne.n	800706e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	60ba      	str	r2, [r7, #8]
 8007068:	b2ca      	uxtb	r2, r1
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e00a      	b.n	8007084 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1c59      	adds	r1, r3, #1
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d19d      	bne.n	8006fca <HAL_UART_Receive+0x6a>
        }
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e000      	b.n	80070a4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070bc:	e02c      	b.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d028      	beq.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <UART_WaitOnFlagUntilTimeout+0x30>
 80070cc:	f7fd f9e0 	bl	8004490 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d21d      	bcs.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e00f      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d0c3      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800717a:	f023 030c 	bic.w	r3, r3, #12
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	430b      	orrs	r3, r1
 8007186:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a52      	ldr	r2, [pc, #328]	; (80072ec <UART_SetConfig+0x1ac>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d14e      	bne.n	8007246 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fe ff20 	bl	8005fec <HAL_RCC_GetPCLK2Freq>
 80071ac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009a      	lsls	r2, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <UART_SetConfig+0x1b0>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	0119      	lsls	r1, r3, #4
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009a      	lsls	r2, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80071e4:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <UART_SetConfig+0x1b0>)
 80071e6:	fba3 0302 	umull	r0, r3, r3, r2
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2064      	movs	r0, #100	; 0x64
 80071ee:	fb00 f303 	mul.w	r3, r0, r3
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	3332      	adds	r3, #50	; 0x32
 80071f8:	4a3d      	ldr	r2, [pc, #244]	; (80072f0 <UART_SetConfig+0x1b0>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007204:	4419      	add	r1, r3
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009a      	lsls	r2, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	fbb2 f2f3 	udiv	r2, r2, r3
 800721c:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <UART_SetConfig+0x1b0>)
 800721e:	fba3 0302 	umull	r0, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2064      	movs	r0, #100	; 0x64
 8007226:	fb00 f303 	mul.w	r3, r0, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	3332      	adds	r3, #50	; 0x32
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <UART_SetConfig+0x1b0>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	f003 020f 	and.w	r2, r3, #15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	440a      	add	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007244:	e04d      	b.n	80072e2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007246:	f7fe febd 	bl	8005fc4 <HAL_RCC_GetPCLK1Freq>
 800724a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009a      	lsls	r2, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <UART_SetConfig+0x1b0>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	0119      	lsls	r1, r3, #4
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009a      	lsls	r2, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007282:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <UART_SetConfig+0x1b0>)
 8007284:	fba3 0302 	umull	r0, r3, r3, r2
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	2064      	movs	r0, #100	; 0x64
 800728c:	fb00 f303 	mul.w	r3, r0, r3
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	3332      	adds	r3, #50	; 0x32
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <UART_SetConfig+0x1b0>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a2:	4419      	add	r1, r3
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009a      	lsls	r2, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <UART_SetConfig+0x1b0>)
 80072bc:	fba3 0302 	umull	r0, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	2064      	movs	r0, #100	; 0x64
 80072c4:	fb00 f303 	mul.w	r3, r0, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	3332      	adds	r3, #50	; 0x32
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <UART_SetConfig+0x1b0>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	440a      	add	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40013800 	.word	0x40013800
 80072f0:	51eb851f 	.word	0x51eb851f

080072f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fa:	f3ef 8305 	mrs	r3, IPSR
 80072fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007300:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10f      	bne.n	8007326 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007306:	f3ef 8310 	mrs	r3, PRIMASK
 800730a:	607b      	str	r3, [r7, #4]
  return(result);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <osKernelInitialize+0x32>
 8007312:	4b10      	ldr	r3, [pc, #64]	; (8007354 <osKernelInitialize+0x60>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d109      	bne.n	800732e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800731a:	f3ef 8311 	mrs	r3, BASEPRI
 800731e:	603b      	str	r3, [r7, #0]
  return(result);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007326:	f06f 0305 	mvn.w	r3, #5
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e00c      	b.n	8007348 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <osKernelInitialize+0x60>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <osKernelInitialize+0x60>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e002      	b.n	8007348 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	20000248 	.word	0x20000248

08007358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735e:	f3ef 8305 	mrs	r3, IPSR
 8007362:	60bb      	str	r3, [r7, #8]
  return(result);
 8007364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10f      	bne.n	800738a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736a:	f3ef 8310 	mrs	r3, PRIMASK
 800736e:	607b      	str	r3, [r7, #4]
  return(result);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <osKernelStart+0x32>
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <osKernelStart+0x64>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d109      	bne.n	8007392 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800737e:	f3ef 8311 	mrs	r3, BASEPRI
 8007382:	603b      	str	r3, [r7, #0]
  return(result);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <osKernelStart+0x3a>
    stat = osErrorISR;
 800738a:	f06f 0305 	mvn.w	r3, #5
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	e00e      	b.n	80073b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <osKernelStart+0x64>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d107      	bne.n	80073aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <osKernelStart+0x64>)
 800739c:	2202      	movs	r2, #2
 800739e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80073a0:	f001 f93a 	bl	8008618 <vTaskStartScheduler>
      stat = osOK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e002      	b.n	80073b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295
 80073ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80073b0:	68fb      	ldr	r3, [r7, #12]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000248 	.word	0x20000248

080073c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c6:	f3ef 8305 	mrs	r3, IPSR
 80073ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80073cc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10f      	bne.n	80073f2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d2:	f3ef 8310 	mrs	r3, PRIMASK
 80073d6:	607b      	str	r3, [r7, #4]
  return(result);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <osKernelGetTickCount+0x32>
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <osKernelGetTickCount+0x4c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d109      	bne.n	80073fa <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073e6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ea:	603b      	str	r3, [r7, #0]
  return(result);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80073f2:	f001 fa2d 	bl	8008850 <xTaskGetTickCountFromISR>
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	e002      	b.n	8007400 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80073fa:	f001 fa1b 	bl	8008834 <xTaskGetTickCount>
 80073fe:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007400:	68fb      	ldr	r3, [r7, #12]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000248 	.word	0x20000248

08007410 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b092      	sub	sp, #72	; 0x48
 8007414:	af04      	add	r7, sp, #16
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007420:	f3ef 8305 	mrs	r3, IPSR
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 8094 	bne.w	8007556 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742e:	f3ef 8310 	mrs	r3, PRIMASK
 8007432:	623b      	str	r3, [r7, #32]
  return(result);
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 808d 	bne.w	8007556 <osThreadNew+0x146>
 800743c:	4b48      	ldr	r3, [pc, #288]	; (8007560 <osThreadNew+0x150>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d106      	bne.n	8007452 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007444:	f3ef 8311 	mrs	r3, BASEPRI
 8007448:	61fb      	str	r3, [r7, #28]
  return(result);
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f040 8082 	bne.w	8007556 <osThreadNew+0x146>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d07e      	beq.n	8007556 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007458:	2380      	movs	r3, #128	; 0x80
 800745a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800745c:	2318      	movs	r3, #24
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007460:	2300      	movs	r3, #0
 8007462:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007464:	f107 031b 	add.w	r3, r7, #27
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d045      	beq.n	8007502 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <osThreadNew+0x74>
        name = attr->name;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <osThreadNew+0x9a>
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b38      	cmp	r3, #56	; 0x38
 800749c:	d805      	bhi.n	80074aa <osThreadNew+0x9a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <osThreadNew+0x9e>
        return (NULL);
 80074aa:	2300      	movs	r3, #0
 80074ac:	e054      	b.n	8007558 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00e      	beq.n	80074e4 <osThreadNew+0xd4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2b5b      	cmp	r3, #91	; 0x5b
 80074cc:	d90a      	bls.n	80074e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d006      	beq.n	80074e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <osThreadNew+0xd4>
        mem = 1;
 80074de:	2301      	movs	r3, #1
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e2:	e010      	b.n	8007506 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <osThreadNew+0xf6>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d108      	bne.n	8007506 <osThreadNew+0xf6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <osThreadNew+0xf6>
          mem = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007500:	e001      	b.n	8007506 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	2b01      	cmp	r3, #1
 800750a:	d110      	bne.n	800752e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007514:	9202      	str	r2, [sp, #8]
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007520:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fe36 	bl	8008194 <xTaskCreateStatic>
 8007528:	4603      	mov	r3, r0
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e013      	b.n	8007556 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	d110      	bne.n	8007556 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	b29a      	uxth	r2, r3
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fe7d 	bl	8008246 <xTaskCreate>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d001      	beq.n	8007556 <osThreadNew+0x146>
          hTask = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3738      	adds	r7, #56	; 0x38
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000248 	.word	0x20000248

08007564 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756c:	f3ef 8305 	mrs	r3, IPSR
 8007570:	613b      	str	r3, [r7, #16]
  return(result);
 8007572:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10f      	bne.n	8007598 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007578:	f3ef 8310 	mrs	r3, PRIMASK
 800757c:	60fb      	str	r3, [r7, #12]
  return(result);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <osDelay+0x34>
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <osDelay+0x58>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d109      	bne.n	80075a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800758c:	f3ef 8311 	mrs	r3, BASEPRI
 8007590:	60bb      	str	r3, [r7, #8]
  return(result);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <osDelay+0x3c>
    stat = osErrorISR;
 8007598:	f06f 0305 	mvn.w	r3, #5
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e007      	b.n	80075b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f800 	bl	80085b0 <vTaskDelay>
    }
  }

  return (stat);
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000248 	.word	0x20000248

080075c0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c8:	f3ef 8305 	mrs	r3, IPSR
 80075cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80075ce:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10f      	bne.n	80075f4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d4:	f3ef 8310 	mrs	r3, PRIMASK
 80075d8:	617b      	str	r3, [r7, #20]
  return(result);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d109      	bne.n	80075f4 <osDelayUntil+0x34>
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <osDelayUntil+0x64>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d109      	bne.n	80075fc <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075e8:	f3ef 8311 	mrs	r3, BASEPRI
 80075ec:	613b      	str	r3, [r7, #16]
  return(result);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <osDelayUntil+0x3c>
    stat = osErrorISR;
 80075f4:	f06f 0305 	mvn.w	r3, #5
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	e00e      	b.n	800761a <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8007600:	f001 f918 	bl	8008834 <xTaskGetTickCount>
 8007604:	4603      	mov	r3, r0
 8007606:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	1ad2      	subs	r2, r2, r3
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 ff51 	bl	80084bc <vTaskDelayUntil>
  }

  return (stat);
 800761a:	69fb      	ldr	r3, [r7, #28]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000248 	.word	0x20000248

08007628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vApplicationGetIdleTaskMemory+0x28>)
 8007638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a05      	ldr	r2, [pc, #20]	; (8007654 <vApplicationGetIdleTaskMemory+0x2c>)
 800763e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2280      	movs	r2, #128	; 0x80
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	2000024c 	.word	0x2000024c
 8007654:	200002a8 	.word	0x200002a8

08007658 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a07      	ldr	r2, [pc, #28]	; (8007684 <vApplicationGetTimerTaskMemory+0x2c>)
 8007668:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4a06      	ldr	r2, [pc, #24]	; (8007688 <vApplicationGetTimerTaskMemory+0x30>)
 800766e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007676:	601a      	str	r2, [r3, #0]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	200004a8 	.word	0x200004a8
 8007688:	20000504 	.word	0x20000504

0800768c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f103 0208 	add.w	r2, r3, #8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 0208 	add.w	r2, r3, #8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f103 0208 	add.w	r2, r3, #8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d103      	bne.n	8007748 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e00c      	b.n	8007762 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3308      	adds	r3, #8
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	e002      	b.n	8007756 <vListInsert+0x2e>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	429a      	cmp	r2, r3
 8007760:	d2f6      	bcs.n	8007750 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6892      	ldr	r2, [r2, #8]
 80077ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6852      	ldr	r2, [r2, #4]
 80077b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d103      	bne.n	80077cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
	...

080077ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	e7fe      	b.n	8007812 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007814:	f002 f820 	bl	8009858 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	441a      	add	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	3b01      	subs	r3, #1
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	22ff      	movs	r2, #255	; 0xff
 8007858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d114      	bne.n	8007894 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01a      	beq.n	80078a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3310      	adds	r3, #16
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f964 	bl	8008b44 <xTaskRemoveFromEventList>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d012      	beq.n	80078a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007882:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <xQueueGenericReset+0xcc>)
 8007884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	e009      	b.n	80078a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3310      	adds	r3, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fef7 	bl	800768c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fef2 	bl	800768c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f002 f804 	bl	80098b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ac:	2301      	movs	r3, #1
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <xQueueGenericCreateStatic+0x28>
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e2:	e7fe      	b.n	80078e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <xQueueGenericCreateStatic+0x42>
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
 80078fc:	e7fe      	b.n	80078fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <xQueueGenericCreateStatic+0x4e>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <xQueueGenericCreateStatic+0x52>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <xQueueGenericCreateStatic+0x54>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <xQueueGenericCreateStatic+0x6c>
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e7fe      	b.n	8007926 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d102      	bne.n	8007934 <xQueueGenericCreateStatic+0x78>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <xQueueGenericCreateStatic+0x7c>
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <xQueueGenericCreateStatic+0x7e>
 8007938:	2300      	movs	r3, #0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <xQueueGenericCreateStatic+0x96>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e7fe      	b.n	8007950 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007952:	2350      	movs	r3, #80	; 0x50
 8007954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b50      	cmp	r3, #80	; 0x50
 800795a:	d009      	beq.n	8007970 <xQueueGenericCreateStatic+0xb4>
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	e7fe      	b.n	800796e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f805 	bl	80079a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d103      	bne.n	80079bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e002      	b.n	80079c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079ce:	2101      	movs	r1, #1
 80079d0:	69b8      	ldr	r0, [r7, #24]
 80079d2:	f7ff ff0b 	bl	80077ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08e      	sub	sp, #56	; 0x38
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <xQueueGenericSend+0x30>
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a16:	e7fe      	b.n	8007a16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <xQueueGenericSend+0x3e>
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <xQueueGenericSend+0x42>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <xQueueGenericSend+0x44>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <xQueueGenericSend+0x5c>
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
 8007a42:	e7fe      	b.n	8007a42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d103      	bne.n	8007a52 <xQueueGenericSend+0x6a>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <xQueueGenericSend+0x6e>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <xQueueGenericSend+0x70>
 8007a56:	2300      	movs	r3, #0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <xQueueGenericSend+0x88>
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	e7fe      	b.n	8007a6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a70:	f001 fa22 	bl	8008eb8 <xTaskGetSchedulerState>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <xQueueGenericSend+0x98>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <xQueueGenericSend+0x9c>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <xQueueGenericSend+0x9e>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <xQueueGenericSend+0xb6>
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	61fb      	str	r3, [r7, #28]
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a9e:	f001 fedb 	bl	8009858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d302      	bcc.n	8007ab4 <xQueueGenericSend+0xcc>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d129      	bne.n	8007b08 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aba:	f000 f9ff 	bl	8007ebc <prvCopyDataToQueue>
 8007abe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d010      	beq.n	8007aea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	3324      	adds	r3, #36	; 0x24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f839 	bl	8008b44 <xTaskRemoveFromEventList>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d013      	beq.n	8007b00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ad8:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <xQueueGenericSend+0x1f0>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	e00a      	b.n	8007b00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007af0:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <xQueueGenericSend+0x1f0>)
 8007af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b00:	f001 fed8 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e063      	b.n	8007bd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b0e:	f001 fed1 	bl	80098b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e05c      	b.n	8007bd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f871 	bl	8008c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b26:	2301      	movs	r3, #1
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b2a:	f001 fec3 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b2e:	f000 fdd7 	bl	80086e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b32:	f001 fe91 	bl	8009858 <vPortEnterCritical>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d103      	bne.n	8007b4c <xQueueGenericSend+0x164>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d103      	bne.n	8007b62 <xQueueGenericSend+0x17a>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b62:	f001 fea7 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b66:	1d3a      	adds	r2, r7, #4
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 f860 	bl	8008c34 <xTaskCheckForTimeOut>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d124      	bne.n	8007bc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7c:	f000 fa96 	bl	80080ac <prvIsQueueFull>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d018      	beq.n	8007bb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	3310      	adds	r3, #16
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ff8a 	bl	8008aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b96:	f000 fa21 	bl	8007fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b9a:	f000 fdaf 	bl	80086fc <xTaskResumeAll>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f af7c 	bne.w	8007a9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <xQueueGenericSend+0x1f0>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	e772      	b.n	8007a9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bba:	f000 fa0f 	bl	8007fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bbe:	f000 fd9d 	bl	80086fc <xTaskResumeAll>
 8007bc2:	e76c      	b.n	8007a9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bc6:	f000 fa09 	bl	8007fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bca:	f000 fd97 	bl	80086fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bce:	2300      	movs	r3, #0
		}
	}
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3738      	adds	r7, #56	; 0x38
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08e      	sub	sp, #56	; 0x38
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <xQueueGenericSendFromISR+0x2c>
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSendFromISR+0x3a>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSendFromISR+0x3e>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSendFromISR+0x40>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <xQueueGenericSendFromISR+0x58>
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	e7fe      	b.n	8007c32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSendFromISR+0x66>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <xQueueGenericSendFromISR+0x6a>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <xQueueGenericSendFromISR+0x6c>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d109      	bne.n	8007c60 <xQueueGenericSendFromISR+0x84>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	e7fe      	b.n	8007c5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c60:	f001 feb4 	bl	80099cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c64:	f3ef 8211 	mrs	r2, BASEPRI
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	61ba      	str	r2, [r7, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <xQueueGenericSendFromISR+0xb6>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d12c      	bne.n	8007cec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca2:	f000 f90b 	bl	8007ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ca6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d112      	bne.n	8007cd6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d016      	beq.n	8007ce6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	3324      	adds	r3, #36	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 ff41 	bl	8008b44 <xTaskRemoveFromEventList>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00e      	beq.n	8007ce6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e007      	b.n	8007ce6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	b25a      	sxtb	r2, r3
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007cea:	e001      	b.n	8007cf0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3738      	adds	r7, #56	; 0x38
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08c      	sub	sp, #48	; 0x30
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <xQueueReceive+0x2e>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	623b      	str	r3, [r7, #32]
 8007d30:	e7fe      	b.n	8007d30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <xQueueReceive+0x3c>
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <xQueueReceive+0x40>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <xQueueReceive+0x42>
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <xQueueReceive+0x5a>
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e7fe      	b.n	8007d5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5e:	f001 f8ab 	bl	8008eb8 <xTaskGetSchedulerState>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <xQueueReceive+0x6a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueReceive+0x6e>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <xQueueReceive+0x70>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <xQueueReceive+0x88>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	e7fe      	b.n	8007d8a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d8c:	f001 fd64 	bl	8009858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01f      	beq.n	8007ddc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da0:	f000 f8f6 	bl	8007f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00f      	beq.n	8007dd4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	3310      	adds	r3, #16
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fec3 	bl	8008b44 <xTaskRemoveFromEventList>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dc4:	4b3c      	ldr	r3, [pc, #240]	; (8007eb8 <xQueueReceive+0x1b4>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dd4:	f001 fd6e 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e069      	b.n	8007eb0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007de2:	f001 fd67 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e062      	b.n	8007eb0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007df0:	f107 0310 	add.w	r3, r7, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 ff07 	bl	8008c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dfe:	f001 fd59 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e02:	f000 fc6d 	bl	80086e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e06:	f001 fd27 	bl	8009858 <vPortEnterCritical>
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d103      	bne.n	8007e20 <xQueueReceive+0x11c>
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d103      	bne.n	8007e36 <xQueueReceive+0x132>
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e36:	f001 fd3d 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e3a:	1d3a      	adds	r2, r7, #4
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fef6 	bl	8008c34 <xTaskCheckForTimeOut>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d123      	bne.n	8007e96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e50:	f000 f916 	bl	8008080 <prvIsQueueEmpty>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d017      	beq.n	8007e8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	3324      	adds	r3, #36	; 0x24
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fe20 	bl	8008aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f000 f8b7 	bl	8007fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e6e:	f000 fc45 	bl	80086fc <xTaskResumeAll>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d189      	bne.n	8007d8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <xQueueReceive+0x1b4>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	e780      	b.n	8007d8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8c:	f000 f8a6 	bl	8007fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e90:	f000 fc34 	bl	80086fc <xTaskResumeAll>
 8007e94:	e77a      	b.n	8007d8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e98:	f000 f8a0 	bl	8007fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e9c:	f000 fc2e 	bl	80086fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea2:	f000 f8ed 	bl	8008080 <prvIsQueueEmpty>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f43f af6f 	beq.w	8007d8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007eae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3730      	adds	r7, #48	; 0x30
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d14d      	bne.n	8007f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 f804 	bl	8008ef4 <xTaskPriorityDisinherit>
 8007eec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	605a      	str	r2, [r3, #4]
 8007ef4:	e043      	b.n	8007f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d119      	bne.n	8007f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6898      	ldr	r0, [r3, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	f001 ff9e 	bl	8009e48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f14:	441a      	add	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d32b      	bcc.n	8007f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	609a      	str	r2, [r3, #8]
 8007f2e:	e026      	b.n	8007f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68d8      	ldr	r0, [r3, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	f001 ff84 	bl	8009e48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	425b      	negs	r3, r3
 8007f4a:	441a      	add	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d207      	bcs.n	8007f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	425b      	negs	r3, r3
 8007f66:	441a      	add	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d105      	bne.n	8007f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f86:	697b      	ldr	r3, [r7, #20]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d018      	beq.n	8007fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	441a      	add	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d303      	bcc.n	8007fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68d9      	ldr	r1, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6838      	ldr	r0, [r7, #0]
 8007fd0:	f001 ff3a 	bl	8009e48 <memcpy>
	}
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fe4:	f001 fc38 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ff0:	e011      	b.n	8008016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d012      	beq.n	8008020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3324      	adds	r3, #36	; 0x24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fda0 	bl	8008b44 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800800a:	f000 fe73 	bl	8008cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	3b01      	subs	r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dce9      	bgt.n	8007ff2 <prvUnlockQueue+0x16>
 800801e:	e000      	b.n	8008022 <prvUnlockQueue+0x46>
					break;
 8008020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800802a:	f001 fc43 	bl	80098b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800802e:	f001 fc13 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800803a:	e011      	b.n	8008060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d012      	beq.n	800806a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3310      	adds	r3, #16
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fd7b 	bl	8008b44 <xTaskRemoveFromEventList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008054:	f000 fe4e 	bl	8008cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	3b01      	subs	r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	dce9      	bgt.n	800803c <prvUnlockQueue+0x60>
 8008068:	e000      	b.n	800806c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800806a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	22ff      	movs	r2, #255	; 0xff
 8008070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008074:	f001 fc1e 	bl	80098b4 <vPortExitCritical>
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008088:	f001 fbe6 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d102      	bne.n	800809a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e001      	b.n	800809e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800809e:	f001 fc09 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080b4:	f001 fbd0 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d102      	bne.n	80080ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e001      	b.n	80080ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080ce:	f001 fbf1 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e014      	b.n	8008116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080ec:	4a0e      	ldr	r2, [pc, #56]	; (8008128 <vQueueAddToRegistry+0x4c>)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080f8:	490b      	ldr	r1, [pc, #44]	; (8008128 <vQueueAddToRegistry+0x4c>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008102:	4a09      	ldr	r2, [pc, #36]	; (8008128 <vQueueAddToRegistry+0x4c>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800810e:	e005      	b.n	800811c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b07      	cmp	r3, #7
 800811a:	d9e7      	bls.n	80080ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20004078 	.word	0x20004078

0800812c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800813c:	f001 fb8c 	bl	8009858 <vPortEnterCritical>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008146:	b25b      	sxtb	r3, r3
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d103      	bne.n	8008156 <vQueueWaitForMessageRestricted+0x2a>
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815c:	b25b      	sxtb	r3, r3
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d103      	bne.n	800816c <vQueueWaitForMessageRestricted+0x40>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800816c:	f001 fba2 	bl	80098b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fcb5 	bl	8008af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008186:	6978      	ldr	r0, [r7, #20]
 8008188:	f7ff ff28 	bl	8007fdc <prvUnlockQueue>
	}
 800818c:	bf00      	nop
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08e      	sub	sp, #56	; 0x38
 8008198:	af04      	add	r7, sp, #16
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <xTaskCreateStatic+0x28>
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	e7fe      	b.n	80081ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <xTaskCreateStatic+0x42>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	61fb      	str	r3, [r7, #28]
 80081d4:	e7fe      	b.n	80081d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081d6:	235c      	movs	r3, #92	; 0x5c
 80081d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b5c      	cmp	r3, #92	; 0x5c
 80081de:	d009      	beq.n	80081f4 <xTaskCreateStatic+0x60>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61bb      	str	r3, [r7, #24]
 80081f2:	e7fe      	b.n	80081f2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01e      	beq.n	8008238 <xTaskCreateStatic+0xa4>
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01b      	beq.n	8008238 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	2202      	movs	r2, #2
 800820e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008212:	2300      	movs	r3, #0
 8008214:	9303      	str	r3, [sp, #12]
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	9302      	str	r3, [sp, #8]
 800821a:	f107 0314 	add.w	r3, r7, #20
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f850 	bl	80082d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008232:	f000 f8d3 	bl	80083dc <prvAddNewTaskToReadyList>
 8008236:	e001      	b.n	800823c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800823c:	697b      	ldr	r3, [r7, #20]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3728      	adds	r7, #40	; 0x28
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008246:	b580      	push	{r7, lr}
 8008248:	b08c      	sub	sp, #48	; 0x30
 800824a:	af04      	add	r7, sp, #16
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4618      	mov	r0, r3
 800825c:	f001 fbf2 	bl	8009a44 <pvPortMalloc>
 8008260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00e      	beq.n	8008286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008268:	205c      	movs	r0, #92	; 0x5c
 800826a:	f001 fbeb 	bl	8009a44 <pvPortMalloc>
 800826e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
 800827c:	e005      	b.n	800828a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	f001 fca2 	bl	8009bc8 <vPortFree>
 8008284:	e001      	b.n	800828a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d017      	beq.n	80082c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	2300      	movs	r3, #0
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 f80e 	bl	80082d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082b4:	69f8      	ldr	r0, [r7, #28]
 80082b6:	f000 f891 	bl	80083dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ba:	2301      	movs	r3, #1
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	e002      	b.n	80082c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082c6:	69bb      	ldr	r3, [r7, #24]
	}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	461a      	mov	r2, r3
 80082e8:	21a5      	movs	r1, #165	; 0xa5
 80082ea:	f001 fdb8 	bl	8009e5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082f8:	3b01      	subs	r3, #1
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <prvInitialiseNewTask+0x56>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e7fe      	b.n	8008324 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e012      	b.n	8008352 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	7819      	ldrb	r1, [r3, #0]
 8008334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	3334      	adds	r3, #52	; 0x34
 800833c:	460a      	mov	r2, r1
 800833e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d006      	beq.n	800835a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	3301      	adds	r3, #1
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	2b0f      	cmp	r3, #15
 8008356:	d9e9      	bls.n	800832c <prvInitialiseNewTask+0x5c>
 8008358:	e000      	b.n	800835c <prvInitialiseNewTask+0x8c>
		{
			break;
 800835a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b37      	cmp	r3, #55	; 0x37
 8008368:	d901      	bls.n	800836e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800836a:	2337      	movs	r3, #55	; 0x37
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	2200      	movs	r2, #0
 800837e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff f9a0 	bl	80076ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	3318      	adds	r3, #24
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff f99b 	bl	80076ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008398:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2200      	movs	r2, #0
 80083ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	69b8      	ldr	r0, [r7, #24]
 80083be:	f001 f963 	bl	8009688 <pxPortInitialiseStack>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083d4:	bf00      	nop
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083e4:	f001 fa38 	bl	8009858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083e8:	4b2d      	ldr	r3, [pc, #180]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	4a2c      	ldr	r2, [pc, #176]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 80083f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083f2:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083fa:	4a2a      	ldr	r2, [pc, #168]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <prvAddNewTaskToReadyList+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d110      	bne.n	800842a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008408:	f000 fc98 	bl	8008d3c <prvInitialiseTaskLists>
 800840c:	e00d      	b.n	800842a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800840e:	4b26      	ldr	r3, [pc, #152]	; (80084a8 <prvAddNewTaskToReadyList+0xcc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	429a      	cmp	r2, r3
 8008422:	d802      	bhi.n	800842a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008424:	4a1f      	ldr	r2, [pc, #124]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800842a:	4b20      	ldr	r3, [pc, #128]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 8008432:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008434:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <prvAddNewTaskToReadyList+0xd0>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008440:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <prvAddNewTaskToReadyList+0xd4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d903      	bls.n	8008450 <prvAddNewTaskToReadyList+0x74>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <prvAddNewTaskToReadyList+0xd4>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <prvAddNewTaskToReadyList+0xd8>)
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7ff f93b 	bl	80076e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800846c:	f001 fa22 	bl	80098b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <prvAddNewTaskToReadyList+0xcc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvAddNewTaskToReadyList+0xc8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	429a      	cmp	r2, r3
 8008484:	d207      	bcs.n	8008496 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvAddNewTaskToReadyList+0xdc>)
 8008488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000dd8 	.word	0x20000dd8
 80084a4:	20000904 	.word	0x20000904
 80084a8:	20000de4 	.word	0x20000de4
 80084ac:	20000df4 	.word	0x20000df4
 80084b0:	20000de0 	.word	0x20000de0
 80084b4:	20000908 	.word	0x20000908
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <vTaskDelayUntil+0x28>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e7fe      	b.n	80084e2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <vTaskDelayUntil+0x42>
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	e7fe      	b.n	80084fc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <vTaskDelayUntil+0xe8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <vTaskDelayUntil+0x5e>
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e7fe      	b.n	8008518 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800851a:	f000 f8e1 	bl	80086e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800851e:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <vTaskDelayUntil+0xec>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4413      	add	r3, r2
 800852c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6a3a      	ldr	r2, [r7, #32]
 8008534:	429a      	cmp	r2, r3
 8008536:	d20b      	bcs.n	8008550 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	429a      	cmp	r2, r3
 8008540:	d211      	bcs.n	8008566 <vTaskDelayUntil+0xaa>
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	429a      	cmp	r2, r3
 8008548:	d90d      	bls.n	8008566 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	e00a      	b.n	8008566 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	429a      	cmp	r2, r3
 8008558:	d303      	bcc.n	8008562 <vTaskDelayUntil+0xa6>
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	429a      	cmp	r2, r3
 8008560:	d901      	bls.n	8008566 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fd26 	bl	8008fcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008580:	f000 f8bc 	bl	80086fc <xTaskResumeAll>
 8008584:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d107      	bne.n	800859c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <vTaskDelayUntil+0xf0>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800859c:	bf00      	nop
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20000e00 	.word	0x20000e00
 80085a8:	20000ddc 	.word	0x20000ddc
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085c2:	4b13      	ldr	r3, [pc, #76]	; (8008610 <vTaskDelay+0x60>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <vTaskDelay+0x2e>
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	e7fe      	b.n	80085dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80085de:	f000 f87f 	bl	80086e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fcf1 	bl	8008fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085ea:	f000 f887 	bl	80086fc <xTaskResumeAll>
 80085ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d107      	bne.n	8008606 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <vTaskDelay+0x64>)
 80085f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000e00 	.word	0x20000e00
 8008614:	e000ed04 	.word	0xe000ed04

08008618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	; 0x28
 800861c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008626:	463a      	mov	r2, r7
 8008628:	1d39      	adds	r1, r7, #4
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fffa 	bl	8007628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	9202      	str	r2, [sp, #8]
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	2300      	movs	r3, #0
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	460a      	mov	r2, r1
 8008646:	4920      	ldr	r1, [pc, #128]	; (80086c8 <vTaskStartScheduler+0xb0>)
 8008648:	4820      	ldr	r0, [pc, #128]	; (80086cc <vTaskStartScheduler+0xb4>)
 800864a:	f7ff fda3 	bl	8008194 <xTaskCreateStatic>
 800864e:	4602      	mov	r2, r0
 8008650:	4b1f      	ldr	r3, [pc, #124]	; (80086d0 <vTaskStartScheduler+0xb8>)
 8008652:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008654:	4b1e      	ldr	r3, [pc, #120]	; (80086d0 <vTaskStartScheduler+0xb8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e001      	b.n	8008666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d102      	bne.n	8008672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800866c:	f000 fd02 	bl	8009074 <xTimerCreateTimerTask>
 8008670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d115      	bne.n	80086a4 <vTaskStartScheduler+0x8c>
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800868a:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <vTaskStartScheduler+0xbc>)
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <vTaskStartScheduler+0xc0>)
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008698:	4b10      	ldr	r3, [pc, #64]	; (80086dc <vTaskStartScheduler+0xc4>)
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800869e:	f001 f86b 	bl	8009778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086a2:	e00d      	b.n	80086c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d109      	bne.n	80086c0 <vTaskStartScheduler+0xa8>
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e7fe      	b.n	80086be <vTaskStartScheduler+0xa6>
}
 80086c0:	bf00      	nop
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	0800d918 	.word	0x0800d918
 80086cc:	08008d0d 	.word	0x08008d0d
 80086d0:	20000dfc 	.word	0x20000dfc
 80086d4:	20000df8 	.word	0x20000df8
 80086d8:	20000de4 	.word	0x20000de4
 80086dc:	20000ddc 	.word	0x20000ddc

080086e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80086e4:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <vTaskSuspendAll+0x18>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a03      	ldr	r2, [pc, #12]	; (80086f8 <vTaskSuspendAll+0x18>)
 80086ec:	6013      	str	r3, [r2, #0]
}
 80086ee:	bf00      	nop
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000e00 	.word	0x20000e00

080086fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800870a:	4b41      	ldr	r3, [pc, #260]	; (8008810 <xTaskResumeAll+0x114>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <xTaskResumeAll+0x2a>
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	e7fe      	b.n	8008724 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008726:	f001 f897 	bl	8009858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800872a:	4b39      	ldr	r3, [pc, #228]	; (8008810 <xTaskResumeAll+0x114>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3b01      	subs	r3, #1
 8008730:	4a37      	ldr	r2, [pc, #220]	; (8008810 <xTaskResumeAll+0x114>)
 8008732:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <xTaskResumeAll+0x114>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d162      	bne.n	8008802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800873c:	4b35      	ldr	r3, [pc, #212]	; (8008814 <xTaskResumeAll+0x118>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d05e      	beq.n	8008802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008744:	e02f      	b.n	80087a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008746:	4b34      	ldr	r3, [pc, #208]	; (8008818 <xTaskResumeAll+0x11c>)
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3318      	adds	r3, #24
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff f820 	bl	8007798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3304      	adds	r3, #4
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff f81b 	bl	8007798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008766:	4b2d      	ldr	r3, [pc, #180]	; (800881c <xTaskResumeAll+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d903      	bls.n	8008776 <xTaskResumeAll+0x7a>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4a2a      	ldr	r2, [pc, #168]	; (800881c <xTaskResumeAll+0x120>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4a27      	ldr	r2, [pc, #156]	; (8008820 <xTaskResumeAll+0x124>)
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3304      	adds	r3, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fe ffa8 	bl	80076e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008796:	4b23      	ldr	r3, [pc, #140]	; (8008824 <xTaskResumeAll+0x128>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80087a0:	4b21      	ldr	r3, [pc, #132]	; (8008828 <xTaskResumeAll+0x12c>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a6:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <xTaskResumeAll+0x11c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1cb      	bne.n	8008746 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087b4:	f000 fb5c 	bl	8008e70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <xTaskResumeAll+0x130>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d010      	beq.n	80087e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087c4:	f000 f856 	bl	8008874 <xTaskIncrementTick>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80087ce:	4b16      	ldr	r3, [pc, #88]	; (8008828 <xTaskResumeAll+0x12c>)
 80087d0:	2201      	movs	r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1f1      	bne.n	80087c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80087e0:	4b12      	ldr	r3, [pc, #72]	; (800882c <xTaskResumeAll+0x130>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087e6:	4b10      	ldr	r3, [pc, #64]	; (8008828 <xTaskResumeAll+0x12c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087ee:	2301      	movs	r3, #1
 80087f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTaskResumeAll+0x134>)
 80087f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008802:	f001 f857 	bl	80098b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008806:	68bb      	ldr	r3, [r7, #8]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000e00 	.word	0x20000e00
 8008814:	20000dd8 	.word	0x20000dd8
 8008818:	20000d98 	.word	0x20000d98
 800881c:	20000de0 	.word	0x20000de0
 8008820:	20000908 	.word	0x20000908
 8008824:	20000904 	.word	0x20000904
 8008828:	20000dec 	.word	0x20000dec
 800882c:	20000de8 	.word	0x20000de8
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800883a:	4b04      	ldr	r3, [pc, #16]	; (800884c <xTaskGetTickCount+0x18>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008840:	687b      	ldr	r3, [r7, #4]
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	20000ddc 	.word	0x20000ddc

08008850 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008856:	f001 f8b9 	bl	80099cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <xTaskGetTickCountFromISR+0x20>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008864:	683b      	ldr	r3, [r7, #0]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000ddc 	.word	0x20000ddc

08008874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887e:	4b51      	ldr	r3, [pc, #324]	; (80089c4 <xTaskIncrementTick+0x150>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 808d 	bne.w	80089a2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008888:	4b4f      	ldr	r3, [pc, #316]	; (80089c8 <xTaskIncrementTick+0x154>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3301      	adds	r3, #1
 800888e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008890:	4a4d      	ldr	r2, [pc, #308]	; (80089c8 <xTaskIncrementTick+0x154>)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d11f      	bne.n	80088dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <xTaskIncrementTick+0x158>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <xTaskIncrementTick+0x46>
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	e7fe      	b.n	80088b8 <xTaskIncrementTick+0x44>
 80088ba:	4b44      	ldr	r3, [pc, #272]	; (80089cc <xTaskIncrementTick+0x158>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	4b43      	ldr	r3, [pc, #268]	; (80089d0 <xTaskIncrementTick+0x15c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a41      	ldr	r2, [pc, #260]	; (80089cc <xTaskIncrementTick+0x158>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4a41      	ldr	r2, [pc, #260]	; (80089d0 <xTaskIncrementTick+0x15c>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <xTaskIncrementTick+0x160>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	4a3f      	ldr	r2, [pc, #252]	; (80089d4 <xTaskIncrementTick+0x160>)
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	f000 faca 	bl	8008e70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088dc:	4b3e      	ldr	r3, [pc, #248]	; (80089d8 <xTaskIncrementTick+0x164>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d34e      	bcc.n	8008984 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xTaskIncrementTick+0x158>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <xTaskIncrementTick+0x80>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <xTaskIncrementTick+0x82>
 80088f4:	2300      	movs	r3, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fa:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <xTaskIncrementTick+0x164>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	601a      	str	r2, [r3, #0]
					break;
 8008902:	e03f      	b.n	8008984 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <xTaskIncrementTick+0x158>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d203      	bcs.n	8008924 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800891c:	4a2e      	ldr	r2, [pc, #184]	; (80089d8 <xTaskIncrementTick+0x164>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6013      	str	r3, [r2, #0]
						break;
 8008922:	e02f      	b.n	8008984 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe ff35 	bl	8007798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3318      	adds	r3, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe ff2c 	bl	8007798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4b25      	ldr	r3, [pc, #148]	; (80089dc <xTaskIncrementTick+0x168>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <xTaskIncrementTick+0xe0>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <xTaskIncrementTick+0x168>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <xTaskIncrementTick+0x16c>)
 8008962:	441a      	add	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe feb9 	bl	80076e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <xTaskIncrementTick+0x170>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b3      	bcc.n	80088e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008982:	e7b0      	b.n	80088e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008984:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <xTaskIncrementTick+0x170>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4915      	ldr	r1, [pc, #84]	; (80089e0 <xTaskIncrementTick+0x16c>)
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d907      	bls.n	80089ac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e004      	b.n	80089ac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <xTaskIncrementTick+0x174>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <xTaskIncrementTick+0x174>)
 80089aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <xTaskIncrementTick+0x178>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089b8:	697b      	ldr	r3, [r7, #20]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000e00 	.word	0x20000e00
 80089c8:	20000ddc 	.word	0x20000ddc
 80089cc:	20000d90 	.word	0x20000d90
 80089d0:	20000d94 	.word	0x20000d94
 80089d4:	20000df0 	.word	0x20000df0
 80089d8:	20000df8 	.word	0x20000df8
 80089dc:	20000de0 	.word	0x20000de0
 80089e0:	20000908 	.word	0x20000908
 80089e4:	20000904 	.word	0x20000904
 80089e8:	20000de8 	.word	0x20000de8
 80089ec:	20000dec 	.word	0x20000dec

080089f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089f6:	4b27      	ldr	r3, [pc, #156]	; (8008a94 <vTaskSwitchContext+0xa4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089fe:	4b26      	ldr	r3, [pc, #152]	; (8008a98 <vTaskSwitchContext+0xa8>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a04:	e040      	b.n	8008a88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008a06:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <vTaskSwitchContext+0xa8>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a0c:	4b23      	ldr	r3, [pc, #140]	; (8008a9c <vTaskSwitchContext+0xac>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e00f      	b.n	8008a34 <vTaskSwitchContext+0x44>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <vTaskSwitchContext+0x3e>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	e7fe      	b.n	8008a2c <vTaskSwitchContext+0x3c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	491a      	ldr	r1, [pc, #104]	; (8008aa0 <vTaskSwitchContext+0xb0>)
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0e5      	beq.n	8008a14 <vTaskSwitchContext+0x24>
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <vTaskSwitchContext+0xb0>)
 8008a54:	4413      	add	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d104      	bne.n	8008a78 <vTaskSwitchContext+0x88>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <vTaskSwitchContext+0xb4>)
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	4a06      	ldr	r2, [pc, #24]	; (8008a9c <vTaskSwitchContext+0xac>)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6013      	str	r3, [r2, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000e00 	.word	0x20000e00
 8008a98:	20000dec 	.word	0x20000dec
 8008a9c:	20000de0 	.word	0x20000de0
 8008aa0:	20000908 	.word	0x20000908
 8008aa4:	20000904 	.word	0x20000904

08008aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d109      	bne.n	8008acc <vTaskPlaceOnEventList+0x24>
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e7fe      	b.n	8008aca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <vTaskPlaceOnEventList+0x44>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3318      	adds	r3, #24
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7fe fe27 	bl	8007728 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ada:	2101      	movs	r1, #1
 8008adc:	6838      	ldr	r0, [r7, #0]
 8008ade:	f000 fa75 	bl	8008fcc <prvAddCurrentTaskToDelayedList>
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000904 	.word	0x20000904

08008af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <vTaskPlaceOnEventListRestricted+0x26>
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e7fe      	b.n	8008b14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <vTaskPlaceOnEventListRestricted+0x50>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3318      	adds	r3, #24
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7fe fddf 	bl	80076e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	f000 fa4a 	bl	8008fcc <prvAddCurrentTaskToDelayedList>
	}
 8008b38:	bf00      	nop
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000904 	.word	0x20000904

08008b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <xTaskRemoveFromEventList+0x2a>
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e7fe      	b.n	8008b6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	3318      	adds	r3, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fe10 	bl	8007798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b78:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <xTaskRemoveFromEventList+0xac>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d11d      	bne.n	8008bbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fe07 	bl	8007798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8e:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <xTaskRemoveFromEventList+0xb0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d903      	bls.n	8008b9e <xTaskRemoveFromEventList+0x5a>
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	4a16      	ldr	r2, [pc, #88]	; (8008bf4 <xTaskRemoveFromEventList+0xb0>)
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a13      	ldr	r2, [pc, #76]	; (8008bf8 <xTaskRemoveFromEventList+0xb4>)
 8008bac:	441a      	add	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f7fe fd94 	bl	80076e2 <vListInsertEnd>
 8008bba:	e005      	b.n	8008bc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	480e      	ldr	r0, [pc, #56]	; (8008bfc <xTaskRemoveFromEventList+0xb8>)
 8008bc4:	f7fe fd8d 	bl	80076e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <xTaskRemoveFromEventList+0xbc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d905      	bls.n	8008be2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <xTaskRemoveFromEventList+0xc0>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e001      	b.n	8008be6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000e00 	.word	0x20000e00
 8008bf4:	20000de0 	.word	0x20000de0
 8008bf8:	20000908 	.word	0x20000908
 8008bfc:	20000d98 	.word	0x20000d98
 8008c00:	20000904 	.word	0x20000904
 8008c04:	20000dec 	.word	0x20000dec

08008c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c10:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <vTaskInternalSetTimeOutState+0x24>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <vTaskInternalSetTimeOutState+0x28>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000df0 	.word	0x20000df0
 8008c30:	20000ddc 	.word	0x20000ddc

08008c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <xTaskCheckForTimeOut+0x24>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e7fe      	b.n	8008c56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <xTaskCheckForTimeOut+0x3e>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e7fe      	b.n	8008c70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008c72:	f000 fdf1 	bl	8009858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c76:	4b1d      	ldr	r3, [pc, #116]	; (8008cec <xTaskCheckForTimeOut+0xb8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	d102      	bne.n	8008c96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e023      	b.n	8008cde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <xTaskCheckForTimeOut+0xbc>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d007      	beq.n	8008cb2 <xTaskCheckForTimeOut+0x7e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d302      	bcc.n	8008cb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e015      	b.n	8008cde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d20b      	bcs.n	8008cd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	1ad2      	subs	r2, r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff ff9d 	bl	8008c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61fb      	str	r3, [r7, #28]
 8008cd2:	e004      	b.n	8008cde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cde:	f000 fde9 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000ddc 	.word	0x20000ddc
 8008cf0:	20000df0 	.word	0x20000df0

08008cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <vTaskMissedYield+0x14>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000dec 	.word	0x20000dec

08008d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d14:	f000 f852 	bl	8008dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d18:	4b06      	ldr	r3, [pc, #24]	; (8008d34 <prvIdleTask+0x28>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d9f9      	bls.n	8008d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <prvIdleTask+0x2c>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d30:	e7f0      	b.n	8008d14 <prvIdleTask+0x8>
 8008d32:	bf00      	nop
 8008d34:	20000908 	.word	0x20000908
 8008d38:	e000ed04 	.word	0xe000ed04

08008d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d42:	2300      	movs	r3, #0
 8008d44:	607b      	str	r3, [r7, #4]
 8008d46:	e00c      	b.n	8008d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4a12      	ldr	r2, [pc, #72]	; (8008d9c <prvInitialiseTaskLists+0x60>)
 8008d54:	4413      	add	r3, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fc98 	bl	800768c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b37      	cmp	r3, #55	; 0x37
 8008d66:	d9ef      	bls.n	8008d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d68:	480d      	ldr	r0, [pc, #52]	; (8008da0 <prvInitialiseTaskLists+0x64>)
 8008d6a:	f7fe fc8f 	bl	800768c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d6e:	480d      	ldr	r0, [pc, #52]	; (8008da4 <prvInitialiseTaskLists+0x68>)
 8008d70:	f7fe fc8c 	bl	800768c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d74:	480c      	ldr	r0, [pc, #48]	; (8008da8 <prvInitialiseTaskLists+0x6c>)
 8008d76:	f7fe fc89 	bl	800768c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d7a:	480c      	ldr	r0, [pc, #48]	; (8008dac <prvInitialiseTaskLists+0x70>)
 8008d7c:	f7fe fc86 	bl	800768c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d80:	480b      	ldr	r0, [pc, #44]	; (8008db0 <prvInitialiseTaskLists+0x74>)
 8008d82:	f7fe fc83 	bl	800768c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <prvInitialiseTaskLists+0x78>)
 8008d88:	4a05      	ldr	r2, [pc, #20]	; (8008da0 <prvInitialiseTaskLists+0x64>)
 8008d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <prvInitialiseTaskLists+0x7c>)
 8008d8e:	4a05      	ldr	r2, [pc, #20]	; (8008da4 <prvInitialiseTaskLists+0x68>)
 8008d90:	601a      	str	r2, [r3, #0]
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000908 	.word	0x20000908
 8008da0:	20000d68 	.word	0x20000d68
 8008da4:	20000d7c 	.word	0x20000d7c
 8008da8:	20000d98 	.word	0x20000d98
 8008dac:	20000dac 	.word	0x20000dac
 8008db0:	20000dc4 	.word	0x20000dc4
 8008db4:	20000d90 	.word	0x20000d90
 8008db8:	20000d94 	.word	0x20000d94

08008dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dc2:	e019      	b.n	8008df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dc4:	f000 fd48 	bl	8009858 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008dc8:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <prvCheckTasksWaitingTermination+0x4c>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fcdf 	bl	8007798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <prvCheckTasksWaitingTermination+0x50>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <prvCheckTasksWaitingTermination+0x50>)
 8008de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvCheckTasksWaitingTermination+0x54>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <prvCheckTasksWaitingTermination+0x54>)
 8008dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dee:	f000 fd61 	bl	80098b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f80e 	bl	8008e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <prvCheckTasksWaitingTermination+0x54>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e1      	bne.n	8008dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000dac 	.word	0x20000dac
 8008e0c:	20000dd8 	.word	0x20000dd8
 8008e10:	20000dc0 	.word	0x20000dc0

08008e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fecc 	bl	8009bc8 <vPortFree>
				vPortFree( pxTCB );
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fec9 	bl	8009bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e36:	e017      	b.n	8008e68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d103      	bne.n	8008e4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fec0 	bl	8009bc8 <vPortFree>
	}
 8008e48:	e00e      	b.n	8008e68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d009      	beq.n	8008e68 <prvDeleteTCB+0x54>
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	e7fe      	b.n	8008e66 <prvDeleteTCB+0x52>
	}
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e76:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <prvResetNextTaskUnblockTime+0x40>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <prvResetNextTaskUnblockTime+0x14>
 8008e80:	2301      	movs	r3, #1
 8008e82:	e000      	b.n	8008e86 <prvResetNextTaskUnblockTime+0x16>
 8008e84:	2300      	movs	r3, #0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d004      	beq.n	8008e94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e8a:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <prvResetNextTaskUnblockTime+0x44>)
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e92:	e008      	b.n	8008ea6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <prvResetNextTaskUnblockTime+0x40>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <prvResetNextTaskUnblockTime+0x44>)
 8008ea4:	6013      	str	r3, [r2, #0]
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr
 8008eb0:	20000d90 	.word	0x20000d90
 8008eb4:	20000df8 	.word	0x20000df8

08008eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <xTaskGetSchedulerState+0x34>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	e008      	b.n	8008ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <xTaskGetSchedulerState+0x38>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	607b      	str	r3, [r7, #4]
 8008ed8:	e001      	b.n	8008ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eda:	2300      	movs	r3, #0
 8008edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ede:	687b      	ldr	r3, [r7, #4]
	}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000de4 	.word	0x20000de4
 8008ef0:	20000e00 	.word	0x20000e00

08008ef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d054      	beq.n	8008fb4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <xTaskPriorityDisinherit+0xcc>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d009      	beq.n	8008f28 <xTaskPriorityDisinherit+0x34>
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e7fe      	b.n	8008f26 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <xTaskPriorityDisinherit+0x50>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	e7fe      	b.n	8008f42 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f48:	1e5a      	subs	r2, r3, #1
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d02c      	beq.n	8008fb4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d128      	bne.n	8008fb4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fc16 	bl	8007798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <xTaskPriorityDisinherit+0xd0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d903      	bls.n	8008f94 <xTaskPriorityDisinherit+0xa0>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a0c      	ldr	r2, [pc, #48]	; (8008fc4 <xTaskPriorityDisinherit+0xd0>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4a09      	ldr	r2, [pc, #36]	; (8008fc8 <xTaskPriorityDisinherit+0xd4>)
 8008fa2:	441a      	add	r2, r3
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7fe fb99 	bl	80076e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fb4:	697b      	ldr	r3, [r7, #20]
	}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000904 	.word	0x20000904
 8008fc4:	20000de0 	.word	0x20000de0
 8008fc8:	20000908 	.word	0x20000908

08008fcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fd6:	4b21      	ldr	r3, [pc, #132]	; (800905c <prvAddCurrentTaskToDelayedList+0x90>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fdc:	4b20      	ldr	r3, [pc, #128]	; (8009060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fbd8 	bl	8007798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d10a      	bne.n	8009006 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d007      	beq.n	8009006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff6:	4b1a      	ldr	r3, [pc, #104]	; (8009060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4819      	ldr	r0, [pc, #100]	; (8009064 <prvAddCurrentTaskToDelayedList+0x98>)
 8009000:	f7fe fb6f 	bl	80076e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009004:	e026      	b.n	8009054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800900e:	4b14      	ldr	r3, [pc, #80]	; (8009060 <prvAddCurrentTaskToDelayedList+0x94>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	429a      	cmp	r2, r3
 800901c:	d209      	bcs.n	8009032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <prvAddCurrentTaskToDelayedList+0x94>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3304      	adds	r3, #4
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f7fe fb7c 	bl	8007728 <vListInsert>
}
 8009030:	e010      	b.n	8009054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009032:	4b0e      	ldr	r3, [pc, #56]	; (800906c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <prvAddCurrentTaskToDelayedList+0x94>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fb72 	bl	8007728 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	d202      	bcs.n	8009054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800904e:	4a08      	ldr	r2, [pc, #32]	; (8009070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000ddc 	.word	0x20000ddc
 8009060:	20000904 	.word	0x20000904
 8009064:	20000dc4 	.word	0x20000dc4
 8009068:	20000d94 	.word	0x20000d94
 800906c:	20000d90 	.word	0x20000d90
 8009070:	20000df8 	.word	0x20000df8

08009074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	; 0x28
 8009078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800907a:	2300      	movs	r3, #0
 800907c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800907e:	f000 fac3 	bl	8009608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009082:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <xTimerCreateTimerTask+0x80>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d021      	beq.n	80090ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009092:	1d3a      	adds	r2, r7, #4
 8009094:	f107 0108 	add.w	r1, r7, #8
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fadb 	bl	8007658 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	9202      	str	r2, [sp, #8]
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	2302      	movs	r3, #2
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	460a      	mov	r2, r1
 80090b4:	4910      	ldr	r1, [pc, #64]	; (80090f8 <xTimerCreateTimerTask+0x84>)
 80090b6:	4811      	ldr	r0, [pc, #68]	; (80090fc <xTimerCreateTimerTask+0x88>)
 80090b8:	f7ff f86c 	bl	8008194 <xTaskCreateStatic>
 80090bc:	4602      	mov	r2, r0
 80090be:	4b10      	ldr	r3, [pc, #64]	; (8009100 <xTimerCreateTimerTask+0x8c>)
 80090c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <xTimerCreateTimerTask+0x8c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090ca:	2301      	movs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <xTimerCreateTimerTask+0x74>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	e7fe      	b.n	80090e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80090e8:	697b      	ldr	r3, [r7, #20]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20000e34 	.word	0x20000e34
 80090f8:	0800d920 	.word	0x0800d920
 80090fc:	0800921d 	.word	0x0800921d
 8009100:	20000e38 	.word	0x20000e38

08009104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009112:	2300      	movs	r3, #0
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <xTimerGenericCommand+0x2c>
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	623b      	str	r3, [r7, #32]
 800912e:	e7fe      	b.n	800912e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <xTimerGenericCommand+0x94>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02a      	beq.n	800918e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b05      	cmp	r3, #5
 8009148:	dc18      	bgt.n	800917c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800914a:	f7ff feb5 	bl	8008eb8 <xTaskGetSchedulerState>
 800914e:	4603      	mov	r3, r0
 8009150:	2b02      	cmp	r3, #2
 8009152:	d109      	bne.n	8009168 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009154:	4b10      	ldr	r3, [pc, #64]	; (8009198 <xTimerGenericCommand+0x94>)
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	f107 0110 	add.w	r1, r7, #16
 800915c:	2300      	movs	r3, #0
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	f7fe fc42 	bl	80079e8 <xQueueGenericSend>
 8009164:	6278      	str	r0, [r7, #36]	; 0x24
 8009166:	e012      	b.n	800918e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <xTimerGenericCommand+0x94>)
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	f107 0110 	add.w	r1, r7, #16
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	f7fe fc38 	bl	80079e8 <xQueueGenericSend>
 8009178:	6278      	str	r0, [r7, #36]	; 0x24
 800917a:	e008      	b.n	800918e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <xTimerGenericCommand+0x94>)
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	f107 0110 	add.w	r1, r7, #16
 8009184:	2300      	movs	r3, #0
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	f7fe fd28 	bl	8007bdc <xQueueGenericSendFromISR>
 800918c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009190:	4618      	mov	r0, r3
 8009192:	3728      	adds	r7, #40	; 0x28
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000e34 	.word	0x20000e34

0800919c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a6:	4b1c      	ldr	r3, [pc, #112]	; (8009218 <prvProcessExpiredTimer+0x7c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe faef 	bl	8007798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d121      	bne.n	8009206 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	18d1      	adds	r1, r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	6978      	ldr	r0, [r7, #20]
 80091d0:	f000 f8c8 	bl	8009364 <prvInsertTimerInActiveList>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d015      	beq.n	8009206 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091da:	2300      	movs	r3, #0
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	2100      	movs	r1, #0
 80091e4:	6978      	ldr	r0, [r7, #20]
 80091e6:	f7ff ff8d 	bl	8009104 <xTimerGenericCommand>
 80091ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <prvProcessExpiredTimer+0x6a>
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e7fe      	b.n	8009204 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	4798      	blx	r3
}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000e2c 	.word	0x20000e2c

0800921c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f857 	bl	80092dc <prvGetNextExpireTime>
 800922e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f803 	bl	8009240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800923a:	f000 f8d5 	bl	80093e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923e:	e7f1      	b.n	8009224 <prvTimerTask+0x8>

08009240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800924a:	f7ff fa49 	bl	80086e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f866 	bl	8009324 <prvSampleTimeNow>
 8009258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d130      	bne.n	80092c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <prvProcessTimerOrBlockTask+0x3c>
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	429a      	cmp	r2, r3
 800926c:	d806      	bhi.n	800927c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800926e:	f7ff fa45 	bl	80086fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff ff91 	bl	800919c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800927a:	e024      	b.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d008      	beq.n	8009294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009282:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <prvProcessTimerOrBlockTask+0x90>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	bf0c      	ite	eq
 800928c:	2301      	moveq	r3, #1
 800928e:	2300      	movne	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009294:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <prvProcessTimerOrBlockTask+0x94>)
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe ff43 	bl	800812c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092a6:	f7ff fa29 	bl	80086fc <xTaskResumeAll>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <prvProcessTimerOrBlockTask+0x98>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
}
 80092c0:	e001      	b.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092c2:	f7ff fa1b 	bl	80086fc <xTaskResumeAll>
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000e30 	.word	0x20000e30
 80092d4:	20000e34 	.word	0x20000e34
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <prvGetNextExpireTime+0x44>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d105      	bne.n	800930e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009302:	4b07      	ldr	r3, [pc, #28]	; (8009320 <prvGetNextExpireTime+0x44>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	e001      	b.n	8009312 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009312:	68fb      	ldr	r3, [r7, #12]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000e2c 	.word	0x20000e2c

08009324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800932c:	f7ff fa82 	bl	8008834 <xTaskGetTickCount>
 8009330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <prvSampleTimeNow+0x3c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d205      	bcs.n	8009348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800933c:	f000 f904 	bl	8009548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	e002      	b.n	800934e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800934e:	4a04      	ldr	r2, [pc, #16]	; (8009360 <prvSampleTimeNow+0x3c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000e3c 	.word	0x20000e3c

08009364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	429a      	cmp	r2, r3
 8009388:	d812      	bhi.n	80093b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e01b      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <prvInsertTimerInActiveList+0x7c>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f9bd 	bl	8007728 <vListInsert>
 80093ae:	e012      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d206      	bcs.n	80093c6 <prvInsertTimerInActiveList+0x62>
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e007      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <prvInsertTimerInActiveList+0x80>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fe f9a9 	bl	8007728 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093d6:	697b      	ldr	r3, [r7, #20]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000e30 	.word	0x20000e30
 80093e4:	20000e2c 	.word	0x20000e2c

080093e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093ee:	e099      	b.n	8009524 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da17      	bge.n	8009426 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093f6:	1d3b      	adds	r3, r7, #4
 80093f8:	3304      	adds	r3, #4
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d109      	bne.n	8009416 <prvProcessReceivedCommands+0x2e>
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	e7fe      	b.n	8009414 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800941c:	6850      	ldr	r0, [r2, #4]
 800941e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009420:	6892      	ldr	r2, [r2, #8]
 8009422:	4611      	mov	r1, r2
 8009424:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	db7a      	blt.n	8009522 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe f9ab 	bl	8007798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009442:	463b      	mov	r3, r7
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff ff6d 	bl	8009324 <prvSampleTimeNow>
 800944a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b09      	cmp	r3, #9
 8009450:	d868      	bhi.n	8009524 <prvProcessReceivedCommands+0x13c>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <prvProcessReceivedCommands+0x70>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	08009481 	.word	0x08009481
 800945c:	08009481 	.word	0x08009481
 8009460:	08009481 	.word	0x08009481
 8009464:	08009525 	.word	0x08009525
 8009468:	080094db 	.word	0x080094db
 800946c:	08009511 	.word	0x08009511
 8009470:	08009481 	.word	0x08009481
 8009474:	08009481 	.word	0x08009481
 8009478:	08009525 	.word	0x08009525
 800947c:	080094db 	.word	0x080094db
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	18d1      	adds	r1, r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800948e:	f7ff ff69 	bl	8009364 <prvInsertTimerInActiveList>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d045      	beq.n	8009524 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d13d      	bne.n	8009524 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	441a      	add	r2, r3
 80094b0:	2300      	movs	r3, #0
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ba:	f7ff fe23 	bl	8009104 <xTimerGenericCommand>
 80094be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d12e      	bne.n	8009524 <prvProcessReceivedCommands+0x13c>
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	e7fe      	b.n	80094d8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <prvProcessReceivedCommands+0x114>
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e7fe      	b.n	80094fa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	18d1      	adds	r1, r2, r3
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950a:	f7ff ff2b 	bl	8009364 <prvInsertTimerInActiveList>
					break;
 800950e:	e009      	b.n	8009524 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d104      	bne.n	8009524 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800951a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951c:	f000 fb54 	bl	8009bc8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009520:	e000      	b.n	8009524 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009522:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <prvProcessReceivedCommands+0x15c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	1d39      	adds	r1, r7, #4
 800952a:	2200      	movs	r2, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe fbe9 	bl	8007d04 <xQueueReceive>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	f47f af5b 	bne.w	80093f0 <prvProcessReceivedCommands+0x8>
	}
}
 800953a:	bf00      	nop
 800953c:	3730      	adds	r7, #48	; 0x30
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000e34 	.word	0x20000e34

08009548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800954e:	e044      	b.n	80095da <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009550:	4b2b      	ldr	r3, [pc, #172]	; (8009600 <prvSwitchTimerLists+0xb8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800955a:	4b29      	ldr	r3, [pc, #164]	; (8009600 <prvSwitchTimerLists+0xb8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe f915 	bl	8007798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d12d      	bne.n	80095da <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4413      	add	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d90e      	bls.n	80095ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800959c:	4b18      	ldr	r3, [pc, #96]	; (8009600 <prvSwitchTimerLists+0xb8>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4619      	mov	r1, r3
 80095a6:	4610      	mov	r0, r2
 80095a8:	f7fe f8be 	bl	8007728 <vListInsert>
 80095ac:	e015      	b.n	80095da <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095ae:	2300      	movs	r3, #0
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	2100      	movs	r1, #0
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fda3 	bl	8009104 <xTimerGenericCommand>
 80095be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <prvSwitchTimerLists+0x92>
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	e7fe      	b.n	80095d8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <prvSwitchTimerLists+0xb8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1b5      	bne.n	8009550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095e4:	4b06      	ldr	r3, [pc, #24]	; (8009600 <prvSwitchTimerLists+0xb8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <prvSwitchTimerLists+0xbc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a04      	ldr	r2, [pc, #16]	; (8009600 <prvSwitchTimerLists+0xb8>)
 80095f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095f2:	4a04      	ldr	r2, [pc, #16]	; (8009604 <prvSwitchTimerLists+0xbc>)
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6013      	str	r3, [r2, #0]
}
 80095f8:	bf00      	nop
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000e2c 	.word	0x20000e2c
 8009604:	20000e30 	.word	0x20000e30

08009608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800960e:	f000 f923 	bl	8009858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009612:	4b15      	ldr	r3, [pc, #84]	; (8009668 <prvCheckForValidListAndQueue+0x60>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d120      	bne.n	800965c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800961a:	4814      	ldr	r0, [pc, #80]	; (800966c <prvCheckForValidListAndQueue+0x64>)
 800961c:	f7fe f836 	bl	800768c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009620:	4813      	ldr	r0, [pc, #76]	; (8009670 <prvCheckForValidListAndQueue+0x68>)
 8009622:	f7fe f833 	bl	800768c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009626:	4b13      	ldr	r3, [pc, #76]	; (8009674 <prvCheckForValidListAndQueue+0x6c>)
 8009628:	4a10      	ldr	r2, [pc, #64]	; (800966c <prvCheckForValidListAndQueue+0x64>)
 800962a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800962c:	4b12      	ldr	r3, [pc, #72]	; (8009678 <prvCheckForValidListAndQueue+0x70>)
 800962e:	4a10      	ldr	r2, [pc, #64]	; (8009670 <prvCheckForValidListAndQueue+0x68>)
 8009630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009632:	2300      	movs	r3, #0
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4b11      	ldr	r3, [pc, #68]	; (800967c <prvCheckForValidListAndQueue+0x74>)
 8009638:	4a11      	ldr	r2, [pc, #68]	; (8009680 <prvCheckForValidListAndQueue+0x78>)
 800963a:	2110      	movs	r1, #16
 800963c:	200a      	movs	r0, #10
 800963e:	f7fe f93d 	bl	80078bc <xQueueGenericCreateStatic>
 8009642:	4602      	mov	r2, r0
 8009644:	4b08      	ldr	r3, [pc, #32]	; (8009668 <prvCheckForValidListAndQueue+0x60>)
 8009646:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <prvCheckForValidListAndQueue+0x60>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <prvCheckForValidListAndQueue+0x60>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	490b      	ldr	r1, [pc, #44]	; (8009684 <prvCheckForValidListAndQueue+0x7c>)
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fd40 	bl	80080dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800965c:	f000 f92a 	bl	80098b4 <vPortExitCritical>
}
 8009660:	bf00      	nop
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000e34 	.word	0x20000e34
 800966c:	20000e04 	.word	0x20000e04
 8009670:	20000e18 	.word	0x20000e18
 8009674:	20000e2c 	.word	0x20000e2c
 8009678:	20000e30 	.word	0x20000e30
 800967c:	20000ee0 	.word	0x20000ee0
 8009680:	20000e40 	.word	0x20000e40
 8009684:	0800d928 	.word	0x0800d928

08009688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3b04      	subs	r3, #4
 8009698:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3b04      	subs	r3, #4
 80096a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3b04      	subs	r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096b8:	4a08      	ldr	r2, [pc, #32]	; (80096dc <pxPortInitialiseStack+0x54>)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3b14      	subs	r3, #20
 80096c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3b20      	subs	r3, #32
 80096ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096d0:	68fb      	ldr	r3, [r7, #12]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr
 80096dc:	080096e1 	.word	0x080096e1

080096e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ea:	4b10      	ldr	r3, [pc, #64]	; (800972c <prvTaskExitError+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d009      	beq.n	8009708 <prvTaskExitError+0x28>
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	e7fe      	b.n	8009706 <prvTaskExitError+0x26>
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800971a:	bf00      	nop
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0fc      	beq.n	800971c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr
 800972c:	20000010 	.word	0x20000010

08009730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <pxCurrentTCBConst2>)
 8009732:	6819      	ldr	r1, [r3, #0]
 8009734:	6808      	ldr	r0, [r1, #0]
 8009736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800973a:	f380 8809 	msr	PSP, r0
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f380 8811 	msr	BASEPRI, r0
 800974a:	f04e 0e0d 	orr.w	lr, lr, #13
 800974e:	4770      	bx	lr

08009750 <pxCurrentTCBConst2>:
 8009750:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009758:	4806      	ldr	r0, [pc, #24]	; (8009774 <prvPortStartFirstTask+0x1c>)
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	6800      	ldr	r0, [r0, #0]
 800975e:	f380 8808 	msr	MSP, r0
 8009762:	b662      	cpsie	i
 8009764:	b661      	cpsie	f
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	df00      	svc	0
 8009770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009772:	bf00      	nop
 8009774:	e000ed08 	.word	0xe000ed08

08009778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800977e:	4b31      	ldr	r3, [pc, #196]	; (8009844 <xPortStartScheduler+0xcc>)
 8009780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	22ff      	movs	r2, #255	; 0xff
 800978e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4b29      	ldr	r3, [pc, #164]	; (8009848 <xPortStartScheduler+0xd0>)
 80097a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097a6:	4b29      	ldr	r3, [pc, #164]	; (800984c <xPortStartScheduler+0xd4>)
 80097a8:	2207      	movs	r2, #7
 80097aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ac:	e009      	b.n	80097c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097ae:	4b27      	ldr	r3, [pc, #156]	; (800984c <xPortStartScheduler+0xd4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4a25      	ldr	r2, [pc, #148]	; (800984c <xPortStartScheduler+0xd4>)
 80097b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b80      	cmp	r3, #128	; 0x80
 80097cc:	d0ef      	beq.n	80097ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ce:	4b1f      	ldr	r3, [pc, #124]	; (800984c <xPortStartScheduler+0xd4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f1c3 0307 	rsb	r3, r3, #7
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d009      	beq.n	80097ee <xPortStartScheduler+0x76>
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	60bb      	str	r3, [r7, #8]
 80097ec:	e7fe      	b.n	80097ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ee:	4b17      	ldr	r3, [pc, #92]	; (800984c <xPortStartScheduler+0xd4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	4a15      	ldr	r2, [pc, #84]	; (800984c <xPortStartScheduler+0xd4>)
 80097f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097f8:	4b14      	ldr	r3, [pc, #80]	; (800984c <xPortStartScheduler+0xd4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009800:	4a12      	ldr	r2, [pc, #72]	; (800984c <xPortStartScheduler+0xd4>)
 8009802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <xPortStartScheduler+0xd8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <xPortStartScheduler+0xd8>)
 8009812:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009818:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <xPortStartScheduler+0xd8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a0c      	ldr	r2, [pc, #48]	; (8009850 <xPortStartScheduler+0xd8>)
 800981e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009824:	f000 f8b0 	bl	8009988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <xPortStartScheduler+0xdc>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800982e:	f7ff ff93 	bl	8009758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009832:	f7ff f8dd 	bl	80089f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009836:	f7ff ff53 	bl	80096e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000e400 	.word	0xe000e400
 8009848:	20000f30 	.word	0x20000f30
 800984c:	20000f34 	.word	0x20000f34
 8009850:	e000ed20 	.word	0xe000ed20
 8009854:	20000010 	.word	0x20000010

08009858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <vPortEnterCritical+0x54>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3301      	adds	r3, #1
 8009876:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <vPortEnterCritical+0x54>)
 8009878:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <vPortEnterCritical+0x54>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10e      	bne.n	80098a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009882:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortEnterCritical+0x58>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <vPortEnterCritical+0x48>
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	e7fe      	b.n	800989e <vPortEnterCritical+0x46>
	}
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bc80      	pop	{r7}
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	20000010 	.word	0x20000010
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ba:	4b10      	ldr	r3, [pc, #64]	; (80098fc <vPortExitCritical+0x48>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d109      	bne.n	80098d6 <vPortExitCritical+0x22>
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
 80098d4:	e7fe      	b.n	80098d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80098d6:	4b09      	ldr	r3, [pc, #36]	; (80098fc <vPortExitCritical+0x48>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3b01      	subs	r3, #1
 80098dc:	4a07      	ldr	r2, [pc, #28]	; (80098fc <vPortExitCritical+0x48>)
 80098de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <vPortExitCritical+0x48>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <vPortExitCritical+0x3e>
 80098e8:	2300      	movs	r3, #0
 80098ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr
 80098fc:	20000010 	.word	0x20000010

08009900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009900:	f3ef 8009 	mrs	r0, PSP
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <pxCurrentTCBConst>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009910:	6010      	str	r0, [r2, #0]
 8009912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800991a:	f380 8811 	msr	BASEPRI, r0
 800991e:	f7ff f867 	bl	80089f0 <vTaskSwitchContext>
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8811 	msr	BASEPRI, r0
 800992a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	6808      	ldr	r0, [r1, #0]
 8009932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009936:	f380 8809 	msr	PSP, r0
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	4770      	bx	lr

08009940 <pxCurrentTCBConst>:
 8009940:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009960:	f7fe ff88 	bl	8008874 <xTaskIncrementTick>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <SysTick_Handler+0x3c>)
 800996c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	2300      	movs	r3, #0
 8009974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <vPortSetupTimerInterrupt+0x30>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009992:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <vPortSetupTimerInterrupt+0x34>)
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <vPortSetupTimerInterrupt+0x38>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a09      	ldr	r2, [pc, #36]	; (80099c4 <vPortSetupTimerInterrupt+0x3c>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	099b      	lsrs	r3, r3, #6
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <vPortSetupTimerInterrupt+0x40>)
 80099a6:	3b01      	subs	r3, #1
 80099a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <vPortSetupTimerInterrupt+0x30>)
 80099ac:	2207      	movs	r2, #7
 80099ae:	601a      	str	r2, [r3, #0]
}
 80099b0:	bf00      	nop
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	e000e010 	.word	0xe000e010
 80099bc:	e000e018 	.word	0xe000e018
 80099c0:	20000004 	.word	0x20000004
 80099c4:	10624dd3 	.word	0x10624dd3
 80099c8:	e000e014 	.word	0xe000e014

080099cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099d2:	f3ef 8305 	mrs	r3, IPSR
 80099d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b0f      	cmp	r3, #15
 80099dc:	d913      	bls.n	8009a06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099de:	4a15      	ldr	r2, [pc, #84]	; (8009a34 <vPortValidateInterruptPriority+0x68>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4413      	add	r3, r2
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099e8:	4b13      	ldr	r3, [pc, #76]	; (8009a38 <vPortValidateInterruptPriority+0x6c>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	7afa      	ldrb	r2, [r7, #11]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d209      	bcs.n	8009a06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	e7fe      	b.n	8009a04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <vPortValidateInterruptPriority+0x70>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <vPortValidateInterruptPriority+0x74>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d909      	bls.n	8009a2a <vPortValidateInterruptPriority+0x5e>
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	e7fe      	b.n	8009a28 <vPortValidateInterruptPriority+0x5c>
	}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	e000e3f0 	.word	0xe000e3f0
 8009a38:	20000f30 	.word	0x20000f30
 8009a3c:	e000ed0c 	.word	0xe000ed0c
 8009a40:	20000f34 	.word	0x20000f34

08009a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	; 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a50:	f7fe fe46 	bl	80086e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a54:	4b57      	ldr	r3, [pc, #348]	; (8009bb4 <pvPortMalloc+0x170>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a5c:	f000 f90c 	bl	8009c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a60:	4b55      	ldr	r3, [pc, #340]	; (8009bb8 <pvPortMalloc+0x174>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4013      	ands	r3, r2
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f040 808c 	bne.w	8009b86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01c      	beq.n	8009aae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a74:	2208      	movs	r2, #8
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4413      	add	r3, r2
 8009a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d013      	beq.n	8009aae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f023 0307 	bic.w	r3, r3, #7
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d009      	beq.n	8009aae <pvPortMalloc+0x6a>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e7fe      	b.n	8009aac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d068      	beq.n	8009b86 <pvPortMalloc+0x142>
 8009ab4:	4b41      	ldr	r3, [pc, #260]	; (8009bbc <pvPortMalloc+0x178>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d863      	bhi.n	8009b86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009abe:	4b40      	ldr	r3, [pc, #256]	; (8009bc0 <pvPortMalloc+0x17c>)
 8009ac0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ac2:	4b3f      	ldr	r3, [pc, #252]	; (8009bc0 <pvPortMalloc+0x17c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ac8:	e004      	b.n	8009ad4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <pvPortMalloc+0xa2>
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f1      	bne.n	8009aca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ae6:	4b33      	ldr	r3, [pc, #204]	; (8009bb4 <pvPortMalloc+0x170>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d04a      	beq.n	8009b86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2208      	movs	r2, #8
 8009af6:	4413      	add	r3, r2
 8009af8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	2308      	movs	r3, #8
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d91e      	bls.n	8009b50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4413      	add	r3, r2
 8009b18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <pvPortMalloc+0xf4>
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	e7fe      	b.n	8009b36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b4a:	69b8      	ldr	r0, [r7, #24]
 8009b4c:	f000 f8f6 	bl	8009d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <pvPortMalloc+0x178>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	4a18      	ldr	r2, [pc, #96]	; (8009bbc <pvPortMalloc+0x178>)
 8009b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b5e:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <pvPortMalloc+0x178>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <pvPortMalloc+0x180>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d203      	bcs.n	8009b72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b6a:	4b14      	ldr	r3, [pc, #80]	; (8009bbc <pvPortMalloc+0x178>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a15      	ldr	r2, [pc, #84]	; (8009bc4 <pvPortMalloc+0x180>)
 8009b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <pvPortMalloc+0x174>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b86:	f7fe fdb9 	bl	80086fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <pvPortMalloc+0x164>
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	e7fe      	b.n	8009ba6 <pvPortMalloc+0x162>
	return pvReturn;
 8009ba8:	69fb      	ldr	r3, [r7, #28]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20003e20 	.word	0x20003e20
 8009bb8:	20003e2c 	.word	0x20003e2c
 8009bbc:	20003e24 	.word	0x20003e24
 8009bc0:	20003e18 	.word	0x20003e18
 8009bc4:	20003e28 	.word	0x20003e28

08009bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d046      	beq.n	8009c68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bda:	2308      	movs	r3, #8
 8009bdc:	425b      	negs	r3, r3
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4413      	add	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	4b20      	ldr	r3, [pc, #128]	; (8009c70 <vPortFree+0xa8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <vPortFree+0x42>
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	e7fe      	b.n	8009c08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <vPortFree+0x5e>
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	60bb      	str	r3, [r7, #8]
 8009c24:	e7fe      	b.n	8009c24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <vPortFree+0xa8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d019      	beq.n	8009c68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d115      	bne.n	8009c68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <vPortFree+0xa8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	43db      	mvns	r3, r3
 8009c46:	401a      	ands	r2, r3
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c4c:	f7fe fd48 	bl	80086e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <vPortFree+0xac>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4413      	add	r3, r2
 8009c5a:	4a06      	ldr	r2, [pc, #24]	; (8009c74 <vPortFree+0xac>)
 8009c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c5e:	6938      	ldr	r0, [r7, #16]
 8009c60:	f000 f86c 	bl	8009d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c64:	f7fe fd4a 	bl	80086fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c68:	bf00      	nop
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20003e2c 	.word	0x20003e2c
 8009c74:	20003e24 	.word	0x20003e24

08009c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c7e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8009c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c84:	4b27      	ldr	r3, [pc, #156]	; (8009d24 <prvHeapInit+0xac>)
 8009c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00c      	beq.n	8009cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3307      	adds	r3, #7
 8009c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0307 	bic.w	r3, r3, #7
 8009c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	4a1f      	ldr	r2, [pc, #124]	; (8009d24 <prvHeapInit+0xac>)
 8009ca8:	4413      	add	r3, r2
 8009caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cb0:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <prvHeapInit+0xb0>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cb6:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <prvHeapInit+0xb0>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cc4:	2208      	movs	r2, #8
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	1a9b      	subs	r3, r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <prvHeapInit+0xb4>)
 8009cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cda:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <prvHeapInit+0xb4>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ce2:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <prvHeapInit+0xb4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <prvHeapInit+0xb4>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	4a0a      	ldr	r2, [pc, #40]	; (8009d30 <prvHeapInit+0xb8>)
 8009d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <prvHeapInit+0xbc>)
 8009d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <prvHeapInit+0xc0>)
 8009d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d16:	601a      	str	r2, [r3, #0]
}
 8009d18:	bf00      	nop
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bc80      	pop	{r7}
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	20000f38 	.word	0x20000f38
 8009d28:	20003e18 	.word	0x20003e18
 8009d2c:	20003e20 	.word	0x20003e20
 8009d30:	20003e28 	.word	0x20003e28
 8009d34:	20003e24 	.word	0x20003e24
 8009d38:	20003e2c 	.word	0x20003e2c

08009d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d44:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <prvInsertBlockIntoFreeList+0xa8>)
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e002      	b.n	8009d50 <prvInsertBlockIntoFreeList+0x14>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d8f7      	bhi.n	8009d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	4413      	add	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d108      	bne.n	8009d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	441a      	add	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d118      	bne.n	8009dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <prvInsertBlockIntoFreeList+0xac>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d00d      	beq.n	8009dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	441a      	add	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	e008      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <prvInsertBlockIntoFreeList+0xac>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e003      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d002      	beq.n	8009dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr
 8009de4:	20003e18 	.word	0x20003e18
 8009de8:	20003e20 	.word	0x20003e20

08009dec <atoi>:
 8009dec:	220a      	movs	r2, #10
 8009dee:	2100      	movs	r1, #0
 8009df0:	f000 bd28 	b.w	800a844 <strtol>

08009df4 <__errno>:
 8009df4:	4b01      	ldr	r3, [pc, #4]	; (8009dfc <__errno+0x8>)
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000014 	.word	0x20000014

08009e00 <__libc_init_array>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	2500      	movs	r5, #0
 8009e04:	4e0c      	ldr	r6, [pc, #48]	; (8009e38 <__libc_init_array+0x38>)
 8009e06:	4c0d      	ldr	r4, [pc, #52]	; (8009e3c <__libc_init_array+0x3c>)
 8009e08:	1ba4      	subs	r4, r4, r6
 8009e0a:	10a4      	asrs	r4, r4, #2
 8009e0c:	42a5      	cmp	r5, r4
 8009e0e:	d109      	bne.n	8009e24 <__libc_init_array+0x24>
 8009e10:	f003 fc86 	bl	800d720 <_init>
 8009e14:	2500      	movs	r5, #0
 8009e16:	4e0a      	ldr	r6, [pc, #40]	; (8009e40 <__libc_init_array+0x40>)
 8009e18:	4c0a      	ldr	r4, [pc, #40]	; (8009e44 <__libc_init_array+0x44>)
 8009e1a:	1ba4      	subs	r4, r4, r6
 8009e1c:	10a4      	asrs	r4, r4, #2
 8009e1e:	42a5      	cmp	r5, r4
 8009e20:	d105      	bne.n	8009e2e <__libc_init_array+0x2e>
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e28:	4798      	blx	r3
 8009e2a:	3501      	adds	r5, #1
 8009e2c:	e7ee      	b.n	8009e0c <__libc_init_array+0xc>
 8009e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e32:	4798      	blx	r3
 8009e34:	3501      	adds	r5, #1
 8009e36:	e7f2      	b.n	8009e1e <__libc_init_array+0x1e>
 8009e38:	0800df30 	.word	0x0800df30
 8009e3c:	0800df30 	.word	0x0800df30
 8009e40:	0800df30 	.word	0x0800df30
 8009e44:	0800df34 	.word	0x0800df34

08009e48 <memcpy>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	1e43      	subs	r3, r0, #1
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	d100      	bne.n	8009e54 <memcpy+0xc>
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5c:	e7f7      	b.n	8009e4e <memcpy+0x6>

08009e5e <memset>:
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4402      	add	r2, r0
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d100      	bne.n	8009e68 <memset+0xa>
 8009e66:	4770      	bx	lr
 8009e68:	f803 1b01 	strb.w	r1, [r3], #1
 8009e6c:	e7f9      	b.n	8009e62 <memset+0x4>

08009e6e <__cvt>:
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	461e      	mov	r6, r3
 8009e76:	bfbb      	ittet	lt
 8009e78:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	461e      	movlt	r6, r3
 8009e7e:	2300      	movge	r3, #0
 8009e80:	232d      	movlt	r3, #45	; 0x2d
 8009e82:	b088      	sub	sp, #32
 8009e84:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e86:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009e8a:	f027 0720 	bic.w	r7, r7, #32
 8009e8e:	2f46      	cmp	r7, #70	; 0x46
 8009e90:	4614      	mov	r4, r2
 8009e92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009e94:	700b      	strb	r3, [r1, #0]
 8009e96:	d004      	beq.n	8009ea2 <__cvt+0x34>
 8009e98:	2f45      	cmp	r7, #69	; 0x45
 8009e9a:	d100      	bne.n	8009e9e <__cvt+0x30>
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e000      	b.n	8009ea4 <__cvt+0x36>
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	aa07      	add	r2, sp, #28
 8009ea6:	9204      	str	r2, [sp, #16]
 8009ea8:	aa06      	add	r2, sp, #24
 8009eaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009eae:	e9cd 3500 	strd	r3, r5, [sp]
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4633      	mov	r3, r6
 8009eb6:	f000 fd6b 	bl	800a990 <_dtoa_r>
 8009eba:	2f47      	cmp	r7, #71	; 0x47
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	d102      	bne.n	8009ec6 <__cvt+0x58>
 8009ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d526      	bpl.n	8009f14 <__cvt+0xa6>
 8009ec6:	2f46      	cmp	r7, #70	; 0x46
 8009ec8:	eb08 0905 	add.w	r9, r8, r5
 8009ecc:	d111      	bne.n	8009ef2 <__cvt+0x84>
 8009ece:	f898 3000 	ldrb.w	r3, [r8]
 8009ed2:	2b30      	cmp	r3, #48	; 0x30
 8009ed4:	d10a      	bne.n	8009eec <__cvt+0x7e>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4620      	mov	r0, r4
 8009edc:	4631      	mov	r1, r6
 8009ede:	f7f6 fd63 	bl	80009a8 <__aeabi_dcmpeq>
 8009ee2:	b918      	cbnz	r0, 8009eec <__cvt+0x7e>
 8009ee4:	f1c5 0501 	rsb	r5, r5, #1
 8009ee8:	f8ca 5000 	str.w	r5, [sl]
 8009eec:	f8da 3000 	ldr.w	r3, [sl]
 8009ef0:	4499      	add	r9, r3
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4631      	mov	r1, r6
 8009efa:	f7f6 fd55 	bl	80009a8 <__aeabi_dcmpeq>
 8009efe:	b938      	cbnz	r0, 8009f10 <__cvt+0xa2>
 8009f00:	2230      	movs	r2, #48	; 0x30
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	454b      	cmp	r3, r9
 8009f06:	d205      	bcs.n	8009f14 <__cvt+0xa6>
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	9107      	str	r1, [sp, #28]
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e7f8      	b.n	8009f02 <__cvt+0x94>
 8009f10:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f14:	4640      	mov	r0, r8
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f1a:	eba3 0308 	sub.w	r3, r3, r8
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	b008      	add	sp, #32
 8009f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f26 <__exponent>:
 8009f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	bfb4      	ite	lt
 8009f2c:	232d      	movlt	r3, #45	; 0x2d
 8009f2e:	232b      	movge	r3, #43	; 0x2b
 8009f30:	4604      	mov	r4, r0
 8009f32:	bfb8      	it	lt
 8009f34:	4249      	neglt	r1, r1
 8009f36:	2909      	cmp	r1, #9
 8009f38:	f804 2b02 	strb.w	r2, [r4], #2
 8009f3c:	7043      	strb	r3, [r0, #1]
 8009f3e:	dd21      	ble.n	8009f84 <__exponent+0x5e>
 8009f40:	f10d 0307 	add.w	r3, sp, #7
 8009f44:	461f      	mov	r7, r3
 8009f46:	260a      	movs	r6, #10
 8009f48:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f4c:	fb06 1115 	mls	r1, r6, r5, r1
 8009f50:	2d09      	cmp	r5, #9
 8009f52:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009f56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f5a:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f5e:	4629      	mov	r1, r5
 8009f60:	dc09      	bgt.n	8009f76 <__exponent+0x50>
 8009f62:	3130      	adds	r1, #48	; 0x30
 8009f64:	3b02      	subs	r3, #2
 8009f66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	d304      	bcc.n	8009f7a <__exponent+0x54>
 8009f70:	1a10      	subs	r0, r2, r0
 8009f72:	b003      	add	sp, #12
 8009f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f76:	4613      	mov	r3, r2
 8009f78:	e7e6      	b.n	8009f48 <__exponent+0x22>
 8009f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7e:	f804 2b01 	strb.w	r2, [r4], #1
 8009f82:	e7f2      	b.n	8009f6a <__exponent+0x44>
 8009f84:	2330      	movs	r3, #48	; 0x30
 8009f86:	4419      	add	r1, r3
 8009f88:	7083      	strb	r3, [r0, #2]
 8009f8a:	1d02      	adds	r2, r0, #4
 8009f8c:	70c1      	strb	r1, [r0, #3]
 8009f8e:	e7ef      	b.n	8009f70 <__exponent+0x4a>

08009f90 <_printf_float>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	b091      	sub	sp, #68	; 0x44
 8009f96:	460c      	mov	r4, r1
 8009f98:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009f9a:	4693      	mov	fp, r2
 8009f9c:	461e      	mov	r6, r3
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	f001 faae 	bl	800b500 <_localeconv_r>
 8009fa4:	6803      	ldr	r3, [r0, #0]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009faa:	f7f6 f8d1 	bl	8000150 <strlen>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	900a      	str	r0, [sp, #40]	; 0x28
 8009fb6:	3307      	adds	r3, #7
 8009fb8:	f023 0307 	bic.w	r3, r3, #7
 8009fbc:	f103 0208 	add.w	r2, r3, #8
 8009fc0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009fc4:	f8d4 a000 	ldr.w	sl, [r4]
 8009fc8:	603a      	str	r2, [r7, #0]
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fd2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	4ba6      	ldr	r3, [pc, #664]	; (800a27c <_printf_float+0x2ec>)
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe6:	f7f6 fd11 	bl	8000a0c <__aeabi_dcmpun>
 8009fea:	bb68      	cbnz	r0, 800a048 <_printf_float+0xb8>
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	4ba2      	ldr	r3, [pc, #648]	; (800a27c <_printf_float+0x2ec>)
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ff6:	f7f6 fceb 	bl	80009d0 <__aeabi_dcmple>
 8009ffa:	bb28      	cbnz	r0, 800a048 <_printf_float+0xb8>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4638      	mov	r0, r7
 800a002:	4649      	mov	r1, r9
 800a004:	f7f6 fcda 	bl	80009bc <__aeabi_dcmplt>
 800a008:	b110      	cbz	r0, 800a010 <_printf_float+0x80>
 800a00a:	232d      	movs	r3, #45	; 0x2d
 800a00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a010:	4f9b      	ldr	r7, [pc, #620]	; (800a280 <_printf_float+0x2f0>)
 800a012:	4b9c      	ldr	r3, [pc, #624]	; (800a284 <_printf_float+0x2f4>)
 800a014:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a018:	bf98      	it	ls
 800a01a:	461f      	movls	r7, r3
 800a01c:	2303      	movs	r3, #3
 800a01e:	f04f 0900 	mov.w	r9, #0
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	f02a 0304 	bic.w	r3, sl, #4
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	9600      	str	r6, [sp, #0]
 800a02c:	465b      	mov	r3, fp
 800a02e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f9e2 	bl	800a3fc <_printf_common>
 800a038:	3001      	adds	r0, #1
 800a03a:	f040 8090 	bne.w	800a15e <_printf_float+0x1ce>
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295
 800a042:	b011      	add	sp, #68	; 0x44
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	463a      	mov	r2, r7
 800a04a:	464b      	mov	r3, r9
 800a04c:	4638      	mov	r0, r7
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 fcdc 	bl	8000a0c <__aeabi_dcmpun>
 800a054:	b110      	cbz	r0, 800a05c <_printf_float+0xcc>
 800a056:	4f8c      	ldr	r7, [pc, #560]	; (800a288 <_printf_float+0x2f8>)
 800a058:	4b8c      	ldr	r3, [pc, #560]	; (800a28c <_printf_float+0x2fc>)
 800a05a:	e7db      	b.n	800a014 <_printf_float+0x84>
 800a05c:	6863      	ldr	r3, [r4, #4]
 800a05e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800a062:	1c59      	adds	r1, r3, #1
 800a064:	a80d      	add	r0, sp, #52	; 0x34
 800a066:	a90e      	add	r1, sp, #56	; 0x38
 800a068:	d140      	bne.n	800a0ec <_printf_float+0x15c>
 800a06a:	2306      	movs	r3, #6
 800a06c:	6063      	str	r3, [r4, #4]
 800a06e:	f04f 0c00 	mov.w	ip, #0
 800a072:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800a076:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800a07a:	6863      	ldr	r3, [r4, #4]
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	463a      	mov	r2, r7
 800a086:	464b      	mov	r3, r9
 800a088:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a08c:	4628      	mov	r0, r5
 800a08e:	f7ff feee 	bl	8009e6e <__cvt>
 800a092:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800a096:	2b47      	cmp	r3, #71	; 0x47
 800a098:	4607      	mov	r7, r0
 800a09a:	d109      	bne.n	800a0b0 <_printf_float+0x120>
 800a09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09e:	1cd8      	adds	r0, r3, #3
 800a0a0:	db02      	blt.n	800a0a8 <_printf_float+0x118>
 800a0a2:	6862      	ldr	r2, [r4, #4]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	dd47      	ble.n	800a138 <_printf_float+0x1a8>
 800a0a8:	f1a8 0802 	sub.w	r8, r8, #2
 800a0ac:	fa5f f888 	uxtb.w	r8, r8
 800a0b0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a0b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0b6:	d824      	bhi.n	800a102 <_printf_float+0x172>
 800a0b8:	3901      	subs	r1, #1
 800a0ba:	4642      	mov	r2, r8
 800a0bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0c0:	910d      	str	r1, [sp, #52]	; 0x34
 800a0c2:	f7ff ff30 	bl	8009f26 <__exponent>
 800a0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c8:	4681      	mov	r9, r0
 800a0ca:	1813      	adds	r3, r2, r0
 800a0cc:	2a01      	cmp	r2, #1
 800a0ce:	6123      	str	r3, [r4, #16]
 800a0d0:	dc02      	bgt.n	800a0d8 <_printf_float+0x148>
 800a0d2:	6822      	ldr	r2, [r4, #0]
 800a0d4:	07d1      	lsls	r1, r2, #31
 800a0d6:	d501      	bpl.n	800a0dc <_printf_float+0x14c>
 800a0d8:	3301      	adds	r3, #1
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0a2      	beq.n	800a02a <_printf_float+0x9a>
 800a0e4:	232d      	movs	r3, #45	; 0x2d
 800a0e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ea:	e79e      	b.n	800a02a <_printf_float+0x9a>
 800a0ec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800a0f0:	f000 816e 	beq.w	800a3d0 <_printf_float+0x440>
 800a0f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0f8:	d1b9      	bne.n	800a06e <_printf_float+0xde>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1b7      	bne.n	800a06e <_printf_float+0xde>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7b4      	b.n	800a06c <_printf_float+0xdc>
 800a102:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800a106:	d119      	bne.n	800a13c <_printf_float+0x1ac>
 800a108:	2900      	cmp	r1, #0
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	dd0c      	ble.n	800a128 <_printf_float+0x198>
 800a10e:	6121      	str	r1, [r4, #16]
 800a110:	b913      	cbnz	r3, 800a118 <_printf_float+0x188>
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	07d2      	lsls	r2, r2, #31
 800a116:	d502      	bpl.n	800a11e <_printf_float+0x18e>
 800a118:	3301      	adds	r3, #1
 800a11a:	440b      	add	r3, r1
 800a11c:	6123      	str	r3, [r4, #16]
 800a11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a120:	f04f 0900 	mov.w	r9, #0
 800a124:	65a3      	str	r3, [r4, #88]	; 0x58
 800a126:	e7d9      	b.n	800a0dc <_printf_float+0x14c>
 800a128:	b913      	cbnz	r3, 800a130 <_printf_float+0x1a0>
 800a12a:	6822      	ldr	r2, [r4, #0]
 800a12c:	07d0      	lsls	r0, r2, #31
 800a12e:	d501      	bpl.n	800a134 <_printf_float+0x1a4>
 800a130:	3302      	adds	r3, #2
 800a132:	e7f3      	b.n	800a11c <_printf_float+0x18c>
 800a134:	2301      	movs	r3, #1
 800a136:	e7f1      	b.n	800a11c <_printf_float+0x18c>
 800a138:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a13c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a140:	4293      	cmp	r3, r2
 800a142:	db05      	blt.n	800a150 <_printf_float+0x1c0>
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	07d1      	lsls	r1, r2, #31
 800a14a:	d5e8      	bpl.n	800a11e <_printf_float+0x18e>
 800a14c:	3301      	adds	r3, #1
 800a14e:	e7e5      	b.n	800a11c <_printf_float+0x18c>
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfcc      	ite	gt
 800a154:	2301      	movgt	r3, #1
 800a156:	f1c3 0302 	rsble	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	e7de      	b.n	800a11c <_printf_float+0x18c>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	055a      	lsls	r2, r3, #21
 800a162:	d407      	bmi.n	800a174 <_printf_float+0x1e4>
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	463a      	mov	r2, r7
 800a168:	4659      	mov	r1, fp
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b0      	blx	r6
 800a16e:	3001      	adds	r0, #1
 800a170:	d129      	bne.n	800a1c6 <_printf_float+0x236>
 800a172:	e764      	b.n	800a03e <_printf_float+0xae>
 800a174:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a178:	f240 80d7 	bls.w	800a32a <_printf_float+0x39a>
 800a17c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a180:	2200      	movs	r2, #0
 800a182:	2300      	movs	r3, #0
 800a184:	f7f6 fc10 	bl	80009a8 <__aeabi_dcmpeq>
 800a188:	b388      	cbz	r0, 800a1ee <_printf_float+0x25e>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4a40      	ldr	r2, [pc, #256]	; (800a290 <_printf_float+0x300>)
 800a18e:	4659      	mov	r1, fp
 800a190:	4628      	mov	r0, r5
 800a192:	47b0      	blx	r6
 800a194:	3001      	adds	r0, #1
 800a196:	f43f af52 	beq.w	800a03e <_printf_float+0xae>
 800a19a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	db02      	blt.n	800a1a8 <_printf_float+0x218>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	07d8      	lsls	r0, r3, #31
 800a1a6:	d50e      	bpl.n	800a1c6 <_printf_float+0x236>
 800a1a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b0      	blx	r6
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f43f af43 	beq.w	800a03e <_printf_float+0xae>
 800a1b8:	2700      	movs	r7, #0
 800a1ba:	f104 081a 	add.w	r8, r4, #26
 800a1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	42bb      	cmp	r3, r7
 800a1c4:	dc09      	bgt.n	800a1da <_printf_float+0x24a>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	079f      	lsls	r7, r3, #30
 800a1ca:	f100 80fd 	bmi.w	800a3c8 <_printf_float+0x438>
 800a1ce:	68e0      	ldr	r0, [r4, #12]
 800a1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d2:	4298      	cmp	r0, r3
 800a1d4:	bfb8      	it	lt
 800a1d6:	4618      	movlt	r0, r3
 800a1d8:	e733      	b.n	800a042 <_printf_float+0xb2>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4642      	mov	r2, r8
 800a1de:	4659      	mov	r1, fp
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b0      	blx	r6
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f af2a 	beq.w	800a03e <_printf_float+0xae>
 800a1ea:	3701      	adds	r7, #1
 800a1ec:	e7e7      	b.n	800a1be <_printf_float+0x22e>
 800a1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc2b      	bgt.n	800a24c <_printf_float+0x2bc>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4a26      	ldr	r2, [pc, #152]	; (800a290 <_printf_float+0x300>)
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b0      	blx	r6
 800a1fe:	3001      	adds	r0, #1
 800a200:	f43f af1d 	beq.w	800a03e <_printf_float+0xae>
 800a204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a206:	b923      	cbnz	r3, 800a212 <_printf_float+0x282>
 800a208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a20a:	b913      	cbnz	r3, 800a212 <_printf_float+0x282>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d5d9      	bpl.n	800a1c6 <_printf_float+0x236>
 800a212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a216:	4659      	mov	r1, fp
 800a218:	4628      	mov	r0, r5
 800a21a:	47b0      	blx	r6
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f af0e 	beq.w	800a03e <_printf_float+0xae>
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	f104 091a 	add.w	r9, r4, #26
 800a22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a22c:	425b      	negs	r3, r3
 800a22e:	4543      	cmp	r3, r8
 800a230:	dc01      	bgt.n	800a236 <_printf_float+0x2a6>
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	e797      	b.n	800a166 <_printf_float+0x1d6>
 800a236:	2301      	movs	r3, #1
 800a238:	464a      	mov	r2, r9
 800a23a:	4659      	mov	r1, fp
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b0      	blx	r6
 800a240:	3001      	adds	r0, #1
 800a242:	f43f aefc 	beq.w	800a03e <_printf_float+0xae>
 800a246:	f108 0801 	add.w	r8, r8, #1
 800a24a:	e7ee      	b.n	800a22a <_printf_float+0x29a>
 800a24c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a250:	429a      	cmp	r2, r3
 800a252:	bfa8      	it	ge
 800a254:	461a      	movge	r2, r3
 800a256:	2a00      	cmp	r2, #0
 800a258:	4690      	mov	r8, r2
 800a25a:	dd07      	ble.n	800a26c <_printf_float+0x2dc>
 800a25c:	4613      	mov	r3, r2
 800a25e:	4659      	mov	r1, fp
 800a260:	463a      	mov	r2, r7
 800a262:	4628      	mov	r0, r5
 800a264:	47b0      	blx	r6
 800a266:	3001      	adds	r0, #1
 800a268:	f43f aee9 	beq.w	800a03e <_printf_float+0xae>
 800a26c:	f104 031a 	add.w	r3, r4, #26
 800a270:	f04f 0a00 	mov.w	sl, #0
 800a274:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a278:	930b      	str	r3, [sp, #44]	; 0x2c
 800a27a:	e015      	b.n	800a2a8 <_printf_float+0x318>
 800a27c:	7fefffff 	.word	0x7fefffff
 800a280:	0800dab4 	.word	0x0800dab4
 800a284:	0800dab0 	.word	0x0800dab0
 800a288:	0800dabc 	.word	0x0800dabc
 800a28c:	0800dab8 	.word	0x0800dab8
 800a290:	0800dac0 	.word	0x0800dac0
 800a294:	2301      	movs	r3, #1
 800a296:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a298:	4659      	mov	r1, fp
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b0      	blx	r6
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f aecd 	beq.w	800a03e <_printf_float+0xae>
 800a2a4:	f10a 0a01 	add.w	sl, sl, #1
 800a2a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a2ac:	eba9 0308 	sub.w	r3, r9, r8
 800a2b0:	4553      	cmp	r3, sl
 800a2b2:	dcef      	bgt.n	800a294 <_printf_float+0x304>
 800a2b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	444f      	add	r7, r9
 800a2bc:	db14      	blt.n	800a2e8 <_printf_float+0x358>
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	07da      	lsls	r2, r3, #31
 800a2c2:	d411      	bmi.n	800a2e8 <_printf_float+0x358>
 800a2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2c8:	eba3 0209 	sub.w	r2, r3, r9
 800a2cc:	eba3 0901 	sub.w	r9, r3, r1
 800a2d0:	4591      	cmp	r9, r2
 800a2d2:	bfa8      	it	ge
 800a2d4:	4691      	movge	r9, r2
 800a2d6:	f1b9 0f00 	cmp.w	r9, #0
 800a2da:	dc0d      	bgt.n	800a2f8 <_printf_float+0x368>
 800a2dc:	2700      	movs	r7, #0
 800a2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e2:	f104 081a 	add.w	r8, r4, #26
 800a2e6:	e018      	b.n	800a31a <_printf_float+0x38a>
 800a2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d1e6      	bne.n	800a2c4 <_printf_float+0x334>
 800a2f6:	e6a2      	b.n	800a03e <_printf_float+0xae>
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	463a      	mov	r2, r7
 800a2fc:	4659      	mov	r1, fp
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b0      	blx	r6
 800a302:	3001      	adds	r0, #1
 800a304:	d1ea      	bne.n	800a2dc <_printf_float+0x34c>
 800a306:	e69a      	b.n	800a03e <_printf_float+0xae>
 800a308:	2301      	movs	r3, #1
 800a30a:	4642      	mov	r2, r8
 800a30c:	4659      	mov	r1, fp
 800a30e:	4628      	mov	r0, r5
 800a310:	47b0      	blx	r6
 800a312:	3001      	adds	r0, #1
 800a314:	f43f ae93 	beq.w	800a03e <_printf_float+0xae>
 800a318:	3701      	adds	r7, #1
 800a31a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	eba3 0309 	sub.w	r3, r3, r9
 800a324:	42bb      	cmp	r3, r7
 800a326:	dcef      	bgt.n	800a308 <_printf_float+0x378>
 800a328:	e74d      	b.n	800a1c6 <_printf_float+0x236>
 800a32a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a32c:	2a01      	cmp	r2, #1
 800a32e:	dc01      	bgt.n	800a334 <_printf_float+0x3a4>
 800a330:	07db      	lsls	r3, r3, #31
 800a332:	d538      	bpl.n	800a3a6 <_printf_float+0x416>
 800a334:	2301      	movs	r3, #1
 800a336:	463a      	mov	r2, r7
 800a338:	4659      	mov	r1, fp
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b0      	blx	r6
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f ae7d 	beq.w	800a03e <_printf_float+0xae>
 800a344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a348:	4659      	mov	r1, fp
 800a34a:	4628      	mov	r0, r5
 800a34c:	47b0      	blx	r6
 800a34e:	3001      	adds	r0, #1
 800a350:	f107 0701 	add.w	r7, r7, #1
 800a354:	f43f ae73 	beq.w	800a03e <_printf_float+0xae>
 800a358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a35e:	2200      	movs	r2, #0
 800a360:	f103 38ff 	add.w	r8, r3, #4294967295
 800a364:	2300      	movs	r3, #0
 800a366:	f7f6 fb1f 	bl	80009a8 <__aeabi_dcmpeq>
 800a36a:	b9c0      	cbnz	r0, 800a39e <_printf_float+0x40e>
 800a36c:	4643      	mov	r3, r8
 800a36e:	463a      	mov	r2, r7
 800a370:	4659      	mov	r1, fp
 800a372:	4628      	mov	r0, r5
 800a374:	47b0      	blx	r6
 800a376:	3001      	adds	r0, #1
 800a378:	d10d      	bne.n	800a396 <_printf_float+0x406>
 800a37a:	e660      	b.n	800a03e <_printf_float+0xae>
 800a37c:	2301      	movs	r3, #1
 800a37e:	4642      	mov	r2, r8
 800a380:	4659      	mov	r1, fp
 800a382:	4628      	mov	r0, r5
 800a384:	47b0      	blx	r6
 800a386:	3001      	adds	r0, #1
 800a388:	f43f ae59 	beq.w	800a03e <_printf_float+0xae>
 800a38c:	3701      	adds	r7, #1
 800a38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a390:	3b01      	subs	r3, #1
 800a392:	42bb      	cmp	r3, r7
 800a394:	dcf2      	bgt.n	800a37c <_printf_float+0x3ec>
 800a396:	464b      	mov	r3, r9
 800a398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a39c:	e6e4      	b.n	800a168 <_printf_float+0x1d8>
 800a39e:	2700      	movs	r7, #0
 800a3a0:	f104 081a 	add.w	r8, r4, #26
 800a3a4:	e7f3      	b.n	800a38e <_printf_float+0x3fe>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e7e1      	b.n	800a36e <_printf_float+0x3de>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4642      	mov	r2, r8
 800a3ae:	4659      	mov	r1, fp
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	47b0      	blx	r6
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f43f ae42 	beq.w	800a03e <_printf_float+0xae>
 800a3ba:	3701      	adds	r7, #1
 800a3bc:	68e3      	ldr	r3, [r4, #12]
 800a3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	42bb      	cmp	r3, r7
 800a3c4:	dcf1      	bgt.n	800a3aa <_printf_float+0x41a>
 800a3c6:	e702      	b.n	800a1ce <_printf_float+0x23e>
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	f104 0819 	add.w	r8, r4, #25
 800a3ce:	e7f5      	b.n	800a3bc <_printf_float+0x42c>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f43f ae94 	beq.w	800a0fe <_printf_float+0x16e>
 800a3d6:	f04f 0c00 	mov.w	ip, #0
 800a3da:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a3de:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a3e2:	6022      	str	r2, [r4, #0]
 800a3e4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a3e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	463a      	mov	r2, r7
 800a3f0:	464b      	mov	r3, r9
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff fd3b 	bl	8009e6e <__cvt>
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	e64f      	b.n	800a09c <_printf_float+0x10c>

0800a3fc <_printf_common>:
 800a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	4691      	mov	r9, r2
 800a402:	461f      	mov	r7, r3
 800a404:	688a      	ldr	r2, [r1, #8]
 800a406:	690b      	ldr	r3, [r1, #16]
 800a408:	4606      	mov	r6, r0
 800a40a:	4293      	cmp	r3, r2
 800a40c:	bfb8      	it	lt
 800a40e:	4613      	movlt	r3, r2
 800a410:	f8c9 3000 	str.w	r3, [r9]
 800a414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a418:	460c      	mov	r4, r1
 800a41a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a41e:	b112      	cbz	r2, 800a426 <_printf_common+0x2a>
 800a420:	3301      	adds	r3, #1
 800a422:	f8c9 3000 	str.w	r3, [r9]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	0699      	lsls	r1, r3, #26
 800a42a:	bf42      	ittt	mi
 800a42c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a430:	3302      	addmi	r3, #2
 800a432:	f8c9 3000 	strmi.w	r3, [r9]
 800a436:	6825      	ldr	r5, [r4, #0]
 800a438:	f015 0506 	ands.w	r5, r5, #6
 800a43c:	d107      	bne.n	800a44e <_printf_common+0x52>
 800a43e:	f104 0a19 	add.w	sl, r4, #25
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	f8d9 2000 	ldr.w	r2, [r9]
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	42ab      	cmp	r3, r5
 800a44c:	dc29      	bgt.n	800a4a2 <_printf_common+0xa6>
 800a44e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	3300      	adds	r3, #0
 800a456:	bf18      	it	ne
 800a458:	2301      	movne	r3, #1
 800a45a:	0692      	lsls	r2, r2, #26
 800a45c:	d42e      	bmi.n	800a4bc <_printf_common+0xc0>
 800a45e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a462:	4639      	mov	r1, r7
 800a464:	4630      	mov	r0, r6
 800a466:	47c0      	blx	r8
 800a468:	3001      	adds	r0, #1
 800a46a:	d021      	beq.n	800a4b0 <_printf_common+0xb4>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	68e5      	ldr	r5, [r4, #12]
 800a470:	f003 0306 	and.w	r3, r3, #6
 800a474:	2b04      	cmp	r3, #4
 800a476:	bf18      	it	ne
 800a478:	2500      	movne	r5, #0
 800a47a:	f8d9 2000 	ldr.w	r2, [r9]
 800a47e:	f04f 0900 	mov.w	r9, #0
 800a482:	bf08      	it	eq
 800a484:	1aad      	subeq	r5, r5, r2
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	bf08      	it	eq
 800a48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a490:	4293      	cmp	r3, r2
 800a492:	bfc4      	itt	gt
 800a494:	1a9b      	subgt	r3, r3, r2
 800a496:	18ed      	addgt	r5, r5, r3
 800a498:	341a      	adds	r4, #26
 800a49a:	454d      	cmp	r5, r9
 800a49c:	d11a      	bne.n	800a4d4 <_printf_common+0xd8>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e008      	b.n	800a4b4 <_printf_common+0xb8>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4652      	mov	r2, sl
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	47c0      	blx	r8
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d103      	bne.n	800a4b8 <_printf_common+0xbc>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	e7c2      	b.n	800a442 <_printf_common+0x46>
 800a4bc:	2030      	movs	r0, #48	; 0x30
 800a4be:	18e1      	adds	r1, r4, r3
 800a4c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4ca:	4422      	add	r2, r4
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4d2:	e7c4      	b.n	800a45e <_printf_common+0x62>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4639      	mov	r1, r7
 800a4da:	4630      	mov	r0, r6
 800a4dc:	47c0      	blx	r8
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d0e6      	beq.n	800a4b0 <_printf_common+0xb4>
 800a4e2:	f109 0901 	add.w	r9, r9, #1
 800a4e6:	e7d8      	b.n	800a49a <_printf_common+0x9e>

0800a4e8 <_printf_i>:
 800a4e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	7e09      	ldrb	r1, [r1, #24]
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	296e      	cmp	r1, #110	; 0x6e
 800a4f8:	4617      	mov	r7, r2
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	4698      	mov	r8, r3
 800a4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a500:	f000 80b3 	beq.w	800a66a <_printf_i+0x182>
 800a504:	d822      	bhi.n	800a54c <_printf_i+0x64>
 800a506:	2963      	cmp	r1, #99	; 0x63
 800a508:	d036      	beq.n	800a578 <_printf_i+0x90>
 800a50a:	d80a      	bhi.n	800a522 <_printf_i+0x3a>
 800a50c:	2900      	cmp	r1, #0
 800a50e:	f000 80b9 	beq.w	800a684 <_printf_i+0x19c>
 800a512:	2958      	cmp	r1, #88	; 0x58
 800a514:	f000 8083 	beq.w	800a61e <_printf_i+0x136>
 800a518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a51c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a520:	e032      	b.n	800a588 <_printf_i+0xa0>
 800a522:	2964      	cmp	r1, #100	; 0x64
 800a524:	d001      	beq.n	800a52a <_printf_i+0x42>
 800a526:	2969      	cmp	r1, #105	; 0x69
 800a528:	d1f6      	bne.n	800a518 <_printf_i+0x30>
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	6813      	ldr	r3, [r2, #0]
 800a52e:	0605      	lsls	r5, r0, #24
 800a530:	f103 0104 	add.w	r1, r3, #4
 800a534:	d52a      	bpl.n	800a58c <_printf_i+0xa4>
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da03      	bge.n	800a546 <_printf_i+0x5e>
 800a53e:	222d      	movs	r2, #45	; 0x2d
 800a540:	425b      	negs	r3, r3
 800a542:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a546:	486f      	ldr	r0, [pc, #444]	; (800a704 <_printf_i+0x21c>)
 800a548:	220a      	movs	r2, #10
 800a54a:	e039      	b.n	800a5c0 <_printf_i+0xd8>
 800a54c:	2973      	cmp	r1, #115	; 0x73
 800a54e:	f000 809d 	beq.w	800a68c <_printf_i+0x1a4>
 800a552:	d808      	bhi.n	800a566 <_printf_i+0x7e>
 800a554:	296f      	cmp	r1, #111	; 0x6f
 800a556:	d020      	beq.n	800a59a <_printf_i+0xb2>
 800a558:	2970      	cmp	r1, #112	; 0x70
 800a55a:	d1dd      	bne.n	800a518 <_printf_i+0x30>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	f043 0320 	orr.w	r3, r3, #32
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	e003      	b.n	800a56e <_printf_i+0x86>
 800a566:	2975      	cmp	r1, #117	; 0x75
 800a568:	d017      	beq.n	800a59a <_printf_i+0xb2>
 800a56a:	2978      	cmp	r1, #120	; 0x78
 800a56c:	d1d4      	bne.n	800a518 <_printf_i+0x30>
 800a56e:	2378      	movs	r3, #120	; 0x78
 800a570:	4865      	ldr	r0, [pc, #404]	; (800a708 <_printf_i+0x220>)
 800a572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a576:	e055      	b.n	800a624 <_printf_i+0x13c>
 800a578:	6813      	ldr	r3, [r2, #0]
 800a57a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a57e:	1d19      	adds	r1, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6011      	str	r1, [r2, #0]
 800a584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a588:	2301      	movs	r3, #1
 800a58a:	e08c      	b.n	800a6a6 <_printf_i+0x1be>
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a592:	6011      	str	r1, [r2, #0]
 800a594:	bf18      	it	ne
 800a596:	b21b      	sxthne	r3, r3
 800a598:	e7cf      	b.n	800a53a <_printf_i+0x52>
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	6825      	ldr	r5, [r4, #0]
 800a59e:	1d18      	adds	r0, r3, #4
 800a5a0:	6010      	str	r0, [r2, #0]
 800a5a2:	0628      	lsls	r0, r5, #24
 800a5a4:	d501      	bpl.n	800a5aa <_printf_i+0xc2>
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	e002      	b.n	800a5b0 <_printf_i+0xc8>
 800a5aa:	0668      	lsls	r0, r5, #25
 800a5ac:	d5fb      	bpl.n	800a5a6 <_printf_i+0xbe>
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	296f      	cmp	r1, #111	; 0x6f
 800a5b2:	bf14      	ite	ne
 800a5b4:	220a      	movne	r2, #10
 800a5b6:	2208      	moveq	r2, #8
 800a5b8:	4852      	ldr	r0, [pc, #328]	; (800a704 <_printf_i+0x21c>)
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5c0:	6865      	ldr	r5, [r4, #4]
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	60a5      	str	r5, [r4, #8]
 800a5c6:	f2c0 8095 	blt.w	800a6f4 <_printf_i+0x20c>
 800a5ca:	6821      	ldr	r1, [r4, #0]
 800a5cc:	f021 0104 	bic.w	r1, r1, #4
 800a5d0:	6021      	str	r1, [r4, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d13d      	bne.n	800a652 <_printf_i+0x16a>
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	f040 808e 	bne.w	800a6f8 <_printf_i+0x210>
 800a5dc:	4665      	mov	r5, ip
 800a5de:	2a08      	cmp	r2, #8
 800a5e0:	d10b      	bne.n	800a5fa <_printf_i+0x112>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	07db      	lsls	r3, r3, #31
 800a5e6:	d508      	bpl.n	800a5fa <_printf_i+0x112>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	6862      	ldr	r2, [r4, #4]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	bfde      	ittt	le
 800a5f0:	2330      	movle	r3, #48	; 0x30
 800a5f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5fa:	ebac 0305 	sub.w	r3, ip, r5
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	f8cd 8000 	str.w	r8, [sp]
 800a604:	463b      	mov	r3, r7
 800a606:	aa03      	add	r2, sp, #12
 800a608:	4621      	mov	r1, r4
 800a60a:	4630      	mov	r0, r6
 800a60c:	f7ff fef6 	bl	800a3fc <_printf_common>
 800a610:	3001      	adds	r0, #1
 800a612:	d14d      	bne.n	800a6b0 <_printf_i+0x1c8>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b005      	add	sp, #20
 800a61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61e:	4839      	ldr	r0, [pc, #228]	; (800a704 <_printf_i+0x21c>)
 800a620:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a624:	6813      	ldr	r3, [r2, #0]
 800a626:	6821      	ldr	r1, [r4, #0]
 800a628:	1d1d      	adds	r5, r3, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6015      	str	r5, [r2, #0]
 800a62e:	060a      	lsls	r2, r1, #24
 800a630:	d50b      	bpl.n	800a64a <_printf_i+0x162>
 800a632:	07ca      	lsls	r2, r1, #31
 800a634:	bf44      	itt	mi
 800a636:	f041 0120 	orrmi.w	r1, r1, #32
 800a63a:	6021      	strmi	r1, [r4, #0]
 800a63c:	b91b      	cbnz	r3, 800a646 <_printf_i+0x15e>
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	f022 0220 	bic.w	r2, r2, #32
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	2210      	movs	r2, #16
 800a648:	e7b7      	b.n	800a5ba <_printf_i+0xd2>
 800a64a:	064d      	lsls	r5, r1, #25
 800a64c:	bf48      	it	mi
 800a64e:	b29b      	uxthmi	r3, r3
 800a650:	e7ef      	b.n	800a632 <_printf_i+0x14a>
 800a652:	4665      	mov	r5, ip
 800a654:	fbb3 f1f2 	udiv	r1, r3, r2
 800a658:	fb02 3311 	mls	r3, r2, r1, r3
 800a65c:	5cc3      	ldrb	r3, [r0, r3]
 800a65e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a662:	460b      	mov	r3, r1
 800a664:	2900      	cmp	r1, #0
 800a666:	d1f5      	bne.n	800a654 <_printf_i+0x16c>
 800a668:	e7b9      	b.n	800a5de <_printf_i+0xf6>
 800a66a:	6813      	ldr	r3, [r2, #0]
 800a66c:	6825      	ldr	r5, [r4, #0]
 800a66e:	1d18      	adds	r0, r3, #4
 800a670:	6961      	ldr	r1, [r4, #20]
 800a672:	6010      	str	r0, [r2, #0]
 800a674:	0628      	lsls	r0, r5, #24
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	d501      	bpl.n	800a67e <_printf_i+0x196>
 800a67a:	6019      	str	r1, [r3, #0]
 800a67c:	e002      	b.n	800a684 <_printf_i+0x19c>
 800a67e:	066a      	lsls	r2, r5, #25
 800a680:	d5fb      	bpl.n	800a67a <_printf_i+0x192>
 800a682:	8019      	strh	r1, [r3, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	4665      	mov	r5, ip
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	e7b9      	b.n	800a600 <_printf_i+0x118>
 800a68c:	6813      	ldr	r3, [r2, #0]
 800a68e:	1d19      	adds	r1, r3, #4
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	681d      	ldr	r5, [r3, #0]
 800a694:	6862      	ldr	r2, [r4, #4]
 800a696:	2100      	movs	r1, #0
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 ff59 	bl	800b550 <memchr>
 800a69e:	b108      	cbz	r0, 800a6a4 <_printf_i+0x1bc>
 800a6a0:	1b40      	subs	r0, r0, r5
 800a6a2:	6060      	str	r0, [r4, #4]
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ae:	e7a7      	b.n	800a600 <_printf_i+0x118>
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	47c0      	blx	r8
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d0aa      	beq.n	800a614 <_printf_i+0x12c>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	079b      	lsls	r3, r3, #30
 800a6c2:	d413      	bmi.n	800a6ec <_printf_i+0x204>
 800a6c4:	68e0      	ldr	r0, [r4, #12]
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	4298      	cmp	r0, r3
 800a6ca:	bfb8      	it	lt
 800a6cc:	4618      	movlt	r0, r3
 800a6ce:	e7a3      	b.n	800a618 <_printf_i+0x130>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	464a      	mov	r2, r9
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	47c0      	blx	r8
 800a6da:	3001      	adds	r0, #1
 800a6dc:	d09a      	beq.n	800a614 <_printf_i+0x12c>
 800a6de:	3501      	adds	r5, #1
 800a6e0:	68e3      	ldr	r3, [r4, #12]
 800a6e2:	9a03      	ldr	r2, [sp, #12]
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	42ab      	cmp	r3, r5
 800a6e8:	dcf2      	bgt.n	800a6d0 <_printf_i+0x1e8>
 800a6ea:	e7eb      	b.n	800a6c4 <_printf_i+0x1dc>
 800a6ec:	2500      	movs	r5, #0
 800a6ee:	f104 0919 	add.w	r9, r4, #25
 800a6f2:	e7f5      	b.n	800a6e0 <_printf_i+0x1f8>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1ac      	bne.n	800a652 <_printf_i+0x16a>
 800a6f8:	7803      	ldrb	r3, [r0, #0]
 800a6fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a702:	e76c      	b.n	800a5de <_printf_i+0xf6>
 800a704:	0800dac2 	.word	0x0800dac2
 800a708:	0800dad3 	.word	0x0800dad3

0800a70c <siprintf>:
 800a70c:	b40e      	push	{r1, r2, r3}
 800a70e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a712:	b500      	push	{lr}
 800a714:	b09c      	sub	sp, #112	; 0x70
 800a716:	ab1d      	add	r3, sp, #116	; 0x74
 800a718:	9002      	str	r0, [sp, #8]
 800a71a:	9006      	str	r0, [sp, #24]
 800a71c:	9107      	str	r1, [sp, #28]
 800a71e:	9104      	str	r1, [sp, #16]
 800a720:	4808      	ldr	r0, [pc, #32]	; (800a744 <siprintf+0x38>)
 800a722:	4909      	ldr	r1, [pc, #36]	; (800a748 <siprintf+0x3c>)
 800a724:	f853 2b04 	ldr.w	r2, [r3], #4
 800a728:	9105      	str	r1, [sp, #20]
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	a902      	add	r1, sp, #8
 800a72e:	9301      	str	r3, [sp, #4]
 800a730:	f001 fb06 	bl	800bd40 <_svfiprintf_r>
 800a734:	2200      	movs	r2, #0
 800a736:	9b02      	ldr	r3, [sp, #8]
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	b01c      	add	sp, #112	; 0x70
 800a73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a740:	b003      	add	sp, #12
 800a742:	4770      	bx	lr
 800a744:	20000014 	.word	0x20000014
 800a748:	ffff0208 	.word	0xffff0208

0800a74c <_strtol_l.isra.0>:
 800a74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a750:	4680      	mov	r8, r0
 800a752:	4689      	mov	r9, r1
 800a754:	4692      	mov	sl, r2
 800a756:	461e      	mov	r6, r3
 800a758:	460f      	mov	r7, r1
 800a75a:	463d      	mov	r5, r7
 800a75c:	9808      	ldr	r0, [sp, #32]
 800a75e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a762:	f000 fec9 	bl	800b4f8 <__locale_ctype_ptr_l>
 800a766:	4420      	add	r0, r4
 800a768:	7843      	ldrb	r3, [r0, #1]
 800a76a:	f013 0308 	ands.w	r3, r3, #8
 800a76e:	d132      	bne.n	800a7d6 <_strtol_l.isra.0+0x8a>
 800a770:	2c2d      	cmp	r4, #45	; 0x2d
 800a772:	d132      	bne.n	800a7da <_strtol_l.isra.0+0x8e>
 800a774:	2201      	movs	r2, #1
 800a776:	787c      	ldrb	r4, [r7, #1]
 800a778:	1cbd      	adds	r5, r7, #2
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	d05d      	beq.n	800a83a <_strtol_l.isra.0+0xee>
 800a77e:	2e10      	cmp	r6, #16
 800a780:	d109      	bne.n	800a796 <_strtol_l.isra.0+0x4a>
 800a782:	2c30      	cmp	r4, #48	; 0x30
 800a784:	d107      	bne.n	800a796 <_strtol_l.isra.0+0x4a>
 800a786:	782b      	ldrb	r3, [r5, #0]
 800a788:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a78c:	2b58      	cmp	r3, #88	; 0x58
 800a78e:	d14f      	bne.n	800a830 <_strtol_l.isra.0+0xe4>
 800a790:	2610      	movs	r6, #16
 800a792:	786c      	ldrb	r4, [r5, #1]
 800a794:	3502      	adds	r5, #2
 800a796:	2a00      	cmp	r2, #0
 800a798:	bf14      	ite	ne
 800a79a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a79e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a7a2:	2700      	movs	r7, #0
 800a7a4:	fbb1 fcf6 	udiv	ip, r1, r6
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a7ae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	d817      	bhi.n	800a7e6 <_strtol_l.isra.0+0x9a>
 800a7b6:	461c      	mov	r4, r3
 800a7b8:	42a6      	cmp	r6, r4
 800a7ba:	dd23      	ble.n	800a804 <_strtol_l.isra.0+0xb8>
 800a7bc:	1c7b      	adds	r3, r7, #1
 800a7be:	d007      	beq.n	800a7d0 <_strtol_l.isra.0+0x84>
 800a7c0:	4584      	cmp	ip, r0
 800a7c2:	d31c      	bcc.n	800a7fe <_strtol_l.isra.0+0xb2>
 800a7c4:	d101      	bne.n	800a7ca <_strtol_l.isra.0+0x7e>
 800a7c6:	45a6      	cmp	lr, r4
 800a7c8:	db19      	blt.n	800a7fe <_strtol_l.isra.0+0xb2>
 800a7ca:	2701      	movs	r7, #1
 800a7cc:	fb00 4006 	mla	r0, r0, r6, r4
 800a7d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d4:	e7eb      	b.n	800a7ae <_strtol_l.isra.0+0x62>
 800a7d6:	462f      	mov	r7, r5
 800a7d8:	e7bf      	b.n	800a75a <_strtol_l.isra.0+0xe>
 800a7da:	2c2b      	cmp	r4, #43	; 0x2b
 800a7dc:	bf04      	itt	eq
 800a7de:	1cbd      	addeq	r5, r7, #2
 800a7e0:	787c      	ldrbeq	r4, [r7, #1]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	e7c9      	b.n	800a77a <_strtol_l.isra.0+0x2e>
 800a7e6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a7ea:	2b19      	cmp	r3, #25
 800a7ec:	d801      	bhi.n	800a7f2 <_strtol_l.isra.0+0xa6>
 800a7ee:	3c37      	subs	r4, #55	; 0x37
 800a7f0:	e7e2      	b.n	800a7b8 <_strtol_l.isra.0+0x6c>
 800a7f2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a7f6:	2b19      	cmp	r3, #25
 800a7f8:	d804      	bhi.n	800a804 <_strtol_l.isra.0+0xb8>
 800a7fa:	3c57      	subs	r4, #87	; 0x57
 800a7fc:	e7dc      	b.n	800a7b8 <_strtol_l.isra.0+0x6c>
 800a7fe:	f04f 37ff 	mov.w	r7, #4294967295
 800a802:	e7e5      	b.n	800a7d0 <_strtol_l.isra.0+0x84>
 800a804:	1c7b      	adds	r3, r7, #1
 800a806:	d108      	bne.n	800a81a <_strtol_l.isra.0+0xce>
 800a808:	2322      	movs	r3, #34	; 0x22
 800a80a:	4608      	mov	r0, r1
 800a80c:	f8c8 3000 	str.w	r3, [r8]
 800a810:	f1ba 0f00 	cmp.w	sl, #0
 800a814:	d107      	bne.n	800a826 <_strtol_l.isra.0+0xda>
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	b102      	cbz	r2, 800a81e <_strtol_l.isra.0+0xd2>
 800a81c:	4240      	negs	r0, r0
 800a81e:	f1ba 0f00 	cmp.w	sl, #0
 800a822:	d0f8      	beq.n	800a816 <_strtol_l.isra.0+0xca>
 800a824:	b10f      	cbz	r7, 800a82a <_strtol_l.isra.0+0xde>
 800a826:	f105 39ff 	add.w	r9, r5, #4294967295
 800a82a:	f8ca 9000 	str.w	r9, [sl]
 800a82e:	e7f2      	b.n	800a816 <_strtol_l.isra.0+0xca>
 800a830:	2430      	movs	r4, #48	; 0x30
 800a832:	2e00      	cmp	r6, #0
 800a834:	d1af      	bne.n	800a796 <_strtol_l.isra.0+0x4a>
 800a836:	2608      	movs	r6, #8
 800a838:	e7ad      	b.n	800a796 <_strtol_l.isra.0+0x4a>
 800a83a:	2c30      	cmp	r4, #48	; 0x30
 800a83c:	d0a3      	beq.n	800a786 <_strtol_l.isra.0+0x3a>
 800a83e:	260a      	movs	r6, #10
 800a840:	e7a9      	b.n	800a796 <_strtol_l.isra.0+0x4a>
	...

0800a844 <strtol>:
 800a844:	4b08      	ldr	r3, [pc, #32]	; (800a868 <strtol+0x24>)
 800a846:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a848:	681c      	ldr	r4, [r3, #0]
 800a84a:	4d08      	ldr	r5, [pc, #32]	; (800a86c <strtol+0x28>)
 800a84c:	6a23      	ldr	r3, [r4, #32]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	bf08      	it	eq
 800a852:	462b      	moveq	r3, r5
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4613      	mov	r3, r2
 800a858:	460a      	mov	r2, r1
 800a85a:	4601      	mov	r1, r0
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7ff ff75 	bl	800a74c <_strtol_l.isra.0>
 800a862:	b003      	add	sp, #12
 800a864:	bd30      	pop	{r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	20000014 	.word	0x20000014
 800a86c:	20000078 	.word	0x20000078

0800a870 <quorem>:
 800a870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	6903      	ldr	r3, [r0, #16]
 800a876:	690c      	ldr	r4, [r1, #16]
 800a878:	4680      	mov	r8, r0
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	f2c0 8084 	blt.w	800a988 <quorem+0x118>
 800a880:	3c01      	subs	r4, #1
 800a882:	f101 0714 	add.w	r7, r1, #20
 800a886:	f100 0614 	add.w	r6, r0, #20
 800a88a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a88e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a892:	3501      	adds	r5, #1
 800a894:	fbb0 f5f5 	udiv	r5, r0, r5
 800a898:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a89c:	eb06 030c 	add.w	r3, r6, ip
 800a8a0:	eb07 090c 	add.w	r9, r7, ip
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	b39d      	cbz	r5, 800a910 <quorem+0xa0>
 800a8a8:	f04f 0a00 	mov.w	sl, #0
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	46b6      	mov	lr, r6
 800a8b0:	46d3      	mov	fp, sl
 800a8b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8b6:	b293      	uxth	r3, r2
 800a8b8:	fb05 a303 	mla	r3, r5, r3, sl
 800a8bc:	0c12      	lsrs	r2, r2, #16
 800a8be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8c2:	fb05 a202 	mla	r2, r5, r2, sl
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ebab 0303 	sub.w	r3, fp, r3
 800a8cc:	f8de b000 	ldr.w	fp, [lr]
 800a8d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a8d4:	fa1f fb8b 	uxth.w	fp, fp
 800a8d8:	445b      	add	r3, fp
 800a8da:	fa1f fb82 	uxth.w	fp, r2
 800a8de:	f8de 2000 	ldr.w	r2, [lr]
 800a8e2:	4581      	cmp	r9, r0
 800a8e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a8e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a8f6:	f84e 3b04 	str.w	r3, [lr], #4
 800a8fa:	d2da      	bcs.n	800a8b2 <quorem+0x42>
 800a8fc:	f856 300c 	ldr.w	r3, [r6, ip]
 800a900:	b933      	cbnz	r3, 800a910 <quorem+0xa0>
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	3b04      	subs	r3, #4
 800a906:	429e      	cmp	r6, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	d331      	bcc.n	800a970 <quorem+0x100>
 800a90c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a910:	4640      	mov	r0, r8
 800a912:	f001 f83f 	bl	800b994 <__mcmp>
 800a916:	2800      	cmp	r0, #0
 800a918:	db26      	blt.n	800a968 <quorem+0xf8>
 800a91a:	4630      	mov	r0, r6
 800a91c:	f04f 0c00 	mov.w	ip, #0
 800a920:	3501      	adds	r5, #1
 800a922:	f857 1b04 	ldr.w	r1, [r7], #4
 800a926:	f8d0 e000 	ldr.w	lr, [r0]
 800a92a:	b28b      	uxth	r3, r1
 800a92c:	ebac 0303 	sub.w	r3, ip, r3
 800a930:	fa1f f28e 	uxth.w	r2, lr
 800a934:	4413      	add	r3, r2
 800a936:	0c0a      	lsrs	r2, r1, #16
 800a938:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a93c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a940:	b29b      	uxth	r3, r3
 800a942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a946:	45b9      	cmp	r9, r7
 800a948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a94c:	f840 3b04 	str.w	r3, [r0], #4
 800a950:	d2e7      	bcs.n	800a922 <quorem+0xb2>
 800a952:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a956:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a95a:	b92a      	cbnz	r2, 800a968 <quorem+0xf8>
 800a95c:	3b04      	subs	r3, #4
 800a95e:	429e      	cmp	r6, r3
 800a960:	461a      	mov	r2, r3
 800a962:	d30b      	bcc.n	800a97c <quorem+0x10c>
 800a964:	f8c8 4010 	str.w	r4, [r8, #16]
 800a968:	4628      	mov	r0, r5
 800a96a:	b003      	add	sp, #12
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	6812      	ldr	r2, [r2, #0]
 800a972:	3b04      	subs	r3, #4
 800a974:	2a00      	cmp	r2, #0
 800a976:	d1c9      	bne.n	800a90c <quorem+0x9c>
 800a978:	3c01      	subs	r4, #1
 800a97a:	e7c4      	b.n	800a906 <quorem+0x96>
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	3b04      	subs	r3, #4
 800a980:	2a00      	cmp	r2, #0
 800a982:	d1ef      	bne.n	800a964 <quorem+0xf4>
 800a984:	3c01      	subs	r4, #1
 800a986:	e7ea      	b.n	800a95e <quorem+0xee>
 800a988:	2000      	movs	r0, #0
 800a98a:	e7ee      	b.n	800a96a <quorem+0xfa>
 800a98c:	0000      	movs	r0, r0
	...

0800a990 <_dtoa_r>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	4616      	mov	r6, r2
 800a996:	461f      	mov	r7, r3
 800a998:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a99a:	b095      	sub	sp, #84	; 0x54
 800a99c:	4604      	mov	r4, r0
 800a99e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a9a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a9a6:	b93d      	cbnz	r5, 800a9b8 <_dtoa_r+0x28>
 800a9a8:	2010      	movs	r0, #16
 800a9aa:	f000 fdb7 	bl	800b51c <malloc>
 800a9ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a9b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9b4:	6005      	str	r5, [r0, #0]
 800a9b6:	60c5      	str	r5, [r0, #12]
 800a9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ba:	6819      	ldr	r1, [r3, #0]
 800a9bc:	b151      	cbz	r1, 800a9d4 <_dtoa_r+0x44>
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4093      	lsls	r3, r2
 800a9c4:	604a      	str	r2, [r1, #4]
 800a9c6:	608b      	str	r3, [r1, #8]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fe03 	bl	800b5d4 <_Bfree>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	1e3b      	subs	r3, r7, #0
 800a9d6:	bfaf      	iteee	ge
 800a9d8:	2300      	movge	r3, #0
 800a9da:	2201      	movlt	r2, #1
 800a9dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9e0:	9303      	strlt	r3, [sp, #12]
 800a9e2:	bfac      	ite	ge
 800a9e4:	f8c8 3000 	strge.w	r3, [r8]
 800a9e8:	f8c8 2000 	strlt.w	r2, [r8]
 800a9ec:	4bae      	ldr	r3, [pc, #696]	; (800aca8 <_dtoa_r+0x318>)
 800a9ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a9f2:	ea33 0308 	bics.w	r3, r3, r8
 800a9f6:	d11b      	bne.n	800aa30 <_dtoa_r+0xa0>
 800a9f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	9b02      	ldr	r3, [sp, #8]
 800aa02:	b923      	cbnz	r3, 800aa0e <_dtoa_r+0x7e>
 800aa04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f000 8545 	beq.w	800b498 <_dtoa_r+0xb08>
 800aa0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa10:	b953      	cbnz	r3, 800aa28 <_dtoa_r+0x98>
 800aa12:	4ba6      	ldr	r3, [pc, #664]	; (800acac <_dtoa_r+0x31c>)
 800aa14:	e021      	b.n	800aa5a <_dtoa_r+0xca>
 800aa16:	4ba6      	ldr	r3, [pc, #664]	; (800acb0 <_dtoa_r+0x320>)
 800aa18:	9306      	str	r3, [sp, #24]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	9806      	ldr	r0, [sp, #24]
 800aa22:	b015      	add	sp, #84	; 0x54
 800aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa28:	4ba0      	ldr	r3, [pc, #640]	; (800acac <_dtoa_r+0x31c>)
 800aa2a:	9306      	str	r3, [sp, #24]
 800aa2c:	3303      	adds	r3, #3
 800aa2e:	e7f5      	b.n	800aa1c <_dtoa_r+0x8c>
 800aa30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2300      	movs	r3, #0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 800aa40:	4682      	mov	sl, r0
 800aa42:	b160      	cbz	r0, 800aa5e <_dtoa_r+0xce>
 800aa44:	2301      	movs	r3, #1
 800aa46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa48:	6013      	str	r3, [r2, #0]
 800aa4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8520 	beq.w	800b492 <_dtoa_r+0xb02>
 800aa52:	4b98      	ldr	r3, [pc, #608]	; (800acb4 <_dtoa_r+0x324>)
 800aa54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	e7e0      	b.n	800aa20 <_dtoa_r+0x90>
 800aa5e:	ab12      	add	r3, sp, #72	; 0x48
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	ab13      	add	r3, sp, #76	; 0x4c
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	4632      	mov	r2, r6
 800aa68:	463b      	mov	r3, r7
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f001 f80a 	bl	800ba84 <__d2b>
 800aa70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aa74:	4683      	mov	fp, r0
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	d07d      	beq.n	800ab76 <_dtoa_r+0x1e6>
 800aa7a:	46b0      	mov	r8, r6
 800aa7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800aa84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800aa88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b89      	ldr	r3, [pc, #548]	; (800acb8 <_dtoa_r+0x328>)
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fb66 	bl	8000168 <__aeabi_dsub>
 800aa9c:	a37c      	add	r3, pc, #496	; (adr r3, 800ac90 <_dtoa_r+0x300>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fd19 	bl	80004d8 <__aeabi_dmul>
 800aaa6:	a37c      	add	r3, pc, #496	; (adr r3, 800ac98 <_dtoa_r+0x308>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fb5e 	bl	800016c <__adddf3>
 800aab0:	4606      	mov	r6, r0
 800aab2:	4628      	mov	r0, r5
 800aab4:	460f      	mov	r7, r1
 800aab6:	f7f5 fca5 	bl	8000404 <__aeabi_i2d>
 800aaba:	a379      	add	r3, pc, #484	; (adr r3, 800aca0 <_dtoa_r+0x310>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fd0a 	bl	80004d8 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f5 fb4e 	bl	800016c <__adddf3>
 800aad0:	4606      	mov	r6, r0
 800aad2:	460f      	mov	r7, r1
 800aad4:	f7f5 ffb0 	bl	8000a38 <__aeabi_d2iz>
 800aad8:	2200      	movs	r2, #0
 800aada:	4682      	mov	sl, r0
 800aadc:	2300      	movs	r3, #0
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 ff6b 	bl	80009bc <__aeabi_dcmplt>
 800aae6:	b148      	cbz	r0, 800aafc <_dtoa_r+0x16c>
 800aae8:	4650      	mov	r0, sl
 800aaea:	f7f5 fc8b 	bl	8000404 <__aeabi_i2d>
 800aaee:	4632      	mov	r2, r6
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	f7f5 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 800aaf6:	b908      	cbnz	r0, 800aafc <_dtoa_r+0x16c>
 800aaf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aafc:	f1ba 0f16 	cmp.w	sl, #22
 800ab00:	d85a      	bhi.n	800abb8 <_dtoa_r+0x228>
 800ab02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab06:	496d      	ldr	r1, [pc, #436]	; (800acbc <_dtoa_r+0x32c>)
 800ab08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab10:	f7f5 ff72 	bl	80009f8 <__aeabi_dcmpgt>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d051      	beq.n	800abbc <_dtoa_r+0x22c>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ab20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab22:	1b5d      	subs	r5, r3, r5
 800ab24:	1e6b      	subs	r3, r5, #1
 800ab26:	9307      	str	r3, [sp, #28]
 800ab28:	bf43      	ittte	mi
 800ab2a:	2300      	movmi	r3, #0
 800ab2c:	f1c5 0901 	rsbmi	r9, r5, #1
 800ab30:	9307      	strmi	r3, [sp, #28]
 800ab32:	f04f 0900 	movpl.w	r9, #0
 800ab36:	f1ba 0f00 	cmp.w	sl, #0
 800ab3a:	db41      	blt.n	800abc0 <_dtoa_r+0x230>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ab42:	4453      	add	r3, sl
 800ab44:	9307      	str	r3, [sp, #28]
 800ab46:	2300      	movs	r3, #0
 800ab48:	9308      	str	r3, [sp, #32]
 800ab4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab4c:	2b09      	cmp	r3, #9
 800ab4e:	f200 808f 	bhi.w	800ac70 <_dtoa_r+0x2e0>
 800ab52:	2b05      	cmp	r3, #5
 800ab54:	bfc4      	itt	gt
 800ab56:	3b04      	subgt	r3, #4
 800ab58:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ab5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab5c:	bfc8      	it	gt
 800ab5e:	2500      	movgt	r5, #0
 800ab60:	f1a3 0302 	sub.w	r3, r3, #2
 800ab64:	bfd8      	it	le
 800ab66:	2501      	movle	r5, #1
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	f200 808d 	bhi.w	800ac88 <_dtoa_r+0x2f8>
 800ab6e:	e8df f003 	tbb	[pc, r3]
 800ab72:	7d7b      	.short	0x7d7b
 800ab74:	6f2f      	.short	0x6f2f
 800ab76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ab7a:	441d      	add	r5, r3
 800ab7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ab80:	2820      	cmp	r0, #32
 800ab82:	dd13      	ble.n	800abac <_dtoa_r+0x21c>
 800ab84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ab88:	9b02      	ldr	r3, [sp, #8]
 800ab8a:	fa08 f800 	lsl.w	r8, r8, r0
 800ab8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ab92:	fa23 f000 	lsr.w	r0, r3, r0
 800ab96:	ea48 0000 	orr.w	r0, r8, r0
 800ab9a:	f7f5 fc23 	bl	80003e4 <__aeabi_ui2d>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4680      	mov	r8, r0
 800aba2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800aba6:	3d01      	subs	r5, #1
 800aba8:	9310      	str	r3, [sp, #64]	; 0x40
 800abaa:	e771      	b.n	800aa90 <_dtoa_r+0x100>
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	f1c0 0020 	rsb	r0, r0, #32
 800abb2:	fa03 f000 	lsl.w	r0, r3, r0
 800abb6:	e7f0      	b.n	800ab9a <_dtoa_r+0x20a>
 800abb8:	2301      	movs	r3, #1
 800abba:	e7b0      	b.n	800ab1e <_dtoa_r+0x18e>
 800abbc:	900d      	str	r0, [sp, #52]	; 0x34
 800abbe:	e7af      	b.n	800ab20 <_dtoa_r+0x190>
 800abc0:	f1ca 0300 	rsb	r3, sl, #0
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	2300      	movs	r3, #0
 800abc8:	eba9 090a 	sub.w	r9, r9, sl
 800abcc:	930c      	str	r3, [sp, #48]	; 0x30
 800abce:	e7bc      	b.n	800ab4a <_dtoa_r+0x1ba>
 800abd0:	2301      	movs	r3, #1
 800abd2:	9309      	str	r3, [sp, #36]	; 0x24
 800abd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dd74      	ble.n	800acc4 <_dtoa_r+0x334>
 800abda:	4698      	mov	r8, r3
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	2200      	movs	r2, #0
 800abe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abe2:	6072      	str	r2, [r6, #4]
 800abe4:	2204      	movs	r2, #4
 800abe6:	f102 0014 	add.w	r0, r2, #20
 800abea:	4298      	cmp	r0, r3
 800abec:	6871      	ldr	r1, [r6, #4]
 800abee:	d96e      	bls.n	800acce <_dtoa_r+0x33e>
 800abf0:	4620      	mov	r0, r4
 800abf2:	f000 fcbb 	bl	800b56c <_Balloc>
 800abf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf8:	6030      	str	r0, [r6, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f1b8 0f0e 	cmp.w	r8, #14
 800ac00:	9306      	str	r3, [sp, #24]
 800ac02:	f200 80ed 	bhi.w	800ade0 <_dtoa_r+0x450>
 800ac06:	2d00      	cmp	r5, #0
 800ac08:	f000 80ea 	beq.w	800ade0 <_dtoa_r+0x450>
 800ac0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac10:	f1ba 0f00 	cmp.w	sl, #0
 800ac14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ac18:	dd77      	ble.n	800ad0a <_dtoa_r+0x37a>
 800ac1a:	4a28      	ldr	r2, [pc, #160]	; (800acbc <_dtoa_r+0x32c>)
 800ac1c:	f00a 030f 	and.w	r3, sl, #15
 800ac20:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ac24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac28:	06f0      	lsls	r0, r6, #27
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac32:	d568      	bpl.n	800ad06 <_dtoa_r+0x376>
 800ac34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac38:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <_dtoa_r+0x330>)
 800ac3a:	2503      	movs	r5, #3
 800ac3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac40:	f7f5 fd74 	bl	800072c <__aeabi_ddiv>
 800ac44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac48:	f006 060f 	and.w	r6, r6, #15
 800ac4c:	4f1c      	ldr	r7, [pc, #112]	; (800acc0 <_dtoa_r+0x330>)
 800ac4e:	e04f      	b.n	800acf0 <_dtoa_r+0x360>
 800ac50:	2301      	movs	r3, #1
 800ac52:	9309      	str	r3, [sp, #36]	; 0x24
 800ac54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac56:	4453      	add	r3, sl
 800ac58:	f103 0801 	add.w	r8, r3, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	4643      	mov	r3, r8
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	bfb8      	it	lt
 800ac64:	2301      	movlt	r3, #1
 800ac66:	e7ba      	b.n	800abde <_dtoa_r+0x24e>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e7b2      	b.n	800abd2 <_dtoa_r+0x242>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e7f0      	b.n	800ac52 <_dtoa_r+0x2c2>
 800ac70:	2501      	movs	r5, #1
 800ac72:	2300      	movs	r3, #0
 800ac74:	9509      	str	r5, [sp, #36]	; 0x24
 800ac76:	931e      	str	r3, [sp, #120]	; 0x78
 800ac78:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	4698      	mov	r8, r3
 800ac82:	2312      	movs	r3, #18
 800ac84:	921f      	str	r2, [sp, #124]	; 0x7c
 800ac86:	e7aa      	b.n	800abde <_dtoa_r+0x24e>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	e7f4      	b.n	800ac78 <_dtoa_r+0x2e8>
 800ac8e:	bf00      	nop
 800ac90:	636f4361 	.word	0x636f4361
 800ac94:	3fd287a7 	.word	0x3fd287a7
 800ac98:	8b60c8b3 	.word	0x8b60c8b3
 800ac9c:	3fc68a28 	.word	0x3fc68a28
 800aca0:	509f79fb 	.word	0x509f79fb
 800aca4:	3fd34413 	.word	0x3fd34413
 800aca8:	7ff00000 	.word	0x7ff00000
 800acac:	0800daed 	.word	0x0800daed
 800acb0:	0800dae4 	.word	0x0800dae4
 800acb4:	0800dac1 	.word	0x0800dac1
 800acb8:	3ff80000 	.word	0x3ff80000
 800acbc:	0800db28 	.word	0x0800db28
 800acc0:	0800db00 	.word	0x0800db00
 800acc4:	2301      	movs	r3, #1
 800acc6:	9304      	str	r3, [sp, #16]
 800acc8:	4698      	mov	r8, r3
 800acca:	461a      	mov	r2, r3
 800accc:	e7da      	b.n	800ac84 <_dtoa_r+0x2f4>
 800acce:	3101      	adds	r1, #1
 800acd0:	6071      	str	r1, [r6, #4]
 800acd2:	0052      	lsls	r2, r2, #1
 800acd4:	e787      	b.n	800abe6 <_dtoa_r+0x256>
 800acd6:	07f1      	lsls	r1, r6, #31
 800acd8:	d508      	bpl.n	800acec <_dtoa_r+0x35c>
 800acda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace2:	f7f5 fbf9 	bl	80004d8 <__aeabi_dmul>
 800ace6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acea:	3501      	adds	r5, #1
 800acec:	1076      	asrs	r6, r6, #1
 800acee:	3708      	adds	r7, #8
 800acf0:	2e00      	cmp	r6, #0
 800acf2:	d1f0      	bne.n	800acd6 <_dtoa_r+0x346>
 800acf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acfc:	f7f5 fd16 	bl	800072c <__aeabi_ddiv>
 800ad00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad04:	e01b      	b.n	800ad3e <_dtoa_r+0x3ae>
 800ad06:	2502      	movs	r5, #2
 800ad08:	e7a0      	b.n	800ac4c <_dtoa_r+0x2bc>
 800ad0a:	f000 80a4 	beq.w	800ae56 <_dtoa_r+0x4c6>
 800ad0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad12:	f1ca 0600 	rsb	r6, sl, #0
 800ad16:	4ba0      	ldr	r3, [pc, #640]	; (800af98 <_dtoa_r+0x608>)
 800ad18:	f006 020f 	and.w	r2, r6, #15
 800ad1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	2502      	movs	r5, #2
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad30:	4f9a      	ldr	r7, [pc, #616]	; (800af9c <_dtoa_r+0x60c>)
 800ad32:	1136      	asrs	r6, r6, #4
 800ad34:	2e00      	cmp	r6, #0
 800ad36:	f040 8083 	bne.w	800ae40 <_dtoa_r+0x4b0>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e0      	bne.n	800ad00 <_dtoa_r+0x370>
 800ad3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 808a 	beq.w	800ae5a <_dtoa_r+0x4ca>
 800ad46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b92      	ldr	r3, [pc, #584]	; (800afa0 <_dtoa_r+0x610>)
 800ad56:	f7f5 fe31 	bl	80009bc <__aeabi_dcmplt>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d07d      	beq.n	800ae5a <_dtoa_r+0x4ca>
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	d07a      	beq.n	800ae5a <_dtoa_r+0x4ca>
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd36      	ble.n	800add8 <_dtoa_r+0x448>
 800ad6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4b8c      	ldr	r3, [pc, #560]	; (800afa4 <_dtoa_r+0x614>)
 800ad72:	f7f5 fbb1 	bl	80004d8 <__aeabi_dmul>
 800ad76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7a:	9e04      	ldr	r6, [sp, #16]
 800ad7c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ad80:	3501      	adds	r5, #1
 800ad82:	4628      	mov	r0, r5
 800ad84:	f7f5 fb3e 	bl	8000404 <__aeabi_i2d>
 800ad88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad8c:	f7f5 fba4 	bl	80004d8 <__aeabi_dmul>
 800ad90:	2200      	movs	r2, #0
 800ad92:	4b85      	ldr	r3, [pc, #532]	; (800afa8 <_dtoa_r+0x618>)
 800ad94:	f7f5 f9ea 	bl	800016c <__adddf3>
 800ad98:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ad9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ada0:	950b      	str	r5, [sp, #44]	; 0x2c
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	d15c      	bne.n	800ae60 <_dtoa_r+0x4d0>
 800ada6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adaa:	2200      	movs	r2, #0
 800adac:	4b7f      	ldr	r3, [pc, #508]	; (800afac <_dtoa_r+0x61c>)
 800adae:	f7f5 f9db 	bl	8000168 <__aeabi_dsub>
 800adb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb4:	462b      	mov	r3, r5
 800adb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adba:	f7f5 fe1d 	bl	80009f8 <__aeabi_dcmpgt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f040 8281 	bne.w	800b2c6 <_dtoa_r+0x936>
 800adc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800adce:	f7f5 fdf5 	bl	80009bc <__aeabi_dcmplt>
 800add2:	2800      	cmp	r0, #0
 800add4:	f040 8275 	bne.w	800b2c2 <_dtoa_r+0x932>
 800add8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800addc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ade0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f2c0 814b 	blt.w	800b07e <_dtoa_r+0x6ee>
 800ade8:	f1ba 0f0e 	cmp.w	sl, #14
 800adec:	f300 8147 	bgt.w	800b07e <_dtoa_r+0x6ee>
 800adf0:	4b69      	ldr	r3, [pc, #420]	; (800af98 <_dtoa_r+0x608>)
 800adf2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f280 80d7 	bge.w	800afb4 <_dtoa_r+0x624>
 800ae06:	f1b8 0f00 	cmp.w	r8, #0
 800ae0a:	f300 80d3 	bgt.w	800afb4 <_dtoa_r+0x624>
 800ae0e:	f040 8257 	bne.w	800b2c0 <_dtoa_r+0x930>
 800ae12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae16:	2200      	movs	r2, #0
 800ae18:	4b64      	ldr	r3, [pc, #400]	; (800afac <_dtoa_r+0x61c>)
 800ae1a:	f7f5 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ae1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae22:	f7f5 fddf 	bl	80009e4 <__aeabi_dcmpge>
 800ae26:	4646      	mov	r6, r8
 800ae28:	4647      	mov	r7, r8
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	f040 822d 	bne.w	800b28a <_dtoa_r+0x8fa>
 800ae30:	9b06      	ldr	r3, [sp, #24]
 800ae32:	9a06      	ldr	r2, [sp, #24]
 800ae34:	1c5d      	adds	r5, r3, #1
 800ae36:	2331      	movs	r3, #49	; 0x31
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	7013      	strb	r3, [r2, #0]
 800ae3e:	e228      	b.n	800b292 <_dtoa_r+0x902>
 800ae40:	07f2      	lsls	r2, r6, #31
 800ae42:	d505      	bpl.n	800ae50 <_dtoa_r+0x4c0>
 800ae44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae48:	f7f5 fb46 	bl	80004d8 <__aeabi_dmul>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	3501      	adds	r5, #1
 800ae50:	1076      	asrs	r6, r6, #1
 800ae52:	3708      	adds	r7, #8
 800ae54:	e76e      	b.n	800ad34 <_dtoa_r+0x3a4>
 800ae56:	2502      	movs	r5, #2
 800ae58:	e771      	b.n	800ad3e <_dtoa_r+0x3ae>
 800ae5a:	4657      	mov	r7, sl
 800ae5c:	4646      	mov	r6, r8
 800ae5e:	e790      	b.n	800ad82 <_dtoa_r+0x3f2>
 800ae60:	4b4d      	ldr	r3, [pc, #308]	; (800af98 <_dtoa_r+0x608>)
 800ae62:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae66:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ae6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d048      	beq.n	800af02 <_dtoa_r+0x572>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	2000      	movs	r0, #0
 800ae76:	494e      	ldr	r1, [pc, #312]	; (800afb0 <_dtoa_r+0x620>)
 800ae78:	f7f5 fc58 	bl	800072c <__aeabi_ddiv>
 800ae7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae80:	f7f5 f972 	bl	8000168 <__aeabi_dsub>
 800ae84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ae88:	9d06      	ldr	r5, [sp, #24]
 800ae8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8e:	f7f5 fdd3 	bl	8000a38 <__aeabi_d2iz>
 800ae92:	9011      	str	r0, [sp, #68]	; 0x44
 800ae94:	f7f5 fab6 	bl	8000404 <__aeabi_i2d>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea0:	f7f5 f962 	bl	8000168 <__aeabi_dsub>
 800aea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeaa:	3330      	adds	r3, #48	; 0x30
 800aeac:	f805 3b01 	strb.w	r3, [r5], #1
 800aeb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aeb4:	f7f5 fd82 	bl	80009bc <__aeabi_dcmplt>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d163      	bne.n	800af84 <_dtoa_r+0x5f4>
 800aebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aec0:	2000      	movs	r0, #0
 800aec2:	4937      	ldr	r1, [pc, #220]	; (800afa0 <_dtoa_r+0x610>)
 800aec4:	f7f5 f950 	bl	8000168 <__aeabi_dsub>
 800aec8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aecc:	f7f5 fd76 	bl	80009bc <__aeabi_dcmplt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f040 80b5 	bne.w	800b040 <_dtoa_r+0x6b0>
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	1aeb      	subs	r3, r5, r3
 800aeda:	429e      	cmp	r6, r3
 800aedc:	f77f af7c 	ble.w	800add8 <_dtoa_r+0x448>
 800aee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aee4:	2200      	movs	r2, #0
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <_dtoa_r+0x614>)
 800aee8:	f7f5 faf6 	bl	80004d8 <__aeabi_dmul>
 800aeec:	2200      	movs	r2, #0
 800aeee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aef6:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <_dtoa_r+0x614>)
 800aef8:	f7f5 faee 	bl	80004d8 <__aeabi_dmul>
 800aefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af00:	e7c3      	b.n	800ae8a <_dtoa_r+0x4fa>
 800af02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af06:	f7f5 fae7 	bl	80004d8 <__aeabi_dmul>
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af10:	199d      	adds	r5, r3, r6
 800af12:	461e      	mov	r6, r3
 800af14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af18:	f7f5 fd8e 	bl	8000a38 <__aeabi_d2iz>
 800af1c:	9011      	str	r0, [sp, #68]	; 0x44
 800af1e:	f7f5 fa71 	bl	8000404 <__aeabi_i2d>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2a:	f7f5 f91d 	bl	8000168 <__aeabi_dsub>
 800af2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af34:	3330      	adds	r3, #48	; 0x30
 800af36:	f806 3b01 	strb.w	r3, [r6], #1
 800af3a:	42ae      	cmp	r6, r5
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	d124      	bne.n	800af8c <_dtoa_r+0x5fc>
 800af42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af46:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <_dtoa_r+0x620>)
 800af48:	f7f5 f910 	bl	800016c <__adddf3>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af54:	f7f5 fd50 	bl	80009f8 <__aeabi_dcmpgt>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d171      	bne.n	800b040 <_dtoa_r+0x6b0>
 800af5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af60:	2000      	movs	r0, #0
 800af62:	4913      	ldr	r1, [pc, #76]	; (800afb0 <_dtoa_r+0x620>)
 800af64:	f7f5 f900 	bl	8000168 <__aeabi_dsub>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af70:	f7f5 fd24 	bl	80009bc <__aeabi_dcmplt>
 800af74:	2800      	cmp	r0, #0
 800af76:	f43f af2f 	beq.w	800add8 <_dtoa_r+0x448>
 800af7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af7e:	1e6a      	subs	r2, r5, #1
 800af80:	2b30      	cmp	r3, #48	; 0x30
 800af82:	d001      	beq.n	800af88 <_dtoa_r+0x5f8>
 800af84:	46ba      	mov	sl, r7
 800af86:	e04a      	b.n	800b01e <_dtoa_r+0x68e>
 800af88:	4615      	mov	r5, r2
 800af8a:	e7f6      	b.n	800af7a <_dtoa_r+0x5ea>
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <_dtoa_r+0x614>)
 800af8e:	f7f5 faa3 	bl	80004d8 <__aeabi_dmul>
 800af92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af96:	e7bd      	b.n	800af14 <_dtoa_r+0x584>
 800af98:	0800db28 	.word	0x0800db28
 800af9c:	0800db00 	.word	0x0800db00
 800afa0:	3ff00000 	.word	0x3ff00000
 800afa4:	40240000 	.word	0x40240000
 800afa8:	401c0000 	.word	0x401c0000
 800afac:	40140000 	.word	0x40140000
 800afb0:	3fe00000 	.word	0x3fe00000
 800afb4:	9d06      	ldr	r5, [sp, #24]
 800afb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afbe:	4630      	mov	r0, r6
 800afc0:	4639      	mov	r1, r7
 800afc2:	f7f5 fbb3 	bl	800072c <__aeabi_ddiv>
 800afc6:	f7f5 fd37 	bl	8000a38 <__aeabi_d2iz>
 800afca:	4681      	mov	r9, r0
 800afcc:	f7f5 fa1a 	bl	8000404 <__aeabi_i2d>
 800afd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd4:	f7f5 fa80 	bl	80004d8 <__aeabi_dmul>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4630      	mov	r0, r6
 800afde:	4639      	mov	r1, r7
 800afe0:	f7f5 f8c2 	bl	8000168 <__aeabi_dsub>
 800afe4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800afe8:	f805 6b01 	strb.w	r6, [r5], #1
 800afec:	9e06      	ldr	r6, [sp, #24]
 800afee:	4602      	mov	r2, r0
 800aff0:	1bae      	subs	r6, r5, r6
 800aff2:	45b0      	cmp	r8, r6
 800aff4:	460b      	mov	r3, r1
 800aff6:	d135      	bne.n	800b064 <_dtoa_r+0x6d4>
 800aff8:	f7f5 f8b8 	bl	800016c <__adddf3>
 800affc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b000:	4606      	mov	r6, r0
 800b002:	460f      	mov	r7, r1
 800b004:	f7f5 fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 800b008:	b9c8      	cbnz	r0, 800b03e <_dtoa_r+0x6ae>
 800b00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7f5 fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 800b016:	b110      	cbz	r0, 800b01e <_dtoa_r+0x68e>
 800b018:	f019 0f01 	tst.w	r9, #1
 800b01c:	d10f      	bne.n	800b03e <_dtoa_r+0x6ae>
 800b01e:	4659      	mov	r1, fp
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fad7 	bl	800b5d4 <_Bfree>
 800b026:	2300      	movs	r3, #0
 800b028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b02a:	702b      	strb	r3, [r5, #0]
 800b02c:	f10a 0301 	add.w	r3, sl, #1
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b034:	2b00      	cmp	r3, #0
 800b036:	f43f acf3 	beq.w	800aa20 <_dtoa_r+0x90>
 800b03a:	601d      	str	r5, [r3, #0]
 800b03c:	e4f0      	b.n	800aa20 <_dtoa_r+0x90>
 800b03e:	4657      	mov	r7, sl
 800b040:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b044:	1e6b      	subs	r3, r5, #1
 800b046:	2a39      	cmp	r2, #57	; 0x39
 800b048:	d106      	bne.n	800b058 <_dtoa_r+0x6c8>
 800b04a:	9a06      	ldr	r2, [sp, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d107      	bne.n	800b060 <_dtoa_r+0x6d0>
 800b050:	2330      	movs	r3, #48	; 0x30
 800b052:	7013      	strb	r3, [r2, #0]
 800b054:	4613      	mov	r3, r2
 800b056:	3701      	adds	r7, #1
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	3201      	adds	r2, #1
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e791      	b.n	800af84 <_dtoa_r+0x5f4>
 800b060:	461d      	mov	r5, r3
 800b062:	e7ed      	b.n	800b040 <_dtoa_r+0x6b0>
 800b064:	2200      	movs	r2, #0
 800b066:	4b99      	ldr	r3, [pc, #612]	; (800b2cc <_dtoa_r+0x93c>)
 800b068:	f7f5 fa36 	bl	80004d8 <__aeabi_dmul>
 800b06c:	2200      	movs	r2, #0
 800b06e:	2300      	movs	r3, #0
 800b070:	4606      	mov	r6, r0
 800b072:	460f      	mov	r7, r1
 800b074:	f7f5 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d09e      	beq.n	800afba <_dtoa_r+0x62a>
 800b07c:	e7cf      	b.n	800b01e <_dtoa_r+0x68e>
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	2a00      	cmp	r2, #0
 800b082:	f000 8088 	beq.w	800b196 <_dtoa_r+0x806>
 800b086:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b088:	2a01      	cmp	r2, #1
 800b08a:	dc6d      	bgt.n	800b168 <_dtoa_r+0x7d8>
 800b08c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b08e:	2a00      	cmp	r2, #0
 800b090:	d066      	beq.n	800b160 <_dtoa_r+0x7d0>
 800b092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b096:	464d      	mov	r5, r9
 800b098:	9e08      	ldr	r6, [sp, #32]
 800b09a:	9a07      	ldr	r2, [sp, #28]
 800b09c:	2101      	movs	r1, #1
 800b09e:	441a      	add	r2, r3
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	4499      	add	r9, r3
 800b0a4:	9207      	str	r2, [sp, #28]
 800b0a6:	f000 fb35 	bl	800b714 <__i2b>
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	2d00      	cmp	r5, #0
 800b0ae:	dd0b      	ble.n	800b0c8 <_dtoa_r+0x738>
 800b0b0:	9b07      	ldr	r3, [sp, #28]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dd08      	ble.n	800b0c8 <_dtoa_r+0x738>
 800b0b6:	42ab      	cmp	r3, r5
 800b0b8:	bfa8      	it	ge
 800b0ba:	462b      	movge	r3, r5
 800b0bc:	9a07      	ldr	r2, [sp, #28]
 800b0be:	eba9 0903 	sub.w	r9, r9, r3
 800b0c2:	1aed      	subs	r5, r5, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	b1eb      	cbz	r3, 800b108 <_dtoa_r+0x778>
 800b0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d065      	beq.n	800b19e <_dtoa_r+0x80e>
 800b0d2:	b18e      	cbz	r6, 800b0f8 <_dtoa_r+0x768>
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fbb9 	bl	800b850 <__pow5mult>
 800b0de:	465a      	mov	r2, fp
 800b0e0:	4601      	mov	r1, r0
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 fb1e 	bl	800b726 <__multiply>
 800b0ea:	4659      	mov	r1, fp
 800b0ec:	900a      	str	r0, [sp, #40]	; 0x28
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fa70 	bl	800b5d4 <_Bfree>
 800b0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f6:	469b      	mov	fp, r3
 800b0f8:	9b08      	ldr	r3, [sp, #32]
 800b0fa:	1b9a      	subs	r2, r3, r6
 800b0fc:	d004      	beq.n	800b108 <_dtoa_r+0x778>
 800b0fe:	4659      	mov	r1, fp
 800b100:	4620      	mov	r0, r4
 800b102:	f000 fba5 	bl	800b850 <__pow5mult>
 800b106:	4683      	mov	fp, r0
 800b108:	2101      	movs	r1, #1
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fb02 	bl	800b714 <__i2b>
 800b110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b112:	4606      	mov	r6, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 81c6 	beq.w	800b4a6 <_dtoa_r+0xb16>
 800b11a:	461a      	mov	r2, r3
 800b11c:	4601      	mov	r1, r0
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 fb96 	bl	800b850 <__pow5mult>
 800b124:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b126:	4606      	mov	r6, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	dc3e      	bgt.n	800b1aa <_dtoa_r+0x81a>
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d137      	bne.n	800b1a2 <_dtoa_r+0x812>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d134      	bne.n	800b1a6 <_dtoa_r+0x816>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b142:	0d1b      	lsrs	r3, r3, #20
 800b144:	051b      	lsls	r3, r3, #20
 800b146:	b12b      	cbz	r3, 800b154 <_dtoa_r+0x7c4>
 800b148:	9b07      	ldr	r3, [sp, #28]
 800b14a:	f109 0901 	add.w	r9, r9, #1
 800b14e:	3301      	adds	r3, #1
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	2301      	movs	r3, #1
 800b154:	9308      	str	r3, [sp, #32]
 800b156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d128      	bne.n	800b1ae <_dtoa_r+0x81e>
 800b15c:	2001      	movs	r0, #1
 800b15e:	e02e      	b.n	800b1be <_dtoa_r+0x82e>
 800b160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b162:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b166:	e796      	b.n	800b096 <_dtoa_r+0x706>
 800b168:	9b08      	ldr	r3, [sp, #32]
 800b16a:	f108 36ff 	add.w	r6, r8, #4294967295
 800b16e:	42b3      	cmp	r3, r6
 800b170:	bfb7      	itett	lt
 800b172:	9b08      	ldrlt	r3, [sp, #32]
 800b174:	1b9e      	subge	r6, r3, r6
 800b176:	1af2      	sublt	r2, r6, r3
 800b178:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b17a:	bfbf      	itttt	lt
 800b17c:	9608      	strlt	r6, [sp, #32]
 800b17e:	189b      	addlt	r3, r3, r2
 800b180:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b182:	2600      	movlt	r6, #0
 800b184:	f1b8 0f00 	cmp.w	r8, #0
 800b188:	bfb9      	ittee	lt
 800b18a:	eba9 0508 	sublt.w	r5, r9, r8
 800b18e:	2300      	movlt	r3, #0
 800b190:	464d      	movge	r5, r9
 800b192:	4643      	movge	r3, r8
 800b194:	e781      	b.n	800b09a <_dtoa_r+0x70a>
 800b196:	9e08      	ldr	r6, [sp, #32]
 800b198:	464d      	mov	r5, r9
 800b19a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b19c:	e786      	b.n	800b0ac <_dtoa_r+0x71c>
 800b19e:	9a08      	ldr	r2, [sp, #32]
 800b1a0:	e7ad      	b.n	800b0fe <_dtoa_r+0x76e>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e7d6      	b.n	800b154 <_dtoa_r+0x7c4>
 800b1a6:	9b02      	ldr	r3, [sp, #8]
 800b1a8:	e7d4      	b.n	800b154 <_dtoa_r+0x7c4>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9308      	str	r3, [sp, #32]
 800b1ae:	6933      	ldr	r3, [r6, #16]
 800b1b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1b4:	6918      	ldr	r0, [r3, #16]
 800b1b6:	f000 fa5f 	bl	800b678 <__hi0bits>
 800b1ba:	f1c0 0020 	rsb	r0, r0, #32
 800b1be:	9b07      	ldr	r3, [sp, #28]
 800b1c0:	4418      	add	r0, r3
 800b1c2:	f010 001f 	ands.w	r0, r0, #31
 800b1c6:	d047      	beq.n	800b258 <_dtoa_r+0x8c8>
 800b1c8:	f1c0 0320 	rsb	r3, r0, #32
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	dd3b      	ble.n	800b248 <_dtoa_r+0x8b8>
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	f1c0 001c 	rsb	r0, r0, #28
 800b1d6:	4481      	add	r9, r0
 800b1d8:	4405      	add	r5, r0
 800b1da:	4403      	add	r3, r0
 800b1dc:	9307      	str	r3, [sp, #28]
 800b1de:	f1b9 0f00 	cmp.w	r9, #0
 800b1e2:	dd05      	ble.n	800b1f0 <_dtoa_r+0x860>
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	464a      	mov	r2, r9
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 fb7f 	bl	800b8ec <__lshift>
 800b1ee:	4683      	mov	fp, r0
 800b1f0:	9b07      	ldr	r3, [sp, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dd05      	ble.n	800b202 <_dtoa_r+0x872>
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fb76 	bl	800b8ec <__lshift>
 800b200:	4606      	mov	r6, r0
 800b202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b204:	b353      	cbz	r3, 800b25c <_dtoa_r+0x8cc>
 800b206:	4631      	mov	r1, r6
 800b208:	4658      	mov	r0, fp
 800b20a:	f000 fbc3 	bl	800b994 <__mcmp>
 800b20e:	2800      	cmp	r0, #0
 800b210:	da24      	bge.n	800b25c <_dtoa_r+0x8cc>
 800b212:	2300      	movs	r3, #0
 800b214:	4659      	mov	r1, fp
 800b216:	220a      	movs	r2, #10
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 f9f2 	bl	800b602 <__multadd>
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b224:	4683      	mov	fp, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 8144 	beq.w	800b4b4 <_dtoa_r+0xb24>
 800b22c:	2300      	movs	r3, #0
 800b22e:	4639      	mov	r1, r7
 800b230:	220a      	movs	r2, #10
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f9e5 	bl	800b602 <__multadd>
 800b238:	9b04      	ldr	r3, [sp, #16]
 800b23a:	4607      	mov	r7, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dc4d      	bgt.n	800b2dc <_dtoa_r+0x94c>
 800b240:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b242:	2b02      	cmp	r3, #2
 800b244:	dd4a      	ble.n	800b2dc <_dtoa_r+0x94c>
 800b246:	e011      	b.n	800b26c <_dtoa_r+0x8dc>
 800b248:	d0c9      	beq.n	800b1de <_dtoa_r+0x84e>
 800b24a:	9a07      	ldr	r2, [sp, #28]
 800b24c:	331c      	adds	r3, #28
 800b24e:	441a      	add	r2, r3
 800b250:	4499      	add	r9, r3
 800b252:	441d      	add	r5, r3
 800b254:	4613      	mov	r3, r2
 800b256:	e7c1      	b.n	800b1dc <_dtoa_r+0x84c>
 800b258:	4603      	mov	r3, r0
 800b25a:	e7f6      	b.n	800b24a <_dtoa_r+0x8ba>
 800b25c:	f1b8 0f00 	cmp.w	r8, #0
 800b260:	dc36      	bgt.n	800b2d0 <_dtoa_r+0x940>
 800b262:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b264:	2b02      	cmp	r3, #2
 800b266:	dd33      	ble.n	800b2d0 <_dtoa_r+0x940>
 800b268:	f8cd 8010 	str.w	r8, [sp, #16]
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	b963      	cbnz	r3, 800b28a <_dtoa_r+0x8fa>
 800b270:	4631      	mov	r1, r6
 800b272:	2205      	movs	r2, #5
 800b274:	4620      	mov	r0, r4
 800b276:	f000 f9c4 	bl	800b602 <__multadd>
 800b27a:	4601      	mov	r1, r0
 800b27c:	4606      	mov	r6, r0
 800b27e:	4658      	mov	r0, fp
 800b280:	f000 fb88 	bl	800b994 <__mcmp>
 800b284:	2800      	cmp	r0, #0
 800b286:	f73f add3 	bgt.w	800ae30 <_dtoa_r+0x4a0>
 800b28a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b28c:	9d06      	ldr	r5, [sp, #24]
 800b28e:	ea6f 0a03 	mvn.w	sl, r3
 800b292:	f04f 0900 	mov.w	r9, #0
 800b296:	4631      	mov	r1, r6
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 f99b 	bl	800b5d4 <_Bfree>
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	f43f aebd 	beq.w	800b01e <_dtoa_r+0x68e>
 800b2a4:	f1b9 0f00 	cmp.w	r9, #0
 800b2a8:	d005      	beq.n	800b2b6 <_dtoa_r+0x926>
 800b2aa:	45b9      	cmp	r9, r7
 800b2ac:	d003      	beq.n	800b2b6 <_dtoa_r+0x926>
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 f98f 	bl	800b5d4 <_Bfree>
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 f98b 	bl	800b5d4 <_Bfree>
 800b2be:	e6ae      	b.n	800b01e <_dtoa_r+0x68e>
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	4637      	mov	r7, r6
 800b2c4:	e7e1      	b.n	800b28a <_dtoa_r+0x8fa>
 800b2c6:	46ba      	mov	sl, r7
 800b2c8:	4637      	mov	r7, r6
 800b2ca:	e5b1      	b.n	800ae30 <_dtoa_r+0x4a0>
 800b2cc:	40240000 	.word	0x40240000
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 80f3 	beq.w	800b4c2 <_dtoa_r+0xb32>
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	dd05      	ble.n	800b2ec <_dtoa_r+0x95c>
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	462a      	mov	r2, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fb01 	bl	800b8ec <__lshift>
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	9b08      	ldr	r3, [sp, #32]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d04c      	beq.n	800b38c <_dtoa_r+0x9fc>
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 f939 	bl	800b56c <_Balloc>
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	f107 010c 	add.w	r1, r7, #12
 800b302:	3202      	adds	r2, #2
 800b304:	0092      	lsls	r2, r2, #2
 800b306:	300c      	adds	r0, #12
 800b308:	f7fe fd9e 	bl	8009e48 <memcpy>
 800b30c:	2201      	movs	r2, #1
 800b30e:	4629      	mov	r1, r5
 800b310:	4620      	mov	r0, r4
 800b312:	f000 faeb 	bl	800b8ec <__lshift>
 800b316:	46b9      	mov	r9, r7
 800b318:	4607      	mov	r7, r0
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	9307      	str	r3, [sp, #28]
 800b31e:	9b02      	ldr	r3, [sp, #8]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	9308      	str	r3, [sp, #32]
 800b326:	4631      	mov	r1, r6
 800b328:	4658      	mov	r0, fp
 800b32a:	f7ff faa1 	bl	800a870 <quorem>
 800b32e:	4649      	mov	r1, r9
 800b330:	4605      	mov	r5, r0
 800b332:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b336:	4658      	mov	r0, fp
 800b338:	f000 fb2c 	bl	800b994 <__mcmp>
 800b33c:	463a      	mov	r2, r7
 800b33e:	9002      	str	r0, [sp, #8]
 800b340:	4631      	mov	r1, r6
 800b342:	4620      	mov	r0, r4
 800b344:	f000 fb40 	bl	800b9c8 <__mdiff>
 800b348:	68c3      	ldr	r3, [r0, #12]
 800b34a:	4602      	mov	r2, r0
 800b34c:	bb03      	cbnz	r3, 800b390 <_dtoa_r+0xa00>
 800b34e:	4601      	mov	r1, r0
 800b350:	9009      	str	r0, [sp, #36]	; 0x24
 800b352:	4658      	mov	r0, fp
 800b354:	f000 fb1e 	bl	800b994 <__mcmp>
 800b358:	4603      	mov	r3, r0
 800b35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b35c:	4611      	mov	r1, r2
 800b35e:	4620      	mov	r0, r4
 800b360:	9309      	str	r3, [sp, #36]	; 0x24
 800b362:	f000 f937 	bl	800b5d4 <_Bfree>
 800b366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b368:	b9a3      	cbnz	r3, 800b394 <_dtoa_r+0xa04>
 800b36a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b36c:	b992      	cbnz	r2, 800b394 <_dtoa_r+0xa04>
 800b36e:	9a08      	ldr	r2, [sp, #32]
 800b370:	b982      	cbnz	r2, 800b394 <_dtoa_r+0xa04>
 800b372:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b376:	d029      	beq.n	800b3cc <_dtoa_r+0xa3c>
 800b378:	9b02      	ldr	r3, [sp, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd01      	ble.n	800b382 <_dtoa_r+0x9f2>
 800b37e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b382:	9b07      	ldr	r3, [sp, #28]
 800b384:	1c5d      	adds	r5, r3, #1
 800b386:	f883 8000 	strb.w	r8, [r3]
 800b38a:	e784      	b.n	800b296 <_dtoa_r+0x906>
 800b38c:	4638      	mov	r0, r7
 800b38e:	e7c2      	b.n	800b316 <_dtoa_r+0x986>
 800b390:	2301      	movs	r3, #1
 800b392:	e7e3      	b.n	800b35c <_dtoa_r+0x9cc>
 800b394:	9a02      	ldr	r2, [sp, #8]
 800b396:	2a00      	cmp	r2, #0
 800b398:	db04      	blt.n	800b3a4 <_dtoa_r+0xa14>
 800b39a:	d123      	bne.n	800b3e4 <_dtoa_r+0xa54>
 800b39c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b39e:	bb0a      	cbnz	r2, 800b3e4 <_dtoa_r+0xa54>
 800b3a0:	9a08      	ldr	r2, [sp, #32]
 800b3a2:	b9fa      	cbnz	r2, 800b3e4 <_dtoa_r+0xa54>
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	ddec      	ble.n	800b382 <_dtoa_r+0x9f2>
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fa9d 	bl	800b8ec <__lshift>
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4683      	mov	fp, r0
 800b3b6:	f000 faed 	bl	800b994 <__mcmp>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	dc03      	bgt.n	800b3c6 <_dtoa_r+0xa36>
 800b3be:	d1e0      	bne.n	800b382 <_dtoa_r+0x9f2>
 800b3c0:	f018 0f01 	tst.w	r8, #1
 800b3c4:	d0dd      	beq.n	800b382 <_dtoa_r+0x9f2>
 800b3c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b3ca:	d1d8      	bne.n	800b37e <_dtoa_r+0x9ee>
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	9a07      	ldr	r2, [sp, #28]
 800b3d0:	1c5d      	adds	r5, r3, #1
 800b3d2:	2339      	movs	r3, #57	; 0x39
 800b3d4:	7013      	strb	r3, [r2, #0]
 800b3d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3da:	1e6a      	subs	r2, r5, #1
 800b3dc:	2b39      	cmp	r3, #57	; 0x39
 800b3de:	d04d      	beq.n	800b47c <_dtoa_r+0xaec>
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	e052      	b.n	800b48a <_dtoa_r+0xafa>
 800b3e4:	9a07      	ldr	r2, [sp, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f102 0501 	add.w	r5, r2, #1
 800b3ec:	dd06      	ble.n	800b3fc <_dtoa_r+0xa6c>
 800b3ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b3f2:	d0eb      	beq.n	800b3cc <_dtoa_r+0xa3c>
 800b3f4:	f108 0801 	add.w	r8, r8, #1
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	e7c4      	b.n	800b386 <_dtoa_r+0x9f6>
 800b3fc:	9b06      	ldr	r3, [sp, #24]
 800b3fe:	9a04      	ldr	r2, [sp, #16]
 800b400:	1aeb      	subs	r3, r5, r3
 800b402:	4293      	cmp	r3, r2
 800b404:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b408:	d021      	beq.n	800b44e <_dtoa_r+0xabe>
 800b40a:	4659      	mov	r1, fp
 800b40c:	2300      	movs	r3, #0
 800b40e:	220a      	movs	r2, #10
 800b410:	4620      	mov	r0, r4
 800b412:	f000 f8f6 	bl	800b602 <__multadd>
 800b416:	45b9      	cmp	r9, r7
 800b418:	4683      	mov	fp, r0
 800b41a:	f04f 0300 	mov.w	r3, #0
 800b41e:	f04f 020a 	mov.w	r2, #10
 800b422:	4649      	mov	r1, r9
 800b424:	4620      	mov	r0, r4
 800b426:	d105      	bne.n	800b434 <_dtoa_r+0xaa4>
 800b428:	f000 f8eb 	bl	800b602 <__multadd>
 800b42c:	4681      	mov	r9, r0
 800b42e:	4607      	mov	r7, r0
 800b430:	9507      	str	r5, [sp, #28]
 800b432:	e778      	b.n	800b326 <_dtoa_r+0x996>
 800b434:	f000 f8e5 	bl	800b602 <__multadd>
 800b438:	4639      	mov	r1, r7
 800b43a:	4681      	mov	r9, r0
 800b43c:	2300      	movs	r3, #0
 800b43e:	220a      	movs	r2, #10
 800b440:	4620      	mov	r0, r4
 800b442:	f000 f8de 	bl	800b602 <__multadd>
 800b446:	4607      	mov	r7, r0
 800b448:	e7f2      	b.n	800b430 <_dtoa_r+0xaa0>
 800b44a:	f04f 0900 	mov.w	r9, #0
 800b44e:	4659      	mov	r1, fp
 800b450:	2201      	movs	r2, #1
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fa4a 	bl	800b8ec <__lshift>
 800b458:	4631      	mov	r1, r6
 800b45a:	4683      	mov	fp, r0
 800b45c:	f000 fa9a 	bl	800b994 <__mcmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	dcb8      	bgt.n	800b3d6 <_dtoa_r+0xa46>
 800b464:	d102      	bne.n	800b46c <_dtoa_r+0xadc>
 800b466:	f018 0f01 	tst.w	r8, #1
 800b46a:	d1b4      	bne.n	800b3d6 <_dtoa_r+0xa46>
 800b46c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b470:	1e6a      	subs	r2, r5, #1
 800b472:	2b30      	cmp	r3, #48	; 0x30
 800b474:	f47f af0f 	bne.w	800b296 <_dtoa_r+0x906>
 800b478:	4615      	mov	r5, r2
 800b47a:	e7f7      	b.n	800b46c <_dtoa_r+0xadc>
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	4293      	cmp	r3, r2
 800b480:	d105      	bne.n	800b48e <_dtoa_r+0xafe>
 800b482:	2331      	movs	r3, #49	; 0x31
 800b484:	9a06      	ldr	r2, [sp, #24]
 800b486:	f10a 0a01 	add.w	sl, sl, #1
 800b48a:	7013      	strb	r3, [r2, #0]
 800b48c:	e703      	b.n	800b296 <_dtoa_r+0x906>
 800b48e:	4615      	mov	r5, r2
 800b490:	e7a1      	b.n	800b3d6 <_dtoa_r+0xa46>
 800b492:	4b17      	ldr	r3, [pc, #92]	; (800b4f0 <_dtoa_r+0xb60>)
 800b494:	f7ff bae1 	b.w	800aa5a <_dtoa_r+0xca>
 800b498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f47f aabb 	bne.w	800aa16 <_dtoa_r+0x86>
 800b4a0:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <_dtoa_r+0xb64>)
 800b4a2:	f7ff bada 	b.w	800aa5a <_dtoa_r+0xca>
 800b4a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	f77f ae3f 	ble.w	800b12c <_dtoa_r+0x79c>
 800b4ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	e653      	b.n	800b15c <_dtoa_r+0x7cc>
 800b4b4:	9b04      	ldr	r3, [sp, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dc03      	bgt.n	800b4c2 <_dtoa_r+0xb32>
 800b4ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	f73f aed5 	bgt.w	800b26c <_dtoa_r+0x8dc>
 800b4c2:	9d06      	ldr	r5, [sp, #24]
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4658      	mov	r0, fp
 800b4c8:	f7ff f9d2 	bl	800a870 <quorem>
 800b4cc:	9b06      	ldr	r3, [sp, #24]
 800b4ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b4d2:	f805 8b01 	strb.w	r8, [r5], #1
 800b4d6:	9a04      	ldr	r2, [sp, #16]
 800b4d8:	1aeb      	subs	r3, r5, r3
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	ddb5      	ble.n	800b44a <_dtoa_r+0xaba>
 800b4de:	4659      	mov	r1, fp
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	220a      	movs	r2, #10
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 f88c 	bl	800b602 <__multadd>
 800b4ea:	4683      	mov	fp, r0
 800b4ec:	e7ea      	b.n	800b4c4 <_dtoa_r+0xb34>
 800b4ee:	bf00      	nop
 800b4f0:	0800dac0 	.word	0x0800dac0
 800b4f4:	0800dae4 	.word	0x0800dae4

0800b4f8 <__locale_ctype_ptr_l>:
 800b4f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b4fc:	4770      	bx	lr
	...

0800b500 <_localeconv_r>:
 800b500:	4b04      	ldr	r3, [pc, #16]	; (800b514 <_localeconv_r+0x14>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6a18      	ldr	r0, [r3, #32]
 800b506:	4b04      	ldr	r3, [pc, #16]	; (800b518 <_localeconv_r+0x18>)
 800b508:	2800      	cmp	r0, #0
 800b50a:	bf08      	it	eq
 800b50c:	4618      	moveq	r0, r3
 800b50e:	30f0      	adds	r0, #240	; 0xf0
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000014 	.word	0x20000014
 800b518:	20000078 	.word	0x20000078

0800b51c <malloc>:
 800b51c:	4b02      	ldr	r3, [pc, #8]	; (800b528 <malloc+0xc>)
 800b51e:	4601      	mov	r1, r0
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f000 bb59 	b.w	800bbd8 <_malloc_r>
 800b526:	bf00      	nop
 800b528:	20000014 	.word	0x20000014

0800b52c <__ascii_mbtowc>:
 800b52c:	b082      	sub	sp, #8
 800b52e:	b901      	cbnz	r1, 800b532 <__ascii_mbtowc+0x6>
 800b530:	a901      	add	r1, sp, #4
 800b532:	b142      	cbz	r2, 800b546 <__ascii_mbtowc+0x1a>
 800b534:	b14b      	cbz	r3, 800b54a <__ascii_mbtowc+0x1e>
 800b536:	7813      	ldrb	r3, [r2, #0]
 800b538:	600b      	str	r3, [r1, #0]
 800b53a:	7812      	ldrb	r2, [r2, #0]
 800b53c:	1c10      	adds	r0, r2, #0
 800b53e:	bf18      	it	ne
 800b540:	2001      	movne	r0, #1
 800b542:	b002      	add	sp, #8
 800b544:	4770      	bx	lr
 800b546:	4610      	mov	r0, r2
 800b548:	e7fb      	b.n	800b542 <__ascii_mbtowc+0x16>
 800b54a:	f06f 0001 	mvn.w	r0, #1
 800b54e:	e7f8      	b.n	800b542 <__ascii_mbtowc+0x16>

0800b550 <memchr>:
 800b550:	b510      	push	{r4, lr}
 800b552:	b2c9      	uxtb	r1, r1
 800b554:	4402      	add	r2, r0
 800b556:	4290      	cmp	r0, r2
 800b558:	4603      	mov	r3, r0
 800b55a:	d101      	bne.n	800b560 <memchr+0x10>
 800b55c:	2300      	movs	r3, #0
 800b55e:	e003      	b.n	800b568 <memchr+0x18>
 800b560:	781c      	ldrb	r4, [r3, #0]
 800b562:	3001      	adds	r0, #1
 800b564:	428c      	cmp	r4, r1
 800b566:	d1f6      	bne.n	800b556 <memchr+0x6>
 800b568:	4618      	mov	r0, r3
 800b56a:	bd10      	pop	{r4, pc}

0800b56c <_Balloc>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b570:	4604      	mov	r4, r0
 800b572:	460e      	mov	r6, r1
 800b574:	b93d      	cbnz	r5, 800b586 <_Balloc+0x1a>
 800b576:	2010      	movs	r0, #16
 800b578:	f7ff ffd0 	bl	800b51c <malloc>
 800b57c:	6260      	str	r0, [r4, #36]	; 0x24
 800b57e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b582:	6005      	str	r5, [r0, #0]
 800b584:	60c5      	str	r5, [r0, #12]
 800b586:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b588:	68eb      	ldr	r3, [r5, #12]
 800b58a:	b183      	cbz	r3, 800b5ae <_Balloc+0x42>
 800b58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b594:	b9b8      	cbnz	r0, 800b5c6 <_Balloc+0x5a>
 800b596:	2101      	movs	r1, #1
 800b598:	fa01 f506 	lsl.w	r5, r1, r6
 800b59c:	1d6a      	adds	r2, r5, #5
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fabe 	bl	800bb22 <_calloc_r>
 800b5a6:	b160      	cbz	r0, 800b5c2 <_Balloc+0x56>
 800b5a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b5ac:	e00e      	b.n	800b5cc <_Balloc+0x60>
 800b5ae:	2221      	movs	r2, #33	; 0x21
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f000 fab5 	bl	800bb22 <_calloc_r>
 800b5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ba:	60e8      	str	r0, [r5, #12]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1e4      	bne.n	800b58c <_Balloc+0x20>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	6802      	ldr	r2, [r0, #0]
 800b5c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5d2:	e7f7      	b.n	800b5c4 <_Balloc+0x58>

0800b5d4 <_Bfree>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5d8:	4606      	mov	r6, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	b93c      	cbnz	r4, 800b5ee <_Bfree+0x1a>
 800b5de:	2010      	movs	r0, #16
 800b5e0:	f7ff ff9c 	bl	800b51c <malloc>
 800b5e4:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5ea:	6004      	str	r4, [r0, #0]
 800b5ec:	60c4      	str	r4, [r0, #12]
 800b5ee:	b13d      	cbz	r5, 800b600 <_Bfree+0x2c>
 800b5f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5f2:	686a      	ldr	r2, [r5, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5fa:	6029      	str	r1, [r5, #0]
 800b5fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b600:	bd70      	pop	{r4, r5, r6, pc}

0800b602 <__multadd>:
 800b602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	461f      	mov	r7, r3
 800b608:	4606      	mov	r6, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	2300      	movs	r3, #0
 800b60e:	690d      	ldr	r5, [r1, #16]
 800b610:	f101 0c14 	add.w	ip, r1, #20
 800b614:	f8dc 0000 	ldr.w	r0, [ip]
 800b618:	3301      	adds	r3, #1
 800b61a:	b281      	uxth	r1, r0
 800b61c:	fb02 7101 	mla	r1, r2, r1, r7
 800b620:	0c00      	lsrs	r0, r0, #16
 800b622:	0c0f      	lsrs	r7, r1, #16
 800b624:	fb02 7000 	mla	r0, r2, r0, r7
 800b628:	b289      	uxth	r1, r1
 800b62a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b62e:	429d      	cmp	r5, r3
 800b630:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b634:	f84c 1b04 	str.w	r1, [ip], #4
 800b638:	dcec      	bgt.n	800b614 <__multadd+0x12>
 800b63a:	b1d7      	cbz	r7, 800b672 <__multadd+0x70>
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	42ab      	cmp	r3, r5
 800b640:	dc12      	bgt.n	800b668 <__multadd+0x66>
 800b642:	6861      	ldr	r1, [r4, #4]
 800b644:	4630      	mov	r0, r6
 800b646:	3101      	adds	r1, #1
 800b648:	f7ff ff90 	bl	800b56c <_Balloc>
 800b64c:	4680      	mov	r8, r0
 800b64e:	6922      	ldr	r2, [r4, #16]
 800b650:	f104 010c 	add.w	r1, r4, #12
 800b654:	3202      	adds	r2, #2
 800b656:	0092      	lsls	r2, r2, #2
 800b658:	300c      	adds	r0, #12
 800b65a:	f7fe fbf5 	bl	8009e48 <memcpy>
 800b65e:	4621      	mov	r1, r4
 800b660:	4630      	mov	r0, r6
 800b662:	f7ff ffb7 	bl	800b5d4 <_Bfree>
 800b666:	4644      	mov	r4, r8
 800b668:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b66c:	3501      	adds	r5, #1
 800b66e:	615f      	str	r7, [r3, #20]
 800b670:	6125      	str	r5, [r4, #16]
 800b672:	4620      	mov	r0, r4
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b678 <__hi0bits>:
 800b678:	0c02      	lsrs	r2, r0, #16
 800b67a:	0412      	lsls	r2, r2, #16
 800b67c:	4603      	mov	r3, r0
 800b67e:	b9b2      	cbnz	r2, 800b6ae <__hi0bits+0x36>
 800b680:	0403      	lsls	r3, r0, #16
 800b682:	2010      	movs	r0, #16
 800b684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b688:	bf04      	itt	eq
 800b68a:	021b      	lsleq	r3, r3, #8
 800b68c:	3008      	addeq	r0, #8
 800b68e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b692:	bf04      	itt	eq
 800b694:	011b      	lsleq	r3, r3, #4
 800b696:	3004      	addeq	r0, #4
 800b698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b69c:	bf04      	itt	eq
 800b69e:	009b      	lsleq	r3, r3, #2
 800b6a0:	3002      	addeq	r0, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	db06      	blt.n	800b6b4 <__hi0bits+0x3c>
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	d503      	bpl.n	800b6b2 <__hi0bits+0x3a>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	4770      	bx	lr
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e7e8      	b.n	800b684 <__hi0bits+0xc>
 800b6b2:	2020      	movs	r0, #32
 800b6b4:	4770      	bx	lr

0800b6b6 <__lo0bits>:
 800b6b6:	6803      	ldr	r3, [r0, #0]
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	f013 0207 	ands.w	r2, r3, #7
 800b6be:	d00b      	beq.n	800b6d8 <__lo0bits+0x22>
 800b6c0:	07da      	lsls	r2, r3, #31
 800b6c2:	d423      	bmi.n	800b70c <__lo0bits+0x56>
 800b6c4:	0798      	lsls	r0, r3, #30
 800b6c6:	bf49      	itett	mi
 800b6c8:	085b      	lsrmi	r3, r3, #1
 800b6ca:	089b      	lsrpl	r3, r3, #2
 800b6cc:	2001      	movmi	r0, #1
 800b6ce:	600b      	strmi	r3, [r1, #0]
 800b6d0:	bf5c      	itt	pl
 800b6d2:	600b      	strpl	r3, [r1, #0]
 800b6d4:	2002      	movpl	r0, #2
 800b6d6:	4770      	bx	lr
 800b6d8:	b298      	uxth	r0, r3
 800b6da:	b9a8      	cbnz	r0, 800b708 <__lo0bits+0x52>
 800b6dc:	2010      	movs	r0, #16
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6e4:	bf04      	itt	eq
 800b6e6:	0a1b      	lsreq	r3, r3, #8
 800b6e8:	3008      	addeq	r0, #8
 800b6ea:	071a      	lsls	r2, r3, #28
 800b6ec:	bf04      	itt	eq
 800b6ee:	091b      	lsreq	r3, r3, #4
 800b6f0:	3004      	addeq	r0, #4
 800b6f2:	079a      	lsls	r2, r3, #30
 800b6f4:	bf04      	itt	eq
 800b6f6:	089b      	lsreq	r3, r3, #2
 800b6f8:	3002      	addeq	r0, #2
 800b6fa:	07da      	lsls	r2, r3, #31
 800b6fc:	d402      	bmi.n	800b704 <__lo0bits+0x4e>
 800b6fe:	085b      	lsrs	r3, r3, #1
 800b700:	d006      	beq.n	800b710 <__lo0bits+0x5a>
 800b702:	3001      	adds	r0, #1
 800b704:	600b      	str	r3, [r1, #0]
 800b706:	4770      	bx	lr
 800b708:	4610      	mov	r0, r2
 800b70a:	e7e9      	b.n	800b6e0 <__lo0bits+0x2a>
 800b70c:	2000      	movs	r0, #0
 800b70e:	4770      	bx	lr
 800b710:	2020      	movs	r0, #32
 800b712:	4770      	bx	lr

0800b714 <__i2b>:
 800b714:	b510      	push	{r4, lr}
 800b716:	460c      	mov	r4, r1
 800b718:	2101      	movs	r1, #1
 800b71a:	f7ff ff27 	bl	800b56c <_Balloc>
 800b71e:	2201      	movs	r2, #1
 800b720:	6144      	str	r4, [r0, #20]
 800b722:	6102      	str	r2, [r0, #16]
 800b724:	bd10      	pop	{r4, pc}

0800b726 <__multiply>:
 800b726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	4614      	mov	r4, r2
 800b72c:	690a      	ldr	r2, [r1, #16]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	4688      	mov	r8, r1
 800b732:	429a      	cmp	r2, r3
 800b734:	bfbe      	ittt	lt
 800b736:	460b      	movlt	r3, r1
 800b738:	46a0      	movlt	r8, r4
 800b73a:	461c      	movlt	r4, r3
 800b73c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b740:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b744:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b74c:	eb07 0609 	add.w	r6, r7, r9
 800b750:	42b3      	cmp	r3, r6
 800b752:	bfb8      	it	lt
 800b754:	3101      	addlt	r1, #1
 800b756:	f7ff ff09 	bl	800b56c <_Balloc>
 800b75a:	f100 0514 	add.w	r5, r0, #20
 800b75e:	462b      	mov	r3, r5
 800b760:	2200      	movs	r2, #0
 800b762:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b766:	4573      	cmp	r3, lr
 800b768:	d316      	bcc.n	800b798 <__multiply+0x72>
 800b76a:	f104 0214 	add.w	r2, r4, #20
 800b76e:	f108 0114 	add.w	r1, r8, #20
 800b772:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b776:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	9201      	str	r2, [sp, #4]
 800b780:	4293      	cmp	r3, r2
 800b782:	d80c      	bhi.n	800b79e <__multiply+0x78>
 800b784:	2e00      	cmp	r6, #0
 800b786:	dd03      	ble.n	800b790 <__multiply+0x6a>
 800b788:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d05d      	beq.n	800b84c <__multiply+0x126>
 800b790:	6106      	str	r6, [r0, #16]
 800b792:	b003      	add	sp, #12
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b798:	f843 2b04 	str.w	r2, [r3], #4
 800b79c:	e7e3      	b.n	800b766 <__multiply+0x40>
 800b79e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b7a2:	f1bb 0f00 	cmp.w	fp, #0
 800b7a6:	d023      	beq.n	800b7f0 <__multiply+0xca>
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	46ac      	mov	ip, r5
 800b7ac:	f04f 0800 	mov.w	r8, #0
 800b7b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7b4:	f8dc a000 	ldr.w	sl, [ip]
 800b7b8:	b2a3      	uxth	r3, r4
 800b7ba:	fa1f fa8a 	uxth.w	sl, sl
 800b7be:	fb0b a303 	mla	r3, fp, r3, sl
 800b7c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7c6:	f8dc 4000 	ldr.w	r4, [ip]
 800b7ca:	4443      	add	r3, r8
 800b7cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7d0:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7d4:	46e2      	mov	sl, ip
 800b7d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7e0:	454f      	cmp	r7, r9
 800b7e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7e6:	f84a 3b04 	str.w	r3, [sl], #4
 800b7ea:	d82b      	bhi.n	800b844 <__multiply+0x11e>
 800b7ec:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	3204      	adds	r2, #4
 800b7f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7f8:	f1ba 0f00 	cmp.w	sl, #0
 800b7fc:	d020      	beq.n	800b840 <__multiply+0x11a>
 800b7fe:	4689      	mov	r9, r1
 800b800:	46a8      	mov	r8, r5
 800b802:	f04f 0b00 	mov.w	fp, #0
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	f8b9 c000 	ldrh.w	ip, [r9]
 800b80c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b810:	b29b      	uxth	r3, r3
 800b812:	fb0a 440c 	mla	r4, sl, ip, r4
 800b816:	46c4      	mov	ip, r8
 800b818:	445c      	add	r4, fp
 800b81a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b81e:	f84c 3b04 	str.w	r3, [ip], #4
 800b822:	f859 3b04 	ldr.w	r3, [r9], #4
 800b826:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b82a:	0c1b      	lsrs	r3, r3, #16
 800b82c:	fb0a b303 	mla	r3, sl, r3, fp
 800b830:	454f      	cmp	r7, r9
 800b832:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b836:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b83a:	d805      	bhi.n	800b848 <__multiply+0x122>
 800b83c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b840:	3504      	adds	r5, #4
 800b842:	e79b      	b.n	800b77c <__multiply+0x56>
 800b844:	46d4      	mov	ip, sl
 800b846:	e7b3      	b.n	800b7b0 <__multiply+0x8a>
 800b848:	46e0      	mov	r8, ip
 800b84a:	e7dd      	b.n	800b808 <__multiply+0xe2>
 800b84c:	3e01      	subs	r6, #1
 800b84e:	e799      	b.n	800b784 <__multiply+0x5e>

0800b850 <__pow5mult>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	4615      	mov	r5, r2
 800b856:	f012 0203 	ands.w	r2, r2, #3
 800b85a:	4606      	mov	r6, r0
 800b85c:	460f      	mov	r7, r1
 800b85e:	d007      	beq.n	800b870 <__pow5mult+0x20>
 800b860:	4c21      	ldr	r4, [pc, #132]	; (800b8e8 <__pow5mult+0x98>)
 800b862:	3a01      	subs	r2, #1
 800b864:	2300      	movs	r3, #0
 800b866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b86a:	f7ff feca 	bl	800b602 <__multadd>
 800b86e:	4607      	mov	r7, r0
 800b870:	10ad      	asrs	r5, r5, #2
 800b872:	d035      	beq.n	800b8e0 <__pow5mult+0x90>
 800b874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b876:	b93c      	cbnz	r4, 800b888 <__pow5mult+0x38>
 800b878:	2010      	movs	r0, #16
 800b87a:	f7ff fe4f 	bl	800b51c <malloc>
 800b87e:	6270      	str	r0, [r6, #36]	; 0x24
 800b880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b884:	6004      	str	r4, [r0, #0]
 800b886:	60c4      	str	r4, [r0, #12]
 800b888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b890:	b94c      	cbnz	r4, 800b8a6 <__pow5mult+0x56>
 800b892:	f240 2171 	movw	r1, #625	; 0x271
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ff3c 	bl	800b714 <__i2b>
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	07eb      	lsls	r3, r5, #31
 800b8ac:	d50a      	bpl.n	800b8c4 <__pow5mult+0x74>
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff37 	bl	800b726 <__multiply>
 800b8b8:	4681      	mov	r9, r0
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff fe89 	bl	800b5d4 <_Bfree>
 800b8c2:	464f      	mov	r7, r9
 800b8c4:	106d      	asrs	r5, r5, #1
 800b8c6:	d00b      	beq.n	800b8e0 <__pow5mult+0x90>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	b938      	cbnz	r0, 800b8dc <__pow5mult+0x8c>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff ff28 	bl	800b726 <__multiply>
 800b8d6:	6020      	str	r0, [r4, #0]
 800b8d8:	f8c0 8000 	str.w	r8, [r0]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	e7e4      	b.n	800b8aa <__pow5mult+0x5a>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800dbf0 	.word	0x0800dbf0

0800b8ec <__lshift>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8fc:	eb0a 0903 	add.w	r9, sl, r3
 800b900:	6849      	ldr	r1, [r1, #4]
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	f109 0501 	add.w	r5, r9, #1
 800b908:	42ab      	cmp	r3, r5
 800b90a:	db32      	blt.n	800b972 <__lshift+0x86>
 800b90c:	4638      	mov	r0, r7
 800b90e:	f7ff fe2d 	bl	800b56c <_Balloc>
 800b912:	2300      	movs	r3, #0
 800b914:	4680      	mov	r8, r0
 800b916:	461a      	mov	r2, r3
 800b918:	f100 0114 	add.w	r1, r0, #20
 800b91c:	4553      	cmp	r3, sl
 800b91e:	db2b      	blt.n	800b978 <__lshift+0x8c>
 800b920:	6920      	ldr	r0, [r4, #16]
 800b922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b926:	f104 0314 	add.w	r3, r4, #20
 800b92a:	f016 021f 	ands.w	r2, r6, #31
 800b92e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b936:	d025      	beq.n	800b984 <__lshift+0x98>
 800b938:	2000      	movs	r0, #0
 800b93a:	f1c2 0e20 	rsb	lr, r2, #32
 800b93e:	468a      	mov	sl, r1
 800b940:	681e      	ldr	r6, [r3, #0]
 800b942:	4096      	lsls	r6, r2
 800b944:	4330      	orrs	r0, r6
 800b946:	f84a 0b04 	str.w	r0, [sl], #4
 800b94a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b94e:	459c      	cmp	ip, r3
 800b950:	fa20 f00e 	lsr.w	r0, r0, lr
 800b954:	d814      	bhi.n	800b980 <__lshift+0x94>
 800b956:	6048      	str	r0, [r1, #4]
 800b958:	b108      	cbz	r0, 800b95e <__lshift+0x72>
 800b95a:	f109 0502 	add.w	r5, r9, #2
 800b95e:	3d01      	subs	r5, #1
 800b960:	4638      	mov	r0, r7
 800b962:	f8c8 5010 	str.w	r5, [r8, #16]
 800b966:	4621      	mov	r1, r4
 800b968:	f7ff fe34 	bl	800b5d4 <_Bfree>
 800b96c:	4640      	mov	r0, r8
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	3101      	adds	r1, #1
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	e7c7      	b.n	800b908 <__lshift+0x1c>
 800b978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b97c:	3301      	adds	r3, #1
 800b97e:	e7cd      	b.n	800b91c <__lshift+0x30>
 800b980:	4651      	mov	r1, sl
 800b982:	e7dc      	b.n	800b93e <__lshift+0x52>
 800b984:	3904      	subs	r1, #4
 800b986:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98a:	459c      	cmp	ip, r3
 800b98c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b990:	d8f9      	bhi.n	800b986 <__lshift+0x9a>
 800b992:	e7e4      	b.n	800b95e <__lshift+0x72>

0800b994 <__mcmp>:
 800b994:	6903      	ldr	r3, [r0, #16]
 800b996:	690a      	ldr	r2, [r1, #16]
 800b998:	b530      	push	{r4, r5, lr}
 800b99a:	1a9b      	subs	r3, r3, r2
 800b99c:	d10c      	bne.n	800b9b8 <__mcmp+0x24>
 800b99e:	0092      	lsls	r2, r2, #2
 800b9a0:	3014      	adds	r0, #20
 800b9a2:	3114      	adds	r1, #20
 800b9a4:	1884      	adds	r4, r0, r2
 800b9a6:	4411      	add	r1, r2
 800b9a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9b0:	4295      	cmp	r5, r2
 800b9b2:	d003      	beq.n	800b9bc <__mcmp+0x28>
 800b9b4:	d305      	bcc.n	800b9c2 <__mcmp+0x2e>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd30      	pop	{r4, r5, pc}
 800b9bc:	42a0      	cmp	r0, r4
 800b9be:	d3f3      	bcc.n	800b9a8 <__mcmp+0x14>
 800b9c0:	e7fa      	b.n	800b9b8 <__mcmp+0x24>
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	e7f7      	b.n	800b9b8 <__mcmp+0x24>

0800b9c8 <__mdiff>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	4614      	mov	r4, r2
 800b9d6:	f7ff ffdd 	bl	800b994 <__mcmp>
 800b9da:	1e06      	subs	r6, r0, #0
 800b9dc:	d108      	bne.n	800b9f0 <__mdiff+0x28>
 800b9de:	4631      	mov	r1, r6
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff fdc3 	bl	800b56c <_Balloc>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f0:	bfa4      	itt	ge
 800b9f2:	4623      	movge	r3, r4
 800b9f4:	462c      	movge	r4, r5
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	6861      	ldr	r1, [r4, #4]
 800b9fa:	bfa6      	itte	ge
 800b9fc:	461d      	movge	r5, r3
 800b9fe:	2600      	movge	r6, #0
 800ba00:	2601      	movlt	r6, #1
 800ba02:	f7ff fdb3 	bl	800b56c <_Balloc>
 800ba06:	f04f 0e00 	mov.w	lr, #0
 800ba0a:	60c6      	str	r6, [r0, #12]
 800ba0c:	692b      	ldr	r3, [r5, #16]
 800ba0e:	6926      	ldr	r6, [r4, #16]
 800ba10:	f104 0214 	add.w	r2, r4, #20
 800ba14:	f105 0914 	add.w	r9, r5, #20
 800ba18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba20:	f100 0114 	add.w	r1, r0, #20
 800ba24:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba28:	f859 5b04 	ldr.w	r5, [r9], #4
 800ba2c:	fa1f f38a 	uxth.w	r3, sl
 800ba30:	4473      	add	r3, lr
 800ba32:	b2ac      	uxth	r4, r5
 800ba34:	1b1b      	subs	r3, r3, r4
 800ba36:	0c2c      	lsrs	r4, r5, #16
 800ba38:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ba3c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ba46:	45c8      	cmp	r8, r9
 800ba48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ba4c:	4694      	mov	ip, r2
 800ba4e:	f841 4b04 	str.w	r4, [r1], #4
 800ba52:	d8e7      	bhi.n	800ba24 <__mdiff+0x5c>
 800ba54:	45bc      	cmp	ip, r7
 800ba56:	d304      	bcc.n	800ba62 <__mdiff+0x9a>
 800ba58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ba5c:	b183      	cbz	r3, 800ba80 <__mdiff+0xb8>
 800ba5e:	6106      	str	r6, [r0, #16]
 800ba60:	e7c4      	b.n	800b9ec <__mdiff+0x24>
 800ba62:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ba66:	b2a2      	uxth	r2, r4
 800ba68:	4472      	add	r2, lr
 800ba6a:	1413      	asrs	r3, r2, #16
 800ba6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ba70:	b292      	uxth	r2, r2
 800ba72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba76:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba7a:	f841 2b04 	str.w	r2, [r1], #4
 800ba7e:	e7e9      	b.n	800ba54 <__mdiff+0x8c>
 800ba80:	3e01      	subs	r6, #1
 800ba82:	e7e9      	b.n	800ba58 <__mdiff+0x90>

0800ba84 <__d2b>:
 800ba84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ba88:	461c      	mov	r4, r3
 800ba8a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ba8e:	2101      	movs	r1, #1
 800ba90:	4690      	mov	r8, r2
 800ba92:	f7ff fd6b 	bl	800b56c <_Balloc>
 800ba96:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ba9a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ba9e:	4607      	mov	r7, r0
 800baa0:	bb34      	cbnz	r4, 800baf0 <__d2b+0x6c>
 800baa2:	9201      	str	r2, [sp, #4]
 800baa4:	f1b8 0200 	subs.w	r2, r8, #0
 800baa8:	d027      	beq.n	800bafa <__d2b+0x76>
 800baaa:	a802      	add	r0, sp, #8
 800baac:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bab0:	f7ff fe01 	bl	800b6b6 <__lo0bits>
 800bab4:	9900      	ldr	r1, [sp, #0]
 800bab6:	b1f0      	cbz	r0, 800baf6 <__d2b+0x72>
 800bab8:	9a01      	ldr	r2, [sp, #4]
 800baba:	f1c0 0320 	rsb	r3, r0, #32
 800babe:	fa02 f303 	lsl.w	r3, r2, r3
 800bac2:	430b      	orrs	r3, r1
 800bac4:	40c2      	lsrs	r2, r0
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	9201      	str	r2, [sp, #4]
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bf14      	ite	ne
 800bad0:	2102      	movne	r1, #2
 800bad2:	2101      	moveq	r1, #1
 800bad4:	61bb      	str	r3, [r7, #24]
 800bad6:	6139      	str	r1, [r7, #16]
 800bad8:	b1c4      	cbz	r4, 800bb0c <__d2b+0x88>
 800bada:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bade:	4404      	add	r4, r0
 800bae0:	6034      	str	r4, [r6, #0]
 800bae2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bae6:	6028      	str	r0, [r5, #0]
 800bae8:	4638      	mov	r0, r7
 800baea:	b002      	add	sp, #8
 800baec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800baf4:	e7d5      	b.n	800baa2 <__d2b+0x1e>
 800baf6:	6179      	str	r1, [r7, #20]
 800baf8:	e7e7      	b.n	800baca <__d2b+0x46>
 800bafa:	a801      	add	r0, sp, #4
 800bafc:	f7ff fddb 	bl	800b6b6 <__lo0bits>
 800bb00:	2101      	movs	r1, #1
 800bb02:	9b01      	ldr	r3, [sp, #4]
 800bb04:	6139      	str	r1, [r7, #16]
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	3020      	adds	r0, #32
 800bb0a:	e7e5      	b.n	800bad8 <__d2b+0x54>
 800bb0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb14:	6030      	str	r0, [r6, #0]
 800bb16:	6918      	ldr	r0, [r3, #16]
 800bb18:	f7ff fdae 	bl	800b678 <__hi0bits>
 800bb1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb20:	e7e1      	b.n	800bae6 <__d2b+0x62>

0800bb22 <_calloc_r>:
 800bb22:	b538      	push	{r3, r4, r5, lr}
 800bb24:	fb02 f401 	mul.w	r4, r2, r1
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f000 f855 	bl	800bbd8 <_malloc_r>
 800bb2e:	4605      	mov	r5, r0
 800bb30:	b118      	cbz	r0, 800bb3a <_calloc_r+0x18>
 800bb32:	4622      	mov	r2, r4
 800bb34:	2100      	movs	r1, #0
 800bb36:	f7fe f992 	bl	8009e5e <memset>
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb40 <_free_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4605      	mov	r5, r0
 800bb44:	2900      	cmp	r1, #0
 800bb46:	d043      	beq.n	800bbd0 <_free_r+0x90>
 800bb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4c:	1f0c      	subs	r4, r1, #4
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfb8      	it	lt
 800bb52:	18e4      	addlt	r4, r4, r3
 800bb54:	f000 fa22 	bl	800bf9c <__malloc_lock>
 800bb58:	4a1e      	ldr	r2, [pc, #120]	; (800bbd4 <_free_r+0x94>)
 800bb5a:	6813      	ldr	r3, [r2, #0]
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	b933      	cbnz	r3, 800bb6e <_free_r+0x2e>
 800bb60:	6063      	str	r3, [r4, #4]
 800bb62:	6014      	str	r4, [r2, #0]
 800bb64:	4628      	mov	r0, r5
 800bb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb6a:	f000 ba18 	b.w	800bf9e <__malloc_unlock>
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	d90b      	bls.n	800bb8a <_free_r+0x4a>
 800bb72:	6821      	ldr	r1, [r4, #0]
 800bb74:	1862      	adds	r2, r4, r1
 800bb76:	4293      	cmp	r3, r2
 800bb78:	bf01      	itttt	eq
 800bb7a:	681a      	ldreq	r2, [r3, #0]
 800bb7c:	685b      	ldreq	r3, [r3, #4]
 800bb7e:	1852      	addeq	r2, r2, r1
 800bb80:	6022      	streq	r2, [r4, #0]
 800bb82:	6063      	str	r3, [r4, #4]
 800bb84:	6004      	str	r4, [r0, #0]
 800bb86:	e7ed      	b.n	800bb64 <_free_r+0x24>
 800bb88:	4613      	mov	r3, r2
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	b10a      	cbz	r2, 800bb92 <_free_r+0x52>
 800bb8e:	42a2      	cmp	r2, r4
 800bb90:	d9fa      	bls.n	800bb88 <_free_r+0x48>
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	1858      	adds	r0, r3, r1
 800bb96:	42a0      	cmp	r0, r4
 800bb98:	d10b      	bne.n	800bbb2 <_free_r+0x72>
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	4401      	add	r1, r0
 800bb9e:	1858      	adds	r0, r3, r1
 800bba0:	4282      	cmp	r2, r0
 800bba2:	6019      	str	r1, [r3, #0]
 800bba4:	d1de      	bne.n	800bb64 <_free_r+0x24>
 800bba6:	6810      	ldr	r0, [r2, #0]
 800bba8:	6852      	ldr	r2, [r2, #4]
 800bbaa:	4401      	add	r1, r0
 800bbac:	6019      	str	r1, [r3, #0]
 800bbae:	605a      	str	r2, [r3, #4]
 800bbb0:	e7d8      	b.n	800bb64 <_free_r+0x24>
 800bbb2:	d902      	bls.n	800bbba <_free_r+0x7a>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	e7d4      	b.n	800bb64 <_free_r+0x24>
 800bbba:	6820      	ldr	r0, [r4, #0]
 800bbbc:	1821      	adds	r1, r4, r0
 800bbbe:	428a      	cmp	r2, r1
 800bbc0:	bf01      	itttt	eq
 800bbc2:	6811      	ldreq	r1, [r2, #0]
 800bbc4:	6852      	ldreq	r2, [r2, #4]
 800bbc6:	1809      	addeq	r1, r1, r0
 800bbc8:	6021      	streq	r1, [r4, #0]
 800bbca:	6062      	str	r2, [r4, #4]
 800bbcc:	605c      	str	r4, [r3, #4]
 800bbce:	e7c9      	b.n	800bb64 <_free_r+0x24>
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20003e30 	.word	0x20003e30

0800bbd8 <_malloc_r>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	1ccd      	adds	r5, r1, #3
 800bbdc:	f025 0503 	bic.w	r5, r5, #3
 800bbe0:	3508      	adds	r5, #8
 800bbe2:	2d0c      	cmp	r5, #12
 800bbe4:	bf38      	it	cc
 800bbe6:	250c      	movcc	r5, #12
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	4606      	mov	r6, r0
 800bbec:	db01      	blt.n	800bbf2 <_malloc_r+0x1a>
 800bbee:	42a9      	cmp	r1, r5
 800bbf0:	d903      	bls.n	800bbfa <_malloc_r+0x22>
 800bbf2:	230c      	movs	r3, #12
 800bbf4:	6033      	str	r3, [r6, #0]
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	f000 f9cf 	bl	800bf9c <__malloc_lock>
 800bbfe:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <_malloc_r+0xac>)
 800bc00:	6814      	ldr	r4, [r2, #0]
 800bc02:	4621      	mov	r1, r4
 800bc04:	b991      	cbnz	r1, 800bc2c <_malloc_r+0x54>
 800bc06:	4c20      	ldr	r4, [pc, #128]	; (800bc88 <_malloc_r+0xb0>)
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	b91b      	cbnz	r3, 800bc14 <_malloc_r+0x3c>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f000 f98f 	bl	800bf30 <_sbrk_r>
 800bc12:	6020      	str	r0, [r4, #0]
 800bc14:	4629      	mov	r1, r5
 800bc16:	4630      	mov	r0, r6
 800bc18:	f000 f98a 	bl	800bf30 <_sbrk_r>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d124      	bne.n	800bc6a <_malloc_r+0x92>
 800bc20:	230c      	movs	r3, #12
 800bc22:	4630      	mov	r0, r6
 800bc24:	6033      	str	r3, [r6, #0]
 800bc26:	f000 f9ba 	bl	800bf9e <__malloc_unlock>
 800bc2a:	e7e4      	b.n	800bbf6 <_malloc_r+0x1e>
 800bc2c:	680b      	ldr	r3, [r1, #0]
 800bc2e:	1b5b      	subs	r3, r3, r5
 800bc30:	d418      	bmi.n	800bc64 <_malloc_r+0x8c>
 800bc32:	2b0b      	cmp	r3, #11
 800bc34:	d90f      	bls.n	800bc56 <_malloc_r+0x7e>
 800bc36:	600b      	str	r3, [r1, #0]
 800bc38:	18cc      	adds	r4, r1, r3
 800bc3a:	50cd      	str	r5, [r1, r3]
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f000 f9ae 	bl	800bf9e <__malloc_unlock>
 800bc42:	f104 000b 	add.w	r0, r4, #11
 800bc46:	1d23      	adds	r3, r4, #4
 800bc48:	f020 0007 	bic.w	r0, r0, #7
 800bc4c:	1ac3      	subs	r3, r0, r3
 800bc4e:	d0d3      	beq.n	800bbf8 <_malloc_r+0x20>
 800bc50:	425a      	negs	r2, r3
 800bc52:	50e2      	str	r2, [r4, r3]
 800bc54:	e7d0      	b.n	800bbf8 <_malloc_r+0x20>
 800bc56:	684b      	ldr	r3, [r1, #4]
 800bc58:	428c      	cmp	r4, r1
 800bc5a:	bf16      	itet	ne
 800bc5c:	6063      	strne	r3, [r4, #4]
 800bc5e:	6013      	streq	r3, [r2, #0]
 800bc60:	460c      	movne	r4, r1
 800bc62:	e7eb      	b.n	800bc3c <_malloc_r+0x64>
 800bc64:	460c      	mov	r4, r1
 800bc66:	6849      	ldr	r1, [r1, #4]
 800bc68:	e7cc      	b.n	800bc04 <_malloc_r+0x2c>
 800bc6a:	1cc4      	adds	r4, r0, #3
 800bc6c:	f024 0403 	bic.w	r4, r4, #3
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d005      	beq.n	800bc80 <_malloc_r+0xa8>
 800bc74:	1a21      	subs	r1, r4, r0
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f95a 	bl	800bf30 <_sbrk_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d0cf      	beq.n	800bc20 <_malloc_r+0x48>
 800bc80:	6025      	str	r5, [r4, #0]
 800bc82:	e7db      	b.n	800bc3c <_malloc_r+0x64>
 800bc84:	20003e30 	.word	0x20003e30
 800bc88:	20003e34 	.word	0x20003e34

0800bc8c <__ssputs_r>:
 800bc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc90:	688e      	ldr	r6, [r1, #8]
 800bc92:	4682      	mov	sl, r0
 800bc94:	429e      	cmp	r6, r3
 800bc96:	460c      	mov	r4, r1
 800bc98:	4690      	mov	r8, r2
 800bc9a:	4699      	mov	r9, r3
 800bc9c:	d837      	bhi.n	800bd0e <__ssputs_r+0x82>
 800bc9e:	898a      	ldrh	r2, [r1, #12]
 800bca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bca4:	d031      	beq.n	800bd0a <__ssputs_r+0x7e>
 800bca6:	2302      	movs	r3, #2
 800bca8:	6825      	ldr	r5, [r4, #0]
 800bcaa:	6909      	ldr	r1, [r1, #16]
 800bcac:	1a6f      	subs	r7, r5, r1
 800bcae:	6965      	ldr	r5, [r4, #20]
 800bcb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800bcb8:	f109 0301 	add.w	r3, r9, #1
 800bcbc:	443b      	add	r3, r7
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	bf38      	it	cc
 800bcc2:	461d      	movcc	r5, r3
 800bcc4:	0553      	lsls	r3, r2, #21
 800bcc6:	d530      	bpl.n	800bd2a <__ssputs_r+0x9e>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7ff ff85 	bl	800bbd8 <_malloc_r>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	b950      	cbnz	r0, 800bce8 <__ssputs_r+0x5c>
 800bcd2:	230c      	movs	r3, #12
 800bcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd8:	f8ca 3000 	str.w	r3, [sl]
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce2:	81a3      	strh	r3, [r4, #12]
 800bce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce8:	463a      	mov	r2, r7
 800bcea:	6921      	ldr	r1, [r4, #16]
 800bcec:	f7fe f8ac 	bl	8009e48 <memcpy>
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	6126      	str	r6, [r4, #16]
 800bcfe:	443e      	add	r6, r7
 800bd00:	6026      	str	r6, [r4, #0]
 800bd02:	464e      	mov	r6, r9
 800bd04:	6165      	str	r5, [r4, #20]
 800bd06:	1bed      	subs	r5, r5, r7
 800bd08:	60a5      	str	r5, [r4, #8]
 800bd0a:	454e      	cmp	r6, r9
 800bd0c:	d900      	bls.n	800bd10 <__ssputs_r+0x84>
 800bd0e:	464e      	mov	r6, r9
 800bd10:	4632      	mov	r2, r6
 800bd12:	4641      	mov	r1, r8
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	f000 f928 	bl	800bf6a <memmove>
 800bd1a:	68a3      	ldr	r3, [r4, #8]
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	1b9b      	subs	r3, r3, r6
 800bd20:	60a3      	str	r3, [r4, #8]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	441e      	add	r6, r3
 800bd26:	6026      	str	r6, [r4, #0]
 800bd28:	e7dc      	b.n	800bce4 <__ssputs_r+0x58>
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	f000 f938 	bl	800bfa0 <_realloc_r>
 800bd30:	4606      	mov	r6, r0
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d1e2      	bne.n	800bcfc <__ssputs_r+0x70>
 800bd36:	6921      	ldr	r1, [r4, #16]
 800bd38:	4650      	mov	r0, sl
 800bd3a:	f7ff ff01 	bl	800bb40 <_free_r>
 800bd3e:	e7c8      	b.n	800bcd2 <__ssputs_r+0x46>

0800bd40 <_svfiprintf_r>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	461d      	mov	r5, r3
 800bd46:	898b      	ldrh	r3, [r1, #12]
 800bd48:	b09d      	sub	sp, #116	; 0x74
 800bd4a:	061f      	lsls	r7, r3, #24
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	4616      	mov	r6, r2
 800bd52:	d50f      	bpl.n	800bd74 <_svfiprintf_r+0x34>
 800bd54:	690b      	ldr	r3, [r1, #16]
 800bd56:	b96b      	cbnz	r3, 800bd74 <_svfiprintf_r+0x34>
 800bd58:	2140      	movs	r1, #64	; 0x40
 800bd5a:	f7ff ff3d 	bl	800bbd8 <_malloc_r>
 800bd5e:	6020      	str	r0, [r4, #0]
 800bd60:	6120      	str	r0, [r4, #16]
 800bd62:	b928      	cbnz	r0, 800bd70 <_svfiprintf_r+0x30>
 800bd64:	230c      	movs	r3, #12
 800bd66:	f8c8 3000 	str.w	r3, [r8]
 800bd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6e:	e0c8      	b.n	800bf02 <_svfiprintf_r+0x1c2>
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	6163      	str	r3, [r4, #20]
 800bd74:	2300      	movs	r3, #0
 800bd76:	9309      	str	r3, [sp, #36]	; 0x24
 800bd78:	2320      	movs	r3, #32
 800bd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd7e:	2330      	movs	r3, #48	; 0x30
 800bd80:	f04f 0b01 	mov.w	fp, #1
 800bd84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd88:	9503      	str	r5, [sp, #12]
 800bd8a:	4637      	mov	r7, r6
 800bd8c:	463d      	mov	r5, r7
 800bd8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd92:	b10b      	cbz	r3, 800bd98 <_svfiprintf_r+0x58>
 800bd94:	2b25      	cmp	r3, #37	; 0x25
 800bd96:	d13e      	bne.n	800be16 <_svfiprintf_r+0xd6>
 800bd98:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd9c:	d00b      	beq.n	800bdb6 <_svfiprintf_r+0x76>
 800bd9e:	4653      	mov	r3, sl
 800bda0:	4632      	mov	r2, r6
 800bda2:	4621      	mov	r1, r4
 800bda4:	4640      	mov	r0, r8
 800bda6:	f7ff ff71 	bl	800bc8c <__ssputs_r>
 800bdaa:	3001      	adds	r0, #1
 800bdac:	f000 80a4 	beq.w	800bef8 <_svfiprintf_r+0x1b8>
 800bdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb2:	4453      	add	r3, sl
 800bdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb6:	783b      	ldrb	r3, [r7, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 809d 	beq.w	800bef8 <_svfiprintf_r+0x1b8>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	9307      	str	r3, [sp, #28]
 800bdcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd2:	462f      	mov	r7, r5
 800bdd4:	2205      	movs	r2, #5
 800bdd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bdda:	4850      	ldr	r0, [pc, #320]	; (800bf1c <_svfiprintf_r+0x1dc>)
 800bddc:	f7ff fbb8 	bl	800b550 <memchr>
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	b9d0      	cbnz	r0, 800be1a <_svfiprintf_r+0xda>
 800bde4:	06d9      	lsls	r1, r3, #27
 800bde6:	bf44      	itt	mi
 800bde8:	2220      	movmi	r2, #32
 800bdea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdee:	071a      	lsls	r2, r3, #28
 800bdf0:	bf44      	itt	mi
 800bdf2:	222b      	movmi	r2, #43	; 0x2b
 800bdf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdf8:	782a      	ldrb	r2, [r5, #0]
 800bdfa:	2a2a      	cmp	r2, #42	; 0x2a
 800bdfc:	d015      	beq.n	800be2a <_svfiprintf_r+0xea>
 800bdfe:	462f      	mov	r7, r5
 800be00:	2000      	movs	r0, #0
 800be02:	250a      	movs	r5, #10
 800be04:	9a07      	ldr	r2, [sp, #28]
 800be06:	4639      	mov	r1, r7
 800be08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be0c:	3b30      	subs	r3, #48	; 0x30
 800be0e:	2b09      	cmp	r3, #9
 800be10:	d94d      	bls.n	800beae <_svfiprintf_r+0x16e>
 800be12:	b1b8      	cbz	r0, 800be44 <_svfiprintf_r+0x104>
 800be14:	e00f      	b.n	800be36 <_svfiprintf_r+0xf6>
 800be16:	462f      	mov	r7, r5
 800be18:	e7b8      	b.n	800bd8c <_svfiprintf_r+0x4c>
 800be1a:	4a40      	ldr	r2, [pc, #256]	; (800bf1c <_svfiprintf_r+0x1dc>)
 800be1c:	463d      	mov	r5, r7
 800be1e:	1a80      	subs	r0, r0, r2
 800be20:	fa0b f000 	lsl.w	r0, fp, r0
 800be24:	4318      	orrs	r0, r3
 800be26:	9004      	str	r0, [sp, #16]
 800be28:	e7d3      	b.n	800bdd2 <_svfiprintf_r+0x92>
 800be2a:	9a03      	ldr	r2, [sp, #12]
 800be2c:	1d11      	adds	r1, r2, #4
 800be2e:	6812      	ldr	r2, [r2, #0]
 800be30:	9103      	str	r1, [sp, #12]
 800be32:	2a00      	cmp	r2, #0
 800be34:	db01      	blt.n	800be3a <_svfiprintf_r+0xfa>
 800be36:	9207      	str	r2, [sp, #28]
 800be38:	e004      	b.n	800be44 <_svfiprintf_r+0x104>
 800be3a:	4252      	negs	r2, r2
 800be3c:	f043 0302 	orr.w	r3, r3, #2
 800be40:	9207      	str	r2, [sp, #28]
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	783b      	ldrb	r3, [r7, #0]
 800be46:	2b2e      	cmp	r3, #46	; 0x2e
 800be48:	d10c      	bne.n	800be64 <_svfiprintf_r+0x124>
 800be4a:	787b      	ldrb	r3, [r7, #1]
 800be4c:	2b2a      	cmp	r3, #42	; 0x2a
 800be4e:	d133      	bne.n	800beb8 <_svfiprintf_r+0x178>
 800be50:	9b03      	ldr	r3, [sp, #12]
 800be52:	3702      	adds	r7, #2
 800be54:	1d1a      	adds	r2, r3, #4
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	9203      	str	r2, [sp, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bfb8      	it	lt
 800be5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	4d2e      	ldr	r5, [pc, #184]	; (800bf20 <_svfiprintf_r+0x1e0>)
 800be66:	2203      	movs	r2, #3
 800be68:	7839      	ldrb	r1, [r7, #0]
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7ff fb70 	bl	800b550 <memchr>
 800be70:	b138      	cbz	r0, 800be82 <_svfiprintf_r+0x142>
 800be72:	2340      	movs	r3, #64	; 0x40
 800be74:	1b40      	subs	r0, r0, r5
 800be76:	fa03 f000 	lsl.w	r0, r3, r0
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	3701      	adds	r7, #1
 800be7e:	4303      	orrs	r3, r0
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	7839      	ldrb	r1, [r7, #0]
 800be84:	2206      	movs	r2, #6
 800be86:	4827      	ldr	r0, [pc, #156]	; (800bf24 <_svfiprintf_r+0x1e4>)
 800be88:	1c7e      	adds	r6, r7, #1
 800be8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be8e:	f7ff fb5f 	bl	800b550 <memchr>
 800be92:	2800      	cmp	r0, #0
 800be94:	d038      	beq.n	800bf08 <_svfiprintf_r+0x1c8>
 800be96:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <_svfiprintf_r+0x1e8>)
 800be98:	bb13      	cbnz	r3, 800bee0 <_svfiprintf_r+0x1a0>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	3307      	adds	r3, #7
 800be9e:	f023 0307 	bic.w	r3, r3, #7
 800bea2:	3308      	adds	r3, #8
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea8:	444b      	add	r3, r9
 800beaa:	9309      	str	r3, [sp, #36]	; 0x24
 800beac:	e76d      	b.n	800bd8a <_svfiprintf_r+0x4a>
 800beae:	fb05 3202 	mla	r2, r5, r2, r3
 800beb2:	2001      	movs	r0, #1
 800beb4:	460f      	mov	r7, r1
 800beb6:	e7a6      	b.n	800be06 <_svfiprintf_r+0xc6>
 800beb8:	2300      	movs	r3, #0
 800beba:	250a      	movs	r5, #10
 800bebc:	4619      	mov	r1, r3
 800bebe:	3701      	adds	r7, #1
 800bec0:	9305      	str	r3, [sp, #20]
 800bec2:	4638      	mov	r0, r7
 800bec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec8:	3a30      	subs	r2, #48	; 0x30
 800beca:	2a09      	cmp	r2, #9
 800becc:	d903      	bls.n	800bed6 <_svfiprintf_r+0x196>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0c8      	beq.n	800be64 <_svfiprintf_r+0x124>
 800bed2:	9105      	str	r1, [sp, #20]
 800bed4:	e7c6      	b.n	800be64 <_svfiprintf_r+0x124>
 800bed6:	fb05 2101 	mla	r1, r5, r1, r2
 800beda:	2301      	movs	r3, #1
 800bedc:	4607      	mov	r7, r0
 800bede:	e7f0      	b.n	800bec2 <_svfiprintf_r+0x182>
 800bee0:	ab03      	add	r3, sp, #12
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	4622      	mov	r2, r4
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <_svfiprintf_r+0x1ec>)
 800bee8:	a904      	add	r1, sp, #16
 800beea:	4640      	mov	r0, r8
 800beec:	f7fe f850 	bl	8009f90 <_printf_float>
 800bef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bef4:	4681      	mov	r9, r0
 800bef6:	d1d6      	bne.n	800bea6 <_svfiprintf_r+0x166>
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	065b      	lsls	r3, r3, #25
 800befc:	f53f af35 	bmi.w	800bd6a <_svfiprintf_r+0x2a>
 800bf00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf02:	b01d      	add	sp, #116	; 0x74
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	ab03      	add	r3, sp, #12
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <_svfiprintf_r+0x1ec>)
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	4640      	mov	r0, r8
 800bf14:	f7fe fae8 	bl	800a4e8 <_printf_i>
 800bf18:	e7ea      	b.n	800bef0 <_svfiprintf_r+0x1b0>
 800bf1a:	bf00      	nop
 800bf1c:	0800dbfc 	.word	0x0800dbfc
 800bf20:	0800dc02 	.word	0x0800dc02
 800bf24:	0800dc06 	.word	0x0800dc06
 800bf28:	08009f91 	.word	0x08009f91
 800bf2c:	0800bc8d 	.word	0x0800bc8d

0800bf30 <_sbrk_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	2300      	movs	r3, #0
 800bf34:	4c05      	ldr	r4, [pc, #20]	; (800bf4c <_sbrk_r+0x1c>)
 800bf36:	4605      	mov	r5, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	f7f8 f9fa 	bl	8004334 <_sbrk>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_sbrk_r+0x1a>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_sbrk_r+0x1a>
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	200040b8 	.word	0x200040b8

0800bf50 <__ascii_wctomb>:
 800bf50:	b149      	cbz	r1, 800bf66 <__ascii_wctomb+0x16>
 800bf52:	2aff      	cmp	r2, #255	; 0xff
 800bf54:	bf8b      	itete	hi
 800bf56:	238a      	movhi	r3, #138	; 0x8a
 800bf58:	700a      	strbls	r2, [r1, #0]
 800bf5a:	6003      	strhi	r3, [r0, #0]
 800bf5c:	2001      	movls	r0, #1
 800bf5e:	bf88      	it	hi
 800bf60:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf64:	4770      	bx	lr
 800bf66:	4608      	mov	r0, r1
 800bf68:	4770      	bx	lr

0800bf6a <memmove>:
 800bf6a:	4288      	cmp	r0, r1
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	eb01 0302 	add.w	r3, r1, r2
 800bf72:	d807      	bhi.n	800bf84 <memmove+0x1a>
 800bf74:	1e42      	subs	r2, r0, #1
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d00a      	beq.n	800bf90 <memmove+0x26>
 800bf7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bf82:	e7f8      	b.n	800bf76 <memmove+0xc>
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d9f5      	bls.n	800bf74 <memmove+0xa>
 800bf88:	1881      	adds	r1, r0, r2
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	42d3      	cmn	r3, r2
 800bf8e:	d100      	bne.n	800bf92 <memmove+0x28>
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bf9a:	e7f7      	b.n	800bf8c <memmove+0x22>

0800bf9c <__malloc_lock>:
 800bf9c:	4770      	bx	lr

0800bf9e <__malloc_unlock>:
 800bf9e:	4770      	bx	lr

0800bfa0 <_realloc_r>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	4607      	mov	r7, r0
 800bfa4:	4614      	mov	r4, r2
 800bfa6:	460e      	mov	r6, r1
 800bfa8:	b921      	cbnz	r1, 800bfb4 <_realloc_r+0x14>
 800bfaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfae:	4611      	mov	r1, r2
 800bfb0:	f7ff be12 	b.w	800bbd8 <_malloc_r>
 800bfb4:	b922      	cbnz	r2, 800bfc0 <_realloc_r+0x20>
 800bfb6:	f7ff fdc3 	bl	800bb40 <_free_r>
 800bfba:	4625      	mov	r5, r4
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc0:	f000 f814 	bl	800bfec <_malloc_usable_size_r>
 800bfc4:	42a0      	cmp	r0, r4
 800bfc6:	d20f      	bcs.n	800bfe8 <_realloc_r+0x48>
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f7ff fe04 	bl	800bbd8 <_malloc_r>
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d0f2      	beq.n	800bfbc <_realloc_r+0x1c>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4622      	mov	r2, r4
 800bfda:	f7fd ff35 	bl	8009e48 <memcpy>
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f7ff fdad 	bl	800bb40 <_free_r>
 800bfe6:	e7e9      	b.n	800bfbc <_realloc_r+0x1c>
 800bfe8:	4635      	mov	r5, r6
 800bfea:	e7e7      	b.n	800bfbc <_realloc_r+0x1c>

0800bfec <_malloc_usable_size_r>:
 800bfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff0:	1f18      	subs	r0, r3, #4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfbc      	itt	lt
 800bff6:	580b      	ldrlt	r3, [r1, r0]
 800bff8:	18c0      	addlt	r0, r0, r3
 800bffa:	4770      	bx	lr

0800bffc <cos>:
 800bffc:	b530      	push	{r4, r5, lr}
 800bffe:	4a18      	ldr	r2, [pc, #96]	; (800c060 <cos+0x64>)
 800c000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c004:	4293      	cmp	r3, r2
 800c006:	b087      	sub	sp, #28
 800c008:	dc04      	bgt.n	800c014 <cos+0x18>
 800c00a:	2200      	movs	r2, #0
 800c00c:	2300      	movs	r3, #0
 800c00e:	f000 fc37 	bl	800c880 <__kernel_cos>
 800c012:	e006      	b.n	800c022 <cos+0x26>
 800c014:	4a13      	ldr	r2, [pc, #76]	; (800c064 <cos+0x68>)
 800c016:	4293      	cmp	r3, r2
 800c018:	dd05      	ble.n	800c026 <cos+0x2a>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	f7f4 f8a3 	bl	8000168 <__aeabi_dsub>
 800c022:	b007      	add	sp, #28
 800c024:	bd30      	pop	{r4, r5, pc}
 800c026:	aa02      	add	r2, sp, #8
 800c028:	f000 f98e 	bl	800c348 <__ieee754_rem_pio2>
 800c02c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c030:	f000 0403 	and.w	r4, r0, #3
 800c034:	2c01      	cmp	r4, #1
 800c036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c03a:	d008      	beq.n	800c04e <cos+0x52>
 800c03c:	2c02      	cmp	r4, #2
 800c03e:	d00c      	beq.n	800c05a <cos+0x5e>
 800c040:	2c00      	cmp	r4, #0
 800c042:	d0e4      	beq.n	800c00e <cos+0x12>
 800c044:	2401      	movs	r4, #1
 800c046:	9400      	str	r4, [sp, #0]
 800c048:	f001 f822 	bl	800d090 <__kernel_sin>
 800c04c:	e7e9      	b.n	800c022 <cos+0x26>
 800c04e:	9400      	str	r4, [sp, #0]
 800c050:	f001 f81e 	bl	800d090 <__kernel_sin>
 800c054:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c058:	e7e3      	b.n	800c022 <cos+0x26>
 800c05a:	f000 fc11 	bl	800c880 <__kernel_cos>
 800c05e:	e7f9      	b.n	800c054 <cos+0x58>
 800c060:	3fe921fb 	.word	0x3fe921fb
 800c064:	7fefffff 	.word	0x7fefffff

0800c068 <sin>:
 800c068:	b530      	push	{r4, r5, lr}
 800c06a:	4a1a      	ldr	r2, [pc, #104]	; (800c0d4 <sin+0x6c>)
 800c06c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c070:	4293      	cmp	r3, r2
 800c072:	b087      	sub	sp, #28
 800c074:	dc06      	bgt.n	800c084 <sin+0x1c>
 800c076:	2300      	movs	r3, #0
 800c078:	2200      	movs	r2, #0
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	2300      	movs	r3, #0
 800c07e:	f001 f807 	bl	800d090 <__kernel_sin>
 800c082:	e006      	b.n	800c092 <sin+0x2a>
 800c084:	4a14      	ldr	r2, [pc, #80]	; (800c0d8 <sin+0x70>)
 800c086:	4293      	cmp	r3, r2
 800c088:	dd05      	ble.n	800c096 <sin+0x2e>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	f7f4 f86b 	bl	8000168 <__aeabi_dsub>
 800c092:	b007      	add	sp, #28
 800c094:	bd30      	pop	{r4, r5, pc}
 800c096:	aa02      	add	r2, sp, #8
 800c098:	f000 f956 	bl	800c348 <__ieee754_rem_pio2>
 800c09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a0:	f000 0403 	and.w	r4, r0, #3
 800c0a4:	2c01      	cmp	r4, #1
 800c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0aa:	d005      	beq.n	800c0b8 <sin+0x50>
 800c0ac:	2c02      	cmp	r4, #2
 800c0ae:	d006      	beq.n	800c0be <sin+0x56>
 800c0b0:	b964      	cbnz	r4, 800c0cc <sin+0x64>
 800c0b2:	2401      	movs	r4, #1
 800c0b4:	9400      	str	r4, [sp, #0]
 800c0b6:	e7e2      	b.n	800c07e <sin+0x16>
 800c0b8:	f000 fbe2 	bl	800c880 <__kernel_cos>
 800c0bc:	e7e9      	b.n	800c092 <sin+0x2a>
 800c0be:	2401      	movs	r4, #1
 800c0c0:	9400      	str	r4, [sp, #0]
 800c0c2:	f000 ffe5 	bl	800d090 <__kernel_sin>
 800c0c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c0ca:	e7e2      	b.n	800c092 <sin+0x2a>
 800c0cc:	f000 fbd8 	bl	800c880 <__kernel_cos>
 800c0d0:	e7f9      	b.n	800c0c6 <sin+0x5e>
 800c0d2:	bf00      	nop
 800c0d4:	3fe921fb 	.word	0x3fe921fb
 800c0d8:	7fefffff 	.word	0x7fefffff

0800c0dc <atan2>:
 800c0dc:	f000 b854 	b.w	800c188 <__ieee754_atan2>

0800c0e0 <sqrt>:
 800c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e4:	b08b      	sub	sp, #44	; 0x2c
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	f000 fb1d 	bl	800c728 <__ieee754_sqrt>
 800c0ee:	4b24      	ldr	r3, [pc, #144]	; (800c180 <sqrt+0xa0>)
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	f993 a000 	ldrsb.w	sl, [r3]
 800c0f6:	4689      	mov	r9, r1
 800c0f8:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c0fc:	d02b      	beq.n	800c156 <sqrt+0x76>
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 fc81 	bl	8000a0c <__aeabi_dcmpun>
 800c10a:	4683      	mov	fp, r0
 800c10c:	bb18      	cbnz	r0, 800c156 <sqrt+0x76>
 800c10e:	2600      	movs	r6, #0
 800c110:	2700      	movs	r7, #0
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 fc4f 	bl	80009bc <__aeabi_dcmplt>
 800c11e:	b1d0      	cbz	r0, 800c156 <sqrt+0x76>
 800c120:	2301      	movs	r3, #1
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	4b17      	ldr	r3, [pc, #92]	; (800c184 <sqrt+0xa4>)
 800c126:	f8cd b020 	str.w	fp, [sp, #32]
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c130:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c134:	f1ba 0f00 	cmp.w	sl, #0
 800c138:	d112      	bne.n	800c160 <sqrt+0x80>
 800c13a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c13e:	4668      	mov	r0, sp
 800c140:	f001 fa72 	bl	800d628 <matherr>
 800c144:	b1b8      	cbz	r0, 800c176 <sqrt+0x96>
 800c146:	9b08      	ldr	r3, [sp, #32]
 800c148:	b11b      	cbz	r3, 800c152 <sqrt+0x72>
 800c14a:	f7fd fe53 	bl	8009df4 <__errno>
 800c14e:	9b08      	ldr	r3, [sp, #32]
 800c150:	6003      	str	r3, [r0, #0]
 800c152:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	b00b      	add	sp, #44	; 0x2c
 800c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c160:	4632      	mov	r2, r6
 800c162:	463b      	mov	r3, r7
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	f7f4 fae0 	bl	800072c <__aeabi_ddiv>
 800c16c:	f1ba 0f02 	cmp.w	sl, #2
 800c170:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c174:	d1e3      	bne.n	800c13e <sqrt+0x5e>
 800c176:	f7fd fe3d 	bl	8009df4 <__errno>
 800c17a:	2321      	movs	r3, #33	; 0x21
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	e7e2      	b.n	800c146 <sqrt+0x66>
 800c180:	200001e4 	.word	0x200001e4
 800c184:	0800dd0e 	.word	0x0800dd0e

0800c188 <__ieee754_atan2>:
 800c188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	4256      	negs	r6, r2
 800c18e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800c192:	4316      	orrs	r6, r2
 800c194:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800c340 <__ieee754_atan2+0x1b8>
 800c198:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800c19c:	454e      	cmp	r6, r9
 800c19e:	4604      	mov	r4, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	469e      	mov	lr, r3
 800c1a4:	d808      	bhi.n	800c1b8 <__ieee754_atan2+0x30>
 800c1a6:	4246      	negs	r6, r0
 800c1a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c1ac:	4306      	orrs	r6, r0
 800c1ae:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800c1b2:	454e      	cmp	r6, r9
 800c1b4:	4688      	mov	r8, r1
 800c1b6:	d906      	bls.n	800c1c6 <__ieee754_atan2+0x3e>
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f3 ffd6 	bl	800016c <__adddf3>
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	e030      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c1c6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800c1ca:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c1ce:	4316      	orrs	r6, r2
 800c1d0:	d103      	bne.n	800c1da <__ieee754_atan2+0x52>
 800c1d2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	f001 b813 	b.w	800d200 <atan>
 800c1da:	179e      	asrs	r6, r3, #30
 800c1dc:	f006 0602 	and.w	r6, r6, #2
 800c1e0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c1e4:	ea57 0100 	orrs.w	r1, r7, r0
 800c1e8:	d107      	bne.n	800c1fa <__ieee754_atan2+0x72>
 800c1ea:	2e02      	cmp	r6, #2
 800c1ec:	d079      	beq.n	800c2e2 <__ieee754_atan2+0x15a>
 800c1ee:	2e03      	cmp	r6, #3
 800c1f0:	d11a      	bne.n	800c228 <__ieee754_atan2+0xa0>
 800c1f2:	a541      	add	r5, pc, #260	; (adr r5, 800c2f8 <__ieee754_atan2+0x170>)
 800c1f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1f8:	e016      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c1fa:	ea5c 0102 	orrs.w	r1, ip, r2
 800c1fe:	d106      	bne.n	800c20e <__ieee754_atan2+0x86>
 800c200:	f1b8 0f00 	cmp.w	r8, #0
 800c204:	da71      	bge.n	800c2ea <__ieee754_atan2+0x162>
 800c206:	a53e      	add	r5, pc, #248	; (adr r5, 800c300 <__ieee754_atan2+0x178>)
 800c208:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c20c:	e00c      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c20e:	45cc      	cmp	ip, r9
 800c210:	d123      	bne.n	800c25a <__ieee754_atan2+0xd2>
 800c212:	4567      	cmp	r7, ip
 800c214:	d114      	bne.n	800c240 <__ieee754_atan2+0xb8>
 800c216:	2e02      	cmp	r6, #2
 800c218:	d00a      	beq.n	800c230 <__ieee754_atan2+0xa8>
 800c21a:	2e03      	cmp	r6, #3
 800c21c:	d00c      	beq.n	800c238 <__ieee754_atan2+0xb0>
 800c21e:	2e01      	cmp	r6, #1
 800c220:	d15b      	bne.n	800c2da <__ieee754_atan2+0x152>
 800c222:	a539      	add	r5, pc, #228	; (adr r5, 800c308 <__ieee754_atan2+0x180>)
 800c224:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c228:	4620      	mov	r0, r4
 800c22a:	4629      	mov	r1, r5
 800c22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	a537      	add	r5, pc, #220	; (adr r5, 800c310 <__ieee754_atan2+0x188>)
 800c232:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c236:	e7f7      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c238:	a537      	add	r5, pc, #220	; (adr r5, 800c318 <__ieee754_atan2+0x190>)
 800c23a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c23e:	e7f3      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c240:	2e02      	cmp	r6, #2
 800c242:	d04e      	beq.n	800c2e2 <__ieee754_atan2+0x15a>
 800c244:	2e03      	cmp	r6, #3
 800c246:	d0d4      	beq.n	800c1f2 <__ieee754_atan2+0x6a>
 800c248:	2e01      	cmp	r6, #1
 800c24a:	f04f 0400 	mov.w	r4, #0
 800c24e:	d102      	bne.n	800c256 <__ieee754_atan2+0xce>
 800c250:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c254:	e7e8      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c256:	2500      	movs	r5, #0
 800c258:	e7e6      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c25a:	454f      	cmp	r7, r9
 800c25c:	d0d0      	beq.n	800c200 <__ieee754_atan2+0x78>
 800c25e:	eba7 070c 	sub.w	r7, r7, ip
 800c262:	153f      	asrs	r7, r7, #20
 800c264:	2f3c      	cmp	r7, #60	; 0x3c
 800c266:	dc1e      	bgt.n	800c2a6 <__ieee754_atan2+0x11e>
 800c268:	2b00      	cmp	r3, #0
 800c26a:	da01      	bge.n	800c270 <__ieee754_atan2+0xe8>
 800c26c:	373c      	adds	r7, #60	; 0x3c
 800c26e:	db1e      	blt.n	800c2ae <__ieee754_atan2+0x126>
 800c270:	4620      	mov	r0, r4
 800c272:	4629      	mov	r1, r5
 800c274:	f7f4 fa5a 	bl	800072c <__aeabi_ddiv>
 800c278:	f001 f94c 	bl	800d514 <fabs>
 800c27c:	f000 ffc0 	bl	800d200 <atan>
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	2e01      	cmp	r6, #1
 800c286:	d015      	beq.n	800c2b4 <__ieee754_atan2+0x12c>
 800c288:	2e02      	cmp	r6, #2
 800c28a:	d017      	beq.n	800c2bc <__ieee754_atan2+0x134>
 800c28c:	2e00      	cmp	r6, #0
 800c28e:	d0cb      	beq.n	800c228 <__ieee754_atan2+0xa0>
 800c290:	a323      	add	r3, pc, #140	; (adr r3, 800c320 <__ieee754_atan2+0x198>)
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f3 ff65 	bl	8000168 <__aeabi_dsub>
 800c29e:	a322      	add	r3, pc, #136	; (adr r3, 800c328 <__ieee754_atan2+0x1a0>)
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	e016      	b.n	800c2d4 <__ieee754_atan2+0x14c>
 800c2a6:	a522      	add	r5, pc, #136	; (adr r5, 800c330 <__ieee754_atan2+0x1a8>)
 800c2a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2ac:	e7ea      	b.n	800c284 <__ieee754_atan2+0xfc>
 800c2ae:	2400      	movs	r4, #0
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	e7e7      	b.n	800c284 <__ieee754_atan2+0xfc>
 800c2b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c2b8:	461d      	mov	r5, r3
 800c2ba:	e7b5      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c2bc:	a318      	add	r3, pc, #96	; (adr r3, 800c320 <__ieee754_atan2+0x198>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	f7f3 ff4f 	bl	8000168 <__aeabi_dsub>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	a116      	add	r1, pc, #88	; (adr r1, 800c328 <__ieee754_atan2+0x1a0>)
 800c2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2d4:	f7f3 ff48 	bl	8000168 <__aeabi_dsub>
 800c2d8:	e772      	b.n	800c1c0 <__ieee754_atan2+0x38>
 800c2da:	a517      	add	r5, pc, #92	; (adr r5, 800c338 <__ieee754_atan2+0x1b0>)
 800c2dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2e0:	e7a2      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c2e2:	a511      	add	r5, pc, #68	; (adr r5, 800c328 <__ieee754_atan2+0x1a0>)
 800c2e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2e8:	e79e      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c2ea:	a511      	add	r5, pc, #68	; (adr r5, 800c330 <__ieee754_atan2+0x1a8>)
 800c2ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2f0:	e79a      	b.n	800c228 <__ieee754_atan2+0xa0>
 800c2f2:	bf00      	nop
 800c2f4:	f3af 8000 	nop.w
 800c2f8:	54442d18 	.word	0x54442d18
 800c2fc:	c00921fb 	.word	0xc00921fb
 800c300:	54442d18 	.word	0x54442d18
 800c304:	bff921fb 	.word	0xbff921fb
 800c308:	54442d18 	.word	0x54442d18
 800c30c:	bfe921fb 	.word	0xbfe921fb
 800c310:	7f3321d2 	.word	0x7f3321d2
 800c314:	4002d97c 	.word	0x4002d97c
 800c318:	7f3321d2 	.word	0x7f3321d2
 800c31c:	c002d97c 	.word	0xc002d97c
 800c320:	33145c07 	.word	0x33145c07
 800c324:	3ca1a626 	.word	0x3ca1a626
 800c328:	54442d18 	.word	0x54442d18
 800c32c:	400921fb 	.word	0x400921fb
 800c330:	54442d18 	.word	0x54442d18
 800c334:	3ff921fb 	.word	0x3ff921fb
 800c338:	54442d18 	.word	0x54442d18
 800c33c:	3fe921fb 	.word	0x3fe921fb
 800c340:	7ff00000 	.word	0x7ff00000
 800c344:	00000000 	.word	0x00000000

0800c348 <__ieee754_rem_pio2>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	4614      	mov	r4, r2
 800c34e:	4ac2      	ldr	r2, [pc, #776]	; (800c658 <__ieee754_rem_pio2+0x310>)
 800c350:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c354:	4592      	cmp	sl, r2
 800c356:	b08d      	sub	sp, #52	; 0x34
 800c358:	468b      	mov	fp, r1
 800c35a:	dc07      	bgt.n	800c36c <__ieee754_rem_pio2+0x24>
 800c35c:	2200      	movs	r2, #0
 800c35e:	2300      	movs	r3, #0
 800c360:	e9c4 0100 	strd	r0, r1, [r4]
 800c364:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c368:	2500      	movs	r5, #0
 800c36a:	e023      	b.n	800c3b4 <__ieee754_rem_pio2+0x6c>
 800c36c:	4abb      	ldr	r2, [pc, #748]	; (800c65c <__ieee754_rem_pio2+0x314>)
 800c36e:	4592      	cmp	sl, r2
 800c370:	dc71      	bgt.n	800c456 <__ieee754_rem_pio2+0x10e>
 800c372:	a3ab      	add	r3, pc, #684	; (adr r3, 800c620 <__ieee754_rem_pio2+0x2d8>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	2900      	cmp	r1, #0
 800c37a:	4db9      	ldr	r5, [pc, #740]	; (800c660 <__ieee754_rem_pio2+0x318>)
 800c37c:	dd36      	ble.n	800c3ec <__ieee754_rem_pio2+0xa4>
 800c37e:	f7f3 fef3 	bl	8000168 <__aeabi_dsub>
 800c382:	45aa      	cmp	sl, r5
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	d018      	beq.n	800c3bc <__ieee754_rem_pio2+0x74>
 800c38a:	a3a7      	add	r3, pc, #668	; (adr r3, 800c628 <__ieee754_rem_pio2+0x2e0>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7f3 feea 	bl	8000168 <__aeabi_dsub>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4630      	mov	r0, r6
 800c39a:	e9c4 2300 	strd	r2, r3, [r4]
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f7f3 fee2 	bl	8000168 <__aeabi_dsub>
 800c3a4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c628 <__ieee754_rem_pio2+0x2e0>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f3 fedd 	bl	8000168 <__aeabi_dsub>
 800c3ae:	2501      	movs	r5, #1
 800c3b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	b00d      	add	sp, #52	; 0x34
 800c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3bc:	a39c      	add	r3, pc, #624	; (adr r3, 800c630 <__ieee754_rem_pio2+0x2e8>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	f7f3 fed1 	bl	8000168 <__aeabi_dsub>
 800c3c6:	a39c      	add	r3, pc, #624	; (adr r3, 800c638 <__ieee754_rem_pio2+0x2f0>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	460f      	mov	r7, r1
 800c3d0:	f7f3 feca 	bl	8000168 <__aeabi_dsub>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	e9c4 2300 	strd	r2, r3, [r4]
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f3 fec2 	bl	8000168 <__aeabi_dsub>
 800c3e4:	a394      	add	r3, pc, #592	; (adr r3, 800c638 <__ieee754_rem_pio2+0x2f0>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	e7de      	b.n	800c3aa <__ieee754_rem_pio2+0x62>
 800c3ec:	f7f3 febe 	bl	800016c <__adddf3>
 800c3f0:	45aa      	cmp	sl, r5
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	d016      	beq.n	800c426 <__ieee754_rem_pio2+0xde>
 800c3f8:	a38b      	add	r3, pc, #556	; (adr r3, 800c628 <__ieee754_rem_pio2+0x2e0>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f3 feb5 	bl	800016c <__adddf3>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4630      	mov	r0, r6
 800c408:	e9c4 2300 	strd	r2, r3, [r4]
 800c40c:	4639      	mov	r1, r7
 800c40e:	f7f3 feab 	bl	8000168 <__aeabi_dsub>
 800c412:	a385      	add	r3, pc, #532	; (adr r3, 800c628 <__ieee754_rem_pio2+0x2e0>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 fea8 	bl	800016c <__adddf3>
 800c41c:	f04f 35ff 	mov.w	r5, #4294967295
 800c420:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c424:	e7c6      	b.n	800c3b4 <__ieee754_rem_pio2+0x6c>
 800c426:	a382      	add	r3, pc, #520	; (adr r3, 800c630 <__ieee754_rem_pio2+0x2e8>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f7f3 fe9e 	bl	800016c <__adddf3>
 800c430:	a381      	add	r3, pc, #516	; (adr r3, 800c638 <__ieee754_rem_pio2+0x2f0>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	f7f3 fe97 	bl	800016c <__adddf3>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4630      	mov	r0, r6
 800c444:	e9c4 2300 	strd	r2, r3, [r4]
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f3 fe8d 	bl	8000168 <__aeabi_dsub>
 800c44e:	a37a      	add	r3, pc, #488	; (adr r3, 800c638 <__ieee754_rem_pio2+0x2f0>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	e7e0      	b.n	800c418 <__ieee754_rem_pio2+0xd0>
 800c456:	4a83      	ldr	r2, [pc, #524]	; (800c664 <__ieee754_rem_pio2+0x31c>)
 800c458:	4592      	cmp	sl, r2
 800c45a:	f300 80d2 	bgt.w	800c602 <__ieee754_rem_pio2+0x2ba>
 800c45e:	f001 f859 	bl	800d514 <fabs>
 800c462:	a377      	add	r3, pc, #476	; (adr r3, 800c640 <__ieee754_rem_pio2+0x2f8>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	4606      	mov	r6, r0
 800c46a:	460f      	mov	r7, r1
 800c46c:	f7f4 f834 	bl	80004d8 <__aeabi_dmul>
 800c470:	2200      	movs	r2, #0
 800c472:	4b7d      	ldr	r3, [pc, #500]	; (800c668 <__ieee754_rem_pio2+0x320>)
 800c474:	f7f3 fe7a 	bl	800016c <__adddf3>
 800c478:	f7f4 fade 	bl	8000a38 <__aeabi_d2iz>
 800c47c:	4605      	mov	r5, r0
 800c47e:	f7f3 ffc1 	bl	8000404 <__aeabi_i2d>
 800c482:	a367      	add	r3, pc, #412	; (adr r3, 800c620 <__ieee754_rem_pio2+0x2d8>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48c:	f7f4 f824 	bl	80004d8 <__aeabi_dmul>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f7f3 fe66 	bl	8000168 <__aeabi_dsub>
 800c49c:	a362      	add	r3, pc, #392	; (adr r3, 800c628 <__ieee754_rem_pio2+0x2e0>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4aa:	f7f4 f815 	bl	80004d8 <__aeabi_dmul>
 800c4ae:	2d1f      	cmp	r5, #31
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	4689      	mov	r9, r1
 800c4b4:	dc0e      	bgt.n	800c4d4 <__ieee754_rem_pio2+0x18c>
 800c4b6:	4b6d      	ldr	r3, [pc, #436]	; (800c66c <__ieee754_rem_pio2+0x324>)
 800c4b8:	1e6a      	subs	r2, r5, #1
 800c4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4be:	4553      	cmp	r3, sl
 800c4c0:	d008      	beq.n	800c4d4 <__ieee754_rem_pio2+0x18c>
 800c4c2:	4642      	mov	r2, r8
 800c4c4:	464b      	mov	r3, r9
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f3 fe4d 	bl	8000168 <__aeabi_dsub>
 800c4ce:	e9c4 0100 	strd	r0, r1, [r4]
 800c4d2:	e011      	b.n	800c4f8 <__ieee754_rem_pio2+0x1b0>
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	4642      	mov	r2, r8
 800c4d8:	4630      	mov	r0, r6
 800c4da:	4639      	mov	r1, r7
 800c4dc:	f7f3 fe44 	bl	8000168 <__aeabi_dsub>
 800c4e0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c4e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c4ec:	2b10      	cmp	r3, #16
 800c4ee:	dc1f      	bgt.n	800c530 <__ieee754_rem_pio2+0x1e8>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	e9c4 2300 	strd	r2, r3, [r4]
 800c4f8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4653      	mov	r3, sl
 800c500:	4639      	mov	r1, r7
 800c502:	f7f3 fe31 	bl	8000168 <__aeabi_dsub>
 800c506:	4642      	mov	r2, r8
 800c508:	464b      	mov	r3, r9
 800c50a:	f7f3 fe2d 	bl	8000168 <__aeabi_dsub>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	f1bb 0f00 	cmp.w	fp, #0
 800c516:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c51a:	f6bf af4b 	bge.w	800c3b4 <__ieee754_rem_pio2+0x6c>
 800c51e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c522:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800c526:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c52a:	60e1      	str	r1, [r4, #12]
 800c52c:	426d      	negs	r5, r5
 800c52e:	e741      	b.n	800c3b4 <__ieee754_rem_pio2+0x6c>
 800c530:	a33f      	add	r3, pc, #252	; (adr r3, 800c630 <__ieee754_rem_pio2+0x2e8>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c53a:	f7f3 ffcd 	bl	80004d8 <__aeabi_dmul>
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	4630      	mov	r0, r6
 800c548:	4639      	mov	r1, r7
 800c54a:	f7f3 fe0d 	bl	8000168 <__aeabi_dsub>
 800c54e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4630      	mov	r0, r6
 800c558:	4639      	mov	r1, r7
 800c55a:	f7f3 fe05 	bl	8000168 <__aeabi_dsub>
 800c55e:	4642      	mov	r2, r8
 800c560:	464b      	mov	r3, r9
 800c562:	f7f3 fe01 	bl	8000168 <__aeabi_dsub>
 800c566:	a334      	add	r3, pc, #208	; (adr r3, 800c638 <__ieee754_rem_pio2+0x2f0>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	4606      	mov	r6, r0
 800c56e:	460f      	mov	r7, r1
 800c570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c574:	f7f3 ffb0 	bl	80004d8 <__aeabi_dmul>
 800c578:	4632      	mov	r2, r6
 800c57a:	463b      	mov	r3, r7
 800c57c:	f7f3 fdf4 	bl	8000168 <__aeabi_dsub>
 800c580:	460b      	mov	r3, r1
 800c582:	4602      	mov	r2, r0
 800c584:	4680      	mov	r8, r0
 800c586:	4689      	mov	r9, r1
 800c588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c58c:	f7f3 fdec 	bl	8000168 <__aeabi_dsub>
 800c590:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c594:	ebaa 0a03 	sub.w	sl, sl, r3
 800c598:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800c59c:	dc06      	bgt.n	800c5ac <__ieee754_rem_pio2+0x264>
 800c59e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	e9c4 2300 	strd	r2, r3, [r4]
 800c5aa:	e7a5      	b.n	800c4f8 <__ieee754_rem_pio2+0x1b0>
 800c5ac:	a326      	add	r3, pc, #152	; (adr r3, 800c648 <__ieee754_rem_pio2+0x300>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5b6:	f7f3 ff8f 	bl	80004d8 <__aeabi_dmul>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	4689      	mov	r9, r1
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5c6:	f7f3 fdcf 	bl	8000168 <__aeabi_dsub>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5d6:	f7f3 fdc7 	bl	8000168 <__aeabi_dsub>
 800c5da:	4642      	mov	r2, r8
 800c5dc:	464b      	mov	r3, r9
 800c5de:	f7f3 fdc3 	bl	8000168 <__aeabi_dsub>
 800c5e2:	a31b      	add	r3, pc, #108	; (adr r3, 800c650 <__ieee754_rem_pio2+0x308>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	4689      	mov	r9, r1
 800c5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f0:	f7f3 ff72 	bl	80004d8 <__aeabi_dmul>
 800c5f4:	4642      	mov	r2, r8
 800c5f6:	464b      	mov	r3, r9
 800c5f8:	f7f3 fdb6 	bl	8000168 <__aeabi_dsub>
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	e75f      	b.n	800c4c2 <__ieee754_rem_pio2+0x17a>
 800c602:	4a1b      	ldr	r2, [pc, #108]	; (800c670 <__ieee754_rem_pio2+0x328>)
 800c604:	4592      	cmp	sl, r2
 800c606:	dd35      	ble.n	800c674 <__ieee754_rem_pio2+0x32c>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	f7f3 fdac 	bl	8000168 <__aeabi_dsub>
 800c610:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c614:	e9c4 0100 	strd	r0, r1, [r4]
 800c618:	e6a6      	b.n	800c368 <__ieee754_rem_pio2+0x20>
 800c61a:	bf00      	nop
 800c61c:	f3af 8000 	nop.w
 800c620:	54400000 	.word	0x54400000
 800c624:	3ff921fb 	.word	0x3ff921fb
 800c628:	1a626331 	.word	0x1a626331
 800c62c:	3dd0b461 	.word	0x3dd0b461
 800c630:	1a600000 	.word	0x1a600000
 800c634:	3dd0b461 	.word	0x3dd0b461
 800c638:	2e037073 	.word	0x2e037073
 800c63c:	3ba3198a 	.word	0x3ba3198a
 800c640:	6dc9c883 	.word	0x6dc9c883
 800c644:	3fe45f30 	.word	0x3fe45f30
 800c648:	2e000000 	.word	0x2e000000
 800c64c:	3ba3198a 	.word	0x3ba3198a
 800c650:	252049c1 	.word	0x252049c1
 800c654:	397b839a 	.word	0x397b839a
 800c658:	3fe921fb 	.word	0x3fe921fb
 800c65c:	4002d97b 	.word	0x4002d97b
 800c660:	3ff921fb 	.word	0x3ff921fb
 800c664:	413921fb 	.word	0x413921fb
 800c668:	3fe00000 	.word	0x3fe00000
 800c66c:	0800dd14 	.word	0x0800dd14
 800c670:	7fefffff 	.word	0x7fefffff
 800c674:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c678:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c67c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c680:	460f      	mov	r7, r1
 800c682:	4606      	mov	r6, r0
 800c684:	f7f4 f9d8 	bl	8000a38 <__aeabi_d2iz>
 800c688:	f7f3 febc 	bl	8000404 <__aeabi_i2d>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4630      	mov	r0, r6
 800c692:	4639      	mov	r1, r7
 800c694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c698:	f7f3 fd66 	bl	8000168 <__aeabi_dsub>
 800c69c:	2200      	movs	r2, #0
 800c69e:	4b20      	ldr	r3, [pc, #128]	; (800c720 <__ieee754_rem_pio2+0x3d8>)
 800c6a0:	f7f3 ff1a 	bl	80004d8 <__aeabi_dmul>
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	f7f4 f9c6 	bl	8000a38 <__aeabi_d2iz>
 800c6ac:	f7f3 feaa 	bl	8000404 <__aeabi_i2d>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6bc:	f7f3 fd54 	bl	8000168 <__aeabi_dsub>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4b17      	ldr	r3, [pc, #92]	; (800c720 <__ieee754_rem_pio2+0x3d8>)
 800c6c4:	f7f3 ff08 	bl	80004d8 <__aeabi_dmul>
 800c6c8:	f04f 0803 	mov.w	r8, #3
 800c6cc:	2600      	movs	r6, #0
 800c6ce:	2700      	movs	r7, #0
 800c6d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c6d8:	4632      	mov	r2, r6
 800c6da:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c6de:	463b      	mov	r3, r7
 800c6e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800c6e4:	f7f4 f960 	bl	80009a8 <__aeabi_dcmpeq>
 800c6e8:	b9b8      	cbnz	r0, 800c71a <__ieee754_rem_pio2+0x3d2>
 800c6ea:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <__ieee754_rem_pio2+0x3dc>)
 800c6ec:	462a      	mov	r2, r5
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	a806      	add	r0, sp, #24
 800c6f8:	4643      	mov	r3, r8
 800c6fa:	f000 f97f 	bl	800c9fc <__kernel_rem_pio2>
 800c6fe:	f1bb 0f00 	cmp.w	fp, #0
 800c702:	4605      	mov	r5, r0
 800c704:	f6bf ae56 	bge.w	800c3b4 <__ieee754_rem_pio2+0x6c>
 800c708:	6863      	ldr	r3, [r4, #4]
 800c70a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c70e:	6063      	str	r3, [r4, #4]
 800c710:	68e3      	ldr	r3, [r4, #12]
 800c712:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c716:	60e3      	str	r3, [r4, #12]
 800c718:	e708      	b.n	800c52c <__ieee754_rem_pio2+0x1e4>
 800c71a:	46d0      	mov	r8, sl
 800c71c:	e7dc      	b.n	800c6d8 <__ieee754_rem_pio2+0x390>
 800c71e:	bf00      	nop
 800c720:	41700000 	.word	0x41700000
 800c724:	0800dd94 	.word	0x0800dd94

0800c728 <__ieee754_sqrt>:
 800c728:	4b54      	ldr	r3, [pc, #336]	; (800c87c <__ieee754_sqrt+0x154>)
 800c72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c72e:	438b      	bics	r3, r1
 800c730:	4606      	mov	r6, r0
 800c732:	460d      	mov	r5, r1
 800c734:	460a      	mov	r2, r1
 800c736:	460c      	mov	r4, r1
 800c738:	d10f      	bne.n	800c75a <__ieee754_sqrt+0x32>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	f7f3 fecb 	bl	80004d8 <__aeabi_dmul>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4630      	mov	r0, r6
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f3 fd0f 	bl	800016c <__adddf3>
 800c74e:	4606      	mov	r6, r0
 800c750:	460d      	mov	r5, r1
 800c752:	4630      	mov	r0, r6
 800c754:	4629      	mov	r1, r5
 800c756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75a:	2900      	cmp	r1, #0
 800c75c:	4607      	mov	r7, r0
 800c75e:	4603      	mov	r3, r0
 800c760:	dc0e      	bgt.n	800c780 <__ieee754_sqrt+0x58>
 800c762:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c766:	ea5c 0707 	orrs.w	r7, ip, r7
 800c76a:	d0f2      	beq.n	800c752 <__ieee754_sqrt+0x2a>
 800c76c:	b141      	cbz	r1, 800c780 <__ieee754_sqrt+0x58>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	f7f3 fcf9 	bl	8000168 <__aeabi_dsub>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	f7f3 ffd7 	bl	800072c <__aeabi_ddiv>
 800c77e:	e7e6      	b.n	800c74e <__ieee754_sqrt+0x26>
 800c780:	1512      	asrs	r2, r2, #20
 800c782:	d074      	beq.n	800c86e <__ieee754_sqrt+0x146>
 800c784:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c788:	07d5      	lsls	r5, r2, #31
 800c78a:	f04f 0500 	mov.w	r5, #0
 800c78e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c792:	bf48      	it	mi
 800c794:	0fd9      	lsrmi	r1, r3, #31
 800c796:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c79a:	bf44      	itt	mi
 800c79c:	005b      	lslmi	r3, r3, #1
 800c79e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c7a2:	1051      	asrs	r1, r2, #1
 800c7a4:	0fda      	lsrs	r2, r3, #31
 800c7a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	2216      	movs	r2, #22
 800c7ae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	1987      	adds	r7, r0, r6
 800c7b6:	42a7      	cmp	r7, r4
 800c7b8:	bfde      	ittt	le
 800c7ba:	19b8      	addle	r0, r7, r6
 800c7bc:	1be4      	suble	r4, r4, r7
 800c7be:	19ad      	addle	r5, r5, r6
 800c7c0:	0fdf      	lsrs	r7, r3, #31
 800c7c2:	3a01      	subs	r2, #1
 800c7c4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c7c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c7cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c7d0:	d1f0      	bne.n	800c7b4 <__ieee754_sqrt+0x8c>
 800c7d2:	f04f 0c20 	mov.w	ip, #32
 800c7d6:	4696      	mov	lr, r2
 800c7d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c7dc:	4284      	cmp	r4, r0
 800c7de:	eb06 070e 	add.w	r7, r6, lr
 800c7e2:	dc02      	bgt.n	800c7ea <__ieee754_sqrt+0xc2>
 800c7e4:	d112      	bne.n	800c80c <__ieee754_sqrt+0xe4>
 800c7e6:	429f      	cmp	r7, r3
 800c7e8:	d810      	bhi.n	800c80c <__ieee754_sqrt+0xe4>
 800c7ea:	2f00      	cmp	r7, #0
 800c7ec:	eb07 0e06 	add.w	lr, r7, r6
 800c7f0:	da42      	bge.n	800c878 <__ieee754_sqrt+0x150>
 800c7f2:	f1be 0f00 	cmp.w	lr, #0
 800c7f6:	db3f      	blt.n	800c878 <__ieee754_sqrt+0x150>
 800c7f8:	f100 0801 	add.w	r8, r0, #1
 800c7fc:	1a24      	subs	r4, r4, r0
 800c7fe:	4640      	mov	r0, r8
 800c800:	429f      	cmp	r7, r3
 800c802:	bf88      	it	hi
 800c804:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800c808:	1bdb      	subs	r3, r3, r7
 800c80a:	4432      	add	r2, r6
 800c80c:	0064      	lsls	r4, r4, #1
 800c80e:	f1bc 0c01 	subs.w	ip, ip, #1
 800c812:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c816:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c81a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c81e:	d1dd      	bne.n	800c7dc <__ieee754_sqrt+0xb4>
 800c820:	4323      	orrs	r3, r4
 800c822:	d006      	beq.n	800c832 <__ieee754_sqrt+0x10a>
 800c824:	1c54      	adds	r4, r2, #1
 800c826:	bf0b      	itete	eq
 800c828:	4662      	moveq	r2, ip
 800c82a:	3201      	addne	r2, #1
 800c82c:	3501      	addeq	r5, #1
 800c82e:	f022 0201 	bicne.w	r2, r2, #1
 800c832:	106b      	asrs	r3, r5, #1
 800c834:	0852      	lsrs	r2, r2, #1
 800c836:	07e8      	lsls	r0, r5, #31
 800c838:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c83c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c840:	bf48      	it	mi
 800c842:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c846:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c84a:	4616      	mov	r6, r2
 800c84c:	e781      	b.n	800c752 <__ieee754_sqrt+0x2a>
 800c84e:	0adc      	lsrs	r4, r3, #11
 800c850:	3915      	subs	r1, #21
 800c852:	055b      	lsls	r3, r3, #21
 800c854:	2c00      	cmp	r4, #0
 800c856:	d0fa      	beq.n	800c84e <__ieee754_sqrt+0x126>
 800c858:	02e6      	lsls	r6, r4, #11
 800c85a:	d50a      	bpl.n	800c872 <__ieee754_sqrt+0x14a>
 800c85c:	f1c2 0020 	rsb	r0, r2, #32
 800c860:	fa23 f000 	lsr.w	r0, r3, r0
 800c864:	1e55      	subs	r5, r2, #1
 800c866:	4093      	lsls	r3, r2
 800c868:	4304      	orrs	r4, r0
 800c86a:	1b4a      	subs	r2, r1, r5
 800c86c:	e78a      	b.n	800c784 <__ieee754_sqrt+0x5c>
 800c86e:	4611      	mov	r1, r2
 800c870:	e7f0      	b.n	800c854 <__ieee754_sqrt+0x12c>
 800c872:	0064      	lsls	r4, r4, #1
 800c874:	3201      	adds	r2, #1
 800c876:	e7ef      	b.n	800c858 <__ieee754_sqrt+0x130>
 800c878:	4680      	mov	r8, r0
 800c87a:	e7bf      	b.n	800c7fc <__ieee754_sqrt+0xd4>
 800c87c:	7ff00000 	.word	0x7ff00000

0800c880 <__kernel_cos>:
 800c880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c888:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c88c:	4680      	mov	r8, r0
 800c88e:	460f      	mov	r7, r1
 800c890:	e9cd 2300 	strd	r2, r3, [sp]
 800c894:	da04      	bge.n	800c8a0 <__kernel_cos+0x20>
 800c896:	f7f4 f8cf 	bl	8000a38 <__aeabi_d2iz>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f000 8086 	beq.w	800c9ac <__kernel_cos+0x12c>
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	463b      	mov	r3, r7
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 fe16 	bl	80004d8 <__aeabi_dmul>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4b4e      	ldr	r3, [pc, #312]	; (800c9e8 <__kernel_cos+0x168>)
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	f7f3 fe10 	bl	80004d8 <__aeabi_dmul>
 800c8b8:	a33f      	add	r3, pc, #252	; (adr r3, 800c9b8 <__kernel_cos+0x138>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	4682      	mov	sl, r0
 800c8c0:	468b      	mov	fp, r1
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 fe07 	bl	80004d8 <__aeabi_dmul>
 800c8ca:	a33d      	add	r3, pc, #244	; (adr r3, 800c9c0 <__kernel_cos+0x140>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fc4c 	bl	800016c <__adddf3>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	f7f3 fdfe 	bl	80004d8 <__aeabi_dmul>
 800c8dc:	a33a      	add	r3, pc, #232	; (adr r3, 800c9c8 <__kernel_cos+0x148>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fc41 	bl	8000168 <__aeabi_dsub>
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	f7f3 fdf5 	bl	80004d8 <__aeabi_dmul>
 800c8ee:	a338      	add	r3, pc, #224	; (adr r3, 800c9d0 <__kernel_cos+0x150>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fc3a 	bl	800016c <__adddf3>
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	f7f3 fdec 	bl	80004d8 <__aeabi_dmul>
 800c900:	a335      	add	r3, pc, #212	; (adr r3, 800c9d8 <__kernel_cos+0x158>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fc2f 	bl	8000168 <__aeabi_dsub>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fde3 	bl	80004d8 <__aeabi_dmul>
 800c912:	a333      	add	r3, pc, #204	; (adr r3, 800c9e0 <__kernel_cos+0x160>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f7f3 fc28 	bl	800016c <__adddf3>
 800c91c:	4622      	mov	r2, r4
 800c91e:	462b      	mov	r3, r5
 800c920:	f7f3 fdda 	bl	80004d8 <__aeabi_dmul>
 800c924:	4622      	mov	r2, r4
 800c926:	462b      	mov	r3, r5
 800c928:	f7f3 fdd6 	bl	80004d8 <__aeabi_dmul>
 800c92c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c930:	4604      	mov	r4, r0
 800c932:	460d      	mov	r5, r1
 800c934:	4640      	mov	r0, r8
 800c936:	4639      	mov	r1, r7
 800c938:	f7f3 fdce 	bl	80004d8 <__aeabi_dmul>
 800c93c:	460b      	mov	r3, r1
 800c93e:	4602      	mov	r2, r0
 800c940:	4629      	mov	r1, r5
 800c942:	4620      	mov	r0, r4
 800c944:	f7f3 fc10 	bl	8000168 <__aeabi_dsub>
 800c948:	4b28      	ldr	r3, [pc, #160]	; (800c9ec <__kernel_cos+0x16c>)
 800c94a:	4680      	mov	r8, r0
 800c94c:	429e      	cmp	r6, r3
 800c94e:	4689      	mov	r9, r1
 800c950:	dc0e      	bgt.n	800c970 <__kernel_cos+0xf0>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4650      	mov	r0, sl
 800c958:	4659      	mov	r1, fp
 800c95a:	f7f3 fc05 	bl	8000168 <__aeabi_dsub>
 800c95e:	4602      	mov	r2, r0
 800c960:	2000      	movs	r0, #0
 800c962:	460b      	mov	r3, r1
 800c964:	4922      	ldr	r1, [pc, #136]	; (800c9f0 <__kernel_cos+0x170>)
 800c966:	f7f3 fbff 	bl	8000168 <__aeabi_dsub>
 800c96a:	b003      	add	sp, #12
 800c96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c970:	2400      	movs	r4, #0
 800c972:	4b20      	ldr	r3, [pc, #128]	; (800c9f4 <__kernel_cos+0x174>)
 800c974:	4622      	mov	r2, r4
 800c976:	429e      	cmp	r6, r3
 800c978:	bfcc      	ite	gt
 800c97a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c9f8 <__kernel_cos+0x178>)
 800c97c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c980:	462b      	mov	r3, r5
 800c982:	2000      	movs	r0, #0
 800c984:	491a      	ldr	r1, [pc, #104]	; (800c9f0 <__kernel_cos+0x170>)
 800c986:	f7f3 fbef 	bl	8000168 <__aeabi_dsub>
 800c98a:	4622      	mov	r2, r4
 800c98c:	4606      	mov	r6, r0
 800c98e:	460f      	mov	r7, r1
 800c990:	462b      	mov	r3, r5
 800c992:	4650      	mov	r0, sl
 800c994:	4659      	mov	r1, fp
 800c996:	f7f3 fbe7 	bl	8000168 <__aeabi_dsub>
 800c99a:	4642      	mov	r2, r8
 800c99c:	464b      	mov	r3, r9
 800c99e:	f7f3 fbe3 	bl	8000168 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	e7dc      	b.n	800c966 <__kernel_cos+0xe6>
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	4910      	ldr	r1, [pc, #64]	; (800c9f0 <__kernel_cos+0x170>)
 800c9b0:	e7db      	b.n	800c96a <__kernel_cos+0xea>
 800c9b2:	bf00      	nop
 800c9b4:	f3af 8000 	nop.w
 800c9b8:	be8838d4 	.word	0xbe8838d4
 800c9bc:	bda8fae9 	.word	0xbda8fae9
 800c9c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c9c4:	3e21ee9e 	.word	0x3e21ee9e
 800c9c8:	809c52ad 	.word	0x809c52ad
 800c9cc:	3e927e4f 	.word	0x3e927e4f
 800c9d0:	19cb1590 	.word	0x19cb1590
 800c9d4:	3efa01a0 	.word	0x3efa01a0
 800c9d8:	16c15177 	.word	0x16c15177
 800c9dc:	3f56c16c 	.word	0x3f56c16c
 800c9e0:	5555554c 	.word	0x5555554c
 800c9e4:	3fa55555 	.word	0x3fa55555
 800c9e8:	3fe00000 	.word	0x3fe00000
 800c9ec:	3fd33332 	.word	0x3fd33332
 800c9f0:	3ff00000 	.word	0x3ff00000
 800c9f4:	3fe90000 	.word	0x3fe90000
 800c9f8:	3fd20000 	.word	0x3fd20000

0800c9fc <__kernel_rem_pio2>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ca04:	9307      	str	r3, [sp, #28]
 800ca06:	9104      	str	r1, [sp, #16]
 800ca08:	4bbf      	ldr	r3, [pc, #764]	; (800cd08 <__kernel_rem_pio2+0x30c>)
 800ca0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ca0c:	1ed4      	subs	r4, r2, #3
 800ca0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca12:	2500      	movs	r5, #0
 800ca14:	9302      	str	r3, [sp, #8]
 800ca16:	9b07      	ldr	r3, [sp, #28]
 800ca18:	9008      	str	r0, [sp, #32]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	9306      	str	r3, [sp, #24]
 800ca1e:	2318      	movs	r3, #24
 800ca20:	fb94 f4f3 	sdiv	r4, r4, r3
 800ca24:	f06f 0317 	mvn.w	r3, #23
 800ca28:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ca2c:	fb04 3303 	mla	r3, r4, r3, r3
 800ca30:	eb03 0a02 	add.w	sl, r3, r2
 800ca34:	9a06      	ldr	r2, [sp, #24]
 800ca36:	9b02      	ldr	r3, [sp, #8]
 800ca38:	1aa7      	subs	r7, r4, r2
 800ca3a:	eb03 0802 	add.w	r8, r3, r2
 800ca3e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ca40:	2200      	movs	r2, #0
 800ca42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ca46:	2300      	movs	r3, #0
 800ca48:	ae1e      	add	r6, sp, #120	; 0x78
 800ca4a:	4545      	cmp	r5, r8
 800ca4c:	dd14      	ble.n	800ca78 <__kernel_rem_pio2+0x7c>
 800ca4e:	2600      	movs	r6, #0
 800ca50:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800ca54:	9b02      	ldr	r3, [sp, #8]
 800ca56:	429e      	cmp	r6, r3
 800ca58:	dc39      	bgt.n	800cace <__kernel_rem_pio2+0xd2>
 800ca5a:	9b08      	ldr	r3, [sp, #32]
 800ca5c:	f04f 0800 	mov.w	r8, #0
 800ca60:	3b08      	subs	r3, #8
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	f04f 0900 	mov.w	r9, #0
 800ca6a:	199d      	adds	r5, r3, r6
 800ca6c:	ab20      	add	r3, sp, #128	; 0x80
 800ca6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca72:	9305      	str	r3, [sp, #20]
 800ca74:	2700      	movs	r7, #0
 800ca76:	e023      	b.n	800cac0 <__kernel_rem_pio2+0xc4>
 800ca78:	42ef      	cmn	r7, r5
 800ca7a:	d40b      	bmi.n	800ca94 <__kernel_rem_pio2+0x98>
 800ca7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ca80:	e9cd 2300 	strd	r2, r3, [sp]
 800ca84:	f7f3 fcbe 	bl	8000404 <__aeabi_i2d>
 800ca88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca8c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800ca90:	3501      	adds	r5, #1
 800ca92:	e7da      	b.n	800ca4a <__kernel_rem_pio2+0x4e>
 800ca94:	4610      	mov	r0, r2
 800ca96:	4619      	mov	r1, r3
 800ca98:	e7f8      	b.n	800ca8c <__kernel_rem_pio2+0x90>
 800ca9a:	9905      	ldr	r1, [sp, #20]
 800ca9c:	9d00      	ldr	r5, [sp, #0]
 800ca9e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800caa2:	9105      	str	r1, [sp, #20]
 800caa4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800caa8:	9500      	str	r5, [sp, #0]
 800caaa:	f7f3 fd15 	bl	80004d8 <__aeabi_dmul>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4640      	mov	r0, r8
 800cab4:	4649      	mov	r1, r9
 800cab6:	f7f3 fb59 	bl	800016c <__adddf3>
 800caba:	4680      	mov	r8, r0
 800cabc:	4689      	mov	r9, r1
 800cabe:	3701      	adds	r7, #1
 800cac0:	9b06      	ldr	r3, [sp, #24]
 800cac2:	429f      	cmp	r7, r3
 800cac4:	dde9      	ble.n	800ca9a <__kernel_rem_pio2+0x9e>
 800cac6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800caca:	3601      	adds	r6, #1
 800cacc:	e7c2      	b.n	800ca54 <__kernel_rem_pio2+0x58>
 800cace:	9b02      	ldr	r3, [sp, #8]
 800cad0:	aa0c      	add	r2, sp, #48	; 0x30
 800cad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cad6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cad8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cada:	9f02      	ldr	r7, [sp, #8]
 800cadc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cae0:	930a      	str	r3, [sp, #40]	; 0x28
 800cae2:	2600      	movs	r6, #0
 800cae4:	ab98      	add	r3, sp, #608	; 0x260
 800cae6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800caea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caf2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800caf6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cafa:	ab98      	add	r3, sp, #608	; 0x260
 800cafc:	445b      	add	r3, fp
 800cafe:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800cb02:	1bbb      	subs	r3, r7, r6
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dc71      	bgt.n	800cbec <__kernel_rem_pio2+0x1f0>
 800cb08:	4652      	mov	r2, sl
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	f000 fd8f 	bl	800d630 <scalbn>
 800cb12:	2200      	movs	r2, #0
 800cb14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb18:	4604      	mov	r4, r0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	f7f3 fcdc 	bl	80004d8 <__aeabi_dmul>
 800cb20:	f000 fcfe 	bl	800d520 <floor>
 800cb24:	2200      	movs	r2, #0
 800cb26:	4b79      	ldr	r3, [pc, #484]	; (800cd0c <__kernel_rem_pio2+0x310>)
 800cb28:	f7f3 fcd6 	bl	80004d8 <__aeabi_dmul>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4620      	mov	r0, r4
 800cb32:	4629      	mov	r1, r5
 800cb34:	f7f3 fb18 	bl	8000168 <__aeabi_dsub>
 800cb38:	460d      	mov	r5, r1
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	f7f3 ff7c 	bl	8000a38 <__aeabi_d2iz>
 800cb40:	9005      	str	r0, [sp, #20]
 800cb42:	f7f3 fc5f 	bl	8000404 <__aeabi_i2d>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	f7f3 fb0b 	bl	8000168 <__aeabi_dsub>
 800cb52:	f1ba 0f00 	cmp.w	sl, #0
 800cb56:	4680      	mov	r8, r0
 800cb58:	4689      	mov	r9, r1
 800cb5a:	dd6c      	ble.n	800cc36 <__kernel_rem_pio2+0x23a>
 800cb5c:	1e7a      	subs	r2, r7, #1
 800cb5e:	ab0c      	add	r3, sp, #48	; 0x30
 800cb60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb64:	f1ca 0118 	rsb	r1, sl, #24
 800cb68:	9c05      	ldr	r4, [sp, #20]
 800cb6a:	fa40 f301 	asr.w	r3, r0, r1
 800cb6e:	441c      	add	r4, r3
 800cb70:	408b      	lsls	r3, r1
 800cb72:	1ac0      	subs	r0, r0, r3
 800cb74:	ab0c      	add	r3, sp, #48	; 0x30
 800cb76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cb7a:	f1ca 0317 	rsb	r3, sl, #23
 800cb7e:	9405      	str	r4, [sp, #20]
 800cb80:	fa40 f303 	asr.w	r3, r0, r3
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dd62      	ble.n	800cc52 <__kernel_rem_pio2+0x256>
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cb92:	4614      	mov	r4, r2
 800cb94:	9b05      	ldr	r3, [sp, #20]
 800cb96:	3301      	adds	r3, #1
 800cb98:	9305      	str	r3, [sp, #20]
 800cb9a:	4297      	cmp	r7, r2
 800cb9c:	f300 809f 	bgt.w	800ccde <__kernel_rem_pio2+0x2e2>
 800cba0:	f1ba 0f00 	cmp.w	sl, #0
 800cba4:	dd07      	ble.n	800cbb6 <__kernel_rem_pio2+0x1ba>
 800cba6:	f1ba 0f01 	cmp.w	sl, #1
 800cbaa:	f000 80bb 	beq.w	800cd24 <__kernel_rem_pio2+0x328>
 800cbae:	f1ba 0f02 	cmp.w	sl, #2
 800cbb2:	f000 80c1 	beq.w	800cd38 <__kernel_rem_pio2+0x33c>
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d14a      	bne.n	800cc52 <__kernel_rem_pio2+0x256>
 800cbbc:	4642      	mov	r2, r8
 800cbbe:	464b      	mov	r3, r9
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4953      	ldr	r1, [pc, #332]	; (800cd10 <__kernel_rem_pio2+0x314>)
 800cbc4:	f7f3 fad0 	bl	8000168 <__aeabi_dsub>
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4689      	mov	r9, r1
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	d040      	beq.n	800cc52 <__kernel_rem_pio2+0x256>
 800cbd0:	4652      	mov	r2, sl
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	494e      	ldr	r1, [pc, #312]	; (800cd10 <__kernel_rem_pio2+0x314>)
 800cbd6:	f000 fd2b 	bl	800d630 <scalbn>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4640      	mov	r0, r8
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	f7f3 fac1 	bl	8000168 <__aeabi_dsub>
 800cbe6:	4680      	mov	r8, r0
 800cbe8:	4689      	mov	r9, r1
 800cbea:	e032      	b.n	800cc52 <__kernel_rem_pio2+0x256>
 800cbec:	2200      	movs	r2, #0
 800cbee:	4b49      	ldr	r3, [pc, #292]	; (800cd14 <__kernel_rem_pio2+0x318>)
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	f7f3 fc70 	bl	80004d8 <__aeabi_dmul>
 800cbf8:	f7f3 ff1e 	bl	8000a38 <__aeabi_d2iz>
 800cbfc:	f7f3 fc02 	bl	8000404 <__aeabi_i2d>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4b45      	ldr	r3, [pc, #276]	; (800cd18 <__kernel_rem_pio2+0x31c>)
 800cc04:	e9cd 0100 	strd	r0, r1, [sp]
 800cc08:	f7f3 fc66 	bl	80004d8 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4640      	mov	r0, r8
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7f3 faa8 	bl	8000168 <__aeabi_dsub>
 800cc18:	f7f3 ff0e 	bl	8000a38 <__aeabi_d2iz>
 800cc1c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc1e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cc22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cc26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc2a:	f7f3 fa9f 	bl	800016c <__adddf3>
 800cc2e:	3601      	adds	r6, #1
 800cc30:	4680      	mov	r8, r0
 800cc32:	4689      	mov	r9, r1
 800cc34:	e765      	b.n	800cb02 <__kernel_rem_pio2+0x106>
 800cc36:	d105      	bne.n	800cc44 <__kernel_rem_pio2+0x248>
 800cc38:	1e7b      	subs	r3, r7, #1
 800cc3a:	aa0c      	add	r2, sp, #48	; 0x30
 800cc3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cc40:	15c3      	asrs	r3, r0, #23
 800cc42:	e79f      	b.n	800cb84 <__kernel_rem_pio2+0x188>
 800cc44:	2200      	movs	r2, #0
 800cc46:	4b35      	ldr	r3, [pc, #212]	; (800cd1c <__kernel_rem_pio2+0x320>)
 800cc48:	f7f3 fecc 	bl	80009e4 <__aeabi_dcmpge>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d143      	bne.n	800ccd8 <__kernel_rem_pio2+0x2dc>
 800cc50:	9000      	str	r0, [sp, #0]
 800cc52:	2200      	movs	r2, #0
 800cc54:	2300      	movs	r3, #0
 800cc56:	4640      	mov	r0, r8
 800cc58:	4649      	mov	r1, r9
 800cc5a:	f7f3 fea5 	bl	80009a8 <__aeabi_dcmpeq>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f000 80c3 	beq.w	800cdea <__kernel_rem_pio2+0x3ee>
 800cc64:	1e7c      	subs	r4, r7, #1
 800cc66:	4623      	mov	r3, r4
 800cc68:	2200      	movs	r2, #0
 800cc6a:	9902      	ldr	r1, [sp, #8]
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	da6a      	bge.n	800cd46 <__kernel_rem_pio2+0x34a>
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	f000 8084 	beq.w	800cd7e <__kernel_rem_pio2+0x382>
 800cc76:	ab0c      	add	r3, sp, #48	; 0x30
 800cc78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cc7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 80b0 	beq.w	800cde6 <__kernel_rem_pio2+0x3ea>
 800cc86:	4652      	mov	r2, sl
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4921      	ldr	r1, [pc, #132]	; (800cd10 <__kernel_rem_pio2+0x314>)
 800cc8c:	f000 fcd0 	bl	800d630 <scalbn>
 800cc90:	4625      	mov	r5, r4
 800cc92:	4606      	mov	r6, r0
 800cc94:	460f      	mov	r7, r1
 800cc96:	f04f 0a00 	mov.w	sl, #0
 800cc9a:	00e3      	lsls	r3, r4, #3
 800cc9c:	aa98      	add	r2, sp, #608	; 0x260
 800cc9e:	eb02 0803 	add.w	r8, r2, r3
 800cca2:	f8df b070 	ldr.w	fp, [pc, #112]	; 800cd14 <__kernel_rem_pio2+0x318>
 800cca6:	9306      	str	r3, [sp, #24]
 800cca8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	f280 80d2 	bge.w	800ce56 <__kernel_rem_pio2+0x45a>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	9a06      	ldr	r2, [sp, #24]
 800ccb6:	ab98      	add	r3, sp, #608	; 0x260
 800ccb8:	189e      	adds	r6, r3, r2
 800ccba:	3ea8      	subs	r6, #168	; 0xa8
 800ccbc:	1b63      	subs	r3, r4, r5
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f2c0 80f9 	blt.w	800ceb6 <__kernel_rem_pio2+0x4ba>
 800ccc4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cd20 <__kernel_rem_pio2+0x324>
 800ccc8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800cccc:	f04f 0a00 	mov.w	sl, #0
 800ccd0:	f04f 0b00 	mov.w	fp, #0
 800ccd4:	2700      	movs	r7, #0
 800ccd6:	e0e2      	b.n	800ce9e <__kernel_rem_pio2+0x4a2>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	e756      	b.n	800cb8c <__kernel_rem_pio2+0x190>
 800ccde:	ab0c      	add	r3, sp, #48	; 0x30
 800cce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce4:	b94c      	cbnz	r4, 800ccfa <__kernel_rem_pio2+0x2fe>
 800cce6:	b12b      	cbz	r3, 800ccf4 <__kernel_rem_pio2+0x2f8>
 800cce8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ccec:	a80c      	add	r0, sp, #48	; 0x30
 800ccee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	3201      	adds	r2, #1
 800ccf6:	461c      	mov	r4, r3
 800ccf8:	e74f      	b.n	800cb9a <__kernel_rem_pio2+0x19e>
 800ccfa:	1acb      	subs	r3, r1, r3
 800ccfc:	a80c      	add	r0, sp, #48	; 0x30
 800ccfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cd02:	4623      	mov	r3, r4
 800cd04:	e7f6      	b.n	800ccf4 <__kernel_rem_pio2+0x2f8>
 800cd06:	bf00      	nop
 800cd08:	0800dee0 	.word	0x0800dee0
 800cd0c:	40200000 	.word	0x40200000
 800cd10:	3ff00000 	.word	0x3ff00000
 800cd14:	3e700000 	.word	0x3e700000
 800cd18:	41700000 	.word	0x41700000
 800cd1c:	3fe00000 	.word	0x3fe00000
 800cd20:	0800de98 	.word	0x0800de98
 800cd24:	1e7a      	subs	r2, r7, #1
 800cd26:	ab0c      	add	r3, sp, #48	; 0x30
 800cd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cd30:	a90c      	add	r1, sp, #48	; 0x30
 800cd32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cd36:	e73e      	b.n	800cbb6 <__kernel_rem_pio2+0x1ba>
 800cd38:	1e7a      	subs	r2, r7, #1
 800cd3a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd44:	e7f4      	b.n	800cd30 <__kernel_rem_pio2+0x334>
 800cd46:	a90c      	add	r1, sp, #48	; 0x30
 800cd48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	e78b      	b.n	800cc6a <__kernel_rem_pio2+0x26e>
 800cd52:	3401      	adds	r4, #1
 800cd54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	d0fa      	beq.n	800cd52 <__kernel_rem_pio2+0x356>
 800cd5c:	ab98      	add	r3, sp, #608	; 0x260
 800cd5e:	449b      	add	fp, r3
 800cd60:	9b07      	ldr	r3, [sp, #28]
 800cd62:	1c7e      	adds	r6, r7, #1
 800cd64:	19dd      	adds	r5, r3, r7
 800cd66:	ab98      	add	r3, sp, #608	; 0x260
 800cd68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cd6c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800cd70:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800cd74:	443c      	add	r4, r7
 800cd76:	42b4      	cmp	r4, r6
 800cd78:	da04      	bge.n	800cd84 <__kernel_rem_pio2+0x388>
 800cd7a:	4627      	mov	r7, r4
 800cd7c:	e6b1      	b.n	800cae2 <__kernel_rem_pio2+0xe6>
 800cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd80:	2401      	movs	r4, #1
 800cd82:	e7e7      	b.n	800cd54 <__kernel_rem_pio2+0x358>
 800cd84:	f105 0308 	add.w	r3, r5, #8
 800cd88:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd8c:	2700      	movs	r7, #0
 800cd8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cd92:	f7f3 fb37 	bl	8000404 <__aeabi_i2d>
 800cd96:	f04f 0800 	mov.w	r8, #0
 800cd9a:	f04f 0900 	mov.w	r9, #0
 800cd9e:	9b08      	ldr	r3, [sp, #32]
 800cda0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cda4:	3b08      	subs	r3, #8
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	f105 0310 	add.w	r3, r5, #16
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	9b06      	ldr	r3, [sp, #24]
 800cdb0:	429f      	cmp	r7, r3
 800cdb2:	dd04      	ble.n	800cdbe <__kernel_rem_pio2+0x3c2>
 800cdb4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800cdb8:	3601      	adds	r6, #1
 800cdba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cdbc:	e7db      	b.n	800cd76 <__kernel_rem_pio2+0x37a>
 800cdbe:	9905      	ldr	r1, [sp, #20]
 800cdc0:	9d00      	ldr	r5, [sp, #0]
 800cdc2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cdc6:	9105      	str	r1, [sp, #20]
 800cdc8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800cdcc:	9500      	str	r5, [sp, #0]
 800cdce:	f7f3 fb83 	bl	80004d8 <__aeabi_dmul>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	4649      	mov	r1, r9
 800cdda:	f7f3 f9c7 	bl	800016c <__adddf3>
 800cdde:	3701      	adds	r7, #1
 800cde0:	4680      	mov	r8, r0
 800cde2:	4689      	mov	r9, r1
 800cde4:	e7e3      	b.n	800cdae <__kernel_rem_pio2+0x3b2>
 800cde6:	3c01      	subs	r4, #1
 800cde8:	e745      	b.n	800cc76 <__kernel_rem_pio2+0x27a>
 800cdea:	f1ca 0200 	rsb	r2, sl, #0
 800cdee:	4640      	mov	r0, r8
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	f000 fc1d 	bl	800d630 <scalbn>
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4ba3      	ldr	r3, [pc, #652]	; (800d088 <__kernel_rem_pio2+0x68c>)
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	f7f3 fdf1 	bl	80009e4 <__aeabi_dcmpge>
 800ce02:	b1f8      	cbz	r0, 800ce44 <__kernel_rem_pio2+0x448>
 800ce04:	2200      	movs	r2, #0
 800ce06:	4ba1      	ldr	r3, [pc, #644]	; (800d08c <__kernel_rem_pio2+0x690>)
 800ce08:	4620      	mov	r0, r4
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	f7f3 fb64 	bl	80004d8 <__aeabi_dmul>
 800ce10:	f7f3 fe12 	bl	8000a38 <__aeabi_d2iz>
 800ce14:	4606      	mov	r6, r0
 800ce16:	f7f3 faf5 	bl	8000404 <__aeabi_i2d>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4b9a      	ldr	r3, [pc, #616]	; (800d088 <__kernel_rem_pio2+0x68c>)
 800ce1e:	f7f3 fb5b 	bl	80004d8 <__aeabi_dmul>
 800ce22:	460b      	mov	r3, r1
 800ce24:	4602      	mov	r2, r0
 800ce26:	4629      	mov	r1, r5
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f7f3 f99d 	bl	8000168 <__aeabi_dsub>
 800ce2e:	f7f3 fe03 	bl	8000a38 <__aeabi_d2iz>
 800ce32:	1c7c      	adds	r4, r7, #1
 800ce34:	ab0c      	add	r3, sp, #48	; 0x30
 800ce36:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ce3a:	f10a 0a18 	add.w	sl, sl, #24
 800ce3e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ce42:	e720      	b.n	800cc86 <__kernel_rem_pio2+0x28a>
 800ce44:	4620      	mov	r0, r4
 800ce46:	4629      	mov	r1, r5
 800ce48:	f7f3 fdf6 	bl	8000a38 <__aeabi_d2iz>
 800ce4c:	ab0c      	add	r3, sp, #48	; 0x30
 800ce4e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ce52:	463c      	mov	r4, r7
 800ce54:	e717      	b.n	800cc86 <__kernel_rem_pio2+0x28a>
 800ce56:	ab0c      	add	r3, sp, #48	; 0x30
 800ce58:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce5c:	f7f3 fad2 	bl	8000404 <__aeabi_i2d>
 800ce60:	4632      	mov	r2, r6
 800ce62:	463b      	mov	r3, r7
 800ce64:	f7f3 fb38 	bl	80004d8 <__aeabi_dmul>
 800ce68:	4652      	mov	r2, sl
 800ce6a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ce6e:	465b      	mov	r3, fp
 800ce70:	4630      	mov	r0, r6
 800ce72:	4639      	mov	r1, r7
 800ce74:	f7f3 fb30 	bl	80004d8 <__aeabi_dmul>
 800ce78:	3d01      	subs	r5, #1
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460f      	mov	r7, r1
 800ce7e:	e715      	b.n	800ccac <__kernel_rem_pio2+0x2b0>
 800ce80:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800ce84:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ce88:	f7f3 fb26 	bl	80004d8 <__aeabi_dmul>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4650      	mov	r0, sl
 800ce92:	4659      	mov	r1, fp
 800ce94:	f7f3 f96a 	bl	800016c <__adddf3>
 800ce98:	4682      	mov	sl, r0
 800ce9a:	468b      	mov	fp, r1
 800ce9c:	3701      	adds	r7, #1
 800ce9e:	9b02      	ldr	r3, [sp, #8]
 800cea0:	429f      	cmp	r7, r3
 800cea2:	dc01      	bgt.n	800cea8 <__kernel_rem_pio2+0x4ac>
 800cea4:	42bd      	cmp	r5, r7
 800cea6:	daeb      	bge.n	800ce80 <__kernel_rem_pio2+0x484>
 800cea8:	ab48      	add	r3, sp, #288	; 0x120
 800ceaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ceae:	e9c3 ab00 	strd	sl, fp, [r3]
 800ceb2:	3501      	adds	r5, #1
 800ceb4:	e702      	b.n	800ccbc <__kernel_rem_pio2+0x2c0>
 800ceb6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	d86c      	bhi.n	800cf96 <__kernel_rem_pio2+0x59a>
 800cebc:	e8df f003 	tbb	[pc, r3]
 800cec0:	022f2f59 	.word	0x022f2f59
 800cec4:	9a06      	ldr	r2, [sp, #24]
 800cec6:	ab48      	add	r3, sp, #288	; 0x120
 800cec8:	189d      	adds	r5, r3, r2
 800ceca:	46aa      	mov	sl, r5
 800cecc:	46a3      	mov	fp, r4
 800cece:	f1bb 0f00 	cmp.w	fp, #0
 800ced2:	f300 8087 	bgt.w	800cfe4 <__kernel_rem_pio2+0x5e8>
 800ced6:	46a2      	mov	sl, r4
 800ced8:	f1ba 0f01 	cmp.w	sl, #1
 800cedc:	f300 809f 	bgt.w	800d01e <__kernel_rem_pio2+0x622>
 800cee0:	2700      	movs	r7, #0
 800cee2:	463e      	mov	r6, r7
 800cee4:	9d06      	ldr	r5, [sp, #24]
 800cee6:	ab48      	add	r3, sp, #288	; 0x120
 800cee8:	3508      	adds	r5, #8
 800ceea:	441d      	add	r5, r3
 800ceec:	2c01      	cmp	r4, #1
 800ceee:	f300 80b3 	bgt.w	800d058 <__kernel_rem_pio2+0x65c>
 800cef2:	9b00      	ldr	r3, [sp, #0]
 800cef4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800cef6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800cef8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800cefa:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f040 80b5 	bne.w	800d06c <__kernel_rem_pio2+0x670>
 800cf02:	4603      	mov	r3, r0
 800cf04:	462a      	mov	r2, r5
 800cf06:	9804      	ldr	r0, [sp, #16]
 800cf08:	e9c0 2300 	strd	r2, r3, [r0]
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	460b      	mov	r3, r1
 800cf10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf14:	463a      	mov	r2, r7
 800cf16:	4633      	mov	r3, r6
 800cf18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cf1c:	e03b      	b.n	800cf96 <__kernel_rem_pio2+0x59a>
 800cf1e:	f04f 0c00 	mov.w	ip, #0
 800cf22:	4626      	mov	r6, r4
 800cf24:	4667      	mov	r7, ip
 800cf26:	9d06      	ldr	r5, [sp, #24]
 800cf28:	ab48      	add	r3, sp, #288	; 0x120
 800cf2a:	3508      	adds	r5, #8
 800cf2c:	441d      	add	r5, r3
 800cf2e:	2e00      	cmp	r6, #0
 800cf30:	da42      	bge.n	800cfb8 <__kernel_rem_pio2+0x5bc>
 800cf32:	9b00      	ldr	r3, [sp, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d049      	beq.n	800cfcc <__kernel_rem_pio2+0x5d0>
 800cf38:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800cf3c:	4662      	mov	r2, ip
 800cf3e:	460b      	mov	r3, r1
 800cf40:	9904      	ldr	r1, [sp, #16]
 800cf42:	2601      	movs	r6, #1
 800cf44:	e9c1 2300 	strd	r2, r3, [r1]
 800cf48:	a948      	add	r1, sp, #288	; 0x120
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf50:	f7f3 f90a 	bl	8000168 <__aeabi_dsub>
 800cf54:	4684      	mov	ip, r0
 800cf56:	460f      	mov	r7, r1
 800cf58:	ad48      	add	r5, sp, #288	; 0x120
 800cf5a:	42b4      	cmp	r4, r6
 800cf5c:	da38      	bge.n	800cfd0 <__kernel_rem_pio2+0x5d4>
 800cf5e:	9b00      	ldr	r3, [sp, #0]
 800cf60:	b10b      	cbz	r3, 800cf66 <__kernel_rem_pio2+0x56a>
 800cf62:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cf66:	4662      	mov	r2, ip
 800cf68:	463b      	mov	r3, r7
 800cf6a:	9904      	ldr	r1, [sp, #16]
 800cf6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cf70:	e011      	b.n	800cf96 <__kernel_rem_pio2+0x59a>
 800cf72:	2700      	movs	r7, #0
 800cf74:	463d      	mov	r5, r7
 800cf76:	9b06      	ldr	r3, [sp, #24]
 800cf78:	aa98      	add	r2, sp, #608	; 0x260
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	da0f      	bge.n	800cfa4 <__kernel_rem_pio2+0x5a8>
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	b10b      	cbz	r3, 800cf8c <__kernel_rem_pio2+0x590>
 800cf88:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800cf8c:	463a      	mov	r2, r7
 800cf8e:	462b      	mov	r3, r5
 800cf90:	9904      	ldr	r1, [sp, #16]
 800cf92:	e9c1 2300 	strd	r2, r3, [r1]
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	f003 0007 	and.w	r0, r3, #7
 800cf9c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7f3 f8de 	bl	800016c <__adddf3>
 800cfb0:	3c01      	subs	r4, #1
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	e7e3      	b.n	800cf80 <__kernel_rem_pio2+0x584>
 800cfb8:	4660      	mov	r0, ip
 800cfba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	f7f3 f8d4 	bl	800016c <__adddf3>
 800cfc4:	3e01      	subs	r6, #1
 800cfc6:	4684      	mov	ip, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	e7b0      	b.n	800cf2e <__kernel_rem_pio2+0x532>
 800cfcc:	4639      	mov	r1, r7
 800cfce:	e7b5      	b.n	800cf3c <__kernel_rem_pio2+0x540>
 800cfd0:	4660      	mov	r0, ip
 800cfd2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 f8c8 	bl	800016c <__adddf3>
 800cfdc:	3601      	adds	r6, #1
 800cfde:	4684      	mov	ip, r0
 800cfe0:	460f      	mov	r7, r1
 800cfe2:	e7ba      	b.n	800cf5a <__kernel_rem_pio2+0x55e>
 800cfe4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800cfe8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800cfec:	4640      	mov	r0, r8
 800cfee:	4649      	mov	r1, r9
 800cff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cff4:	f7f3 f8ba 	bl	800016c <__adddf3>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4606      	mov	r6, r0
 800cffe:	460f      	mov	r7, r1
 800d000:	4640      	mov	r0, r8
 800d002:	4649      	mov	r1, r9
 800d004:	f7f3 f8b0 	bl	8000168 <__aeabi_dsub>
 800d008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d00c:	f7f3 f8ae 	bl	800016c <__adddf3>
 800d010:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d014:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d018:	e9ca 6700 	strd	r6, r7, [sl]
 800d01c:	e757      	b.n	800cece <__kernel_rem_pio2+0x4d2>
 800d01e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800d022:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800d026:	4630      	mov	r0, r6
 800d028:	4639      	mov	r1, r7
 800d02a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d02e:	f7f3 f89d 	bl	800016c <__adddf3>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4680      	mov	r8, r0
 800d038:	4689      	mov	r9, r1
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 f893 	bl	8000168 <__aeabi_dsub>
 800d042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d046:	f7f3 f891 	bl	800016c <__adddf3>
 800d04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d04e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d052:	e9c5 8900 	strd	r8, r9, [r5]
 800d056:	e73f      	b.n	800ced8 <__kernel_rem_pio2+0x4dc>
 800d058:	4638      	mov	r0, r7
 800d05a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d05e:	4631      	mov	r1, r6
 800d060:	f7f3 f884 	bl	800016c <__adddf3>
 800d064:	3c01      	subs	r4, #1
 800d066:	4607      	mov	r7, r0
 800d068:	460e      	mov	r6, r1
 800d06a:	e73f      	b.n	800ceec <__kernel_rem_pio2+0x4f0>
 800d06c:	9b04      	ldr	r3, [sp, #16]
 800d06e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d072:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d076:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d07a:	601d      	str	r5, [r3, #0]
 800d07c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d080:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d084:	615e      	str	r6, [r3, #20]
 800d086:	e786      	b.n	800cf96 <__kernel_rem_pio2+0x59a>
 800d088:	41700000 	.word	0x41700000
 800d08c:	3e700000 	.word	0x3e700000

0800d090 <__kernel_sin>:
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	b086      	sub	sp, #24
 800d096:	e9cd 2300 	strd	r2, r3, [sp]
 800d09a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d09e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d0a2:	4682      	mov	sl, r0
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d0a8:	da03      	bge.n	800d0b2 <__kernel_sin+0x22>
 800d0aa:	f7f3 fcc5 	bl	8000a38 <__aeabi_d2iz>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d050      	beq.n	800d154 <__kernel_sin+0xc4>
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	4623      	mov	r3, r4
 800d0b6:	4650      	mov	r0, sl
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f7f3 fa0d 	bl	80004d8 <__aeabi_dmul>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	460f      	mov	r7, r1
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	f7f3 fa05 	bl	80004d8 <__aeabi_dmul>
 800d0ce:	a33e      	add	r3, pc, #248	; (adr r3, 800d1c8 <__kernel_sin+0x138>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	4680      	mov	r8, r0
 800d0d6:	4689      	mov	r9, r1
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 f9fc 	bl	80004d8 <__aeabi_dmul>
 800d0e0:	a33b      	add	r3, pc, #236	; (adr r3, 800d1d0 <__kernel_sin+0x140>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	f7f3 f83f 	bl	8000168 <__aeabi_dsub>
 800d0ea:	4632      	mov	r2, r6
 800d0ec:	463b      	mov	r3, r7
 800d0ee:	f7f3 f9f3 	bl	80004d8 <__aeabi_dmul>
 800d0f2:	a339      	add	r3, pc, #228	; (adr r3, 800d1d8 <__kernel_sin+0x148>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 f838 	bl	800016c <__adddf3>
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	f7f3 f9ea 	bl	80004d8 <__aeabi_dmul>
 800d104:	a336      	add	r3, pc, #216	; (adr r3, 800d1e0 <__kernel_sin+0x150>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7f3 f82d 	bl	8000168 <__aeabi_dsub>
 800d10e:	4632      	mov	r2, r6
 800d110:	463b      	mov	r3, r7
 800d112:	f7f3 f9e1 	bl	80004d8 <__aeabi_dmul>
 800d116:	a334      	add	r3, pc, #208	; (adr r3, 800d1e8 <__kernel_sin+0x158>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 f826 	bl	800016c <__adddf3>
 800d120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d124:	b9dd      	cbnz	r5, 800d15e <__kernel_sin+0xce>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4630      	mov	r0, r6
 800d12c:	4639      	mov	r1, r7
 800d12e:	f7f3 f9d3 	bl	80004d8 <__aeabi_dmul>
 800d132:	a32f      	add	r3, pc, #188	; (adr r3, 800d1f0 <__kernel_sin+0x160>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 f816 	bl	8000168 <__aeabi_dsub>
 800d13c:	4642      	mov	r2, r8
 800d13e:	464b      	mov	r3, r9
 800d140:	f7f3 f9ca 	bl	80004d8 <__aeabi_dmul>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	4650      	mov	r0, sl
 800d14a:	4621      	mov	r1, r4
 800d14c:	f7f3 f80e 	bl	800016c <__adddf3>
 800d150:	4682      	mov	sl, r0
 800d152:	460c      	mov	r4, r1
 800d154:	4650      	mov	r0, sl
 800d156:	4621      	mov	r1, r4
 800d158:	b006      	add	sp, #24
 800d15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15e:	2200      	movs	r2, #0
 800d160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d164:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <__kernel_sin+0x168>)
 800d166:	f7f3 f9b7 	bl	80004d8 <__aeabi_dmul>
 800d16a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d16e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d172:	4640      	mov	r0, r8
 800d174:	4649      	mov	r1, r9
 800d176:	f7f3 f9af 	bl	80004d8 <__aeabi_dmul>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d182:	f7f2 fff1 	bl	8000168 <__aeabi_dsub>
 800d186:	4632      	mov	r2, r6
 800d188:	463b      	mov	r3, r7
 800d18a:	f7f3 f9a5 	bl	80004d8 <__aeabi_dmul>
 800d18e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d192:	f7f2 ffe9 	bl	8000168 <__aeabi_dsub>
 800d196:	a316      	add	r3, pc, #88	; (adr r3, 800d1f0 <__kernel_sin+0x160>)
 800d198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19c:	4606      	mov	r6, r0
 800d19e:	460f      	mov	r7, r1
 800d1a0:	4640      	mov	r0, r8
 800d1a2:	4649      	mov	r1, r9
 800d1a4:	f7f3 f998 	bl	80004d8 <__aeabi_dmul>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f2 ffdc 	bl	800016c <__adddf3>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	f7f2 ffd4 	bl	8000168 <__aeabi_dsub>
 800d1c0:	e7c6      	b.n	800d150 <__kernel_sin+0xc0>
 800d1c2:	bf00      	nop
 800d1c4:	f3af 8000 	nop.w
 800d1c8:	5acfd57c 	.word	0x5acfd57c
 800d1cc:	3de5d93a 	.word	0x3de5d93a
 800d1d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d1d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800d1d8:	57b1fe7d 	.word	0x57b1fe7d
 800d1dc:	3ec71de3 	.word	0x3ec71de3
 800d1e0:	19c161d5 	.word	0x19c161d5
 800d1e4:	3f2a01a0 	.word	0x3f2a01a0
 800d1e8:	1110f8a6 	.word	0x1110f8a6
 800d1ec:	3f811111 	.word	0x3f811111
 800d1f0:	55555549 	.word	0x55555549
 800d1f4:	3fc55555 	.word	0x3fc55555
 800d1f8:	3fe00000 	.word	0x3fe00000
 800d1fc:	00000000 	.word	0x00000000

0800d200 <atan>:
 800d200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	4bb6      	ldr	r3, [pc, #728]	; (800d4e0 <atan+0x2e0>)
 800d206:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d20a:	429e      	cmp	r6, r3
 800d20c:	4604      	mov	r4, r0
 800d20e:	460d      	mov	r5, r1
 800d210:	468b      	mov	fp, r1
 800d212:	dd17      	ble.n	800d244 <atan+0x44>
 800d214:	4bb3      	ldr	r3, [pc, #716]	; (800d4e4 <atan+0x2e4>)
 800d216:	429e      	cmp	r6, r3
 800d218:	dc01      	bgt.n	800d21e <atan+0x1e>
 800d21a:	d109      	bne.n	800d230 <atan+0x30>
 800d21c:	b140      	cbz	r0, 800d230 <atan+0x30>
 800d21e:	4622      	mov	r2, r4
 800d220:	462b      	mov	r3, r5
 800d222:	4620      	mov	r0, r4
 800d224:	4629      	mov	r1, r5
 800d226:	f7f2 ffa1 	bl	800016c <__adddf3>
 800d22a:	4604      	mov	r4, r0
 800d22c:	460d      	mov	r5, r1
 800d22e:	e005      	b.n	800d23c <atan+0x3c>
 800d230:	f1bb 0f00 	cmp.w	fp, #0
 800d234:	4cac      	ldr	r4, [pc, #688]	; (800d4e8 <atan+0x2e8>)
 800d236:	f340 8121 	ble.w	800d47c <atan+0x27c>
 800d23a:	4dac      	ldr	r5, [pc, #688]	; (800d4ec <atan+0x2ec>)
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d244:	4baa      	ldr	r3, [pc, #680]	; (800d4f0 <atan+0x2f0>)
 800d246:	429e      	cmp	r6, r3
 800d248:	dc11      	bgt.n	800d26e <atan+0x6e>
 800d24a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d24e:	429e      	cmp	r6, r3
 800d250:	dc0a      	bgt.n	800d268 <atan+0x68>
 800d252:	a38b      	add	r3, pc, #556	; (adr r3, 800d480 <atan+0x280>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	f7f2 ff88 	bl	800016c <__adddf3>
 800d25c:	2200      	movs	r2, #0
 800d25e:	4ba5      	ldr	r3, [pc, #660]	; (800d4f4 <atan+0x2f4>)
 800d260:	f7f3 fbca 	bl	80009f8 <__aeabi_dcmpgt>
 800d264:	2800      	cmp	r0, #0
 800d266:	d1e9      	bne.n	800d23c <atan+0x3c>
 800d268:	f04f 3aff 	mov.w	sl, #4294967295
 800d26c:	e027      	b.n	800d2be <atan+0xbe>
 800d26e:	f000 f951 	bl	800d514 <fabs>
 800d272:	4ba1      	ldr	r3, [pc, #644]	; (800d4f8 <atan+0x2f8>)
 800d274:	4604      	mov	r4, r0
 800d276:	429e      	cmp	r6, r3
 800d278:	460d      	mov	r5, r1
 800d27a:	f300 80b8 	bgt.w	800d3ee <atan+0x1ee>
 800d27e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d282:	429e      	cmp	r6, r3
 800d284:	f300 809c 	bgt.w	800d3c0 <atan+0x1c0>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	f7f2 ff6e 	bl	800016c <__adddf3>
 800d290:	2200      	movs	r2, #0
 800d292:	4b98      	ldr	r3, [pc, #608]	; (800d4f4 <atan+0x2f4>)
 800d294:	f7f2 ff68 	bl	8000168 <__aeabi_dsub>
 800d298:	2200      	movs	r2, #0
 800d29a:	4606      	mov	r6, r0
 800d29c:	460f      	mov	r7, r1
 800d29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f2 ff61 	bl	800016c <__adddf3>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 fa3b 	bl	800072c <__aeabi_ddiv>
 800d2b6:	f04f 0a00 	mov.w	sl, #0
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	460d      	mov	r5, r1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	462b      	mov	r3, r5
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f3 f907 	bl	80004d8 <__aeabi_dmul>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	4689      	mov	r9, r1
 800d2d2:	f7f3 f901 	bl	80004d8 <__aeabi_dmul>
 800d2d6:	a36c      	add	r3, pc, #432	; (adr r3, 800d488 <atan+0x288>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	4606      	mov	r6, r0
 800d2de:	460f      	mov	r7, r1
 800d2e0:	f7f3 f8fa 	bl	80004d8 <__aeabi_dmul>
 800d2e4:	a36a      	add	r3, pc, #424	; (adr r3, 800d490 <atan+0x290>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f2 ff3f 	bl	800016c <__adddf3>
 800d2ee:	4632      	mov	r2, r6
 800d2f0:	463b      	mov	r3, r7
 800d2f2:	f7f3 f8f1 	bl	80004d8 <__aeabi_dmul>
 800d2f6:	a368      	add	r3, pc, #416	; (adr r3, 800d498 <atan+0x298>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f2 ff36 	bl	800016c <__adddf3>
 800d300:	4632      	mov	r2, r6
 800d302:	463b      	mov	r3, r7
 800d304:	f7f3 f8e8 	bl	80004d8 <__aeabi_dmul>
 800d308:	a365      	add	r3, pc, #404	; (adr r3, 800d4a0 <atan+0x2a0>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f7f2 ff2d 	bl	800016c <__adddf3>
 800d312:	4632      	mov	r2, r6
 800d314:	463b      	mov	r3, r7
 800d316:	f7f3 f8df 	bl	80004d8 <__aeabi_dmul>
 800d31a:	a363      	add	r3, pc, #396	; (adr r3, 800d4a8 <atan+0x2a8>)
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f7f2 ff24 	bl	800016c <__adddf3>
 800d324:	4632      	mov	r2, r6
 800d326:	463b      	mov	r3, r7
 800d328:	f7f3 f8d6 	bl	80004d8 <__aeabi_dmul>
 800d32c:	a360      	add	r3, pc, #384	; (adr r3, 800d4b0 <atan+0x2b0>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f2 ff1b 	bl	800016c <__adddf3>
 800d336:	4642      	mov	r2, r8
 800d338:	464b      	mov	r3, r9
 800d33a:	f7f3 f8cd 	bl	80004d8 <__aeabi_dmul>
 800d33e:	a35e      	add	r3, pc, #376	; (adr r3, 800d4b8 <atan+0x2b8>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	4680      	mov	r8, r0
 800d346:	4689      	mov	r9, r1
 800d348:	4630      	mov	r0, r6
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f3 f8c4 	bl	80004d8 <__aeabi_dmul>
 800d350:	a35b      	add	r3, pc, #364	; (adr r3, 800d4c0 <atan+0x2c0>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	f7f2 ff07 	bl	8000168 <__aeabi_dsub>
 800d35a:	4632      	mov	r2, r6
 800d35c:	463b      	mov	r3, r7
 800d35e:	f7f3 f8bb 	bl	80004d8 <__aeabi_dmul>
 800d362:	a359      	add	r3, pc, #356	; (adr r3, 800d4c8 <atan+0x2c8>)
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	f7f2 fefe 	bl	8000168 <__aeabi_dsub>
 800d36c:	4632      	mov	r2, r6
 800d36e:	463b      	mov	r3, r7
 800d370:	f7f3 f8b2 	bl	80004d8 <__aeabi_dmul>
 800d374:	a356      	add	r3, pc, #344	; (adr r3, 800d4d0 <atan+0x2d0>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	f7f2 fef5 	bl	8000168 <__aeabi_dsub>
 800d37e:	4632      	mov	r2, r6
 800d380:	463b      	mov	r3, r7
 800d382:	f7f3 f8a9 	bl	80004d8 <__aeabi_dmul>
 800d386:	a354      	add	r3, pc, #336	; (adr r3, 800d4d8 <atan+0x2d8>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 feec 	bl	8000168 <__aeabi_dsub>
 800d390:	4632      	mov	r2, r6
 800d392:	463b      	mov	r3, r7
 800d394:	f7f3 f8a0 	bl	80004d8 <__aeabi_dmul>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f2 fee4 	bl	800016c <__adddf3>
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	462b      	mov	r3, r5
 800d3a8:	f7f3 f896 	bl	80004d8 <__aeabi_dmul>
 800d3ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	d144      	bne.n	800d440 <atan+0x240>
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	f7f2 fed5 	bl	8000168 <__aeabi_dsub>
 800d3be:	e734      	b.n	800d22a <atan+0x2a>
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	4b4c      	ldr	r3, [pc, #304]	; (800d4f4 <atan+0x2f4>)
 800d3c4:	f7f2 fed0 	bl	8000168 <__aeabi_dsub>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	4b49      	ldr	r3, [pc, #292]	; (800d4f4 <atan+0x2f4>)
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	f7f2 feca 	bl	800016c <__adddf3>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4630      	mov	r0, r6
 800d3de:	4639      	mov	r1, r7
 800d3e0:	f7f3 f9a4 	bl	800072c <__aeabi_ddiv>
 800d3e4:	f04f 0a01 	mov.w	sl, #1
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	e767      	b.n	800d2be <atan+0xbe>
 800d3ee:	4b43      	ldr	r3, [pc, #268]	; (800d4fc <atan+0x2fc>)
 800d3f0:	429e      	cmp	r6, r3
 800d3f2:	dc1a      	bgt.n	800d42a <atan+0x22a>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	4b42      	ldr	r3, [pc, #264]	; (800d500 <atan+0x300>)
 800d3f8:	f7f2 feb6 	bl	8000168 <__aeabi_dsub>
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	4b3f      	ldr	r3, [pc, #252]	; (800d500 <atan+0x300>)
 800d404:	4620      	mov	r0, r4
 800d406:	4629      	mov	r1, r5
 800d408:	f7f3 f866 	bl	80004d8 <__aeabi_dmul>
 800d40c:	2200      	movs	r2, #0
 800d40e:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <atan+0x2f4>)
 800d410:	f7f2 feac 	bl	800016c <__adddf3>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4630      	mov	r0, r6
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f3 f986 	bl	800072c <__aeabi_ddiv>
 800d420:	f04f 0a02 	mov.w	sl, #2
 800d424:	4604      	mov	r4, r0
 800d426:	460d      	mov	r5, r1
 800d428:	e749      	b.n	800d2be <atan+0xbe>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	2000      	movs	r0, #0
 800d430:	4934      	ldr	r1, [pc, #208]	; (800d504 <atan+0x304>)
 800d432:	f7f3 f97b 	bl	800072c <__aeabi_ddiv>
 800d436:	f04f 0a03 	mov.w	sl, #3
 800d43a:	4604      	mov	r4, r0
 800d43c:	460d      	mov	r5, r1
 800d43e:	e73e      	b.n	800d2be <atan+0xbe>
 800d440:	4b31      	ldr	r3, [pc, #196]	; (800d508 <atan+0x308>)
 800d442:	4e32      	ldr	r6, [pc, #200]	; (800d50c <atan+0x30c>)
 800d444:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d448:	4456      	add	r6, sl
 800d44a:	449a      	add	sl, r3
 800d44c:	e9da 2300 	ldrd	r2, r3, [sl]
 800d450:	f7f2 fe8a 	bl	8000168 <__aeabi_dsub>
 800d454:	4622      	mov	r2, r4
 800d456:	462b      	mov	r3, r5
 800d458:	f7f2 fe86 	bl	8000168 <__aeabi_dsub>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d464:	f7f2 fe80 	bl	8000168 <__aeabi_dsub>
 800d468:	f1bb 0f00 	cmp.w	fp, #0
 800d46c:	4604      	mov	r4, r0
 800d46e:	460d      	mov	r5, r1
 800d470:	f6bf aee4 	bge.w	800d23c <atan+0x3c>
 800d474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d478:	461d      	mov	r5, r3
 800d47a:	e6df      	b.n	800d23c <atan+0x3c>
 800d47c:	4d24      	ldr	r5, [pc, #144]	; (800d510 <atan+0x310>)
 800d47e:	e6dd      	b.n	800d23c <atan+0x3c>
 800d480:	8800759c 	.word	0x8800759c
 800d484:	7e37e43c 	.word	0x7e37e43c
 800d488:	e322da11 	.word	0xe322da11
 800d48c:	3f90ad3a 	.word	0x3f90ad3a
 800d490:	24760deb 	.word	0x24760deb
 800d494:	3fa97b4b 	.word	0x3fa97b4b
 800d498:	a0d03d51 	.word	0xa0d03d51
 800d49c:	3fb10d66 	.word	0x3fb10d66
 800d4a0:	c54c206e 	.word	0xc54c206e
 800d4a4:	3fb745cd 	.word	0x3fb745cd
 800d4a8:	920083ff 	.word	0x920083ff
 800d4ac:	3fc24924 	.word	0x3fc24924
 800d4b0:	5555550d 	.word	0x5555550d
 800d4b4:	3fd55555 	.word	0x3fd55555
 800d4b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d4bc:	bfa2b444 	.word	0xbfa2b444
 800d4c0:	52defd9a 	.word	0x52defd9a
 800d4c4:	3fadde2d 	.word	0x3fadde2d
 800d4c8:	af749a6d 	.word	0xaf749a6d
 800d4cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d4d0:	fe231671 	.word	0xfe231671
 800d4d4:	3fbc71c6 	.word	0x3fbc71c6
 800d4d8:	9998ebc4 	.word	0x9998ebc4
 800d4dc:	3fc99999 	.word	0x3fc99999
 800d4e0:	440fffff 	.word	0x440fffff
 800d4e4:	7ff00000 	.word	0x7ff00000
 800d4e8:	54442d18 	.word	0x54442d18
 800d4ec:	3ff921fb 	.word	0x3ff921fb
 800d4f0:	3fdbffff 	.word	0x3fdbffff
 800d4f4:	3ff00000 	.word	0x3ff00000
 800d4f8:	3ff2ffff 	.word	0x3ff2ffff
 800d4fc:	40037fff 	.word	0x40037fff
 800d500:	3ff80000 	.word	0x3ff80000
 800d504:	bff00000 	.word	0xbff00000
 800d508:	0800df10 	.word	0x0800df10
 800d50c:	0800def0 	.word	0x0800def0
 800d510:	bff921fb 	.word	0xbff921fb

0800d514 <fabs>:
 800d514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d518:	4619      	mov	r1, r3
 800d51a:	4770      	bx	lr
 800d51c:	0000      	movs	r0, r0
	...

0800d520 <floor>:
 800d520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d524:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d528:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d52c:	2e13      	cmp	r6, #19
 800d52e:	4607      	mov	r7, r0
 800d530:	460b      	mov	r3, r1
 800d532:	460c      	mov	r4, r1
 800d534:	4605      	mov	r5, r0
 800d536:	dc35      	bgt.n	800d5a4 <floor+0x84>
 800d538:	2e00      	cmp	r6, #0
 800d53a:	da16      	bge.n	800d56a <floor+0x4a>
 800d53c:	a336      	add	r3, pc, #216	; (adr r3, 800d618 <floor+0xf8>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f7f2 fe13 	bl	800016c <__adddf3>
 800d546:	2200      	movs	r2, #0
 800d548:	2300      	movs	r3, #0
 800d54a:	f7f3 fa55 	bl	80009f8 <__aeabi_dcmpgt>
 800d54e:	b148      	cbz	r0, 800d564 <floor+0x44>
 800d550:	2c00      	cmp	r4, #0
 800d552:	da5b      	bge.n	800d60c <floor+0xec>
 800d554:	2500      	movs	r5, #0
 800d556:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d55a:	4a31      	ldr	r2, [pc, #196]	; (800d620 <floor+0x100>)
 800d55c:	433b      	orrs	r3, r7
 800d55e:	42ab      	cmp	r3, r5
 800d560:	bf18      	it	ne
 800d562:	4614      	movne	r4, r2
 800d564:	4623      	mov	r3, r4
 800d566:	462f      	mov	r7, r5
 800d568:	e026      	b.n	800d5b8 <floor+0x98>
 800d56a:	4a2e      	ldr	r2, [pc, #184]	; (800d624 <floor+0x104>)
 800d56c:	fa42 f806 	asr.w	r8, r2, r6
 800d570:	ea01 0208 	and.w	r2, r1, r8
 800d574:	4302      	orrs	r2, r0
 800d576:	d01f      	beq.n	800d5b8 <floor+0x98>
 800d578:	a327      	add	r3, pc, #156	; (adr r3, 800d618 <floor+0xf8>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f2 fdf5 	bl	800016c <__adddf3>
 800d582:	2200      	movs	r2, #0
 800d584:	2300      	movs	r3, #0
 800d586:	f7f3 fa37 	bl	80009f8 <__aeabi_dcmpgt>
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d0ea      	beq.n	800d564 <floor+0x44>
 800d58e:	2c00      	cmp	r4, #0
 800d590:	bfbe      	ittt	lt
 800d592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d596:	fa43 f606 	asrlt.w	r6, r3, r6
 800d59a:	19a4      	addlt	r4, r4, r6
 800d59c:	ea24 0408 	bic.w	r4, r4, r8
 800d5a0:	2500      	movs	r5, #0
 800d5a2:	e7df      	b.n	800d564 <floor+0x44>
 800d5a4:	2e33      	cmp	r6, #51	; 0x33
 800d5a6:	dd0b      	ble.n	800d5c0 <floor+0xa0>
 800d5a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d5ac:	d104      	bne.n	800d5b8 <floor+0x98>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	f7f2 fddc 	bl	800016c <__adddf3>
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d5c8:	fa22 f808 	lsr.w	r8, r2, r8
 800d5cc:	ea18 0f00 	tst.w	r8, r0
 800d5d0:	d0f2      	beq.n	800d5b8 <floor+0x98>
 800d5d2:	a311      	add	r3, pc, #68	; (adr r3, 800d618 <floor+0xf8>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f7f2 fdc8 	bl	800016c <__adddf3>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f7f3 fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0bd      	beq.n	800d564 <floor+0x44>
 800d5e8:	2c00      	cmp	r4, #0
 800d5ea:	da02      	bge.n	800d5f2 <floor+0xd2>
 800d5ec:	2e14      	cmp	r6, #20
 800d5ee:	d103      	bne.n	800d5f8 <floor+0xd8>
 800d5f0:	3401      	adds	r4, #1
 800d5f2:	ea25 0508 	bic.w	r5, r5, r8
 800d5f6:	e7b5      	b.n	800d564 <floor+0x44>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d5fe:	fa03 f606 	lsl.w	r6, r3, r6
 800d602:	4435      	add	r5, r6
 800d604:	42bd      	cmp	r5, r7
 800d606:	bf38      	it	cc
 800d608:	18e4      	addcc	r4, r4, r3
 800d60a:	e7f2      	b.n	800d5f2 <floor+0xd2>
 800d60c:	2500      	movs	r5, #0
 800d60e:	462c      	mov	r4, r5
 800d610:	e7a8      	b.n	800d564 <floor+0x44>
 800d612:	bf00      	nop
 800d614:	f3af 8000 	nop.w
 800d618:	8800759c 	.word	0x8800759c
 800d61c:	7e37e43c 	.word	0x7e37e43c
 800d620:	bff00000 	.word	0xbff00000
 800d624:	000fffff 	.word	0x000fffff

0800d628 <matherr>:
 800d628:	2000      	movs	r0, #0
 800d62a:	4770      	bx	lr
 800d62c:	0000      	movs	r0, r0
	...

0800d630 <scalbn>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	4616      	mov	r6, r2
 800d634:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d638:	4604      	mov	r4, r0
 800d63a:	460d      	mov	r5, r1
 800d63c:	460b      	mov	r3, r1
 800d63e:	b982      	cbnz	r2, 800d662 <scalbn+0x32>
 800d640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d644:	4303      	orrs	r3, r0
 800d646:	d034      	beq.n	800d6b2 <scalbn+0x82>
 800d648:	4b2d      	ldr	r3, [pc, #180]	; (800d700 <scalbn+0xd0>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	f7f2 ff44 	bl	80004d8 <__aeabi_dmul>
 800d650:	4b2c      	ldr	r3, [pc, #176]	; (800d704 <scalbn+0xd4>)
 800d652:	4604      	mov	r4, r0
 800d654:	429e      	cmp	r6, r3
 800d656:	460d      	mov	r5, r1
 800d658:	da0d      	bge.n	800d676 <scalbn+0x46>
 800d65a:	a325      	add	r3, pc, #148	; (adr r3, 800d6f0 <scalbn+0xc0>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	e01c      	b.n	800d69c <scalbn+0x6c>
 800d662:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d666:	42ba      	cmp	r2, r7
 800d668:	d109      	bne.n	800d67e <scalbn+0x4e>
 800d66a:	4602      	mov	r2, r0
 800d66c:	f7f2 fd7e 	bl	800016c <__adddf3>
 800d670:	4604      	mov	r4, r0
 800d672:	460d      	mov	r5, r1
 800d674:	e01d      	b.n	800d6b2 <scalbn+0x82>
 800d676:	460b      	mov	r3, r1
 800d678:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d67c:	3a36      	subs	r2, #54	; 0x36
 800d67e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d682:	4432      	add	r2, r6
 800d684:	428a      	cmp	r2, r1
 800d686:	dd0c      	ble.n	800d6a2 <scalbn+0x72>
 800d688:	4622      	mov	r2, r4
 800d68a:	462b      	mov	r3, r5
 800d68c:	a11a      	add	r1, pc, #104	; (adr r1, 800d6f8 <scalbn+0xc8>)
 800d68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d692:	f000 f83b 	bl	800d70c <copysign>
 800d696:	a318      	add	r3, pc, #96	; (adr r3, 800d6f8 <scalbn+0xc8>)
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f7f2 ff1c 	bl	80004d8 <__aeabi_dmul>
 800d6a0:	e7e6      	b.n	800d670 <scalbn+0x40>
 800d6a2:	2a00      	cmp	r2, #0
 800d6a4:	dd08      	ble.n	800d6b8 <scalbn+0x88>
 800d6a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d6bc:	da0b      	bge.n	800d6d6 <scalbn+0xa6>
 800d6be:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d6c2:	429e      	cmp	r6, r3
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	462b      	mov	r3, r5
 800d6c8:	dce0      	bgt.n	800d68c <scalbn+0x5c>
 800d6ca:	a109      	add	r1, pc, #36	; (adr r1, 800d6f0 <scalbn+0xc0>)
 800d6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6d0:	f000 f81c 	bl	800d70c <copysign>
 800d6d4:	e7c1      	b.n	800d65a <scalbn+0x2a>
 800d6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6da:	3236      	adds	r2, #54	; 0x36
 800d6dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <scalbn+0xd8>)
 800d6ec:	e7d6      	b.n	800d69c <scalbn+0x6c>
 800d6ee:	bf00      	nop
 800d6f0:	c2f8f359 	.word	0xc2f8f359
 800d6f4:	01a56e1f 	.word	0x01a56e1f
 800d6f8:	8800759c 	.word	0x8800759c
 800d6fc:	7e37e43c 	.word	0x7e37e43c
 800d700:	43500000 	.word	0x43500000
 800d704:	ffff3cb0 	.word	0xffff3cb0
 800d708:	3c900000 	.word	0x3c900000

0800d70c <copysign>:
 800d70c:	b530      	push	{r4, r5, lr}
 800d70e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d716:	ea42 0503 	orr.w	r5, r2, r3
 800d71a:	4629      	mov	r1, r5
 800d71c:	bd30      	pop	{r4, r5, pc}
	...

0800d720 <_init>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr

0800d72c <_fini>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr
